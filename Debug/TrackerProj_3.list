
TrackerProj_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d220  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0800d3c0  0800d3c0  0000e3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9d8  0800d9d8  0000f2c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9d8  0800d9d8  0000e9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9e0  0800d9e0  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9e0  0800d9e0  0000e9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d9e4  0800d9e4  0000e9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800d9e8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017a4  200002c4  0800dcac  0000f2c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a68  0800dcac  0000fa68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013953  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a4  00000000  00000000  00022c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  000263f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0b  00000000  00000000  000273e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001979d  00000000  00000000  00027ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152ea  00000000  00000000  00041790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be77  00000000  00000000  00056a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e28f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005304  00000000  00000000  000e2934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e7c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d3a8 	.word	0x0800d3a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800d3a8 	.word	0x0800d3a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]

	if(huart->Instance == USART1){
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a19      	ldr	r2, [pc, #100]	@ (8000fc0 <HAL_UARTEx_RxEventCallback+0x78>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d12b      	bne.n	8000fb6 <HAL_UARTEx_RxEventCallback+0x6e>
		//char output[Size + 1];
		char* result = {0};
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
		result = strstr((char *)RX_BufferGPS,"$PMTK,001");
 8000f62:	4918      	ldr	r1, [pc, #96]	@ (8000fc4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000f64:	4818      	ldr	r0, [pc, #96]	@ (8000fc8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000f66:	f00a f946 	bl	800b1f6 <strstr>
 8000f6a:	60b8      	str	r0, [r7, #8]

		if(result == NULL){ //Prevents command responses from being NMEA processed
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d11c      	bne.n	8000fac <HAL_UARTEx_RxEventCallback+0x64>
			for(int i = 0; i < Size; i++ ){
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	e015      	b.n	8000fa4 <HAL_UARTEx_RxEventCallback+0x5c>
				if(RX_BufferGPS[i] == '\n'){
 8000f78:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b0a      	cmp	r3, #10
 8000f82:	d10c      	bne.n	8000f9e <HAL_UARTEx_RxEventCallback+0x56>
					//snprintf(output, i+2 ,"%s\r\n",RX_BufferGPS);//print gps incoming message
					//CDC_Transmit_FS((uint8_t*) output, strlen(output));
					gps_processNMEA(RX_BufferGPS, i+1);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480e      	ldr	r0, [pc, #56]	@ (8000fc8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000f90:	f000 fa94 	bl	80014bc <gps_processNMEA>
					memset(RX_BufferGPS,0,RX_BUFFER_SIZE_GPS);
 8000f94:	22c8      	movs	r2, #200	@ 0xc8
 8000f96:	2100      	movs	r1, #0
 8000f98:	480b      	ldr	r0, [pc, #44]	@ (8000fc8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000f9a:	f00a f924 	bl	800b1e6 <memset>
			for(int i = 0; i < Size; i++ ){
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbe5      	blt.n	8000f78 <HAL_UARTEx_RxEventCallback+0x30>
				}
			}
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 8000fac:	22c8      	movs	r2, #200	@ 0xc8
 8000fae:	4906      	ldr	r1, [pc, #24]	@ (8000fc8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000fb0:	4806      	ldr	r0, [pc, #24]	@ (8000fcc <HAL_UARTEx_RxEventCallback+0x84>)
 8000fb2:	f004 f997 	bl	80052e4 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40011000 	.word	0x40011000
 8000fc4:	0800d3c0 	.word	0x0800d3c0
 8000fc8:	200003e8 	.word	0x200003e8
 8000fcc:	200002e0 	.word	0x200002e0

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b0aa      	sub	sp, #168	@ 0xa8
 8000fd4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f001 fad5 	bl	8002584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f93d 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fde:	f000 f9f7 	bl	80013d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe2:	f000 f9cd 	bl	8001380 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000fe6:	f000 f9a1 	bl	800132c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000fea:	f008 fdd3 	bl	8009b94 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8000fee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ff2:	f001 fb39 	bl	8002668 <HAL_Delay>


  gps_init();
 8000ff6:	f000 fa85 	bl	8001504 <gps_init>

  float latitude = 0;
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  float longitude = 0;
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  unsigned long fixAgeGPS = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //GPS Data code//****************************************************************
		  if(GPS_encode == 1){
 8001010:	4b80      	ldr	r3, [pc, #512]	@ (8001214 <main+0x244>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d171      	bne.n	80010fc <main+0x12c>
			  if(_is_gps_data_good){ // update current coordinates if data is good
 8001018:	4b7f      	ldr	r3, [pc, #508]	@ (8001218 <main+0x248>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d02e      	beq.n	800107e <main+0xae>
			  	  gps_f_get_position(&latitude, &longitude,&fixAgeGPS );
 8001020:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001024:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8001028:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800102c:	4618      	mov	r0, r3
 800102e:	f001 fa33 	bl	8002498 <gps_f_get_position>
			  	  char output[50];
			  	  snprintf(output, sizeof(output),"Lat: %.6f, Lon: %.6f, \r\n",latitude,longitude);
 8001032:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa8e 	bl	8000558 <__aeabi_f2d>
 800103c:	4604      	mov	r4, r0
 800103e:	460d      	mov	r5, r1
 8001040:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa87 	bl	8000558 <__aeabi_f2d>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4638      	mov	r0, r7
 8001050:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001054:	e9cd 4500 	strd	r4, r5, [sp]
 8001058:	4a70      	ldr	r2, [pc, #448]	@ (800121c <main+0x24c>)
 800105a:	2132      	movs	r1, #50	@ 0x32
 800105c:	f00a f84c 	bl	800b0f8 <sniprintf>
		 		  CDC_Transmit_FS((uint8_t *)output, strlen(output));
 8001060:	463b      	mov	r3, r7
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f90c 	bl	8000280 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	463b      	mov	r3, r7
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f008 fe4d 	bl	8009d10 <CDC_Transmit_FS>
		 		  GPS_encode = 0;
 8001076:	4b67      	ldr	r3, [pc, #412]	@ (8001214 <main+0x244>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
 800107c:	e009      	b.n	8001092 <main+0xc2>
		 	  }
		  else{
			  char output[25];
			  snprintf(output, sizeof(output),"GPS data is not good\r\n");
 800107e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001082:	4a67      	ldr	r2, [pc, #412]	@ (8001220 <main+0x250>)
 8001084:	2119      	movs	r1, #25
 8001086:	4618      	mov	r0, r3
 8001088:	f00a f836 	bl	800b0f8 <sniprintf>
			  //CDC_Transmit_FS((uint8_t *)output, strlen(output));
			  GPS_encode = 0;
 800108c:	4b61      	ldr	r3, [pc, #388]	@ (8001214 <main+0x244>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
		  	  }

			  if((gps_sleepFlag == 1)&&(gps_wakeFlag == 1)){
 8001092:	4b64      	ldr	r3, [pc, #400]	@ (8001224 <main+0x254>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d130      	bne.n	80010fc <main+0x12c>
 800109a:	4b63      	ldr	r3, [pc, #396]	@ (8001228 <main+0x258>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d12c      	bne.n	80010fc <main+0x12c>
				  char output[] = "Leaving periodic power mode";
 80010a2:	4b62      	ldr	r3, [pc, #392]	@ (800122c <main+0x25c>)
 80010a4:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80010a8:	461d      	mov	r5, r3
 80010aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				  CDC_Transmit_FS((uint8_t *)output, strlen(output));
 80010b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f8e0 	bl	8000280 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f008 fe20 	bl	8009d10 <CDC_Transmit_FS>
				  gps_command((uint8_t *) gps_Test, "PMTK001,0,3");
 80010d0:	4957      	ldr	r1, [pc, #348]	@ (8001230 <main+0x260>)
 80010d2:	4858      	ldr	r0, [pc, #352]	@ (8001234 <main+0x264>)
 80010d4:	f000 fa7e 	bl	80015d4 <gps_command>
				  HAL_Delay(3000);
 80010d8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80010dc:	f001 fac4 	bl	8002668 <HAL_Delay>
				  gps_command((uint8_t *) gps_FullPower, "PMTK001,225,3");
 80010e0:	4955      	ldr	r1, [pc, #340]	@ (8001238 <main+0x268>)
 80010e2:	4856      	ldr	r0, [pc, #344]	@ (800123c <main+0x26c>)
 80010e4:	f000 fa76 	bl	80015d4 <gps_command>
				  gps_command((uint8_t *) LOW_UPDATE_RATE, "PMTK001,220,3");
 80010e8:	4955      	ldr	r1, [pc, #340]	@ (8001240 <main+0x270>)
 80010ea:	4856      	ldr	r0, [pc, #344]	@ (8001244 <main+0x274>)
 80010ec:	f000 fa72 	bl	80015d4 <gps_command>
				  gps_sleepFlag = 0;
 80010f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001224 <main+0x254>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
				  gps_wakeFlag = 0;
 80010f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001228 <main+0x258>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  //**************************************************************************
		      if(UserRxBufferFS[0] == '1'){
 80010fc:	4b52      	ldr	r3, [pc, #328]	@ (8001248 <main+0x278>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b31      	cmp	r3, #49	@ 0x31
 8001102:	d111      	bne.n	8001128 <main+0x158>
		    	  gps_command((uint8_t *) gps_Test, "PMTK001,0,3");
 8001104:	494a      	ldr	r1, [pc, #296]	@ (8001230 <main+0x260>)
 8001106:	484b      	ldr	r0, [pc, #300]	@ (8001234 <main+0x264>)
 8001108:	f000 fa64 	bl	80015d4 <gps_command>
		    	  gps_command((uint8_t *) gps_FullPower, "PMTK225,0,3");
 800110c:	494f      	ldr	r1, [pc, #316]	@ (800124c <main+0x27c>)
 800110e:	484b      	ldr	r0, [pc, #300]	@ (800123c <main+0x26c>)
 8001110:	f000 fa60 	bl	80015d4 <gps_command>
		 		  memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 8001114:	484c      	ldr	r0, [pc, #304]	@ (8001248 <main+0x278>)
 8001116:	f7ff f8b3 	bl	8000280 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	2100      	movs	r1, #0
 8001120:	4849      	ldr	r0, [pc, #292]	@ (8001248 <main+0x278>)
 8001122:	f00a f860 	bl	800b1e6 <memset>
 8001126:	e773      	b.n	8001010 <main+0x40>
		 	  }

		 	  else if(UserRxBufferFS[0] == '2'){
 8001128:	4b47      	ldr	r3, [pc, #284]	@ (8001248 <main+0x278>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b32      	cmp	r3, #50	@ 0x32
 800112e:	d110      	bne.n	8001152 <main+0x182>
		 		 gps_updateMode(3,10000,30000);
 8001130:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001134:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001138:	2003      	movs	r0, #3
 800113a:	f000 fadf 	bl	80016fc <gps_updateMode>
		 		  memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 800113e:	4842      	ldr	r0, [pc, #264]	@ (8001248 <main+0x278>)
 8001140:	f7ff f89e 	bl	8000280 <strlen>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	2100      	movs	r1, #0
 800114a:	483f      	ldr	r0, [pc, #252]	@ (8001248 <main+0x278>)
 800114c:	f00a f84b 	bl	800b1e6 <memset>
 8001150:	e75e      	b.n	8001010 <main+0x40>
		 	  }

		 	  else if(UserRxBufferFS[0] == '3'){
 8001152:	4b3d      	ldr	r3, [pc, #244]	@ (8001248 <main+0x278>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b33      	cmp	r3, #51	@ 0x33
 8001158:	d11d      	bne.n	8001196 <main+0x1c6>
		 		  uint8_t TEST[] = "$PMTK000*32\r\n"; //Message wakes up the gps module
 800115a:	4b36      	ldr	r3, [pc, #216]	@ (8001234 <main+0x264>)
 800115c:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8001160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001162:	c407      	stmia	r4!, {r0, r1, r2}
 8001164:	8023      	strh	r3, [r4, #0]
		 		   gps_command(TEST,"PMTK001,0,3");
 8001166:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800116a:	4931      	ldr	r1, [pc, #196]	@ (8001230 <main+0x260>)
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fa31 	bl	80015d4 <gps_command>
		 		   HAL_Delay(5000);
 8001172:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001176:	f001 fa77 	bl	8002668 <HAL_Delay>
		 		  gps_command((uint8_t *) LOW_UPDATE_RATE, "PMTK001,220,3");
 800117a:	4931      	ldr	r1, [pc, #196]	@ (8001240 <main+0x270>)
 800117c:	4831      	ldr	r0, [pc, #196]	@ (8001244 <main+0x274>)
 800117e:	f000 fa29 	bl	80015d4 <gps_command>
		 		   memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 8001182:	4831      	ldr	r0, [pc, #196]	@ (8001248 <main+0x278>)
 8001184:	f7ff f87c 	bl	8000280 <strlen>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	482e      	ldr	r0, [pc, #184]	@ (8001248 <main+0x278>)
 8001190:	f00a f829 	bl	800b1e6 <memset>
 8001194:	e73c      	b.n	8001010 <main+0x40>
		 	  }

		 	  else if(UserRxBufferFS[0] == '4'){
 8001196:	4b2c      	ldr	r3, [pc, #176]	@ (8001248 <main+0x278>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b34      	cmp	r3, #52	@ 0x34
 800119c:	d115      	bne.n	80011ca <main+0x1fa>
		 		  uint8_t rmcCommand[] = "$PMTK161,0*28\r\n"; //enable sleep mode only
 800119e:	4b2c      	ldr	r3, [pc, #176]	@ (8001250 <main+0x280>)
 80011a0:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80011a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 		  	gps_command(rmcCommand, "PMTK001,161,3");
 80011aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011ae:	4929      	ldr	r1, [pc, #164]	@ (8001254 <main+0x284>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fa0f 	bl	80015d4 <gps_command>
		 		  memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 80011b6:	4824      	ldr	r0, [pc, #144]	@ (8001248 <main+0x278>)
 80011b8:	f7ff f862 	bl	8000280 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	2100      	movs	r1, #0
 80011c2:	4821      	ldr	r0, [pc, #132]	@ (8001248 <main+0x278>)
 80011c4:	f00a f80f 	bl	800b1e6 <memset>
 80011c8:	e722      	b.n	8001010 <main+0x40>
		 	  }

		 	 else if(UserRxBufferFS[0] == '5'){
 80011ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <main+0x278>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b35      	cmp	r3, #53	@ 0x35
 80011d0:	d10c      	bne.n	80011ec <main+0x21c>
		 			 gps_wakeFlag = 1;
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <main+0x258>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
		 			 memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 80011d8:	481b      	ldr	r0, [pc, #108]	@ (8001248 <main+0x278>)
 80011da:	f7ff f851 	bl	8000280 <strlen>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	4818      	ldr	r0, [pc, #96]	@ (8001248 <main+0x278>)
 80011e6:	f009 fffe 	bl	800b1e6 <memset>
 80011ea:	e711      	b.n	8001010 <main+0x40>
		 			 }

		 	else if(UserRxBufferFS[0] == '6'){
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <main+0x278>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b36      	cmp	r3, #54	@ 0x36
 80011f2:	f47f af0d 	bne.w	8001010 <main+0x40>
		 		        gps_command((uint8_t *) LOW_UPDATE_RATE, "PMTK001,220,3");
 80011f6:	4912      	ldr	r1, [pc, #72]	@ (8001240 <main+0x270>)
 80011f8:	4812      	ldr	r0, [pc, #72]	@ (8001244 <main+0x274>)
 80011fa:	f000 f9eb 	bl	80015d4 <gps_command>
		 			 	memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 80011fe:	4812      	ldr	r0, [pc, #72]	@ (8001248 <main+0x278>)
 8001200:	f7ff f83e 	bl	8000280 <strlen>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	2100      	movs	r1, #0
 800120a:	480f      	ldr	r0, [pc, #60]	@ (8001248 <main+0x278>)
 800120c:	f009 ffeb 	bl	800b1e6 <memset>
		  if(GPS_encode == 1){
 8001210:	e6fe      	b.n	8001010 <main+0x40>
 8001212:	bf00      	nop
 8001214:	200004b0 	.word	0x200004b0
 8001218:	2000052a 	.word	0x2000052a
 800121c:	0800d3cc 	.word	0x0800d3cc
 8001220:	0800d3e8 	.word	0x0800d3e8
 8001224:	200004b8 	.word	0x200004b8
 8001228:	200004b9 	.word	0x200004b9
 800122c:	0800d47c 	.word	0x0800d47c
 8001230:	0800d400 	.word	0x0800d400
 8001234:	0800d40c 	.word	0x0800d40c
 8001238:	0800d41c 	.word	0x0800d41c
 800123c:	0800d42c 	.word	0x0800d42c
 8001240:	0800d43c 	.word	0x0800d43c
 8001244:	0800d44c 	.word	0x0800d44c
 8001248:	20000818 	.word	0x20000818
 800124c:	0800d460 	.word	0x0800d460
 8001250:	0800d498 	.word	0x0800d498
 8001254:	0800d46c 	.word	0x0800d46c

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	@ 0x50
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	2230      	movs	r2, #48	@ 0x30
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f009 ffbd 	bl	800b1e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	4b28      	ldr	r3, [pc, #160]	@ (8001324 <SystemClock_Config+0xcc>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	4a27      	ldr	r2, [pc, #156]	@ (8001324 <SystemClock_Config+0xcc>)
 8001286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128a:	6413      	str	r3, [r2, #64]	@ 0x40
 800128c:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <SystemClock_Config+0xcc>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4b22      	ldr	r3, [pc, #136]	@ (8001328 <SystemClock_Config+0xd0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012a4:	4a20      	ldr	r2, [pc, #128]	@ (8001328 <SystemClock_Config+0xd0>)
 80012a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <SystemClock_Config+0xd0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b8:	2301      	movs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c2:	2302      	movs	r3, #2
 80012c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80012cc:	230f      	movs	r3, #15
 80012ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80012d0:	2390      	movs	r3, #144	@ 0x90
 80012d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80012d8:	2305      	movs	r3, #5
 80012da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fae7 	bl	80048b4 <HAL_RCC_OscConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012ec:	f000 fad8 	bl	80018a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f0:	230f      	movs	r3, #15
 80012f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80012f4:	2301      	movs	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f003 fd4a 	bl	8004da4 <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001316:	f000 fac3 	bl	80018a0 <Error_Handler>
  }
}
 800131a:	bf00      	nop
 800131c:	3750      	adds	r7, #80	@ 0x50
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001330:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <MX_USART1_UART_Init+0x4c>)
 8001332:	4a12      	ldr	r2, [pc, #72]	@ (800137c <MX_USART1_UART_Init+0x50>)
 8001334:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <MX_USART1_UART_Init+0x4c>)
 8001338:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800133c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <MX_USART1_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <MX_USART1_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <MX_USART1_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <MX_USART1_UART_Init+0x4c>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <MX_USART1_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <MX_USART1_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	@ (8001378 <MX_USART1_UART_Init+0x4c>)
 8001364:	f003 fefe 	bl	8005164 <HAL_UART_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800136e:	f000 fa97 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200002e0 	.word	0x200002e0
 800137c:	40011000 	.word	0x40011000

08001380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <MX_DMA_Init+0x4c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a0f      	ldr	r2, [pc, #60]	@ (80013cc <MX_DMA_Init+0x4c>)
 8001390:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <MX_DMA_Init+0x4c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	203a      	movs	r0, #58	@ 0x3a
 80013a8:	f001 fa5d 	bl	8002866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80013ac:	203a      	movs	r0, #58	@ 0x3a
 80013ae:	f001 fa76 	bl	800289e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2046      	movs	r0, #70	@ 0x46
 80013b8:	f001 fa55 	bl	8002866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80013bc:	2046      	movs	r0, #70	@ 0x46
 80013be:	f001 fa6e 	bl	800289e <HAL_NVIC_EnableIRQ>

}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <MX_GPIO_Init+0xe0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a30      	ldr	r2, [pc, #192]	@ (80014b0 <MX_GPIO_Init+0xe0>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <MX_GPIO_Init+0xe0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b2a      	ldr	r3, [pc, #168]	@ (80014b0 <MX_GPIO_Init+0xe0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a29      	ldr	r2, [pc, #164]	@ (80014b0 <MX_GPIO_Init+0xe0>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <MX_GPIO_Init+0xe0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <MX_GPIO_Init+0xe0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a22      	ldr	r2, [pc, #136]	@ (80014b0 <MX_GPIO_Init+0xe0>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <MX_GPIO_Init+0xe0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001440:	481c      	ldr	r0, [pc, #112]	@ (80014b4 <MX_GPIO_Init+0xe4>)
 8001442:	f001 ffcd 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_PWX_GPIO_Port, GSM_PWX_Pin, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800144c:	481a      	ldr	r0, [pc, #104]	@ (80014b8 <MX_GPIO_Init+0xe8>)
 800144e:	f001 ffc7 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button___KEY_Pin */
  GPIO_InitStruct.Pin = User_Button___KEY_Pin;
 8001452:	2301      	movs	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145a:	2301      	movs	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(User_Button___KEY_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4619      	mov	r1, r3
 8001464:	4813      	ldr	r0, [pc, #76]	@ (80014b4 <MX_GPIO_Init+0xe4>)
 8001466:	f001 fe37 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 800146a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	480c      	ldr	r0, [pc, #48]	@ (80014b4 <MX_GPIO_Init+0xe4>)
 8001484:	f001 fe28 	bl	80030d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_PWX_Pin */
  GPIO_InitStruct.Pin = GSM_PWX_Pin;
 8001488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800148c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	2301      	movs	r3, #1
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GSM_PWX_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_GPIO_Init+0xe8>)
 80014a2:	f001 fe19 	bl	80030d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a6:	bf00      	nop
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400

080014bc <gps_processNMEA>:

/* USER CODE BEGIN 4 */
void gps_processNMEA(char *buffer,uint16_t length){ //parse full message to gps encode
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]

	for(int j = 0; j<(length); j++){
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	e00f      	b.n	80014ee <gps_processNMEA+0x32>
		if (gps_encode(buffer[j])){
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fc2e 	bl	8001d38 <gps_encode>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <gps_processNMEA+0x2c>
			GPS_encode = 1;  //Get GPS information
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <gps_processNMEA+0x44>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j<(length); j++){
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3301      	adds	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	dbeb      	blt.n	80014ce <gps_processNMEA+0x12>
		}
		}
	}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200004b0 	.word	0x200004b0

08001504 <gps_init>:

void gps_init(){
 8001504:	b5b0      	push	{r4, r5, r7, lr}
 8001506:	b092      	sub	sp, #72	@ 0x48
 8001508:	af00      	add	r7, sp, #0
	//char check[2]; //temp checksum storage

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 800150a:	22c8      	movs	r2, #200	@ 0xc8
 800150c:	4924      	ldr	r1, [pc, #144]	@ (80015a0 <gps_init+0x9c>)
 800150e:	4825      	ldr	r0, [pc, #148]	@ (80015a4 <gps_init+0xa0>)
 8001510:	f003 fee8 	bl	80052e4 <HAL_UARTEx_ReceiveToIdle_DMA>


	if(gps_command((uint8_t *) gps_Test, "PMTK001,0,3") != Gpsok){ //hard reset
 8001514:	4924      	ldr	r1, [pc, #144]	@ (80015a8 <gps_init+0xa4>)
 8001516:	4825      	ldr	r0, [pc, #148]	@ (80015ac <gps_init+0xa8>)
 8001518:	f000 f85c 	bl	80015d4 <gps_command>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00f      	beq.n	8001542 <gps_init+0x3e>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001528:	4821      	ldr	r0, [pc, #132]	@ (80015b0 <gps_init+0xac>)
 800152a:	f001 ff59 	bl	80033e0 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 800152e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001532:	f001 f899 	bl	8002668 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800153c:	481c      	ldr	r0, [pc, #112]	@ (80015b0 <gps_init+0xac>)
 800153e:	f001 ff4f 	bl	80033e0 <HAL_GPIO_WritePin>
			}

	gps_command((uint8_t *) gps_FullPower, "PMTK001,225,0,3");
 8001542:	491c      	ldr	r1, [pc, #112]	@ (80015b4 <gps_init+0xb0>)
 8001544:	481c      	ldr	r0, [pc, #112]	@ (80015b8 <gps_init+0xb4>)
 8001546:	f000 f845 	bl	80015d4 <gps_command>

	uint8_t baudRateGPS[] = "$PMTK251,9600*17\r\n"; //set UART baud rate to 9600
 800154a:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <gps_init+0xb8>)
 800154c:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001550:	461d      	mov	r5, r3
 8001552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001556:	682b      	ldr	r3, [r5, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	8022      	strh	r2, [r4, #0]
 800155c:	3402      	adds	r4, #2
 800155e:	0c1b      	lsrs	r3, r3, #16
 8001560:	7023      	strb	r3, [r4, #0]
		gps_command(baudRateGPS,"PMTK001,251");
 8001562:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001566:	4916      	ldr	r1, [pc, #88]	@ (80015c0 <gps_init+0xbc>)
 8001568:	4618      	mov	r0, r3
 800156a:	f000 f833 	bl	80015d4 <gps_command>
	//HAL_UART_Transmit_DMA(&huart1, (uint8_t *) baudRateGPS, strlen((char *)baudRateGPS));

	; //set update position report to every 10 seconds (works)
		gps_command((uint8_t *) LOW_UPDATE_RATE, "PMTK001,220,3");
 800156e:	4915      	ldr	r1, [pc, #84]	@ (80015c4 <gps_init+0xc0>)
 8001570:	4815      	ldr	r0, [pc, #84]	@ (80015c8 <gps_init+0xc4>)
 8001572:	f000 f82f 	bl	80015d4 <gps_command>
	//HAL_UART_Transmit_DMA(&huart1, (uint8_t *) startupDataRate, strlen((char *)startupDataRate));

	uint8_t rmcCommand[] = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n"; //enable RMC mode only
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <gps_init+0xc8>)
 8001578:	463c      	mov	r4, r7
 800157a:	461d      	mov	r5, r3
 800157c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001588:	682b      	ldr	r3, [r5, #0]
 800158a:	6023      	str	r3, [r4, #0]
	//HAL_UART_Transmit_DMA(&huart1, (uint8_t *) rmcCommand, strlen((char *)rmcCommand));
	gps_command(rmcCommand, "PMTK001,314,3");
 800158c:	463b      	mov	r3, r7
 800158e:	4910      	ldr	r1, [pc, #64]	@ (80015d0 <gps_init+0xcc>)
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f81f 	bl	80015d4 <gps_command>

	//HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);

}
 8001596:	bf00      	nop
 8001598:	3748      	adds	r7, #72	@ 0x48
 800159a:	46bd      	mov	sp, r7
 800159c:	bdb0      	pop	{r4, r5, r7, pc}
 800159e:	bf00      	nop
 80015a0:	200003e8 	.word	0x200003e8
 80015a4:	200002e0 	.word	0x200002e0
 80015a8:	0800d400 	.word	0x0800d400
 80015ac:	0800d40c 	.word	0x0800d40c
 80015b0:	40020000 	.word	0x40020000
 80015b4:	0800d4a8 	.word	0x0800d4a8
 80015b8:	0800d42c 	.word	0x0800d42c
 80015bc:	0800d4d4 	.word	0x0800d4d4
 80015c0:	0800d4b8 	.word	0x0800d4b8
 80015c4:	0800d43c 	.word	0x0800d43c
 80015c8:	0800d44c 	.word	0x0800d44c
 80015cc:	0800d4e8 	.word	0x0800d4e8
 80015d0:	0800d4c4 	.word	0x0800d4c4

080015d4 <gps_command>:


int gps_command(uint8_t *cmd, char *response) //Send Commands to GPS and check response
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]

	HAL_Delay(100);
 80015de:	2064      	movs	r0, #100	@ 0x64
 80015e0:	f001 f842 	bl	8002668 <HAL_Delay>

	HAL_UART_Transmit_DMA(&huart1, (uint8_t *) cmd, strlen((char *)cmd));
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7fe fe4b 	bl	8000280 <strlen>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	483a      	ldr	r0, [pc, #232]	@ (80016dc <gps_command+0x108>)
 80015f4:	f003 fe06 	bl	8005204 <HAL_UART_Transmit_DMA>
    CDC_Transmit_FS((uint8_t *)cmd,  strlen((char *)cmd));
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7fe fe41 	bl	8000280 <strlen>
 80015fe:	4603      	mov	r3, r0
 8001600:	b29b      	uxth	r3, r3
 8001602:	4619      	mov	r1, r3
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f008 fb83 	bl	8009d10 <CDC_Transmit_FS>

    char *P = NULL;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
    //char *Invalid = NULL;
    //char *Unsupported = NULL;
    char *Failed = NULL;
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
    GPS_timer = HAL_GetTick();
 8001612:	f001 f81d 	bl	8002650 <HAL_GetTick>
 8001616:	4603      	mov	r3, r0
 8001618:	4a31      	ldr	r2, [pc, #196]	@ (80016e0 <gps_command+0x10c>)
 800161a:	6013      	str	r3, [r2, #0]

    while(*P != response[0]){
 800161c:	e03f      	b.n	800169e <gps_command+0xca>
    	P = strstr(RX_BufferGPS, response);
 800161e:	6839      	ldr	r1, [r7, #0]
 8001620:	4830      	ldr	r0, [pc, #192]	@ (80016e4 <gps_command+0x110>)
 8001622:	f009 fde8 	bl	800b1f6 <strstr>
 8001626:	60f8      	str	r0, [r7, #12]
    	Failed = strstr(RX_BufferGPS, ",2*");
 8001628:	492f      	ldr	r1, [pc, #188]	@ (80016e8 <gps_command+0x114>)
 800162a:	482e      	ldr	r0, [pc, #184]	@ (80016e4 <gps_command+0x110>)
 800162c:	f009 fde3 	bl	800b1f6 <strstr>
 8001630:	60b8      	str	r0, [r7, #8]
    	Failed = strstr(RX_BufferGPS, ",1*");
 8001632:	492e      	ldr	r1, [pc, #184]	@ (80016ec <gps_command+0x118>)
 8001634:	482b      	ldr	r0, [pc, #172]	@ (80016e4 <gps_command+0x110>)
 8001636:	f009 fdde 	bl	800b1f6 <strstr>
 800163a:	60b8      	str	r0, [r7, #8]
    	Failed = strstr(RX_BufferGPS, ",0*");
 800163c:	492c      	ldr	r1, [pc, #176]	@ (80016f0 <gps_command+0x11c>)
 800163e:	4829      	ldr	r0, [pc, #164]	@ (80016e4 <gps_command+0x110>)
 8001640:	f009 fdd9 	bl	800b1f6 <strstr>
 8001644:	60b8      	str	r0, [r7, #8]


    	if((HAL_GetTick() - GPS_timer) > 2000){ //2s time-out error
 8001646:	f001 f803 	bl	8002650 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	4b24      	ldr	r3, [pc, #144]	@ (80016e0 <gps_command+0x10c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001656:	d90f      	bls.n	8001678 <gps_command+0xa4>
    		memset(RX_BufferGPS, 0, RX_BUFFER_SIZE_GPS);
 8001658:	22c8      	movs	r2, #200	@ 0xc8
 800165a:	2100      	movs	r1, #0
 800165c:	4821      	ldr	r0, [pc, #132]	@ (80016e4 <gps_command+0x110>)
 800165e:	f009 fdc2 	bl	800b1e6 <memset>
    		CDC_Transmit_FS((uint8_t *)"Time Out Error\r\n", 15); //debug terminal
 8001662:	210f      	movs	r1, #15
 8001664:	4823      	ldr	r0, [pc, #140]	@ (80016f4 <gps_command+0x120>)
 8001666:	f008 fb53 	bl	8009d10 <CDC_Transmit_FS>
    		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 800166a:	22c8      	movs	r2, #200	@ 0xc8
 800166c:	491d      	ldr	r1, [pc, #116]	@ (80016e4 <gps_command+0x110>)
 800166e:	481b      	ldr	r0, [pc, #108]	@ (80016dc <gps_command+0x108>)
 8001670:	f003 fe38 	bl	80052e4 <HAL_UARTEx_ReceiveToIdle_DMA>
    		return GpsError;
 8001674:	2301      	movs	r3, #1
 8001676:	e02c      	b.n	80016d2 <gps_command+0xfe>
    	}

    	if(Failed != NULL){
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00f      	beq.n	800169e <gps_command+0xca>
    		memset(RX_BufferGPS, 0, RX_BUFFER_SIZE_GPS);
 800167e:	22c8      	movs	r2, #200	@ 0xc8
 8001680:	2100      	movs	r1, #0
 8001682:	4818      	ldr	r0, [pc, #96]	@ (80016e4 <gps_command+0x110>)
 8001684:	f009 fdaf 	bl	800b1e6 <memset>
    		CDC_Transmit_FS((uint8_t *)"Failed\r\n", 15); //debug terminal
 8001688:	210f      	movs	r1, #15
 800168a:	481b      	ldr	r0, [pc, #108]	@ (80016f8 <gps_command+0x124>)
 800168c:	f008 fb40 	bl	8009d10 <CDC_Transmit_FS>
    		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 8001690:	22c8      	movs	r2, #200	@ 0xc8
 8001692:	4914      	ldr	r1, [pc, #80]	@ (80016e4 <gps_command+0x110>)
 8001694:	4811      	ldr	r0, [pc, #68]	@ (80016dc <gps_command+0x108>)
 8001696:	f003 fe25 	bl	80052e4 <HAL_UARTEx_ReceiveToIdle_DMA>
    		return GpsError;
 800169a:	2301      	movs	r3, #1
 800169c:	e019      	b.n	80016d2 <gps_command+0xfe>
    while(*P != response[0]){
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d1b9      	bne.n	800161e <gps_command+0x4a>
    	}

    }

    memset(RX_BufferGPS, 0, RX_BUFFER_SIZE_GPS);
 80016aa:	22c8      	movs	r2, #200	@ 0xc8
 80016ac:	2100      	movs	r1, #0
 80016ae:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <gps_command+0x110>)
 80016b0:	f009 fd99 	bl	800b1e6 <memset>
    CDC_Transmit_FS((uint8_t *)response,  strlen(response));
 80016b4:	6838      	ldr	r0, [r7, #0]
 80016b6:	f7fe fde3 	bl	8000280 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	6838      	ldr	r0, [r7, #0]
 80016c2:	f008 fb25 	bl	8009d10 <CDC_Transmit_FS>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 80016c6:	22c8      	movs	r2, #200	@ 0xc8
 80016c8:	4906      	ldr	r1, [pc, #24]	@ (80016e4 <gps_command+0x110>)
 80016ca:	4804      	ldr	r0, [pc, #16]	@ (80016dc <gps_command+0x108>)
 80016cc:	f003 fe0a 	bl	80052e4 <HAL_UARTEx_ReceiveToIdle_DMA>
	return Gpsok;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200002e0 	.word	0x200002e0
 80016e0:	200004b4 	.word	0x200004b4
 80016e4:	200003e8 	.word	0x200003e8
 80016e8:	0800d51c 	.word	0x0800d51c
 80016ec:	0800d520 	.word	0x0800d520
 80016f0:	0800d524 	.word	0x0800d524
 80016f4:	0800d528 	.word	0x0800d528
 80016f8:	0800d53c 	.word	0x0800d53c

080016fc <gps_updateMode>:


void gps_updateMode(uint8_t mode,uint16_t on, uint16_t off){ // implement mode changes from messages or timing
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b0b5      	sub	sp, #212	@ 0xd4
 8001700:	af04      	add	r7, sp, #16
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	460b      	mov	r3, r1
 8001708:	80bb      	strh	r3, [r7, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	807b      	strh	r3, [r7, #2]
	switch(mode){
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	3b01      	subs	r3, #1
 8001712:	2b04      	cmp	r3, #4
 8001714:	d87a      	bhi.n	800180c <gps_updateMode+0x110>
 8001716:	a201      	add	r2, pc, #4	@ (adr r2, 800171c <gps_updateMode+0x20>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	08001731 	.word	0x08001731
 8001720:	08001753 	.word	0x08001753
 8001724:	0800176d 	.word	0x0800176d
 8001728:	0800180b 	.word	0x0800180b
 800172c:	080017f1 	.word	0x080017f1
	case(1): //Full power continuous mode
			gps_command((uint8_t *)LOW_UPDATE_RATE, "PMTK001,220,3");
 8001730:	4938      	ldr	r1, [pc, #224]	@ (8001814 <gps_updateMode+0x118>)
 8001732:	4839      	ldr	r0, [pc, #228]	@ (8001818 <gps_updateMode+0x11c>)
 8001734:	f7ff ff4e 	bl	80015d4 <gps_command>
			uint8_t cmd1[] = "$PMTK225,0*2B";
 8001738:	4b38      	ldr	r3, [pc, #224]	@ (800181c <gps_updateMode+0x120>)
 800173a:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 800173e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001740:	c407      	stmia	r4!, {r0, r1, r2}
 8001742:	8023      	strh	r3, [r4, #0]
	        gps_command(cmd1,"PMTK001,225,3");
 8001744:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001748:	4935      	ldr	r1, [pc, #212]	@ (8001820 <gps_updateMode+0x124>)
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ff42 	bl	80015d4 <gps_command>
			break;
 8001750:	e05c      	b.n	800180c <gps_updateMode+0x110>
	case(2): //Standby low power mode
			uint8_t cmd2[] = "$PMTK161,0*28";
 8001752:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <gps_updateMode+0x128>)
 8001754:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8001758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800175a:	c407      	stmia	r4!, {r0, r1, r2}
 800175c:	8023      	strh	r3, [r4, #0]
			gps_command(cmd2,"PMTK001,161,3");
 800175e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001762:	4931      	ldr	r1, [pc, #196]	@ (8001828 <gps_updateMode+0x12c>)
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff35 	bl	80015d4 <gps_command>
			break;
 800176a:	e04f      	b.n	800180c <gps_updateMode+0x110>
	case(3): //Periodic on/off mode -> need to implement a function that handles timing length changes (maybe use presets)
			if((on < 65536) && (off < 65536)){//check under max limit
			char cmd3[60] = {0};
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	2238      	movs	r2, #56	@ 0x38
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f009 fd34 	bl	800b1e6 <memset>
			snprintf(cmd3,sizeof(cmd3) ,"$PMTK225,2,%u,%u,%u,%d*", on, off, on, off);
 800177e:	88bc      	ldrh	r4, [r7, #4]
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	88ba      	ldrh	r2, [r7, #4]
 8001784:	8879      	ldrh	r1, [r7, #2]
 8001786:	f107 000c 	add.w	r0, r7, #12
 800178a:	9102      	str	r1, [sp, #8]
 800178c:	9201      	str	r2, [sp, #4]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4623      	mov	r3, r4
 8001792:	4a26      	ldr	r2, [pc, #152]	@ (800182c <gps_updateMode+0x130>)
 8001794:	213c      	movs	r1, #60	@ 0x3c
 8001796:	f009 fcaf 	bl	800b0f8 <sniprintf>
			uint8_t checksum = get_checksum(cmd3);
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f850 	bl	8001844 <get_checksum>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			char finalcmd3[70] = {0};
 80017aa:	2300      	movs	r3, #0
 80017ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017ae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80017b2:	2242      	movs	r2, #66	@ 0x42
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f009 fd15 	bl	800b1e6 <memset>
			snprintf(finalcmd3, sizeof(finalcmd3),"%s%X\r\n",cmd3,checksum);
 80017bc:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80017c0:	f107 020c 	add.w	r2, r7, #12
 80017c4:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	4613      	mov	r3, r2
 80017cc:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <gps_updateMode+0x134>)
 80017ce:	2146      	movs	r1, #70	@ 0x46
 80017d0:	f009 fc92 	bl	800b0f8 <sniprintf>
			gps_command((uint8_t *) HIGH_UPDATE_RATE,"PMTK001,220,3");
 80017d4:	490f      	ldr	r1, [pc, #60]	@ (8001814 <gps_updateMode+0x118>)
 80017d6:	4817      	ldr	r0, [pc, #92]	@ (8001834 <gps_updateMode+0x138>)
 80017d8:	f7ff fefc 	bl	80015d4 <gps_command>
			gps_command((uint8_t *)finalcmd3,"PMTK001,225,3");
 80017dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017e0:	490f      	ldr	r1, [pc, #60]	@ (8001820 <gps_updateMode+0x124>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fef6 	bl	80015d4 <gps_command>
			gps_sleepFlag = 1;
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <gps_updateMode+0x13c>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
			}
			break;
 80017ee:	e00d      	b.n	800180c <gps_updateMode+0x110>
	case(4): //Standby mode -> deep power saving need to implement wake up pin

			break;
	case(5): //Always locate mode: advanced adaptive power periodic mode
			uint8_t cmd5[] = "$PMKT225,8*23";//Always locate standby
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <gps_updateMode+0x140>)
 80017f2:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 80017f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f8:	c407      	stmia	r4!, {r0, r1, r2}
 80017fa:	8023      	strh	r3, [r4, #0]
			gps_command(cmd5,"$PMKT001,225,3");
 80017fc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001800:	490f      	ldr	r1, [pc, #60]	@ (8001840 <gps_updateMode+0x144>)
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fee6 	bl	80015d4 <gps_command>
			break;
 8001808:	e000      	b.n	800180c <gps_updateMode+0x110>
			break;
 800180a:	bf00      	nop
	}

}
 800180c:	bf00      	nop
 800180e:	37c4      	adds	r7, #196	@ 0xc4
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	0800d43c 	.word	0x0800d43c
 8001818:	0800d44c 	.word	0x0800d44c
 800181c:	0800d42c 	.word	0x0800d42c
 8001820:	0800d41c 	.word	0x0800d41c
 8001824:	0800d58c 	.word	0x0800d58c
 8001828:	0800d46c 	.word	0x0800d46c
 800182c:	0800d548 	.word	0x0800d548
 8001830:	0800d560 	.word	0x0800d560
 8001834:	0800d568 	.word	0x0800d568
 8001838:	200004b8 	.word	0x200004b8
 800183c:	0800d59c 	.word	0x0800d59c
 8001840:	0800d57c 	.word	0x0800d57c

08001844 <get_checksum>:

uint8_t get_checksum(char *cmd){ // determines checksum of command and returns .
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	uint8_t checksum = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
	for(int j = 0; j < strlen((char *)cmd)+1; j++){
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	e017      	b.n	8001886 <get_checksum+0x42>
		if(cmd[j] == '*' ){
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001860:	d101      	bne.n	8001866 <get_checksum+0x22>
			return(checksum);
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	e018      	b.n	8001898 <get_checksum+0x54>
		}
		else if(cmd[j]!= '$'){
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b24      	cmp	r3, #36	@ 0x24
 8001870:	d006      	beq.n	8001880 <get_checksum+0x3c>
			checksum ^= cmd[j];
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	4053      	eors	r3, r2
 800187e:	73fb      	strb	r3, [r7, #15]
	for(int j = 0; j < strlen((char *)cmd)+1; j++){
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	3301      	adds	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7fe fcfa 	bl	8000280 <strlen>
 800188c:	4603      	mov	r3, r0
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	429a      	cmp	r2, r3
 8001894:	d8df      	bhi.n	8001856 <get_checksum+0x12>
		}
	}
	return(0);
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <Error_Handler+0x8>

080018ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	4a0f      	ldr	r2, [pc, #60]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c2:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	4a08      	ldr	r2, [pc, #32]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	@ 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a4c      	ldr	r2, [pc, #304]	@ (8001a4c <HAL_UART_MspInit+0x150>)
 800191a:	4293      	cmp	r3, r2
 800191c:	f040 8091 	bne.w	8001a42 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	4b4a      	ldr	r3, [pc, #296]	@ (8001a50 <HAL_UART_MspInit+0x154>)
 8001926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001928:	4a49      	ldr	r2, [pc, #292]	@ (8001a50 <HAL_UART_MspInit+0x154>)
 800192a:	f043 0310 	orr.w	r3, r3, #16
 800192e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001930:	4b47      	ldr	r3, [pc, #284]	@ (8001a50 <HAL_UART_MspInit+0x154>)
 8001932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	4b43      	ldr	r3, [pc, #268]	@ (8001a50 <HAL_UART_MspInit+0x154>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001944:	4a42      	ldr	r2, [pc, #264]	@ (8001a50 <HAL_UART_MspInit+0x154>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6313      	str	r3, [r2, #48]	@ 0x30
 800194c:	4b40      	ldr	r3, [pc, #256]	@ (8001a50 <HAL_UART_MspInit+0x154>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001958:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800196a:	2307      	movs	r3, #7
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4837      	ldr	r0, [pc, #220]	@ (8001a54 <HAL_UART_MspInit+0x158>)
 8001976:	f001 fbaf 	bl	80030d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800197a:	4b37      	ldr	r3, [pc, #220]	@ (8001a58 <HAL_UART_MspInit+0x15c>)
 800197c:	4a37      	ldr	r2, [pc, #220]	@ (8001a5c <HAL_UART_MspInit+0x160>)
 800197e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001980:	4b35      	ldr	r3, [pc, #212]	@ (8001a58 <HAL_UART_MspInit+0x15c>)
 8001982:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001986:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001988:	4b33      	ldr	r3, [pc, #204]	@ (8001a58 <HAL_UART_MspInit+0x15c>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198e:	4b32      	ldr	r3, [pc, #200]	@ (8001a58 <HAL_UART_MspInit+0x15c>)
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001994:	4b30      	ldr	r3, [pc, #192]	@ (8001a58 <HAL_UART_MspInit+0x15c>)
 8001996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800199a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800199c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a58 <HAL_UART_MspInit+0x15c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a58 <HAL_UART_MspInit+0x15c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80019a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a58 <HAL_UART_MspInit+0x15c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001a58 <HAL_UART_MspInit+0x15c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b4:	4b28      	ldr	r3, [pc, #160]	@ (8001a58 <HAL_UART_MspInit+0x15c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80019ba:	4827      	ldr	r0, [pc, #156]	@ (8001a58 <HAL_UART_MspInit+0x15c>)
 80019bc:	f000 ff8a 	bl	80028d4 <HAL_DMA_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80019c6:	f7ff ff6b 	bl	80018a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a22      	ldr	r2, [pc, #136]	@ (8001a58 <HAL_UART_MspInit+0x15c>)
 80019ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019d0:	4a21      	ldr	r2, [pc, #132]	@ (8001a58 <HAL_UART_MspInit+0x15c>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80019d6:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <HAL_UART_MspInit+0x164>)
 80019d8:	4a22      	ldr	r2, [pc, #136]	@ (8001a64 <HAL_UART_MspInit+0x168>)
 80019da:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80019dc:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <HAL_UART_MspInit+0x164>)
 80019de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <HAL_UART_MspInit+0x164>)
 80019e6:	2240      	movs	r2, #64	@ 0x40
 80019e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <HAL_UART_MspInit+0x164>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <HAL_UART_MspInit+0x164>)
 80019f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <HAL_UART_MspInit+0x164>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <HAL_UART_MspInit+0x164>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <HAL_UART_MspInit+0x164>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <HAL_UART_MspInit+0x164>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a10:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <HAL_UART_MspInit+0x164>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001a16:	4812      	ldr	r0, [pc, #72]	@ (8001a60 <HAL_UART_MspInit+0x164>)
 8001a18:	f000 ff5c 	bl	80028d4 <HAL_DMA_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001a22:	f7ff ff3d 	bl	80018a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <HAL_UART_MspInit+0x164>)
 8001a2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a60 <HAL_UART_MspInit+0x164>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	2025      	movs	r0, #37	@ 0x25
 8001a38:	f000 ff15 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a3c:	2025      	movs	r0, #37	@ 0x25
 8001a3e:	f000 ff2e 	bl	800289e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	@ 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	20000328 	.word	0x20000328
 8001a5c:	40026440 	.word	0x40026440
 8001a60:	20000388 	.word	0x20000388
 8001a64:	400264b8 	.word	0x400264b8

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <NMI_Handler+0x4>

08001a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <HardFault_Handler+0x4>

08001a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <MemManage_Handler+0x4>

08001a80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abe:	f000 fdb3 	bl	8002628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001acc:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <USART1_IRQHandler+0x10>)
 8001ace:	f003 fc67 	bl	80053a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200002e0 	.word	0x200002e0

08001adc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ae2:	480d      	ldr	r0, [pc, #52]	@ (8001b18 <DMA2_Stream2_IRQHandler+0x3c>)
 8001ae4:	f001 f88e 	bl	8002c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)){ //get message size as return to call back function
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <DMA2_Stream2_IRQHandler+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b10      	cmp	r3, #16
 8001af4:	d10b      	bne.n	8001b0e <DMA2_Stream2_IRQHandler+0x32>
     	  uint16_t size = RX_BUFFER_SIZE_GPS - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx); //#bytes in Buffer - #Bytes not received
 8001af6:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <DMA2_Stream2_IRQHandler+0x3c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001b02:	80fb      	strh	r3, [r7, #6]
     	  HAL_UARTEx_RxEventCallback(&huart1, size);
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	4619      	mov	r1, r3
 8001b08:	4804      	ldr	r0, [pc, #16]	@ (8001b1c <DMA2_Stream2_IRQHandler+0x40>)
 8001b0a:	f7ff fa1d 	bl	8000f48 <HAL_UARTEx_RxEventCallback>

       }

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000328 	.word	0x20000328
 8001b1c:	200002e0 	.word	0x200002e0

08001b20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <OTG_FS_IRQHandler+0x10>)
 8001b26:	f001 fdb8 	bl	800369a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20001218 	.word	0x20001218

08001b34 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b38:	4802      	ldr	r0, [pc, #8]	@ (8001b44 <DMA2_Stream7_IRQHandler+0x10>)
 8001b3a:	f001 f863 	bl	8002c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000388 	.word	0x20000388

08001b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return 1;
 8001b4c:	2301      	movs	r3, #1
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_kill>:

int _kill(int pid, int sig)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b62:	f009 fba9 	bl	800b2b8 <__errno>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2216      	movs	r2, #22
 8001b6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_exit>:

void _exit (int status)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ffe7 	bl	8001b58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b8a:	bf00      	nop
 8001b8c:	e7fd      	b.n	8001b8a <_exit+0x12>

08001b8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	e00a      	b.n	8001bb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ba0:	f3af 8000 	nop.w
 8001ba4:	4601      	mov	r1, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	60ba      	str	r2, [r7, #8]
 8001bac:	b2ca      	uxtb	r2, r1
 8001bae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	dbf0      	blt.n	8001ba0 <_read+0x12>
  }

  return len;
 8001bbe:	687b      	ldr	r3, [r7, #4]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e009      	b.n	8001bee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	60ba      	str	r2, [r7, #8]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3301      	adds	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	dbf1      	blt.n	8001bda <_write+0x12>
  }
  return len;
 8001bf6:	687b      	ldr	r3, [r7, #4]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_close>:

int _close(int file)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c28:	605a      	str	r2, [r3, #4]
  return 0;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_isatty>:

int _isatty(int file)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b085      	sub	sp, #20
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	@ (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	@ (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f009 fb0e 	bl	800b2b8 <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20010000 	.word	0x20010000
 8001cc8:	00000400 	.word	0x00000400
 8001ccc:	200004bc 	.word	0x200004bc
 8001cd0:	20001a68 	.word	0x20001a68

08001cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <SystemInit+0x20>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cde:	4a05      	ldr	r2, [pc, #20]	@ (8001cf4 <SystemInit+0x20>)
 8001ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <gpsisdigit>:
//
// public methods
//

// verify is character is a digit
bool gpsisdigit(char c) { return c >= '0' && c <= '9'; }
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d06:	d904      	bls.n	8001d12 <gpsisdigit+0x1a>
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b39      	cmp	r3, #57	@ 0x39
 8001d0c:	d801      	bhi.n	8001d12 <gpsisdigit+0x1a>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <gpsisdigit+0x1c>
 8001d12:	2300      	movs	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <uptime>:
// horizontal dilution of precision in 100ths
inline unsigned long gps_hdop() { return _hdop; }


clock_t uptime()
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
	unsigned long d = HAL_GetTick();
 8001d28:	f000 fc92 	bl	8002650 <HAL_GetTick>
 8001d2c:	6078      	str	r0, [r7, #4]
	return d;
 8001d2e:	687b      	ldr	r3, [r7, #4]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <gps_encode>:
{
	return rad * (180/PI);
}

bool gps_encode(char c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  bool valid_sentence = true;
 8001d42:	2301      	movs	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]

#ifndef GPS_NO_STATS
  _encoded_characters++;
 8001d46:	4b57      	ldr	r3, [pc, #348]	@ (8001ea4 <gps_encode+0x16c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	4a55      	ldr	r2, [pc, #340]	@ (8001ea4 <gps_encode+0x16c>)
 8001d4e:	6013      	str	r3, [r2, #0]
#endif
  switch(c)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	3b0a      	subs	r3, #10
 8001d54:	2b22      	cmp	r3, #34	@ 0x22
 8001d56:	f200 8086 	bhi.w	8001e66 <gps_encode+0x12e>
 8001d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d60 <gps_encode+0x28>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001dfb 	.word	0x08001dfb
 8001d64:	08001e67 	.word	0x08001e67
 8001d68:	08001e67 	.word	0x08001e67
 8001d6c:	08001dfb 	.word	0x08001dfb
 8001d70:	08001e67 	.word	0x08001e67
 8001d74:	08001e67 	.word	0x08001e67
 8001d78:	08001e67 	.word	0x08001e67
 8001d7c:	08001e67 	.word	0x08001e67
 8001d80:	08001e67 	.word	0x08001e67
 8001d84:	08001e67 	.word	0x08001e67
 8001d88:	08001e67 	.word	0x08001e67
 8001d8c:	08001e67 	.word	0x08001e67
 8001d90:	08001e67 	.word	0x08001e67
 8001d94:	08001e67 	.word	0x08001e67
 8001d98:	08001e67 	.word	0x08001e67
 8001d9c:	08001e67 	.word	0x08001e67
 8001da0:	08001e67 	.word	0x08001e67
 8001da4:	08001e67 	.word	0x08001e67
 8001da8:	08001e67 	.word	0x08001e67
 8001dac:	08001e67 	.word	0x08001e67
 8001db0:	08001e67 	.word	0x08001e67
 8001db4:	08001e67 	.word	0x08001e67
 8001db8:	08001e67 	.word	0x08001e67
 8001dbc:	08001e67 	.word	0x08001e67
 8001dc0:	08001e67 	.word	0x08001e67
 8001dc4:	08001e67 	.word	0x08001e67
 8001dc8:	08001e3f 	.word	0x08001e3f
 8001dcc:	08001e67 	.word	0x08001e67
 8001dd0:	08001e67 	.word	0x08001e67
 8001dd4:	08001e67 	.word	0x08001e67
 8001dd8:	08001e67 	.word	0x08001e67
 8001ddc:	08001e67 	.word	0x08001e67
 8001de0:	08001dfb 	.word	0x08001dfb
 8001de4:	08001e67 	.word	0x08001e67
 8001de8:	08001ded 	.word	0x08001ded
  {
  case ',': // term terminators
    _parity ^= c;
 8001dec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea8 <gps_encode+0x170>)
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	4053      	eors	r3, r2
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea8 <gps_encode+0x170>)
 8001df8:	701a      	strb	r2, [r3, #0]
  case '\r':
  case '\n':
  case '*':
    if (_term_offset < sizeof(_term))
 8001dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8001eac <gps_encode+0x174>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b0e      	cmp	r3, #14
 8001e00:	d809      	bhi.n	8001e16 <gps_encode+0xde>
    {
      _term[_term_offset] = 0;
 8001e02:	4b2a      	ldr	r3, [pc, #168]	@ (8001eac <gps_encode+0x174>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b29      	ldr	r3, [pc, #164]	@ (8001eb0 <gps_encode+0x178>)
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	5499      	strb	r1, [r3, r2]
      valid_sentence = gps_term_complete(); // process the term
 8001e0e:	f000 f93d 	bl	800208c <gps_term_complete>
 8001e12:	4603      	mov	r3, r0
 8001e14:	73fb      	strb	r3, [r7, #15]
    }
    ++_term_number; // move to next term
 8001e16:	4b27      	ldr	r3, [pc, #156]	@ (8001eb4 <gps_encode+0x17c>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <gps_encode+0x17c>)
 8001e20:	701a      	strb	r2, [r3, #0]
    _term_offset = 0;  // reset the term buffer for next term
 8001e22:	4b22      	ldr	r3, [pc, #136]	@ (8001eac <gps_encode+0x174>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
    _is_checksum_term = c == '*'; //If asterisk then the next term is a check sum
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e2c:	bf0c      	ite	eq
 8001e2e:	2301      	moveq	r3, #1
 8001e30:	2300      	movne	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <gps_encode+0x180>)
 8001e38:	701a      	strb	r2, [r3, #0]
    return valid_sentence;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	e02d      	b.n	8001e9a <gps_encode+0x162>

  case '$': // sentence begin
    _term_number = 0;
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <gps_encode+0x17c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
    _term_offset = 0;
 8001e44:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <gps_encode+0x174>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
    _parity = 0;
 8001e4a:	4b17      	ldr	r3, [pc, #92]	@ (8001ea8 <gps_encode+0x170>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
    _sentence_type = GPS_SENTENCE_OTHER;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <gps_encode+0x184>)
 8001e52:	2202      	movs	r2, #2
 8001e54:	701a      	strb	r2, [r3, #0]
    _is_checksum_term = false;
 8001e56:	4b18      	ldr	r3, [pc, #96]	@ (8001eb8 <gps_encode+0x180>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
    _is_gps_data_good = false;
 8001e5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <gps_encode+0x188>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
    return valid_sentence;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	e019      	b.n	8001e9a <gps_encode+0x162>
  }

  // ordinary characters
  if (_term_offset < sizeof(_term) - 1)
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <gps_encode+0x174>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b0d      	cmp	r3, #13
 8001e6c:	d809      	bhi.n	8001e82 <gps_encode+0x14a>
    _term[_term_offset++] = c; //add character to current term buffer
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <gps_encode+0x174>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	b2d1      	uxtb	r1, r2
 8001e76:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <gps_encode+0x174>)
 8001e78:	7011      	strb	r1, [r2, #0]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb0 <gps_encode+0x178>)
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	5453      	strb	r3, [r2, r1]
  if (!_is_checksum_term)
 8001e82:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb8 <gps_encode+0x180>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <gps_encode+0x160>
    _parity ^= c; // update the checksum
 8001e8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <gps_encode+0x170>)
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	4053      	eors	r3, r2
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <gps_encode+0x170>)
 8001e96:	701a      	strb	r2, [r3, #0]

  return valid_sentence;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000052c 	.word	0x2000052c
 8001ea8:	20000514 	.word	0x20000514
 8001eac:	20000529 	.word	0x20000529
 8001eb0:	20000518 	.word	0x20000518
 8001eb4:	20000528 	.word	0x20000528
 8001eb8:	20000515 	.word	0x20000515
 8001ebc:	20000527 	.word	0x20000527
 8001ec0:	2000052a 	.word	0x2000052a

08001ec4 <from_hex>:
/*
 * internal utilities
*/

int from_hex(char a)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  if (a >= 'A' && a <= 'F')
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	2b40      	cmp	r3, #64	@ 0x40
 8001ed2:	d905      	bls.n	8001ee0 <from_hex+0x1c>
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	2b46      	cmp	r3, #70	@ 0x46
 8001ed8:	d802      	bhi.n	8001ee0 <from_hex+0x1c>
    return a - 'A' + 10;
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	3b37      	subs	r3, #55	@ 0x37
 8001ede:	e00a      	b.n	8001ef6 <from_hex+0x32>
  else if (a >= 'a' && a <= 'f')
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	2b60      	cmp	r3, #96	@ 0x60
 8001ee4:	d905      	bls.n	8001ef2 <from_hex+0x2e>
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	2b66      	cmp	r3, #102	@ 0x66
 8001eea:	d802      	bhi.n	8001ef2 <from_hex+0x2e>
    return a - 'a' + 10;
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	3b57      	subs	r3, #87	@ 0x57
 8001ef0:	e001      	b.n	8001ef6 <from_hex+0x32>
  else
    return a - '0';
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	3b30      	subs	r3, #48	@ 0x30
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <gps_parse_decimal>:

unsigned long gps_parse_decimal()
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
  char *p;
  bool isneg;
  unsigned long ret;

  p = _term;
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc0 <gps_parse_decimal+0xbc>)
 8001f0c:	60fb      	str	r3, [r7, #12]
  isneg = (*p == '-');
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f14:	bf0c      	ite	eq
 8001f16:	2301      	moveq	r3, #1
 8001f18:	2300      	movne	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	71fb      	strb	r3, [r7, #7]
  if (isneg)
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <gps_parse_decimal+0x26>
	++p;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3301      	adds	r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]

  ret = 100UL * gpsatol(p);
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 fa42 	bl	80023b4 <gpsatol>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	2364      	movs	r3, #100	@ 0x64
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	60bb      	str	r3, [r7, #8]

  while (gpsisdigit(*p))
 8001f3c:	e002      	b.n	8001f44 <gps_parse_decimal+0x40>
	++p;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3301      	adds	r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
  while (gpsisdigit(*p))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fed5 	bl	8001cf8 <gpsisdigit>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f4      	bne.n	8001f3e <gps_parse_decimal+0x3a>

  if (*p == '.')
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f5a:	d126      	bne.n	8001faa <gps_parse_decimal+0xa6>
  {
    if (gpsisdigit(p[1]))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fec8 	bl	8001cf8 <gpsisdigit>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01d      	beq.n	8001faa <gps_parse_decimal+0xa6>
    {
      ret += 10 * (p[1] - '0');
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3301      	adds	r3, #1
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	461a      	mov	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4413      	add	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
      if (gpsisdigit(p[2]))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff feb2 	bl	8001cf8 <gpsisdigit>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d007      	beq.n	8001faa <gps_parse_decimal+0xa6>
        ret += p[2] - '0';
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b30      	subs	r3, #48	@ 0x30
 8001fa8:	60bb      	str	r3, [r7, #8]
    }
  }
  return isneg ? -ret : ret;
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <gps_parse_decimal+0xb2>
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	425b      	negs	r3, r3
 8001fb4:	e000      	b.n	8001fb8 <gps_parse_decimal+0xb4>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000518 	.word	0x20000518

08001fc4 <gps_parse_degrees>:

unsigned long gps_parse_degrees() //Get Decimal degrees from DMM
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
  char *p;
  unsigned long left;
  unsigned long tenk_minutes;

  left = gpsatol(_term);
 8001fca:	482b      	ldr	r0, [pc, #172]	@ (8002078 <gps_parse_degrees+0xb4>)
 8001fcc:	f000 f9f2 	bl	80023b4 <gpsatol>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	603b      	str	r3, [r7, #0]
  tenk_minutes = (left % 100UL) * 10000UL;
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	4b29      	ldr	r3, [pc, #164]	@ (800207c <gps_parse_degrees+0xb8>)
 8001fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fdc:	095b      	lsrs	r3, r3, #5
 8001fde:	2164      	movs	r1, #100	@ 0x64
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	60bb      	str	r3, [r7, #8]

  for (p=_term; gpsisdigit(*p); ++p);
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <gps_parse_degrees+0xb4>)
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	e002      	b.n	8001ffc <gps_parse_degrees+0x38>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fe79 	bl	8001cf8 <gpsisdigit>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f4      	bne.n	8001ff6 <gps_parse_degrees+0x32>

  if (*p == '.')
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b2e      	cmp	r3, #46	@ 0x2e
 8002012:	d11e      	bne.n	8002052 <gps_parse_degrees+0x8e>
  {
    unsigned long mult = 1000;
 8002014:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002018:	607b      	str	r3, [r7, #4]
    while (gpsisdigit(*++p))
 800201a:	e00f      	b.n	800203c <gps_parse_degrees+0x78>
    {
      tenk_minutes += mult * (*p - '0');
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	3b30      	subs	r3, #48	@ 0x30
 8002022:	461a      	mov	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	4413      	add	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
      mult /= 10;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a13      	ldr	r2, [pc, #76]	@ (8002080 <gps_parse_degrees+0xbc>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	08db      	lsrs	r3, r3, #3
 800203a:	607b      	str	r3, [r7, #4]
    while (gpsisdigit(*++p))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3301      	adds	r3, #1
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fe56 	bl	8001cf8 <gpsisdigit>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1e4      	bne.n	800201c <gps_parse_degrees+0x58>
    }
  }
  return (left / 100) * 100000 + tenk_minutes / 6;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	4a09      	ldr	r2, [pc, #36]	@ (800207c <gps_parse_degrees+0xb8>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	4a09      	ldr	r2, [pc, #36]	@ (8002084 <gps_parse_degrees+0xc0>)
 800205e:	fb03 f202 	mul.w	r2, r3, r2
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4908      	ldr	r1, [pc, #32]	@ (8002088 <gps_parse_degrees+0xc4>)
 8002066:	fba1 1303 	umull	r1, r3, r1, r3
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	4413      	add	r3, r2
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000518 	.word	0x20000518
 800207c:	51eb851f 	.word	0x51eb851f
 8002080:	cccccccd 	.word	0xcccccccd
 8002084:	000186a0 	.word	0x000186a0
 8002088:	aaaaaaab 	.word	0xaaaaaaab

0800208c <gps_term_complete>:

/* Processes a just-completed term
 * Returns true if new sentence has just passed checksum test and is validated
 */
bool gps_term_complete()
{
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
  if (_is_checksum_term)
 8002092:	4b9c      	ldr	r3, [pc, #624]	@ (8002304 <gps_term_complete+0x278>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d06b      	beq.n	8002172 <gps_term_complete+0xe6>
  {
    uint8_t checksum;
    checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
 800209a:	4b9b      	ldr	r3, [pc, #620]	@ (8002308 <gps_term_complete+0x27c>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff10 	bl	8001ec4 <from_hex>
 80020a4:	4603      	mov	r3, r0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	b2dc      	uxtb	r4, r3
 80020ac:	4b96      	ldr	r3, [pc, #600]	@ (8002308 <gps_term_complete+0x27c>)
 80020ae:	785b      	ldrb	r3, [r3, #1]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff07 	bl	8001ec4 <from_hex>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	4423      	add	r3, r4
 80020bc:	71fb      	strb	r3, [r7, #7]
    if (checksum == _parity)
 80020be:	4b93      	ldr	r3, [pc, #588]	@ (800230c <gps_term_complete+0x280>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	79fa      	ldrb	r2, [r7, #7]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d14c      	bne.n	8002162 <gps_term_complete+0xd6>
    {
      if (_is_gps_data_good)
 80020c8:	4b91      	ldr	r3, [pc, #580]	@ (8002310 <gps_term_complete+0x284>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d04d      	beq.n	800216e <gps_term_complete+0xe2>
      {
#ifndef GPS_NO_STATS
        ++_good_sentences;
 80020d2:	4b90      	ldr	r3, [pc, #576]	@ (8002314 <gps_term_complete+0x288>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	3301      	adds	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b8e      	ldr	r3, [pc, #568]	@ (8002314 <gps_term_complete+0x288>)
 80020dc:	801a      	strh	r2, [r3, #0]
#endif
        _last_time_fix = _new_time_fix;
 80020de:	4b8e      	ldr	r3, [pc, #568]	@ (8002318 <gps_term_complete+0x28c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a8e      	ldr	r2, [pc, #568]	@ (800231c <gps_term_complete+0x290>)
 80020e4:	6013      	str	r3, [r2, #0]
        _last_position_fix = _new_position_fix;
 80020e6:	4b8e      	ldr	r3, [pc, #568]	@ (8002320 <gps_term_complete+0x294>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a8e      	ldr	r2, [pc, #568]	@ (8002324 <gps_term_complete+0x298>)
 80020ec:	6013      	str	r3, [r2, #0]

        switch(_sentence_type)
 80020ee:	4b8e      	ldr	r3, [pc, #568]	@ (8002328 <gps_term_complete+0x29c>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01a      	beq.n	800212c <gps_term_complete+0xa0>
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d131      	bne.n	800215e <gps_term_complete+0xd2>
        {
        case GPS_SENTENCE_GNRMC:
          _time      = _new_time;
 80020fa:	4b8c      	ldr	r3, [pc, #560]	@ (800232c <gps_term_complete+0x2a0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a8c      	ldr	r2, [pc, #560]	@ (8002330 <gps_term_complete+0x2a4>)
 8002100:	6013      	str	r3, [r2, #0]
          _date      = _new_date;
 8002102:	4b8c      	ldr	r3, [pc, #560]	@ (8002334 <gps_term_complete+0x2a8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a8c      	ldr	r2, [pc, #560]	@ (8002338 <gps_term_complete+0x2ac>)
 8002108:	6013      	str	r3, [r2, #0]
          _latitude  = _new_latitude;
 800210a:	4b8c      	ldr	r3, [pc, #560]	@ (800233c <gps_term_complete+0x2b0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a8c      	ldr	r2, [pc, #560]	@ (8002340 <gps_term_complete+0x2b4>)
 8002110:	6013      	str	r3, [r2, #0]
          _longitude = _new_longitude;
 8002112:	4b8c      	ldr	r3, [pc, #560]	@ (8002344 <gps_term_complete+0x2b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a8c      	ldr	r2, [pc, #560]	@ (8002348 <gps_term_complete+0x2bc>)
 8002118:	6013      	str	r3, [r2, #0]
          _speed     = _new_speed;
 800211a:	4b8c      	ldr	r3, [pc, #560]	@ (800234c <gps_term_complete+0x2c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a8c      	ldr	r2, [pc, #560]	@ (8002350 <gps_term_complete+0x2c4>)
 8002120:	6013      	str	r3, [r2, #0]
          _course    = _new_course;
 8002122:	4b8c      	ldr	r3, [pc, #560]	@ (8002354 <gps_term_complete+0x2c8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a8c      	ldr	r2, [pc, #560]	@ (8002358 <gps_term_complete+0x2cc>)
 8002128:	6013      	str	r3, [r2, #0]
          break;
 800212a:	e018      	b.n	800215e <gps_term_complete+0xd2>
        case GPS_SENTENCE_GNGGA:
          _altitude  = _new_altitude;
 800212c:	4b8b      	ldr	r3, [pc, #556]	@ (800235c <gps_term_complete+0x2d0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a8b      	ldr	r2, [pc, #556]	@ (8002360 <gps_term_complete+0x2d4>)
 8002132:	6013      	str	r3, [r2, #0]
          _time      = _new_time;
 8002134:	4b7d      	ldr	r3, [pc, #500]	@ (800232c <gps_term_complete+0x2a0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a7d      	ldr	r2, [pc, #500]	@ (8002330 <gps_term_complete+0x2a4>)
 800213a:	6013      	str	r3, [r2, #0]
          _latitude  = _new_latitude;
 800213c:	4b7f      	ldr	r3, [pc, #508]	@ (800233c <gps_term_complete+0x2b0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a7f      	ldr	r2, [pc, #508]	@ (8002340 <gps_term_complete+0x2b4>)
 8002142:	6013      	str	r3, [r2, #0]
          _longitude = _new_longitude;
 8002144:	4b7f      	ldr	r3, [pc, #508]	@ (8002344 <gps_term_complete+0x2b8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a7f      	ldr	r2, [pc, #508]	@ (8002348 <gps_term_complete+0x2bc>)
 800214a:	6013      	str	r3, [r2, #0]
          _numsats   = _new_numsats;
 800214c:	4b85      	ldr	r3, [pc, #532]	@ (8002364 <gps_term_complete+0x2d8>)
 800214e:	881a      	ldrh	r2, [r3, #0]
 8002150:	4b85      	ldr	r3, [pc, #532]	@ (8002368 <gps_term_complete+0x2dc>)
 8002152:	801a      	strh	r2, [r3, #0]
          _hdop      = _new_hdop;
 8002154:	4b85      	ldr	r3, [pc, #532]	@ (800236c <gps_term_complete+0x2e0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a85      	ldr	r2, [pc, #532]	@ (8002370 <gps_term_complete+0x2e4>)
 800215a:	6013      	str	r3, [r2, #0]
          break;
 800215c:	bf00      	nop
        }

        return true;
 800215e:	2301      	movs	r3, #1
 8002160:	e120      	b.n	80023a4 <gps_term_complete+0x318>
      }
    }

#ifndef GPS_NO_STATS
    else
      ++_failed_checksum;
 8002162:	4b84      	ldr	r3, [pc, #528]	@ (8002374 <gps_term_complete+0x2e8>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	4b82      	ldr	r3, [pc, #520]	@ (8002374 <gps_term_complete+0x2e8>)
 800216c:	801a      	strh	r2, [r3, #0]
#endif
    return false;
 800216e:	2300      	movs	r3, #0
 8002170:	e118      	b.n	80023a4 <gps_term_complete+0x318>
  }

  // the first term determines the sentence type
  if (_term_number == 0)
 8002172:	4b81      	ldr	r3, [pc, #516]	@ (8002378 <gps_term_complete+0x2ec>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d11a      	bne.n	80021b0 <gps_term_complete+0x124>
  {
    if (!gpsstrcmp(_term, GNRMC_TERM))
 800217a:	4980      	ldr	r1, [pc, #512]	@ (800237c <gps_term_complete+0x2f0>)
 800217c:	4862      	ldr	r0, [pc, #392]	@ (8002308 <gps_term_complete+0x27c>)
 800217e:	f000 f93a 	bl	80023f6 <gpsstrcmp>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d103      	bne.n	8002190 <gps_term_complete+0x104>
      _sentence_type = GPS_SENTENCE_GNRMC;
 8002188:	4b67      	ldr	r3, [pc, #412]	@ (8002328 <gps_term_complete+0x29c>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e00d      	b.n	80021ac <gps_term_complete+0x120>
    else if (!gpsstrcmp(_term, GNGGA_TERM))
 8002190:	497b      	ldr	r1, [pc, #492]	@ (8002380 <gps_term_complete+0x2f4>)
 8002192:	485d      	ldr	r0, [pc, #372]	@ (8002308 <gps_term_complete+0x27c>)
 8002194:	f000 f92f 	bl	80023f6 <gpsstrcmp>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <gps_term_complete+0x11a>
      _sentence_type = GPS_SENTENCE_GNGGA;
 800219e:	4b62      	ldr	r3, [pc, #392]	@ (8002328 <gps_term_complete+0x29c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e002      	b.n	80021ac <gps_term_complete+0x120>
    else
      _sentence_type = GPS_SENTENCE_OTHER;
 80021a6:	4b60      	ldr	r3, [pc, #384]	@ (8002328 <gps_term_complete+0x29c>)
 80021a8:	2202      	movs	r2, #2
 80021aa:	701a      	strb	r2, [r3, #0]
    return false;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e0f9      	b.n	80023a4 <gps_term_complete+0x318>
  }

  else if (_sentence_type != (GPS_SENTENCE_OTHER)){
 80021b0:	4b5d      	ldr	r3, [pc, #372]	@ (8002328 <gps_term_complete+0x29c>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	f000 80f4 	beq.w	80023a2 <gps_term_complete+0x316>
    switch(COMBINE(_sentence_type, _term_number))
 80021ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002328 <gps_term_complete+0x29c>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	4a6d      	ldr	r2, [pc, #436]	@ (8002378 <gps_term_complete+0x2ec>)
 80021c2:	7812      	ldrb	r2, [r2, #0]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	3b01      	subs	r3, #1
 80021c8:	2b18      	cmp	r3, #24
 80021ca:	f200 80ea 	bhi.w	80023a2 <gps_term_complete+0x316>
 80021ce:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <gps_term_complete+0x148>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	08002239 	.word	0x08002239
 80021d8:	08002265 	.word	0x08002265
 80021dc:	0800227d 	.word	0x0800227d
 80021e0:	08002293 	.word	0x08002293
 80021e4:	080022a1 	.word	0x080022a1
 80021e8:	080022dd 	.word	0x080022dd
 80021ec:	080022f3 	.word	0x080022f3
 80021f0:	08002385 	.word	0x08002385
 80021f4:	0800238f 	.word	0x0800238f
 80021f8:	080023a3 	.word	0x080023a3
 80021fc:	080023a3 	.word	0x080023a3
 8002200:	080023a3 	.word	0x080023a3
 8002204:	080023a3 	.word	0x080023a3
 8002208:	080023a3 	.word	0x080023a3
 800220c:	080023a3 	.word	0x080023a3
 8002210:	080023a3 	.word	0x080023a3
 8002214:	08002239 	.word	0x08002239
 8002218:	0800224f 	.word	0x0800224f
 800221c:	08002265 	.word	0x08002265
 8002220:	0800227d 	.word	0x0800227d
 8002224:	08002293 	.word	0x08002293
 8002228:	080022a1 	.word	0x080022a1
 800222c:	080022b5 	.word	0x080022b5
 8002230:	080022c1 	.word	0x080022c1
 8002234:	080022cd 	.word	0x080022cd
  {
    case COMBINE(GPS_SENTENCE_GNRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GNGGA, 1):
      _new_time = gps_parse_decimal();
 8002238:	f7ff fe64 	bl	8001f04 <gps_parse_decimal>
 800223c:	4603      	mov	r3, r0
 800223e:	4a3b      	ldr	r2, [pc, #236]	@ (800232c <gps_term_complete+0x2a0>)
 8002240:	6013      	str	r3, [r2, #0]
      _new_time_fix = uptime();
 8002242:	f7ff fd6e 	bl	8001d22 <uptime>
 8002246:	4603      	mov	r3, r0
 8002248:	4a33      	ldr	r2, [pc, #204]	@ (8002318 <gps_term_complete+0x28c>)
 800224a:	6013      	str	r3, [r2, #0]
      break;
 800224c:	e0a9      	b.n	80023a2 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 2): // GNRMC validity
      _is_gps_data_good = (_term[0] == 'A');
 800224e:	4b2e      	ldr	r3, [pc, #184]	@ (8002308 <gps_term_complete+0x27c>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b41      	cmp	r3, #65	@ 0x41
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	4b2c      	ldr	r3, [pc, #176]	@ (8002310 <gps_term_complete+0x284>)
 8002260:	701a      	strb	r2, [r3, #0]
      break;
 8002262:	e09e      	b.n	80023a2 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 3): // Latitude
    case COMBINE(GPS_SENTENCE_GNGGA, 2):
      _new_latitude = gps_parse_degrees();
 8002264:	f7ff feae 	bl	8001fc4 <gps_parse_degrees>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	4b33      	ldr	r3, [pc, #204]	@ (800233c <gps_term_complete+0x2b0>)
 800226e:	601a      	str	r2, [r3, #0]
      _new_position_fix = uptime();
 8002270:	f7ff fd57 	bl	8001d22 <uptime>
 8002274:	4603      	mov	r3, r0
 8002276:	4a2a      	ldr	r2, [pc, #168]	@ (8002320 <gps_term_complete+0x294>)
 8002278:	6013      	str	r3, [r2, #0]
      break;
 800227a:	e092      	b.n	80023a2 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GNGGA, 3):
      if (_term[0] == 'S')
 800227c:	4b22      	ldr	r3, [pc, #136]	@ (8002308 <gps_term_complete+0x27c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b53      	cmp	r3, #83	@ 0x53
 8002282:	f040 808b 	bne.w	800239c <gps_term_complete+0x310>
        _new_latitude = -_new_latitude;
 8002286:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <gps_term_complete+0x2b0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	425b      	negs	r3, r3
 800228c:	4a2b      	ldr	r2, [pc, #172]	@ (800233c <gps_term_complete+0x2b0>)
 800228e:	6013      	str	r3, [r2, #0]
      break;
 8002290:	e084      	b.n	800239c <gps_term_complete+0x310>
    case COMBINE(GPS_SENTENCE_GNRMC, 5): // Longitude
    case COMBINE(GPS_SENTENCE_GNGGA, 4):
      _new_longitude = gps_parse_degrees();
 8002292:	f7ff fe97 	bl	8001fc4 <gps_parse_degrees>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	4b2a      	ldr	r3, [pc, #168]	@ (8002344 <gps_term_complete+0x2b8>)
 800229c:	601a      	str	r2, [r3, #0]
      break;
 800229e:	e080      	b.n	80023a2 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GNGGA, 5):
      if (_term[0] == 'W')
 80022a0:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <gps_term_complete+0x27c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b57      	cmp	r3, #87	@ 0x57
 80022a6:	d17b      	bne.n	80023a0 <gps_term_complete+0x314>
        _new_longitude = -_new_longitude;
 80022a8:	4b26      	ldr	r3, [pc, #152]	@ (8002344 <gps_term_complete+0x2b8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	425b      	negs	r3, r3
 80022ae:	4a25      	ldr	r2, [pc, #148]	@ (8002344 <gps_term_complete+0x2b8>)
 80022b0:	6013      	str	r3, [r2, #0]
      break;
 80022b2:	e075      	b.n	80023a0 <gps_term_complete+0x314>
    case COMBINE(GPS_SENTENCE_GNRMC, 7): // Speed (GNRMC)
      _new_speed = gps_parse_decimal();
 80022b4:	f7ff fe26 	bl	8001f04 <gps_parse_decimal>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4a24      	ldr	r2, [pc, #144]	@ (800234c <gps_term_complete+0x2c0>)
 80022bc:	6013      	str	r3, [r2, #0]
      break;
 80022be:	e070      	b.n	80023a2 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 8): // Course (GNRMC)
      _new_course = gps_parse_decimal();
 80022c0:	f7ff fe20 	bl	8001f04 <gps_parse_decimal>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4a23      	ldr	r2, [pc, #140]	@ (8002354 <gps_term_complete+0x2c8>)
 80022c8:	6013      	str	r3, [r2, #0]
      break;
 80022ca:	e06a      	b.n	80023a2 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 9): // Date (GNRMC)
      _new_date = gpsatol(_term);
 80022cc:	480e      	ldr	r0, [pc, #56]	@ (8002308 <gps_term_complete+0x27c>)
 80022ce:	f000 f871 	bl	80023b4 <gpsatol>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b17      	ldr	r3, [pc, #92]	@ (8002334 <gps_term_complete+0x2a8>)
 80022d8:	601a      	str	r2, [r3, #0]
      break;
 80022da:	e062      	b.n	80023a2 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNGGA, 6): // Fix data (GPGGA)
      _is_gps_data_good = (_term[0] > '0');
 80022dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <gps_term_complete+0x27c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b30      	cmp	r3, #48	@ 0x30
 80022e2:	bf8c      	ite	hi
 80022e4:	2301      	movhi	r3, #1
 80022e6:	2300      	movls	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <gps_term_complete+0x284>)
 80022ee:	701a      	strb	r2, [r3, #0]
      break;
 80022f0:	e057      	b.n	80023a2 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNGGA, 7): // Satellites used (GPGGA)
      _new_numsats = (unsigned char)atoi(_term);
 80022f2:	4805      	ldr	r0, [pc, #20]	@ (8002308 <gps_term_complete+0x27c>)
 80022f4:	f008 f95e 	bl	800a5b4 <atoi>
 80022f8:	4603      	mov	r3, r0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <gps_term_complete+0x2d8>)
 8002300:	801a      	strh	r2, [r3, #0]
      break;
 8002302:	e04e      	b.n	80023a2 <gps_term_complete+0x316>
 8002304:	20000515 	.word	0x20000515
 8002308:	20000518 	.word	0x20000518
 800230c:	20000514 	.word	0x20000514
 8002310:	2000052a 	.word	0x2000052a
 8002314:	20000530 	.word	0x20000530
 8002318:	20000508 	.word	0x20000508
 800231c:	20000504 	.word	0x20000504
 8002320:	20000510 	.word	0x20000510
 8002324:	2000050c 	.word	0x2000050c
 8002328:	20000527 	.word	0x20000527
 800232c:	200004c4 	.word	0x200004c4
 8002330:	200004c0 	.word	0x200004c0
 8002334:	200004cc 	.word	0x200004cc
 8002338:	200004c8 	.word	0x200004c8
 800233c:	200004d4 	.word	0x200004d4
 8002340:	200004d0 	.word	0x200004d0
 8002344:	200004dc 	.word	0x200004dc
 8002348:	200004d8 	.word	0x200004d8
 800234c:	200004ec 	.word	0x200004ec
 8002350:	200004e8 	.word	0x200004e8
 8002354:	200004f4 	.word	0x200004f4
 8002358:	200004f0 	.word	0x200004f0
 800235c:	200004e4 	.word	0x200004e4
 8002360:	200004e0 	.word	0x200004e0
 8002364:	20000502 	.word	0x20000502
 8002368:	20000500 	.word	0x20000500
 800236c:	200004fc 	.word	0x200004fc
 8002370:	200004f8 	.word	0x200004f8
 8002374:	20000532 	.word	0x20000532
 8002378:	20000528 	.word	0x20000528
 800237c:	0800d5ac 	.word	0x0800d5ac
 8002380:	0800d5b4 	.word	0x0800d5b4
    case COMBINE(GPS_SENTENCE_GNGGA, 8): // HDOP
      _new_hdop = gps_parse_decimal();
 8002384:	f7ff fdbe 	bl	8001f04 <gps_parse_decimal>
 8002388:	4603      	mov	r3, r0
 800238a:	4a08      	ldr	r2, [pc, #32]	@ (80023ac <gps_term_complete+0x320>)
 800238c:	6013      	str	r3, [r2, #0]
//      break;
    case COMBINE(GPS_SENTENCE_GNGGA, 9): // Altitude (GPGGA)
      _new_altitude = gps_parse_decimal();
 800238e:	f7ff fdb9 	bl	8001f04 <gps_parse_decimal>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <gps_term_complete+0x324>)
 8002398:	601a      	str	r2, [r3, #0]
      break;
 800239a:	e002      	b.n	80023a2 <gps_term_complete+0x316>
      break;
 800239c:	bf00      	nop
 800239e:	e000      	b.n	80023a2 <gps_term_complete+0x316>
      break;
 80023a0:	bf00      	nop
  }
  }
  return false;
 80023a2:	2300      	movs	r3, #0

}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd90      	pop	{r4, r7, pc}
 80023ac:	200004fc 	.word	0x200004fc
 80023b0:	200004e4 	.word	0x200004e4

080023b4 <gpsatol>:

long gpsatol(const char *str)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  long ret = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  while (gpsisdigit(*str))
 80023c0:	e00c      	b.n	80023dc <gpsatol+0x28>
    ret = 10 * ret + *str++ - '0';
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4619      	mov	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	440b      	add	r3, r1
 80023d8:	3b30      	subs	r3, #48	@ 0x30
 80023da:	60fb      	str	r3, [r7, #12]
  while (gpsisdigit(*str))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fc89 	bl	8001cf8 <gpsisdigit>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ea      	bne.n	80023c2 <gpsatol+0xe>
  return ret;
 80023ec:	68fb      	ldr	r3, [r7, #12]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <gpsstrcmp>:

int gpsstrcmp(const char *str1, const char *str2)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]
  while (*str1 && *str1 == *str2)
 8002400:	e005      	b.n	800240e <gpsstrcmp+0x18>
    ++str1, ++str2;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3301      	adds	r3, #1
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	603b      	str	r3, [r7, #0]
  while (*str1 && *str1 == *str2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <gpsstrcmp+0x2c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d0ef      	beq.n	8002402 <gpsstrcmp+0xc>
  return *str1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	781b      	ldrb	r3, [r3, #0]
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <gps_get_position>:
  return directions[direction % 16];
}

// lat/long in hundred thousandths of a degree and age of fix in milliseconds
void gps_get_position(long *latitude, long *longitude, unsigned long *fix_age)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  if (latitude)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <gps_get_position+0x1a>
	*latitude = _latitude;
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <gps_get_position+0x58>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	601a      	str	r2, [r3, #0]
  if (longitude)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <gps_get_position+0x28>
	*longitude = _longitude;
 8002454:	4b0e      	ldr	r3, [pc, #56]	@ (8002490 <gps_get_position+0x5c>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	601a      	str	r2, [r3, #0]
  if (fix_age)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00f      	beq.n	8002482 <gps_get_position+0x4e>
	*fix_age = (_last_position_fix == GPS_INVALID_FIX_TIME) ?
 8002462:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <gps_get_position+0x60>)
 8002464:	681b      	ldr	r3, [r3, #0]
		GPS_INVALID_AGE : uptime() - _last_position_fix;
 8002466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246a:	d006      	beq.n	800247a <gps_get_position+0x46>
 800246c:	f7ff fc59 	bl	8001d22 <uptime>
 8002470:	4602      	mov	r2, r0
 8002472:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <gps_get_position+0x60>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	e001      	b.n	800247e <gps_get_position+0x4a>
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
	*fix_age = (_last_position_fix == GPS_INVALID_FIX_TIME) ?
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200004d0 	.word	0x200004d0
 8002490:	200004d8 	.word	0x200004d8
 8002494:	2000050c 	.word	0x2000050c

08002498 <gps_f_get_position>:
	*age = _last_time_fix == GPS_INVALID_FIX_TIME ?
		GPS_INVALID_AGE : uptime() - _last_time_fix;
}

void gps_f_get_position(float *latitude, float *longitude, unsigned long *fix_age)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  long lat, lon;
  gps_get_position(&lat, &lon, fix_age);
 80024a4:	f107 0110 	add.w	r1, r7, #16
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ffc0 	bl	8002434 <gps_get_position>
  *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 100000.0);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <gps_f_get_position+0x90>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d010      	beq.n	80024de <gps_f_get_position+0x46>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f838 	bl	8000534 <__aeabi_i2d>
 80024c4:	a316      	add	r3, pc, #88	@ (adr r3, 8002520 <gps_f_get_position+0x88>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f7fe f9c7 	bl	800085c <__aeabi_ddiv>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7fe fb6f 	bl	8000bb8 <__aeabi_d2f>
 80024da:	4603      	mov	r3, r0
 80024dc:	e000      	b.n	80024e0 <gps_f_get_position+0x48>
 80024de:	4b13      	ldr	r3, [pc, #76]	@ (800252c <gps_f_get_position+0x94>)
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	6013      	str	r3, [r2, #0]
  *longitude = lon == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 100000.0);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4a10      	ldr	r2, [pc, #64]	@ (8002528 <gps_f_get_position+0x90>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d010      	beq.n	800250e <gps_f_get_position+0x76>
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f820 	bl	8000534 <__aeabi_i2d>
 80024f4:	a30a      	add	r3, pc, #40	@ (adr r3, 8002520 <gps_f_get_position+0x88>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fe f9af 	bl	800085c <__aeabi_ddiv>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fb57 	bl	8000bb8 <__aeabi_d2f>
 800250a:	4603      	mov	r3, r0
 800250c:	e000      	b.n	8002510 <gps_f_get_position+0x78>
 800250e:	4b07      	ldr	r3, [pc, #28]	@ (800252c <gps_f_get_position+0x94>)
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	f3af 8000 	nop.w
 8002520:	00000000 	.word	0x00000000
 8002524:	40f86a00 	.word	0x40f86a00
 8002528:	3b9ac9ff 	.word	0x3b9ac9ff
 800252c:	447a0000 	.word	0x447a0000

08002530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002530:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002568 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002534:	f7ff fbce 	bl	8001cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002538:	480c      	ldr	r0, [pc, #48]	@ (800256c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800253a:	490d      	ldr	r1, [pc, #52]	@ (8002570 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800253c:	4a0d      	ldr	r2, [pc, #52]	@ (8002574 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002540:	e002      	b.n	8002548 <LoopCopyDataInit>

08002542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002546:	3304      	adds	r3, #4

08002548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800254c:	d3f9      	bcc.n	8002542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002550:	4c0a      	ldr	r4, [pc, #40]	@ (800257c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002554:	e001      	b.n	800255a <LoopFillZerobss>

08002556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002558:	3204      	adds	r2, #4

0800255a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800255c:	d3fb      	bcc.n	8002556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800255e:	f008 feb1 	bl	800b2c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002562:	f7fe fd35 	bl	8000fd0 <main>
  bx  lr    
 8002566:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002568:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800256c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002570:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8002574:	0800d9e8 	.word	0x0800d9e8
  ldr r2, =_sbss
 8002578:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 800257c:	20001a68 	.word	0x20001a68

08002580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002580:	e7fe      	b.n	8002580 <ADC_IRQHandler>
	...

08002584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002588:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <HAL_Init+0x40>)
 800258e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_Init+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <HAL_Init+0x40>)
 800259a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800259e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a0:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <HAL_Init+0x40>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a07      	ldr	r2, [pc, #28]	@ (80025c4 <HAL_Init+0x40>)
 80025a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 f94f 	bl	8002850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b2:	200f      	movs	r0, #15
 80025b4:	f000 f808 	bl	80025c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b8:	f7ff f978 	bl	80018ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00

080025c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d0:	4b12      	ldr	r3, [pc, #72]	@ (800261c <HAL_InitTick+0x54>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <HAL_InitTick+0x58>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025de:	fbb3 f3f1 	udiv	r3, r3, r1
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f967 	bl	80028ba <HAL_SYSTICK_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00e      	b.n	8002614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b0f      	cmp	r3, #15
 80025fa:	d80a      	bhi.n	8002612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025fc:	2200      	movs	r2, #0
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f000 f92f 	bl	8002866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002608:	4a06      	ldr	r2, [pc, #24]	@ (8002624 <HAL_InitTick+0x5c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000000 	.word	0x20000000
 8002620:	20000008 	.word	0x20000008
 8002624:	20000004 	.word	0x20000004

08002628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800262c:	4b06      	ldr	r3, [pc, #24]	@ (8002648 <HAL_IncTick+0x20>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	4b06      	ldr	r3, [pc, #24]	@ (800264c <HAL_IncTick+0x24>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4413      	add	r3, r2
 8002638:	4a04      	ldr	r2, [pc, #16]	@ (800264c <HAL_IncTick+0x24>)
 800263a:	6013      	str	r3, [r2, #0]
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000008 	.word	0x20000008
 800264c:	20000534 	.word	0x20000534

08002650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return uwTick;
 8002654:	4b03      	ldr	r3, [pc, #12]	@ (8002664 <HAL_GetTick+0x14>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000534 	.word	0x20000534

08002668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002670:	f7ff ffee 	bl	8002650 <HAL_GetTick>
 8002674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d005      	beq.n	800268e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002682:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <HAL_Delay+0x44>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4413      	add	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800268e:	bf00      	nop
 8002690:	f7ff ffde 	bl	8002650 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	429a      	cmp	r2, r3
 800269e:	d8f7      	bhi.n	8002690 <HAL_Delay+0x28>
  {
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000008 	.word	0x20000008

080026b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c0:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026cc:	4013      	ands	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e2:	4a04      	ldr	r2, [pc, #16]	@ (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	60d3      	str	r3, [r2, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <__NVIC_GetPriorityGrouping+0x18>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	f003 0307 	and.w	r3, r3, #7
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	2b00      	cmp	r3, #0
 8002724:	db0b      	blt.n	800273e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4907      	ldr	r1, [pc, #28]	@ (800274c <__NVIC_EnableIRQ+0x38>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2001      	movs	r0, #1
 8002736:	fa00 f202 	lsl.w	r2, r0, r2
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000e100 	.word	0xe000e100

08002750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	@ (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	@ (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	@ 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf28      	it	cs
 80027c2:	2304      	movcs	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d902      	bls.n	80027d4 <NVIC_EncodePriority+0x30>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	e000      	b.n	80027d6 <NVIC_EncodePriority+0x32>
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4313      	orrs	r3, r2
         );
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	@ 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800281c:	d301      	bcc.n	8002822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281e:	2301      	movs	r3, #1
 8002820:	e00f      	b.n	8002842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002822:	4a0a      	ldr	r2, [pc, #40]	@ (800284c <SysTick_Config+0x40>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282a:	210f      	movs	r1, #15
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	f7ff ff8e 	bl	8002750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002834:	4b05      	ldr	r3, [pc, #20]	@ (800284c <SysTick_Config+0x40>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283a:	4b04      	ldr	r3, [pc, #16]	@ (800284c <SysTick_Config+0x40>)
 800283c:	2207      	movs	r2, #7
 800283e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	e000e010 	.word	0xe000e010

08002850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff29 	bl	80026b0 <__NVIC_SetPriorityGrouping>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002878:	f7ff ff3e 	bl	80026f8 <__NVIC_GetPriorityGrouping>
 800287c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f7ff ff8e 	bl	80027a4 <NVIC_EncodePriority>
 8002888:	4602      	mov	r2, r0
 800288a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff5d 	bl	8002750 <__NVIC_SetPriority>
}
 8002896:	bf00      	nop
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff31 	bl	8002714 <__NVIC_EnableIRQ>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff ffa2 	bl	800280c <SysTick_Config>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff feb6 	bl	8002650 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e099      	b.n	8002a24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002910:	e00f      	b.n	8002932 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002912:	f7ff fe9d 	bl	8002650 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b05      	cmp	r3, #5
 800291e:	d908      	bls.n	8002932 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2220      	movs	r2, #32
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2203      	movs	r2, #3
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e078      	b.n	8002a24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e8      	bne.n	8002912 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4b38      	ldr	r3, [pc, #224]	@ (8002a2c <HAL_DMA_Init+0x158>)
 800294c:	4013      	ands	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800295e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	2b04      	cmp	r3, #4
 800298a:	d107      	bne.n	800299c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002994:	4313      	orrs	r3, r2
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f023 0307 	bic.w	r3, r3, #7
 80029b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d117      	bne.n	80029f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00e      	beq.n	80029f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fb01 	bl	8002fe0 <DMA_CheckFifoParam>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2240      	movs	r2, #64	@ 0x40
 80029e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80029f2:	2301      	movs	r3, #1
 80029f4:	e016      	b.n	8002a24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fab8 	bl	8002f74 <DMA_CalcBaseAndBitshift>
 8002a04:	4603      	mov	r3, r0
 8002a06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0c:	223f      	movs	r2, #63	@ 0x3f
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	f010803f 	.word	0xf010803f

08002a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_DMA_Start_IT+0x26>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e040      	b.n	8002ad8 <HAL_DMA_Start_IT+0xa8>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d12f      	bne.n	8002aca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fa4a 	bl	8002f18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a88:	223f      	movs	r2, #63	@ 0x3f
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0216 	orr.w	r2, r2, #22
 8002a9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d007      	beq.n	8002ab8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0208 	orr.w	r2, r2, #8
 8002ab6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e005      	b.n	8002ad6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aee:	f7ff fdaf 	bl	8002650 <HAL_GetTick>
 8002af2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d008      	beq.n	8002b12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2280      	movs	r2, #128	@ 0x80
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e052      	b.n	8002bb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0216 	bic.w	r2, r2, #22
 8002b20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <HAL_DMA_Abort+0x62>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0208 	bic.w	r2, r2, #8
 8002b50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b62:	e013      	b.n	8002b8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b64:	f7ff fd74 	bl	8002650 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d90c      	bls.n	8002b8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e015      	b.n	8002bb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1e4      	bne.n	8002b64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9e:	223f      	movs	r2, #63	@ 0x3f
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d004      	beq.n	8002bde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2280      	movs	r2, #128	@ 0x80
 8002bd8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e00c      	b.n	8002bf8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2205      	movs	r2, #5
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c10:	4b8e      	ldr	r3, [pc, #568]	@ (8002e4c <HAL_DMA_IRQHandler+0x248>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a8e      	ldr	r2, [pc, #568]	@ (8002e50 <HAL_DMA_IRQHandler+0x24c>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	0a9b      	lsrs	r3, r3, #10
 8002c1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2e:	2208      	movs	r2, #8
 8002c30:	409a      	lsls	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01a      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0204 	bic.w	r2, r2, #4
 8002c56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c68:	f043 0201 	orr.w	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c74:	2201      	movs	r2, #1
 8002c76:	409a      	lsls	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d012      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c92:	2201      	movs	r2, #1
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9e:	f043 0202 	orr.w	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002caa:	2204      	movs	r2, #4
 8002cac:	409a      	lsls	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d012      	beq.n	8002cdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc8:	2204      	movs	r2, #4
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	f043 0204 	orr.w	r2, r3, #4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d043      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d03c      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfe:	2210      	movs	r2, #16
 8002d00:	409a      	lsls	r2, r3
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d018      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d108      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d024      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
 8002d32:	e01f      	b.n	8002d74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01b      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
 8002d44:	e016      	b.n	8002d74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d107      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0208 	bic.w	r2, r2, #8
 8002d62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d78:	2220      	movs	r2, #32
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 808f 	beq.w	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 8087 	beq.w	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b05      	cmp	r3, #5
 8002dac:	d136      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0216 	bic.w	r2, r2, #22
 8002dbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d103      	bne.n	8002dde <HAL_DMA_IRQHandler+0x1da>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0208 	bic.w	r2, r2, #8
 8002dec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df2:	223f      	movs	r2, #63	@ 0x3f
 8002df4:	409a      	lsls	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d07e      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
        }
        return;
 8002e1a:	e079      	b.n	8002f10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01d      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10d      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d031      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
 8002e48:	e02c      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
 8002e4a:	bf00      	nop
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d023      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
 8002e64:	e01e      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10f      	bne.n	8002e94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0210 	bic.w	r2, r2, #16
 8002e82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d032      	beq.n	8002f12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d022      	beq.n	8002efe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2205      	movs	r2, #5
 8002ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d307      	bcc.n	8002eec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f2      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x2cc>
 8002eea:	e000      	b.n	8002eee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002eec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
 8002f0e:	e000      	b.n	8002f12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f10:	bf00      	nop
    }
  }
}
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b40      	cmp	r3, #64	@ 0x40
 8002f44:	d108      	bne.n	8002f58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f56:	e007      	b.n	8002f68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	60da      	str	r2, [r3, #12]
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	3b10      	subs	r3, #16
 8002f84:	4a14      	ldr	r2, [pc, #80]	@ (8002fd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f8e:	4a13      	ldr	r2, [pc, #76]	@ (8002fdc <DMA_CalcBaseAndBitshift+0x68>)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d909      	bls.n	8002fb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	1d1a      	adds	r2, r3, #4
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fb4:	e007      	b.n	8002fc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fbe:	f023 0303 	bic.w	r3, r3, #3
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	aaaaaaab 	.word	0xaaaaaaab
 8002fdc:	0800d65c 	.word	0x0800d65c

08002fe0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d11f      	bne.n	800303a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d856      	bhi.n	80030ae <DMA_CheckFifoParam+0xce>
 8003000:	a201      	add	r2, pc, #4	@ (adr r2, 8003008 <DMA_CheckFifoParam+0x28>)
 8003002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003006:	bf00      	nop
 8003008:	08003019 	.word	0x08003019
 800300c:	0800302b 	.word	0x0800302b
 8003010:	08003019 	.word	0x08003019
 8003014:	080030af 	.word	0x080030af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d046      	beq.n	80030b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003028:	e043      	b.n	80030b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003032:	d140      	bne.n	80030b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003038:	e03d      	b.n	80030b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003042:	d121      	bne.n	8003088 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d837      	bhi.n	80030ba <DMA_CheckFifoParam+0xda>
 800304a:	a201      	add	r2, pc, #4	@ (adr r2, 8003050 <DMA_CheckFifoParam+0x70>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	08003061 	.word	0x08003061
 8003054:	08003067 	.word	0x08003067
 8003058:	08003061 	.word	0x08003061
 800305c:	08003079 	.word	0x08003079
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
      break;
 8003064:	e030      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d025      	beq.n	80030be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003076:	e022      	b.n	80030be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003080:	d11f      	bne.n	80030c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003086:	e01c      	b.n	80030c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d903      	bls.n	8003096 <DMA_CheckFifoParam+0xb6>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d003      	beq.n	800309c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003094:	e018      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
      break;
 800309a:	e015      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00e      	beq.n	80030c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
      break;
 80030ac:	e00b      	b.n	80030c6 <DMA_CheckFifoParam+0xe6>
      break;
 80030ae:	bf00      	nop
 80030b0:	e00a      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
 80030b4:	e008      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      break;
 80030b6:	bf00      	nop
 80030b8:	e006      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ba:	bf00      	nop
 80030bc:	e004      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      break;
 80030be:	bf00      	nop
 80030c0:	e002      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <DMA_CheckFifoParam+0xe8>
      break;
 80030c6:	bf00      	nop
    }
  } 
  
  return status; 
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop

080030d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	@ 0x24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	e159      	b.n	80033a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030f4:	2201      	movs	r2, #1
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4013      	ands	r3, r2
 8003106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	429a      	cmp	r2, r3
 800310e:	f040 8148 	bne.w	80033a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d005      	beq.n	800312a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003126:	2b02      	cmp	r3, #2
 8003128:	d130      	bne.n	800318c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	2203      	movs	r2, #3
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003160:	2201      	movs	r2, #1
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 0201 	and.w	r2, r3, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b03      	cmp	r3, #3
 8003196:	d017      	beq.n	80031c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	2203      	movs	r2, #3
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d123      	bne.n	800321c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	08da      	lsrs	r2, r3, #3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3208      	adds	r2, #8
 80031dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	220f      	movs	r2, #15
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	08da      	lsrs	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3208      	adds	r2, #8
 8003216:	69b9      	ldr	r1, [r7, #24]
 8003218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	2203      	movs	r2, #3
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0203 	and.w	r2, r3, #3
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80a2 	beq.w	80033a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	4b57      	ldr	r3, [pc, #348]	@ (80033c0 <HAL_GPIO_Init+0x2e8>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	4a56      	ldr	r2, [pc, #344]	@ (80033c0 <HAL_GPIO_Init+0x2e8>)
 8003268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800326c:	6453      	str	r3, [r2, #68]	@ 0x44
 800326e:	4b54      	ldr	r3, [pc, #336]	@ (80033c0 <HAL_GPIO_Init+0x2e8>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800327a:	4a52      	ldr	r2, [pc, #328]	@ (80033c4 <HAL_GPIO_Init+0x2ec>)
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	089b      	lsrs	r3, r3, #2
 8003280:	3302      	adds	r3, #2
 8003282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	220f      	movs	r2, #15
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a49      	ldr	r2, [pc, #292]	@ (80033c8 <HAL_GPIO_Init+0x2f0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d019      	beq.n	80032da <HAL_GPIO_Init+0x202>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a48      	ldr	r2, [pc, #288]	@ (80033cc <HAL_GPIO_Init+0x2f4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <HAL_GPIO_Init+0x1fe>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a47      	ldr	r2, [pc, #284]	@ (80033d0 <HAL_GPIO_Init+0x2f8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00d      	beq.n	80032d2 <HAL_GPIO_Init+0x1fa>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a46      	ldr	r2, [pc, #280]	@ (80033d4 <HAL_GPIO_Init+0x2fc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <HAL_GPIO_Init+0x1f6>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a45      	ldr	r2, [pc, #276]	@ (80033d8 <HAL_GPIO_Init+0x300>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <HAL_GPIO_Init+0x1f2>
 80032c6:	2304      	movs	r3, #4
 80032c8:	e008      	b.n	80032dc <HAL_GPIO_Init+0x204>
 80032ca:	2307      	movs	r3, #7
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x204>
 80032ce:	2303      	movs	r3, #3
 80032d0:	e004      	b.n	80032dc <HAL_GPIO_Init+0x204>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e002      	b.n	80032dc <HAL_GPIO_Init+0x204>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_GPIO_Init+0x204>
 80032da:	2300      	movs	r3, #0
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	f002 0203 	and.w	r2, r2, #3
 80032e2:	0092      	lsls	r2, r2, #2
 80032e4:	4093      	lsls	r3, r2
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032ec:	4935      	ldr	r1, [pc, #212]	@ (80033c4 <HAL_GPIO_Init+0x2ec>)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	3302      	adds	r3, #2
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032fa:	4b38      	ldr	r3, [pc, #224]	@ (80033dc <HAL_GPIO_Init+0x304>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800331e:	4a2f      	ldr	r2, [pc, #188]	@ (80033dc <HAL_GPIO_Init+0x304>)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003324:	4b2d      	ldr	r3, [pc, #180]	@ (80033dc <HAL_GPIO_Init+0x304>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003348:	4a24      	ldr	r2, [pc, #144]	@ (80033dc <HAL_GPIO_Init+0x304>)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800334e:	4b23      	ldr	r3, [pc, #140]	@ (80033dc <HAL_GPIO_Init+0x304>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003372:	4a1a      	ldr	r2, [pc, #104]	@ (80033dc <HAL_GPIO_Init+0x304>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003378:	4b18      	ldr	r3, [pc, #96]	@ (80033dc <HAL_GPIO_Init+0x304>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800339c:	4a0f      	ldr	r2, [pc, #60]	@ (80033dc <HAL_GPIO_Init+0x304>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	f67f aea2 	bls.w	80030f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	3724      	adds	r7, #36	@ 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40013800 	.word	0x40013800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	40020400 	.word	0x40020400
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40013c00 	.word	0x40013c00

080033e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	807b      	strh	r3, [r7, #2]
 80033ec:	4613      	mov	r3, r2
 80033ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f0:	787b      	ldrb	r3, [r7, #1]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f6:	887a      	ldrh	r2, [r7, #2]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033fc:	e003      	b.n	8003406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033fe:	887b      	ldrh	r3, [r7, #2]
 8003400:	041a      	lsls	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	619a      	str	r2, [r3, #24]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af02      	add	r7, sp, #8
 8003418:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e101      	b.n	8003628 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f006 fdae 	bl	8009fa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2203      	movs	r2, #3
 8003448:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003452:	d102      	bne.n	800345a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f003 f9a7 	bl	80067b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	7c1a      	ldrb	r2, [r3, #16]
 800346c:	f88d 2000 	strb.w	r2, [sp]
 8003470:	3304      	adds	r3, #4
 8003472:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003474:	f003 f886 	bl	8006584 <USB_CoreInit>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e0ce      	b.n	8003628 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f003 f99f 	bl	80067d4 <USB_SetCurrentMode>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0bf      	b.n	8003628 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a8:	2300      	movs	r3, #0
 80034aa:	73fb      	strb	r3, [r7, #15]
 80034ac:	e04a      	b.n	8003544 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034ae:	7bfa      	ldrb	r2, [r7, #15]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	3315      	adds	r3, #21
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034c2:	7bfa      	ldrb	r2, [r7, #15]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3314      	adds	r3, #20
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034d6:	7bfa      	ldrb	r2, [r7, #15]
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	b298      	uxth	r0, r3
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	332e      	adds	r3, #46	@ 0x2e
 80034ea:	4602      	mov	r2, r0
 80034ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034ee:	7bfa      	ldrb	r2, [r7, #15]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	3318      	adds	r3, #24
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003502:	7bfa      	ldrb	r2, [r7, #15]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	331c      	adds	r3, #28
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	3320      	adds	r3, #32
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800352a:	7bfa      	ldrb	r2, [r7, #15]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3324      	adds	r3, #36	@ 0x24
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	3301      	adds	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	791b      	ldrb	r3, [r3, #4]
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	429a      	cmp	r2, r3
 800354c:	d3af      	bcc.n	80034ae <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
 8003552:	e044      	b.n	80035de <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	3301      	adds	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	791b      	ldrb	r3, [r3, #4]
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d3b5      	bcc.n	8003554 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	7c1a      	ldrb	r2, [r3, #16]
 80035f0:	f88d 2000 	strb.w	r2, [sp]
 80035f4:	3304      	adds	r3, #4
 80035f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035f8:	f003 f938 	bl	800686c <USB_DevInit>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e00c      	b.n	8003628 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f004 f97c 	bl	800791e <USB_DevDisconnect>

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_PCD_Start+0x1c>
 8003648:	2302      	movs	r3, #2
 800364a:	e022      	b.n	8003692 <HAL_PCD_Start+0x62>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d009      	beq.n	8003674 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003664:	2b01      	cmp	r3, #1
 8003666:	d105      	bne.n	8003674 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f003 f889 	bl	8006790 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f004 f92a 	bl	80078dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800369a:	b590      	push	{r4, r7, lr}
 800369c:	b08d      	sub	sp, #52	@ 0x34
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f004 f9e8 	bl	8007a86 <USB_GetMode>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f040 848c 	bne.w	8003fd6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 f94c 	bl	8007960 <USB_ReadInterrupts>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8482 	beq.w	8003fd4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 f939 	bl	8007960 <USB_ReadInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d107      	bne.n	8003708 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f002 0202 	and.w	r2, r2, #2
 8003706:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f004 f927 	bl	8007960 <USB_ReadInterrupts>
 8003712:	4603      	mov	r3, r0
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b10      	cmp	r3, #16
 800371a:	d161      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0210 	bic.w	r2, r2, #16
 800372a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f003 020f 	and.w	r2, r3, #15
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	4413      	add	r3, r2
 8003748:	3304      	adds	r3, #4
 800374a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	0c5b      	lsrs	r3, r3, #17
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	2b02      	cmp	r3, #2
 8003756:	d124      	bne.n	80037a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d035      	beq.n	80037d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800376e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003772:	b29b      	uxth	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	6a38      	ldr	r0, [r7, #32]
 8003778:	f003 ff5e 	bl	8007638 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003788:	441a      	add	r2, r3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800379a:	441a      	add	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	615a      	str	r2, [r3, #20]
 80037a0:	e016      	b.n	80037d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	0c5b      	lsrs	r3, r3, #17
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d110      	bne.n	80037d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037b4:	2208      	movs	r2, #8
 80037b6:	4619      	mov	r1, r3
 80037b8:	6a38      	ldr	r0, [r7, #32]
 80037ba:	f003 ff3d 	bl	8007638 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ca:	441a      	add	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0210 	orr.w	r2, r2, #16
 80037de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f004 f8bb 	bl	8007960 <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037f4:	f040 80a7 	bne.w	8003946 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f004 f8c0 	bl	8007986 <USB_ReadDevAllOutEpInterrupt>
 8003806:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003808:	e099      	b.n	800393e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800380a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 808e 	beq.w	8003932 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f004 f8e4 	bl	80079ee <USB_ReadDevOutEPInterrupt>
 8003826:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00c      	beq.n	800384c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383e:	461a      	mov	r2, r3
 8003840:	2301      	movs	r3, #1
 8003842:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003844:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fea2 	bl	8004590 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003862:	461a      	mov	r2, r3
 8003864:	2308      	movs	r3, #8
 8003866:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003868:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 ff78 	bl	8004760 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003886:	461a      	mov	r2, r3
 8003888:	2310      	movs	r3, #16
 800388a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d030      	beq.n	80038f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389e:	2b80      	cmp	r3, #128	@ 0x80
 80038a0:	d109      	bne.n	80038b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	3304      	adds	r3, #4
 80038ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	78db      	ldrb	r3, [r3, #3]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d108      	bne.n	80038e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2200      	movs	r2, #0
 80038d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	4619      	mov	r1, r3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f006 fc59 	bl	800a198 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f2:	461a      	mov	r2, r3
 80038f4:	2302      	movs	r3, #2
 80038f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390e:	461a      	mov	r2, r3
 8003910:	2320      	movs	r3, #32
 8003912:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800392a:	461a      	mov	r2, r3
 800392c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003930:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	3301      	adds	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800393e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	f47f af62 	bne.w	800380a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f004 f808 	bl	8007960 <USB_ReadInterrupts>
 8003950:	4603      	mov	r3, r0
 8003952:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003956:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800395a:	f040 80db 	bne.w	8003b14 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f004 f829 	bl	80079ba <USB_ReadDevAllInEpInterrupt>
 8003968:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800396e:	e0cd      	b.n	8003b0c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80c2 	beq.w	8003b00 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f004 f84f 	bl	8007a2a <USB_ReadDevInEPInterrupt>
 800398c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d057      	beq.n	8003a48 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	2201      	movs	r2, #1
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69f9      	ldr	r1, [r7, #28]
 80039b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039b8:	4013      	ands	r3, r2
 80039ba:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c8:	461a      	mov	r2, r3
 80039ca:	2301      	movs	r3, #1
 80039cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	799b      	ldrb	r3, [r3, #6]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d132      	bne.n	8003a3c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	3320      	adds	r3, #32
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4403      	add	r3, r0
 80039f6:	331c      	adds	r3, #28
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4419      	add	r1, r3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4403      	add	r3, r0
 8003a0a:	3320      	adds	r3, #32
 8003a0c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d113      	bne.n	8003a3c <HAL_PCD_IRQHandler+0x3a2>
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	3324      	adds	r3, #36	@ 0x24
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d108      	bne.n	8003a3c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a34:	461a      	mov	r2, r3
 8003a36:	2101      	movs	r1, #1
 8003a38:	f004 f856 	bl	8007ae8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f006 fb2d 	bl	800a0a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2308      	movs	r3, #8
 8003a62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a96:	461a      	mov	r2, r3
 8003a98:	2340      	movs	r3, #64	@ 0x40
 8003a9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d023      	beq.n	8003aee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003aa6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003aa8:	6a38      	ldr	r0, [r7, #32]
 8003aaa:	f003 f843 	bl	8006b34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	3310      	adds	r3, #16
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	3304      	adds	r3, #4
 8003ac0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	78db      	ldrb	r3, [r3, #3]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d108      	bne.n	8003adc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f006 fb70 	bl	800a1bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2302      	movs	r3, #2
 8003aec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003af8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fcbb 	bl	8004476 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	3301      	adds	r3, #1
 8003b04:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f47f af2e 	bne.w	8003970 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 ff21 	bl	8007960 <USB_ReadInterrupts>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b28:	d122      	bne.n	8003b70 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d108      	bne.n	8003b5a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b50:	2100      	movs	r1, #0
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fea2 	bl	800489c <HAL_PCDEx_LPM_Callback>
 8003b58:	e002      	b.n	8003b60 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f006 fb0e 	bl	800a17c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f003 fef3 	bl	8007960 <USB_ReadInterrupts>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b84:	d112      	bne.n	8003bac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d102      	bne.n	8003b9c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f006 faca 	bl	800a130 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003baa:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f003 fed5 	bl	8007960 <USB_ReadInterrupts>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc0:	f040 80b7 	bne.w	8003d32 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2110      	movs	r1, #16
 8003bde:	4618      	mov	r0, r3
 8003be0:	f002 ffa8 	bl	8006b34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003be8:	e046      	b.n	8003c78 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003bfc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c30:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c42:	0151      	lsls	r1, r2, #5
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	440a      	add	r2, r1
 8003c48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c62:	0151      	lsls	r1, r2, #5
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	440a      	add	r2, r1
 8003c68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c70:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c74:	3301      	adds	r3, #1
 8003c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	791b      	ldrb	r3, [r3, #4]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d3b2      	bcc.n	8003bea <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	69fa      	ldr	r2, [r7, #28]
 8003c8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c92:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003c96:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	7bdb      	ldrb	r3, [r3, #15]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d016      	beq.n	8003cce <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cb0:	f043 030b 	orr.w	r3, r3, #11
 8003cb4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cc6:	f043 030b 	orr.w	r3, r3, #11
 8003cca:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ccc:	e015      	b.n	8003cfa <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cdc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ce0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003ce4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cf4:	f043 030b 	orr.w	r3, r3, #11
 8003cf8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d08:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	f003 fee3 	bl	8007ae8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f003 fe12 	bl	8007960 <USB_ReadInterrupts>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d46:	d123      	bne.n	8003d90 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f003 fea8 	bl	8007aa2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f002 ff65 	bl	8006c26 <USB_GetDevSpeed>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	461a      	mov	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681c      	ldr	r4, [r3, #0]
 8003d68:	f001 f9c8 	bl	80050fc <HAL_RCC_GetHCLKFreq>
 8003d6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d72:	461a      	mov	r2, r3
 8003d74:	4620      	mov	r0, r4
 8003d76:	f002 fc69 	bl	800664c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f006 f9b9 	bl	800a0f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f003 fde3 	bl	8007960 <USB_ReadInterrupts>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d10a      	bne.n	8003dba <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f006 f996 	bl	800a0d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f002 0208 	and.w	r2, r2, #8
 8003db8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f003 fdce 	bl	8007960 <USB_ReadInterrupts>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dca:	2b80      	cmp	r3, #128	@ 0x80
 8003dcc:	d123      	bne.n	8003e16 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dda:	2301      	movs	r3, #1
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dde:	e014      	b.n	8003e0a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de4:	4613      	mov	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fb08 	bl	8004414 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e06:	3301      	adds	r3, #1
 8003e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	791b      	ldrb	r3, [r3, #4]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d3e4      	bcc.n	8003de0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f003 fda0 	bl	8007960 <USB_ReadInterrupts>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e2a:	d13c      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e30:	e02b      	b.n	8003e8a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	3318      	adds	r3, #24
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d115      	bne.n	8003e84 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e58:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	da12      	bge.n	8003e84 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3317      	adds	r3, #23
 8003e6e:	2201      	movs	r2, #1
 8003e70:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fac8 	bl	8004414 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e86:	3301      	adds	r3, #1
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	791b      	ldrb	r3, [r3, #4]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d3cd      	bcc.n	8003e32 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f003 fd58 	bl	8007960 <USB_ReadInterrupts>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003eba:	d156      	bne.n	8003f6a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec0:	e045      	b.n	8003f4e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d12e      	bne.n	8003f48 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003eea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	da2b      	bge.n	8003f48 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003efc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d121      	bne.n	8003f48 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f16:	2201      	movs	r2, #1
 8003f18:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f44:	6053      	str	r3, [r2, #4]
            break;
 8003f46:	e008      	b.n	8003f5a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	791b      	ldrb	r3, [r3, #4]
 8003f52:	461a      	mov	r2, r3
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d3b3      	bcc.n	8003ec2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f003 fcf6 	bl	8007960 <USB_ReadInterrupts>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7e:	d10a      	bne.n	8003f96 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f006 f92d 	bl	800a1e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003f94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f003 fce0 	bl	8007960 <USB_ReadInterrupts>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d115      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f006 f91d 	bl	800a1fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	e000      	b.n	8003fd6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003fd4:	bf00      	nop
    }
  }
}
 8003fd6:	3734      	adds	r7, #52	@ 0x34
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd90      	pop	{r4, r7, pc}

08003fdc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_PCD_SetAddress+0x1a>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e012      	b.n	800401c <HAL_PCD_SetAddress+0x40>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	4611      	mov	r1, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f003 fc3f 	bl	8007890 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	461a      	mov	r2, r3
 8004032:	4603      	mov	r3, r0
 8004034:	70fb      	strb	r3, [r7, #3]
 8004036:	460b      	mov	r3, r1
 8004038:	803b      	strh	r3, [r7, #0]
 800403a:	4613      	mov	r3, r2
 800403c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004046:	2b00      	cmp	r3, #0
 8004048:	da0f      	bge.n	800406a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	f003 020f 	and.w	r2, r3, #15
 8004050:	4613      	mov	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	3310      	adds	r3, #16
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4413      	add	r3, r2
 800405e:	3304      	adds	r3, #4
 8004060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	705a      	strb	r2, [r3, #1]
 8004068:	e00f      	b.n	800408a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	f003 020f 	and.w	r2, r3, #15
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	4413      	add	r3, r2
 8004080:	3304      	adds	r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	b2da      	uxtb	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004096:	883a      	ldrh	r2, [r7, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	78ba      	ldrb	r2, [r7, #2]
 80040a0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	785b      	ldrb	r3, [r3, #1]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d004      	beq.n	80040b4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040b4:	78bb      	ldrb	r3, [r7, #2]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d102      	bne.n	80040c0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_PCD_EP_Open+0xaa>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e00e      	b.n	80040ec <HAL_PCD_EP_Open+0xc8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	4618      	mov	r0, r3
 80040de:	f002 fdc7 	bl	8006c70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80040ea:	7afb      	ldrb	r3, [r7, #11]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004104:	2b00      	cmp	r3, #0
 8004106:	da0f      	bge.n	8004128 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	f003 020f 	and.w	r2, r3, #15
 800410e:	4613      	mov	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	3310      	adds	r3, #16
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	3304      	adds	r3, #4
 800411e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	705a      	strb	r2, [r3, #1]
 8004126:	e00f      	b.n	8004148 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_PCD_EP_Close+0x6e>
 800415e:	2302      	movs	r3, #2
 8004160:	e00e      	b.n	8004180 <HAL_PCD_EP_Close+0x8c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68f9      	ldr	r1, [r7, #12]
 8004170:	4618      	mov	r0, r3
 8004172:	f002 fe05 	bl	8006d80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	460b      	mov	r3, r1
 8004196:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004198:	7afb      	ldrb	r3, [r7, #11]
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	4613      	mov	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	3304      	adds	r3, #4
 80041b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2200      	movs	r2, #0
 80041c2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2200      	movs	r2, #0
 80041c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ca:	7afb      	ldrb	r3, [r7, #11]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	799b      	ldrb	r3, [r3, #6]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d102      	bne.n	80041e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	799b      	ldrb	r3, [r3, #6]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6979      	ldr	r1, [r7, #20]
 80041f0:	f002 fea2 	bl	8006f38 <USB_EPStartXfer>

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	460b      	mov	r3, r1
 8004208:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	f003 020f 	and.w	r2, r3, #15
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004220:	681b      	ldr	r3, [r3, #0]
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b086      	sub	sp, #24
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	460b      	mov	r3, r1
 800423c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800423e:	7afb      	ldrb	r3, [r7, #11]
 8004240:	f003 020f 	and.w	r2, r3, #15
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	3310      	adds	r3, #16
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4413      	add	r3, r2
 8004252:	3304      	adds	r3, #4
 8004254:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2200      	movs	r2, #0
 8004266:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2201      	movs	r2, #1
 800426c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800426e:	7afb      	ldrb	r3, [r7, #11]
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	b2da      	uxtb	r2, r3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	799b      	ldrb	r3, [r3, #6]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d102      	bne.n	8004288 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	799b      	ldrb	r3, [r3, #6]
 8004290:	461a      	mov	r2, r3
 8004292:	6979      	ldr	r1, [r7, #20]
 8004294:	f002 fe50 	bl	8006f38 <USB_EPStartXfer>

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	460b      	mov	r3, r1
 80042ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	7912      	ldrb	r2, [r2, #4]
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e04f      	b.n	8004360 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	da0f      	bge.n	80042e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	f003 020f 	and.w	r2, r3, #15
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	3310      	adds	r3, #16
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	4413      	add	r3, r2
 80042dc:	3304      	adds	r3, #4
 80042de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	705a      	strb	r2, [r3, #1]
 80042e6:	e00d      	b.n	8004304 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	4613      	mov	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4413      	add	r3, r2
 80042fa:	3304      	adds	r3, #4
 80042fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_PCD_EP_SetStall+0x82>
 8004320:	2302      	movs	r3, #2
 8004322:	e01d      	b.n	8004360 <HAL_PCD_EP_SetStall+0xbe>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	4618      	mov	r0, r3
 8004334:	f003 f9d8 	bl	80076e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	7999      	ldrb	r1, [r3, #6]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004350:	461a      	mov	r2, r3
 8004352:	f003 fbc9 	bl	8007ae8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	7912      	ldrb	r2, [r2, #4]
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e042      	b.n	800440c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004386:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800438a:	2b00      	cmp	r3, #0
 800438c:	da0f      	bge.n	80043ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	f003 020f 	and.w	r2, r3, #15
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	3310      	adds	r3, #16
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4413      	add	r3, r2
 80043a2:	3304      	adds	r3, #4
 80043a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	705a      	strb	r2, [r3, #1]
 80043ac:	e00f      	b.n	80043ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	4413      	add	r3, r2
 80043c4:	3304      	adds	r3, #4
 80043c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_PCD_EP_ClrStall+0x86>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e00e      	b.n	800440c <HAL_PCD_EP_ClrStall+0xa4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68f9      	ldr	r1, [r7, #12]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f003 f9e1 	bl	80077c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004424:	2b00      	cmp	r3, #0
 8004426:	da0c      	bge.n	8004442 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	f003 020f 	and.w	r2, r3, #15
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	3310      	adds	r3, #16
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4413      	add	r3, r2
 800443c:	3304      	adds	r3, #4
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	e00c      	b.n	800445c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	f003 020f 	and.w	r2, r3, #15
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	4413      	add	r3, r2
 8004458:	3304      	adds	r3, #4
 800445a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68f9      	ldr	r1, [r7, #12]
 8004462:	4618      	mov	r0, r3
 8004464:	f003 f800 	bl	8007468 <USB_EPStopXfer>
 8004468:	4603      	mov	r3, r0
 800446a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800446c:	7afb      	ldrb	r3, [r7, #11]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b08a      	sub	sp, #40	@ 0x28
 800447a:	af02      	add	r7, sp, #8
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	3310      	adds	r3, #16
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4413      	add	r3, r2
 800449a:	3304      	adds	r3, #4
 800449c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d901      	bls.n	80044ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e06b      	b.n	8004586 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d902      	bls.n	80044ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3303      	adds	r3, #3
 80044ce:	089b      	lsrs	r3, r3, #2
 80044d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044d2:	e02a      	b.n	800452a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d902      	bls.n	80044f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	3303      	adds	r3, #3
 80044f4:	089b      	lsrs	r3, r3, #2
 80044f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68d9      	ldr	r1, [r3, #12]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	4603      	mov	r3, r0
 800450c:	6978      	ldr	r0, [r7, #20]
 800450e:	f003 f855 	bl	80075bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	441a      	add	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	441a      	add	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	429a      	cmp	r2, r3
 800453e:	d809      	bhi.n	8004554 <PCD_WriteEmptyTxFifo+0xde>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	695a      	ldr	r2, [r3, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004548:	429a      	cmp	r2, r3
 800454a:	d203      	bcs.n	8004554 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1bf      	bne.n	80044d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	429a      	cmp	r2, r3
 800455e:	d811      	bhi.n	8004584 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	2201      	movs	r2, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	43db      	mvns	r3, r3
 800457a:	6939      	ldr	r1, [r7, #16]
 800457c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004580:	4013      	ands	r3, r2
 8004582:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	333c      	adds	r3, #60	@ 0x3c
 80045a8:	3304      	adds	r3, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	799b      	ldrb	r3, [r3, #6]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d17b      	bne.n	80046be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d015      	beq.n	80045fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	4a61      	ldr	r2, [pc, #388]	@ (8004758 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	f240 80b9 	bls.w	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80b3 	beq.w	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f2:	461a      	mov	r2, r3
 80045f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f8:	6093      	str	r3, [r2, #8]
 80045fa:	e0a7      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004612:	461a      	mov	r2, r3
 8004614:	2320      	movs	r3, #32
 8004616:	6093      	str	r3, [r2, #8]
 8004618:	e098      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004620:	2b00      	cmp	r3, #0
 8004622:	f040 8093 	bne.w	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	4a4b      	ldr	r2, [pc, #300]	@ (8004758 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d90f      	bls.n	800464e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004644:	461a      	mov	r2, r3
 8004646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800464a:	6093      	str	r3, [r2, #8]
 800464c:	e07e      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4413      	add	r3, r2
 8004660:	3304      	adds	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a1a      	ldr	r2, [r3, #32]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	0159      	lsls	r1, r3, #5
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	440b      	add	r3, r1
 8004670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467a:	1ad2      	subs	r2, r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d114      	bne.n	80046b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004698:	461a      	mov	r2, r3
 800469a:	2101      	movs	r1, #1
 800469c:	f003 fa24 	bl	8007ae8 <USB_EP0_OutStart>
 80046a0:	e006      	b.n	80046b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	441a      	add	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f005 fcd8 	bl	800a06c <HAL_PCD_DataOutStageCallback>
 80046bc:	e046      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	4a26      	ldr	r2, [pc, #152]	@ (800475c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d124      	bne.n	8004710 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046dc:	461a      	mov	r2, r3
 80046de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e2:	6093      	str	r3, [r2, #8]
 80046e4:	e032      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046fc:	461a      	mov	r2, r3
 80046fe:	2320      	movs	r3, #32
 8004700:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f005 fcaf 	bl	800a06c <HAL_PCD_DataOutStageCallback>
 800470e:	e01d      	b.n	800474c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d114      	bne.n	8004740 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d108      	bne.n	8004740 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004738:	461a      	mov	r2, r3
 800473a:	2100      	movs	r1, #0
 800473c:	f003 f9d4 	bl	8007ae8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f005 fc90 	bl	800a06c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	4f54300a 	.word	0x4f54300a
 800475c:	4f54310a 	.word	0x4f54310a

08004760 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	333c      	adds	r3, #60	@ 0x3c
 8004778:	3304      	adds	r3, #4
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a15      	ldr	r2, [pc, #84]	@ (80047e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d90e      	bls.n	80047b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ac:	461a      	mov	r2, r3
 80047ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f005 fc47 	bl	800a048 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4a0a      	ldr	r2, [pc, #40]	@ (80047e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d90c      	bls.n	80047dc <PCD_EP_OutSetupPacket_int+0x7c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	799b      	ldrb	r3, [r3, #6]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d108      	bne.n	80047dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047d4:	461a      	mov	r2, r3
 80047d6:	2101      	movs	r1, #1
 80047d8:	f003 f986 	bl	8007ae8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	4f54300a 	.word	0x4f54300a

080047ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
 80047f8:	4613      	mov	r3, r2
 80047fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d107      	bne.n	800481a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800480a:	883b      	ldrh	r3, [r7, #0]
 800480c:	0419      	lsls	r1, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	430a      	orrs	r2, r1
 8004816:	629a      	str	r2, [r3, #40]	@ 0x28
 8004818:	e028      	b.n	800486c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	4413      	add	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004828:	2300      	movs	r3, #0
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	e00d      	b.n	800484a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	3340      	adds	r3, #64	@ 0x40
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4413      	add	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	3301      	adds	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
 800484a:	7bfa      	ldrb	r2, [r7, #15]
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	3b01      	subs	r3, #1
 8004850:	429a      	cmp	r2, r3
 8004852:	d3ec      	bcc.n	800482e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004854:	883b      	ldrh	r3, [r7, #0]
 8004856:	0418      	lsls	r0, r3, #16
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6819      	ldr	r1, [r3, #0]
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	3b01      	subs	r3, #1
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	4302      	orrs	r2, r0
 8004864:	3340      	adds	r3, #64	@ 0x40
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	887a      	ldrh	r2, [r7, #2]
 800488c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e267      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d075      	beq.n	80049be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048d2:	4b88      	ldr	r3, [pc, #544]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d00c      	beq.n	80048f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048de:	4b85      	ldr	r3, [pc, #532]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d112      	bne.n	8004910 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ea:	4b82      	ldr	r3, [pc, #520]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048f6:	d10b      	bne.n	8004910 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	4b7e      	ldr	r3, [pc, #504]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05b      	beq.n	80049bc <HAL_RCC_OscConfig+0x108>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d157      	bne.n	80049bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e242      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004918:	d106      	bne.n	8004928 <HAL_RCC_OscConfig+0x74>
 800491a:	4b76      	ldr	r3, [pc, #472]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a75      	ldr	r2, [pc, #468]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e01d      	b.n	8004964 <HAL_RCC_OscConfig+0xb0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0x98>
 8004932:	4b70      	ldr	r3, [pc, #448]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6f      	ldr	r2, [pc, #444]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b6d      	ldr	r3, [pc, #436]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a6c      	ldr	r2, [pc, #432]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e00b      	b.n	8004964 <HAL_RCC_OscConfig+0xb0>
 800494c:	4b69      	ldr	r3, [pc, #420]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a68      	ldr	r2, [pc, #416]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b66      	ldr	r3, [pc, #408]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a65      	ldr	r2, [pc, #404]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 800495e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d013      	beq.n	8004994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fd fe70 	bl	8002650 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004974:	f7fd fe6c 	bl	8002650 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	@ 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e207      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	4b5b      	ldr	r3, [pc, #364]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0xc0>
 8004992:	e014      	b.n	80049be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fd fe5c 	bl	8002650 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800499c:	f7fd fe58 	bl	8002650 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	@ 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e1f3      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	4b51      	ldr	r3, [pc, #324]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0xe8>
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d063      	beq.n	8004a92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ca:	4b4a      	ldr	r3, [pc, #296]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d6:	4b47      	ldr	r3, [pc, #284]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d11c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e2:	4b44      	ldr	r3, [pc, #272]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d116      	bne.n	8004a1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ee:	4b41      	ldr	r3, [pc, #260]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_RCC_OscConfig+0x152>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e1c7      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a06:	4b3b      	ldr	r3, [pc, #236]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	4937      	ldr	r1, [pc, #220]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1a:	e03a      	b.n	8004a92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d020      	beq.n	8004a66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a24:	4b34      	ldr	r3, [pc, #208]	@ (8004af8 <HAL_RCC_OscConfig+0x244>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2a:	f7fd fe11 	bl	8002650 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a32:	f7fd fe0d 	bl	8002650 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e1a8      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a44:	4b2b      	ldr	r3, [pc, #172]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a50:	4b28      	ldr	r3, [pc, #160]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4925      	ldr	r1, [pc, #148]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]
 8004a64:	e015      	b.n	8004a92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a66:	4b24      	ldr	r3, [pc, #144]	@ (8004af8 <HAL_RCC_OscConfig+0x244>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fd fdf0 	bl	8002650 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a74:	f7fd fdec 	bl	8002650 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e187      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	4b1b      	ldr	r3, [pc, #108]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d036      	beq.n	8004b0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d016      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa6:	4b15      	ldr	r3, [pc, #84]	@ (8004afc <HAL_RCC_OscConfig+0x248>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7fd fdd0 	bl	8002650 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab4:	f7fd fdcc 	bl	8002650 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e167      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x200>
 8004ad2:	e01b      	b.n	8004b0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad4:	4b09      	ldr	r3, [pc, #36]	@ (8004afc <HAL_RCC_OscConfig+0x248>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ada:	f7fd fdb9 	bl	8002650 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae0:	e00e      	b.n	8004b00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae2:	f7fd fdb5 	bl	8002650 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d907      	bls.n	8004b00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e150      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
 8004af4:	40023800 	.word	0x40023800
 8004af8:	42470000 	.word	0x42470000
 8004afc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	4b88      	ldr	r3, [pc, #544]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1ea      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8097 	beq.w	8004c48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	4b81      	ldr	r3, [pc, #516]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	4b7d      	ldr	r3, [pc, #500]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	4a7c      	ldr	r2, [pc, #496]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b3a:	4b7a      	ldr	r3, [pc, #488]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4a:	4b77      	ldr	r3, [pc, #476]	@ (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d118      	bne.n	8004b88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b56:	4b74      	ldr	r3, [pc, #464]	@ (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a73      	ldr	r2, [pc, #460]	@ (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b62:	f7fd fd75 	bl	8002650 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6a:	f7fd fd71 	bl	8002650 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e10c      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCC_OscConfig+0x2ea>
 8004b90:	4b64      	ldr	r3, [pc, #400]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b94:	4a63      	ldr	r2, [pc, #396]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b9c:	e01c      	b.n	8004bd8 <HAL_RCC_OscConfig+0x324>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x30c>
 8004ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	4a5e      	ldr	r2, [pc, #376]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bac:	f043 0304 	orr.w	r3, r3, #4
 8004bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCC_OscConfig+0x324>
 8004bc0:	4b58      	ldr	r3, [pc, #352]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc4:	4a57      	ldr	r2, [pc, #348]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bcc:	4b55      	ldr	r3, [pc, #340]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd0:	4a54      	ldr	r2, [pc, #336]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	f023 0304 	bic.w	r3, r3, #4
 8004bd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fd fd36 	bl	8002650 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be8:	f7fd fd32 	bl	8002650 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e0cb      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfe:	4b49      	ldr	r3, [pc, #292]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0ee      	beq.n	8004be8 <HAL_RCC_OscConfig+0x334>
 8004c0a:	e014      	b.n	8004c36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0c:	f7fd fd20 	bl	8002650 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c14:	f7fd fd1c 	bl	8002650 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e0b5      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1ee      	bne.n	8004c14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3c:	4b39      	ldr	r3, [pc, #228]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c40:	4a38      	ldr	r2, [pc, #224]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a1 	beq.w	8004d94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c52:	4b34      	ldr	r3, [pc, #208]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d05c      	beq.n	8004d18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d141      	bne.n	8004cea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c66:	4b31      	ldr	r3, [pc, #196]	@ (8004d2c <HAL_RCC_OscConfig+0x478>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6c:	f7fd fcf0 	bl	8002650 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c74:	f7fd fcec 	bl	8002650 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e087      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c86:	4b27      	ldr	r3, [pc, #156]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	019b      	lsls	r3, r3, #6
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	3b01      	subs	r3, #1
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	491b      	ldr	r1, [pc, #108]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d2c <HAL_RCC_OscConfig+0x478>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc2:	f7fd fcc5 	bl	8002650 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cca:	f7fd fcc1 	bl	8002650 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e05c      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cdc:	4b11      	ldr	r3, [pc, #68]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x416>
 8004ce8:	e054      	b.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cea:	4b10      	ldr	r3, [pc, #64]	@ (8004d2c <HAL_RCC_OscConfig+0x478>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf0:	f7fd fcae 	bl	8002650 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf8:	f7fd fcaa 	bl	8002650 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e045      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0a:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x444>
 8004d16:	e03d      	b.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e038      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40007000 	.word	0x40007000
 8004d2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d30:	4b1b      	ldr	r3, [pc, #108]	@ (8004da0 <HAL_RCC_OscConfig+0x4ec>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d028      	beq.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d121      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d11a      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d60:	4013      	ands	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d111      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d107      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800

08004da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0cc      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db8:	4b68      	ldr	r3, [pc, #416]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d90c      	bls.n	8004de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b65      	ldr	r3, [pc, #404]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b63      	ldr	r3, [pc, #396]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0b8      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d020      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df8:	4b59      	ldr	r3, [pc, #356]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4a58      	ldr	r2, [pc, #352]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e10:	4b53      	ldr	r3, [pc, #332]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4a52      	ldr	r2, [pc, #328]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e1c:	4b50      	ldr	r3, [pc, #320]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	494d      	ldr	r1, [pc, #308]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d044      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d107      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	4b47      	ldr	r3, [pc, #284]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d119      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e07f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d003      	beq.n	8004e62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e62:	4b3f      	ldr	r3, [pc, #252]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e06f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e72:	4b3b      	ldr	r3, [pc, #236]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e067      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e82:	4b37      	ldr	r3, [pc, #220]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f023 0203 	bic.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4934      	ldr	r1, [pc, #208]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e94:	f7fd fbdc 	bl	8002650 <HAL_GetTick>
 8004e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e9c:	f7fd fbd8 	bl	8002650 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e04f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 020c 	and.w	r2, r3, #12
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d1eb      	bne.n	8004e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b25      	ldr	r3, [pc, #148]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d20c      	bcs.n	8004eec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b22      	ldr	r3, [pc, #136]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b20      	ldr	r3, [pc, #128]	@ (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e032      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef8:	4b19      	ldr	r3, [pc, #100]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4916      	ldr	r1, [pc, #88]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f16:	4b12      	ldr	r3, [pc, #72]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	490e      	ldr	r1, [pc, #56]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f2a:	f000 f821 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	490a      	ldr	r1, [pc, #40]	@ (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004f3c:	5ccb      	ldrb	r3, [r1, r3]
 8004f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f42:	4a09      	ldr	r2, [pc, #36]	@ (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f46:	4b09      	ldr	r3, [pc, #36]	@ (8004f6c <HAL_RCC_ClockConfig+0x1c8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fd fb3c 	bl	80025c8 <HAL_InitTick>

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40023c00 	.word	0x40023c00
 8004f60:	40023800 	.word	0x40023800
 8004f64:	0800d644 	.word	0x0800d644
 8004f68:	20000000 	.word	0x20000000
 8004f6c:	20000004 	.word	0x20000004

08004f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f74:	b090      	sub	sp, #64	@ 0x40
 8004f76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f80:	2300      	movs	r3, #0
 8004f82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f88:	4b59      	ldr	r3, [pc, #356]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d00d      	beq.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	f200 80a1 	bhi.w	80050dc <HAL_RCC_GetSysClockFreq+0x16c>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d003      	beq.n	8004faa <HAL_RCC_GetSysClockFreq+0x3a>
 8004fa2:	e09b      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fa4:	4b53      	ldr	r3, [pc, #332]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004fa8:	e09b      	b.n	80050e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004faa:	4b53      	ldr	r3, [pc, #332]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fae:	e098      	b.n	80050e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fb0:	4b4f      	ldr	r3, [pc, #316]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fba:	4b4d      	ldr	r3, [pc, #308]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d028      	beq.n	8005018 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	099b      	lsrs	r3, r3, #6
 8004fcc:	2200      	movs	r2, #0
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4b47      	ldr	r3, [pc, #284]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fdc:	fb03 f201 	mul.w	r2, r3, r1
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	fb00 f303 	mul.w	r3, r0, r3
 8004fe6:	4413      	add	r3, r2
 8004fe8:	4a43      	ldr	r2, [pc, #268]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fea:	fba0 1202 	umull	r1, r2, r0, r2
 8004fee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ff0:	460a      	mov	r2, r1
 8004ff2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004ff4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ff6:	4413      	add	r3, r2
 8004ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	61bb      	str	r3, [r7, #24]
 8005000:	61fa      	str	r2, [r7, #28]
 8005002:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005006:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800500a:	f7fb fe25 	bl	8000c58 <__aeabi_uldivmod>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4613      	mov	r3, r2
 8005014:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005016:	e053      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005018:	4b35      	ldr	r3, [pc, #212]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	099b      	lsrs	r3, r3, #6
 800501e:	2200      	movs	r2, #0
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	617a      	str	r2, [r7, #20]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800502a:	f04f 0b00 	mov.w	fp, #0
 800502e:	4652      	mov	r2, sl
 8005030:	465b      	mov	r3, fp
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f04f 0100 	mov.w	r1, #0
 800503a:	0159      	lsls	r1, r3, #5
 800503c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005040:	0150      	lsls	r0, r2, #5
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	ebb2 080a 	subs.w	r8, r2, sl
 800504a:	eb63 090b 	sbc.w	r9, r3, fp
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f04f 0300 	mov.w	r3, #0
 8005056:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800505a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800505e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005062:	ebb2 0408 	subs.w	r4, r2, r8
 8005066:	eb63 0509 	sbc.w	r5, r3, r9
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	00eb      	lsls	r3, r5, #3
 8005074:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005078:	00e2      	lsls	r2, r4, #3
 800507a:	4614      	mov	r4, r2
 800507c:	461d      	mov	r5, r3
 800507e:	eb14 030a 	adds.w	r3, r4, sl
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	eb45 030b 	adc.w	r3, r5, fp
 8005088:	607b      	str	r3, [r7, #4]
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005096:	4629      	mov	r1, r5
 8005098:	028b      	lsls	r3, r1, #10
 800509a:	4621      	mov	r1, r4
 800509c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050a0:	4621      	mov	r1, r4
 80050a2:	028a      	lsls	r2, r1, #10
 80050a4:	4610      	mov	r0, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050aa:	2200      	movs	r2, #0
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	60fa      	str	r2, [r7, #12]
 80050b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050b4:	f7fb fdd0 	bl	8000c58 <__aeabi_uldivmod>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4613      	mov	r3, r2
 80050be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050c0:	4b0b      	ldr	r3, [pc, #44]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	0c1b      	lsrs	r3, r3, #16
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	3301      	adds	r3, #1
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80050d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050da:	e002      	b.n	80050e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050dc:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80050de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3740      	adds	r7, #64	@ 0x40
 80050e8:	46bd      	mov	sp, r7
 80050ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ee:	bf00      	nop
 80050f0:	40023800 	.word	0x40023800
 80050f4:	00f42400 	.word	0x00f42400
 80050f8:	017d7840 	.word	0x017d7840

080050fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005100:	4b03      	ldr	r3, [pc, #12]	@ (8005110 <HAL_RCC_GetHCLKFreq+0x14>)
 8005102:	681b      	ldr	r3, [r3, #0]
}
 8005104:	4618      	mov	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000000 	.word	0x20000000

08005114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005118:	f7ff fff0 	bl	80050fc <HAL_RCC_GetHCLKFreq>
 800511c:	4602      	mov	r2, r0
 800511e:	4b05      	ldr	r3, [pc, #20]	@ (8005134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	0a9b      	lsrs	r3, r3, #10
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	4903      	ldr	r1, [pc, #12]	@ (8005138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800512a:	5ccb      	ldrb	r3, [r1, r3]
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40023800 	.word	0x40023800
 8005138:	0800d654 	.word	0x0800d654

0800513c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005140:	f7ff ffdc 	bl	80050fc <HAL_RCC_GetHCLKFreq>
 8005144:	4602      	mov	r2, r0
 8005146:	4b05      	ldr	r3, [pc, #20]	@ (800515c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	0b5b      	lsrs	r3, r3, #13
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	4903      	ldr	r1, [pc, #12]	@ (8005160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005152:	5ccb      	ldrb	r3, [r1, r3]
 8005154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005158:	4618      	mov	r0, r3
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40023800 	.word	0x40023800
 8005160:	0800d654 	.word	0x0800d654

08005164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e042      	b.n	80051fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fc fbb6 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2224      	movs	r2, #36	@ 0x24
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 ff77 	bl	800609c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695a      	ldr	r2, [r3, #20]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08c      	sub	sp, #48	@ 0x30
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	4613      	mov	r3, r2
 8005210:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b20      	cmp	r3, #32
 800521c:	d156      	bne.n	80052cc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_UART_Transmit_DMA+0x26>
 8005224:	88fb      	ldrh	r3, [r7, #6]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e04f      	b.n	80052ce <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	88fa      	ldrh	r2, [r7, #6]
 8005238:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	88fa      	ldrh	r2, [r7, #6]
 800523e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2221      	movs	r2, #33	@ 0x21
 800524a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005252:	4a21      	ldr	r2, [pc, #132]	@ (80052d8 <HAL_UART_Transmit_DMA+0xd4>)
 8005254:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525a:	4a20      	ldr	r2, [pc, #128]	@ (80052dc <HAL_UART_Transmit_DMA+0xd8>)
 800525c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005262:	4a1f      	ldr	r2, [pc, #124]	@ (80052e0 <HAL_UART_Transmit_DMA+0xdc>)
 8005264:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	2200      	movs	r2, #0
 800526c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800526e:	f107 0308 	add.w	r3, r7, #8
 8005272:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527a:	6819      	ldr	r1, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3304      	adds	r3, #4
 8005282:	461a      	mov	r2, r3
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	f7fd fbd3 	bl	8002a30 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005292:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3314      	adds	r3, #20
 800529a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	617b      	str	r3, [r7, #20]
   return(result);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3314      	adds	r3, #20
 80052b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80052b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6a39      	ldr	r1, [r7, #32]
 80052ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e5      	bne.n	8005294 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e000      	b.n	80052ce <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80052cc:	2302      	movs	r3, #2
  }
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3730      	adds	r7, #48	@ 0x30
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	08005929 	.word	0x08005929
 80052dc:	080059c3 	.word	0x080059c3
 80052e0:	08005b47 	.word	0x08005b47

080052e4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08c      	sub	sp, #48	@ 0x30
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	4613      	mov	r3, r2
 80052f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d14a      	bne.n	8005394 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005304:	88fb      	ldrh	r3, [r7, #6]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e043      	b.n	8005396 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	461a      	mov	r2, r3
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 fc5b 	bl	8005bdc <UART_Start_Receive_DMA>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800532c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005330:	2b00      	cmp	r3, #0
 8005332:	d12c      	bne.n	800538e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005338:	2b01      	cmp	r3, #1
 800533a:	d125      	bne.n	8005388 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	330c      	adds	r3, #12
 8005358:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	617b      	str	r3, [r7, #20]
   return(result);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f043 0310 	orr.w	r3, r3, #16
 8005368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	330c      	adds	r3, #12
 8005370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005372:	627a      	str	r2, [r7, #36]	@ 0x24
 8005374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6a39      	ldr	r1, [r7, #32]
 8005378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e5      	bne.n	8005352 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005386:	e002      	b.n	800538e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800538e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005392:	e000      	b.n	8005396 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005394:	2302      	movs	r3, #2
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	3730      	adds	r7, #48	@ 0x30
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b0ba      	sub	sp, #232	@ 0xe8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10f      	bne.n	8005406 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <HAL_UART_IRQHandler+0x66>
 80053f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fd8d 	bl	8005f1e <UART_Receive_IT>
      return;
 8005404:	e25b      	b.n	80058be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80de 	beq.w	80055cc <HAL_UART_IRQHandler+0x22c>
 8005410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800541c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005420:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80d1 	beq.w	80055cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00b      	beq.n	800544e <HAL_UART_IRQHandler+0xae>
 8005436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800543a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	f043 0201 	orr.w	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_UART_IRQHandler+0xd2>
 800545a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	f043 0202 	orr.w	r2, r3, #2
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <HAL_UART_IRQHandler+0xf6>
 800547e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548e:	f043 0204 	orr.w	r2, r3, #4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d011      	beq.n	80054c6 <HAL_UART_IRQHandler+0x126>
 80054a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d005      	beq.n	80054c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054be:	f043 0208 	orr.w	r2, r3, #8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 81f2 	beq.w	80058b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_UART_IRQHandler+0x14e>
 80054dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fd18 	bl	8005f1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f8:	2b40      	cmp	r3, #64	@ 0x40
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d103      	bne.n	800551a <HAL_UART_IRQHandler+0x17a>
 8005512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005516:	2b00      	cmp	r3, #0
 8005518:	d04f      	beq.n	80055ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fc20 	bl	8005d60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552a:	2b40      	cmp	r3, #64	@ 0x40
 800552c:	d141      	bne.n	80055b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3314      	adds	r3, #20
 8005534:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005544:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800554c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3314      	adds	r3, #20
 8005556:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800555a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800555e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1d9      	bne.n	800552e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d013      	beq.n	80055aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005586:	4a7e      	ldr	r2, [pc, #504]	@ (8005780 <HAL_UART_IRQHandler+0x3e0>)
 8005588:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558e:	4618      	mov	r0, r3
 8005590:	f7fd fb16 	bl	8002bc0 <HAL_DMA_Abort_IT>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d016      	beq.n	80055c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055a4:	4610      	mov	r0, r2
 80055a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	e00e      	b.n	80055c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f9b2 	bl	8005914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b0:	e00a      	b.n	80055c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9ae 	bl	8005914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	e006      	b.n	80055c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f9aa 	bl	8005914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055c6:	e175      	b.n	80058b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c8:	bf00      	nop
    return;
 80055ca:	e173      	b.n	80058b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f040 814f 	bne.w	8005874 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8148 	beq.w	8005874 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8141 	beq.w	8005874 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055f2:	2300      	movs	r3, #0
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	60bb      	str	r3, [r7, #8]
 8005606:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005612:	2b40      	cmp	r3, #64	@ 0x40
 8005614:	f040 80b6 	bne.w	8005784 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005624:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8145 	beq.w	80058b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005636:	429a      	cmp	r2, r3
 8005638:	f080 813e 	bcs.w	80058b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005642:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800564e:	f000 8088 	beq.w	8005762 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005668:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800566c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005670:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800567e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005682:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800568a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1d9      	bne.n	8005652 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3314      	adds	r3, #20
 80056a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e1      	bne.n	800569e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3314      	adds	r3, #20
 80056e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3314      	adds	r3, #20
 80056fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005700:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005704:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800570c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e3      	bne.n	80056da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005732:	f023 0310 	bic.w	r3, r3, #16
 8005736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	330c      	adds	r3, #12
 8005740:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005744:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005746:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800574a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e3      	bne.n	8005720 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575c:	4618      	mov	r0, r3
 800575e:	f7fd f9bf 	bl	8002ae0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2202      	movs	r2, #2
 8005766:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005770:	b29b      	uxth	r3, r3
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	b29b      	uxth	r3, r3
 8005776:	4619      	mov	r1, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7fb fbe5 	bl	8000f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800577e:	e09b      	b.n	80058b8 <HAL_UART_IRQHandler+0x518>
 8005780:	08005e27 	.word	0x08005e27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800578c:	b29b      	uxth	r3, r3
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 808e 	beq.w	80058bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80057a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8089 	beq.w	80058bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80057ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80057d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e3      	bne.n	80057aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3314      	adds	r3, #20
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	623b      	str	r3, [r7, #32]
   return(result);
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3314      	adds	r3, #20
 8005802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005806:	633a      	str	r2, [r7, #48]	@ 0x30
 8005808:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800580c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e3      	bne.n	80057e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	60fb      	str	r3, [r7, #12]
   return(result);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0310 	bic.w	r3, r3, #16
 800583e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	330c      	adds	r3, #12
 8005848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800584c:	61fa      	str	r2, [r7, #28]
 800584e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	617b      	str	r3, [r7, #20]
   return(result);
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e3      	bne.n	8005828 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800586a:	4619      	mov	r1, r3
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7fb fb6b 	bl	8000f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005872:	e023      	b.n	80058bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800587c:	2b00      	cmp	r3, #0
 800587e:	d009      	beq.n	8005894 <HAL_UART_IRQHandler+0x4f4>
 8005880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fade 	bl	8005e4e <UART_Transmit_IT>
    return;
 8005892:	e014      	b.n	80058be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00e      	beq.n	80058be <HAL_UART_IRQHandler+0x51e>
 80058a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fb1e 	bl	8005eee <UART_EndTransmit_IT>
    return;
 80058b2:	e004      	b.n	80058be <HAL_UART_IRQHandler+0x51e>
    return;
 80058b4:	bf00      	nop
 80058b6:	e002      	b.n	80058be <HAL_UART_IRQHandler+0x51e>
      return;
 80058b8:	bf00      	nop
 80058ba:	e000      	b.n	80058be <HAL_UART_IRQHandler+0x51e>
      return;
 80058bc:	bf00      	nop
  }
}
 80058be:	37e8      	adds	r7, #232	@ 0xe8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b090      	sub	sp, #64	@ 0x40
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005934:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005940:	2b00      	cmp	r3, #0
 8005942:	d137      	bne.n	80059b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005946:	2200      	movs	r2, #0
 8005948:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800594a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3314      	adds	r3, #20
 8005950:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	623b      	str	r3, [r7, #32]
   return(result);
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005960:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3314      	adds	r3, #20
 8005968:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800596a:	633a      	str	r2, [r7, #48]	@ 0x30
 800596c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e5      	bne.n	800594a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800597e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330c      	adds	r3, #12
 8005984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	60fb      	str	r3, [r7, #12]
   return(result);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005994:	637b      	str	r3, [r7, #52]	@ 0x34
 8005996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800599e:	61fa      	str	r2, [r7, #28]
 80059a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	69b9      	ldr	r1, [r7, #24]
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	617b      	str	r3, [r7, #20]
   return(result);
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e5      	bne.n	800597e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059b2:	e002      	b.n	80059ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80059b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80059b6:	f7ff ff85 	bl	80058c4 <HAL_UART_TxCpltCallback>
}
 80059ba:	bf00      	nop
 80059bc:	3740      	adds	r7, #64	@ 0x40
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff ff81 	bl	80058d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b09c      	sub	sp, #112	@ 0x70
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d172      	bne.n	8005ae0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80059fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059fc:	2200      	movs	r2, #0
 80059fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	330c      	adds	r3, #12
 8005a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	330c      	adds	r3, #12
 8005a1e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005a20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a22:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e5      	bne.n	8005a00 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3314      	adds	r3, #20
 8005a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a46:	f023 0301 	bic.w	r3, r3, #1
 8005a4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3314      	adds	r3, #20
 8005a52:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a54:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a56:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e5      	bne.n	8005a34 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3314      	adds	r3, #20
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	623b      	str	r3, [r7, #32]
   return(result);
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3314      	adds	r3, #20
 8005a86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005a88:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d119      	bne.n	8005ae0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	330c      	adds	r3, #12
 8005ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0310 	bic.w	r3, r3, #16
 8005ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	330c      	adds	r3, #12
 8005aca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005acc:	61fa      	str	r2, [r7, #28]
 8005ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	69b9      	ldr	r1, [r7, #24]
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e5      	bne.n	8005aac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d106      	bne.n	8005afc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005af0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005af2:	4619      	mov	r1, r3
 8005af4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005af6:	f7fb fa27 	bl	8000f48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005afa:	e002      	b.n	8005b02 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005afc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005afe:	f7ff fef5 	bl	80058ec <HAL_UART_RxCpltCallback>
}
 8005b02:	bf00      	nop
 8005b04:	3770      	adds	r7, #112	@ 0x70
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d108      	bne.n	8005b38 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	4619      	mov	r1, r3
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7fb fa09 	bl	8000f48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b36:	e002      	b.n	8005b3e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff fee1 	bl	8005900 <HAL_UART_RxHalfCpltCallback>
}
 8005b3e:	bf00      	nop
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b56:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b62:	2b80      	cmp	r3, #128	@ 0x80
 8005b64:	bf0c      	ite	eq
 8005b66:	2301      	moveq	r3, #1
 8005b68:	2300      	movne	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b21      	cmp	r3, #33	@ 0x21
 8005b78:	d108      	bne.n	8005b8c <UART_DMAError+0x46>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2200      	movs	r2, #0
 8005b84:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005b86:	68b8      	ldr	r0, [r7, #8]
 8005b88:	f000 f8c2 	bl	8005d10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b96:	2b40      	cmp	r3, #64	@ 0x40
 8005b98:	bf0c      	ite	eq
 8005b9a:	2301      	moveq	r3, #1
 8005b9c:	2300      	movne	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b22      	cmp	r3, #34	@ 0x22
 8005bac:	d108      	bne.n	8005bc0 <UART_DMAError+0x7a>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005bba:	68b8      	ldr	r0, [r7, #8]
 8005bbc:	f000 f8d0 	bl	8005d60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc4:	f043 0210 	orr.w	r2, r3, #16
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bcc:	68b8      	ldr	r0, [r7, #8]
 8005bce:	f7ff fea1 	bl	8005914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bd2:	bf00      	nop
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b098      	sub	sp, #96	@ 0x60
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	88fa      	ldrh	r2, [r7, #6]
 8005bf4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2222      	movs	r2, #34	@ 0x22
 8005c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c08:	4a3e      	ldr	r2, [pc, #248]	@ (8005d04 <UART_Start_Receive_DMA+0x128>)
 8005c0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c10:	4a3d      	ldr	r2, [pc, #244]	@ (8005d08 <UART_Start_Receive_DMA+0x12c>)
 8005c12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c18:	4a3c      	ldr	r2, [pc, #240]	@ (8005d0c <UART_Start_Receive_DMA+0x130>)
 8005c1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c20:	2200      	movs	r2, #0
 8005c22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005c24:	f107 0308 	add.w	r3, r7, #8
 8005c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4619      	mov	r1, r3
 8005c36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	f7fc fef8 	bl	8002a30 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005c40:	2300      	movs	r3, #0
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d019      	beq.n	8005c92 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	330c      	adds	r3, #12
 8005c64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	330c      	adds	r3, #12
 8005c7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c7e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005c80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e5      	bne.n	8005c5e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3314      	adds	r3, #20
 8005c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca4:	f043 0301 	orr.w	r3, r3, #1
 8005ca8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3314      	adds	r3, #20
 8005cb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cb2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005cb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005cb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e5      	bne.n	8005c92 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3314      	adds	r3, #20
 8005ccc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3314      	adds	r3, #20
 8005ce4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ce6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6a39      	ldr	r1, [r7, #32]
 8005cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e5      	bne.n	8005cc6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3760      	adds	r7, #96	@ 0x60
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	080059df 	.word	0x080059df
 8005d08:	08005b0b 	.word	0x08005b0b
 8005d0c:	08005b47 	.word	0x08005b47

08005d10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b089      	sub	sp, #36	@ 0x24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	61ba      	str	r2, [r7, #24]
 8005d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6979      	ldr	r1, [r7, #20]
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	613b      	str	r3, [r7, #16]
   return(result);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e5      	bne.n	8005d18 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005d54:	bf00      	nop
 8005d56:	3724      	adds	r7, #36	@ 0x24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b095      	sub	sp, #84	@ 0x54
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	330c      	adds	r3, #12
 8005d86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d88:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e5      	bne.n	8005d68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3314      	adds	r3, #20
 8005da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3314      	adds	r3, #20
 8005dba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e5      	bne.n	8005d9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d119      	bne.n	8005e0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f023 0310 	bic.w	r3, r3, #16
 8005dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005df8:	61ba      	str	r2, [r7, #24]
 8005dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6979      	ldr	r1, [r7, #20]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	613b      	str	r3, [r7, #16]
   return(result);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e5      	bne.n	8005dd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e1a:	bf00      	nop
 8005e1c:	3754      	adds	r7, #84	@ 0x54
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f7ff fd67 	bl	8005914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e46:	bf00      	nop
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b085      	sub	sp, #20
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b21      	cmp	r3, #33	@ 0x21
 8005e60:	d13e      	bne.n	8005ee0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e6a:	d114      	bne.n	8005e96 <UART_Transmit_IT+0x48>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d110      	bne.n	8005e96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	1c9a      	adds	r2, r3, #2
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	621a      	str	r2, [r3, #32]
 8005e94:	e008      	b.n	8005ea8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	1c59      	adds	r1, r3, #1
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6211      	str	r1, [r2, #32]
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10f      	bne.n	8005edc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005eca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e000      	b.n	8005ee2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ee0:	2302      	movs	r3, #2
  }
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7ff fcd8 	bl	80058c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b08c      	sub	sp, #48	@ 0x30
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b22      	cmp	r3, #34	@ 0x22
 8005f30:	f040 80ae 	bne.w	8006090 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f3c:	d117      	bne.n	8005f6e <UART_Receive_IT+0x50>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d113      	bne.n	8005f6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f66:	1c9a      	adds	r2, r3, #2
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f6c:	e026      	b.n	8005fbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f80:	d007      	beq.n	8005f92 <UART_Receive_IT+0x74>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10a      	bne.n	8005fa0 <UART_Receive_IT+0x82>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e008      	b.n	8005fb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d15d      	bne.n	800608c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0220 	bic.w	r2, r2, #32
 8005fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695a      	ldr	r2, [r3, #20]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006012:	2b01      	cmp	r3, #1
 8006014:	d135      	bne.n	8006082 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	613b      	str	r3, [r7, #16]
   return(result);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f023 0310 	bic.w	r3, r3, #16
 8006032:	627b      	str	r3, [r7, #36]	@ 0x24
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	330c      	adds	r3, #12
 800603a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800603c:	623a      	str	r2, [r7, #32]
 800603e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	69f9      	ldr	r1, [r7, #28]
 8006042:	6a3a      	ldr	r2, [r7, #32]
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	61bb      	str	r3, [r7, #24]
   return(result);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e5      	bne.n	800601c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0310 	and.w	r3, r3, #16
 800605a:	2b10      	cmp	r3, #16
 800605c:	d10a      	bne.n	8006074 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800605e:	2300      	movs	r3, #0
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fa ff64 	bl	8000f48 <HAL_UARTEx_RxEventCallback>
 8006080:	e002      	b.n	8006088 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fc32 	bl	80058ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	e002      	b.n	8006092 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	e000      	b.n	8006092 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006090:	2302      	movs	r3, #2
  }
}
 8006092:	4618      	mov	r0, r3
 8006094:	3730      	adds	r7, #48	@ 0x30
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800609c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060a0:	b0c0      	sub	sp, #256	@ 0x100
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b8:	68d9      	ldr	r1, [r3, #12]
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	ea40 0301 	orr.w	r3, r0, r1
 80060c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	431a      	orrs	r2, r3
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060f4:	f021 010c 	bic.w	r1, r1, #12
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006102:	430b      	orrs	r3, r1
 8006104:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006116:	6999      	ldr	r1, [r3, #24]
 8006118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	ea40 0301 	orr.w	r3, r0, r1
 8006122:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4b8f      	ldr	r3, [pc, #572]	@ (8006368 <UART_SetConfig+0x2cc>)
 800612c:	429a      	cmp	r2, r3
 800612e:	d005      	beq.n	800613c <UART_SetConfig+0xa0>
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	4b8d      	ldr	r3, [pc, #564]	@ (800636c <UART_SetConfig+0x2d0>)
 8006138:	429a      	cmp	r2, r3
 800613a:	d104      	bne.n	8006146 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800613c:	f7fe fffe 	bl	800513c <HAL_RCC_GetPCLK2Freq>
 8006140:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006144:	e003      	b.n	800614e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006146:	f7fe ffe5 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 800614a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800614e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006158:	f040 810c 	bne.w	8006374 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800615c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006160:	2200      	movs	r2, #0
 8006162:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006166:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800616a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800616e:	4622      	mov	r2, r4
 8006170:	462b      	mov	r3, r5
 8006172:	1891      	adds	r1, r2, r2
 8006174:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006176:	415b      	adcs	r3, r3
 8006178:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800617a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800617e:	4621      	mov	r1, r4
 8006180:	eb12 0801 	adds.w	r8, r2, r1
 8006184:	4629      	mov	r1, r5
 8006186:	eb43 0901 	adc.w	r9, r3, r1
 800618a:	f04f 0200 	mov.w	r2, #0
 800618e:	f04f 0300 	mov.w	r3, #0
 8006192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800619a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800619e:	4690      	mov	r8, r2
 80061a0:	4699      	mov	r9, r3
 80061a2:	4623      	mov	r3, r4
 80061a4:	eb18 0303 	adds.w	r3, r8, r3
 80061a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061ac:	462b      	mov	r3, r5
 80061ae:	eb49 0303 	adc.w	r3, r9, r3
 80061b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061ca:	460b      	mov	r3, r1
 80061cc:	18db      	adds	r3, r3, r3
 80061ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80061d0:	4613      	mov	r3, r2
 80061d2:	eb42 0303 	adc.w	r3, r2, r3
 80061d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80061d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061e0:	f7fa fd3a 	bl	8000c58 <__aeabi_uldivmod>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4b61      	ldr	r3, [pc, #388]	@ (8006370 <UART_SetConfig+0x2d4>)
 80061ea:	fba3 2302 	umull	r2, r3, r3, r2
 80061ee:	095b      	lsrs	r3, r3, #5
 80061f0:	011c      	lsls	r4, r3, #4
 80061f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006200:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006204:	4642      	mov	r2, r8
 8006206:	464b      	mov	r3, r9
 8006208:	1891      	adds	r1, r2, r2
 800620a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800620c:	415b      	adcs	r3, r3
 800620e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006210:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006214:	4641      	mov	r1, r8
 8006216:	eb12 0a01 	adds.w	sl, r2, r1
 800621a:	4649      	mov	r1, r9
 800621c:	eb43 0b01 	adc.w	fp, r3, r1
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800622c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006234:	4692      	mov	sl, r2
 8006236:	469b      	mov	fp, r3
 8006238:	4643      	mov	r3, r8
 800623a:	eb1a 0303 	adds.w	r3, sl, r3
 800623e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006242:	464b      	mov	r3, r9
 8006244:	eb4b 0303 	adc.w	r3, fp, r3
 8006248:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006258:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800625c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006260:	460b      	mov	r3, r1
 8006262:	18db      	adds	r3, r3, r3
 8006264:	643b      	str	r3, [r7, #64]	@ 0x40
 8006266:	4613      	mov	r3, r2
 8006268:	eb42 0303 	adc.w	r3, r2, r3
 800626c:	647b      	str	r3, [r7, #68]	@ 0x44
 800626e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006272:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006276:	f7fa fcef 	bl	8000c58 <__aeabi_uldivmod>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4611      	mov	r1, r2
 8006280:	4b3b      	ldr	r3, [pc, #236]	@ (8006370 <UART_SetConfig+0x2d4>)
 8006282:	fba3 2301 	umull	r2, r3, r3, r1
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	2264      	movs	r2, #100	@ 0x64
 800628a:	fb02 f303 	mul.w	r3, r2, r3
 800628e:	1acb      	subs	r3, r1, r3
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006296:	4b36      	ldr	r3, [pc, #216]	@ (8006370 <UART_SetConfig+0x2d4>)
 8006298:	fba3 2302 	umull	r2, r3, r3, r2
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062a4:	441c      	add	r4, r3
 80062a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062aa:	2200      	movs	r2, #0
 80062ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062b8:	4642      	mov	r2, r8
 80062ba:	464b      	mov	r3, r9
 80062bc:	1891      	adds	r1, r2, r2
 80062be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062c0:	415b      	adcs	r3, r3
 80062c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062c8:	4641      	mov	r1, r8
 80062ca:	1851      	adds	r1, r2, r1
 80062cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80062ce:	4649      	mov	r1, r9
 80062d0:	414b      	adcs	r3, r1
 80062d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062e0:	4659      	mov	r1, fp
 80062e2:	00cb      	lsls	r3, r1, #3
 80062e4:	4651      	mov	r1, sl
 80062e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062ea:	4651      	mov	r1, sl
 80062ec:	00ca      	lsls	r2, r1, #3
 80062ee:	4610      	mov	r0, r2
 80062f0:	4619      	mov	r1, r3
 80062f2:	4603      	mov	r3, r0
 80062f4:	4642      	mov	r2, r8
 80062f6:	189b      	adds	r3, r3, r2
 80062f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062fc:	464b      	mov	r3, r9
 80062fe:	460a      	mov	r2, r1
 8006300:	eb42 0303 	adc.w	r3, r2, r3
 8006304:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006314:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006318:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800631c:	460b      	mov	r3, r1
 800631e:	18db      	adds	r3, r3, r3
 8006320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006322:	4613      	mov	r3, r2
 8006324:	eb42 0303 	adc.w	r3, r2, r3
 8006328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800632a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800632e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006332:	f7fa fc91 	bl	8000c58 <__aeabi_uldivmod>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <UART_SetConfig+0x2d4>)
 800633c:	fba3 1302 	umull	r1, r3, r3, r2
 8006340:	095b      	lsrs	r3, r3, #5
 8006342:	2164      	movs	r1, #100	@ 0x64
 8006344:	fb01 f303 	mul.w	r3, r1, r3
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	3332      	adds	r3, #50	@ 0x32
 800634e:	4a08      	ldr	r2, [pc, #32]	@ (8006370 <UART_SetConfig+0x2d4>)
 8006350:	fba2 2303 	umull	r2, r3, r2, r3
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	f003 0207 	and.w	r2, r3, #7
 800635a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4422      	add	r2, r4
 8006362:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006364:	e106      	b.n	8006574 <UART_SetConfig+0x4d8>
 8006366:	bf00      	nop
 8006368:	40011000 	.word	0x40011000
 800636c:	40011400 	.word	0x40011400
 8006370:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006378:	2200      	movs	r2, #0
 800637a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800637e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006382:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006386:	4642      	mov	r2, r8
 8006388:	464b      	mov	r3, r9
 800638a:	1891      	adds	r1, r2, r2
 800638c:	6239      	str	r1, [r7, #32]
 800638e:	415b      	adcs	r3, r3
 8006390:	627b      	str	r3, [r7, #36]	@ 0x24
 8006392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006396:	4641      	mov	r1, r8
 8006398:	1854      	adds	r4, r2, r1
 800639a:	4649      	mov	r1, r9
 800639c:	eb43 0501 	adc.w	r5, r3, r1
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	00eb      	lsls	r3, r5, #3
 80063aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ae:	00e2      	lsls	r2, r4, #3
 80063b0:	4614      	mov	r4, r2
 80063b2:	461d      	mov	r5, r3
 80063b4:	4643      	mov	r3, r8
 80063b6:	18e3      	adds	r3, r4, r3
 80063b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063bc:	464b      	mov	r3, r9
 80063be:	eb45 0303 	adc.w	r3, r5, r3
 80063c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063d6:	f04f 0200 	mov.w	r2, #0
 80063da:	f04f 0300 	mov.w	r3, #0
 80063de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063e2:	4629      	mov	r1, r5
 80063e4:	008b      	lsls	r3, r1, #2
 80063e6:	4621      	mov	r1, r4
 80063e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ec:	4621      	mov	r1, r4
 80063ee:	008a      	lsls	r2, r1, #2
 80063f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063f4:	f7fa fc30 	bl	8000c58 <__aeabi_uldivmod>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4b60      	ldr	r3, [pc, #384]	@ (8006580 <UART_SetConfig+0x4e4>)
 80063fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	011c      	lsls	r4, r3, #4
 8006406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800640a:	2200      	movs	r2, #0
 800640c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006410:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006414:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006418:	4642      	mov	r2, r8
 800641a:	464b      	mov	r3, r9
 800641c:	1891      	adds	r1, r2, r2
 800641e:	61b9      	str	r1, [r7, #24]
 8006420:	415b      	adcs	r3, r3
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006428:	4641      	mov	r1, r8
 800642a:	1851      	adds	r1, r2, r1
 800642c:	6139      	str	r1, [r7, #16]
 800642e:	4649      	mov	r1, r9
 8006430:	414b      	adcs	r3, r1
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006440:	4659      	mov	r1, fp
 8006442:	00cb      	lsls	r3, r1, #3
 8006444:	4651      	mov	r1, sl
 8006446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800644a:	4651      	mov	r1, sl
 800644c:	00ca      	lsls	r2, r1, #3
 800644e:	4610      	mov	r0, r2
 8006450:	4619      	mov	r1, r3
 8006452:	4603      	mov	r3, r0
 8006454:	4642      	mov	r2, r8
 8006456:	189b      	adds	r3, r3, r2
 8006458:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800645c:	464b      	mov	r3, r9
 800645e:	460a      	mov	r2, r1
 8006460:	eb42 0303 	adc.w	r3, r2, r3
 8006464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006472:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006480:	4649      	mov	r1, r9
 8006482:	008b      	lsls	r3, r1, #2
 8006484:	4641      	mov	r1, r8
 8006486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800648a:	4641      	mov	r1, r8
 800648c:	008a      	lsls	r2, r1, #2
 800648e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006492:	f7fa fbe1 	bl	8000c58 <__aeabi_uldivmod>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4611      	mov	r1, r2
 800649c:	4b38      	ldr	r3, [pc, #224]	@ (8006580 <UART_SetConfig+0x4e4>)
 800649e:	fba3 2301 	umull	r2, r3, r3, r1
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	2264      	movs	r2, #100	@ 0x64
 80064a6:	fb02 f303 	mul.w	r3, r2, r3
 80064aa:	1acb      	subs	r3, r1, r3
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	3332      	adds	r3, #50	@ 0x32
 80064b0:	4a33      	ldr	r2, [pc, #204]	@ (8006580 <UART_SetConfig+0x4e4>)
 80064b2:	fba2 2303 	umull	r2, r3, r2, r3
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064bc:	441c      	add	r4, r3
 80064be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064c2:	2200      	movs	r2, #0
 80064c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80064c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80064c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064cc:	4642      	mov	r2, r8
 80064ce:	464b      	mov	r3, r9
 80064d0:	1891      	adds	r1, r2, r2
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	415b      	adcs	r3, r3
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064dc:	4641      	mov	r1, r8
 80064de:	1851      	adds	r1, r2, r1
 80064e0:	6039      	str	r1, [r7, #0]
 80064e2:	4649      	mov	r1, r9
 80064e4:	414b      	adcs	r3, r1
 80064e6:	607b      	str	r3, [r7, #4]
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064f4:	4659      	mov	r1, fp
 80064f6:	00cb      	lsls	r3, r1, #3
 80064f8:	4651      	mov	r1, sl
 80064fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064fe:	4651      	mov	r1, sl
 8006500:	00ca      	lsls	r2, r1, #3
 8006502:	4610      	mov	r0, r2
 8006504:	4619      	mov	r1, r3
 8006506:	4603      	mov	r3, r0
 8006508:	4642      	mov	r2, r8
 800650a:	189b      	adds	r3, r3, r2
 800650c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800650e:	464b      	mov	r3, r9
 8006510:	460a      	mov	r2, r1
 8006512:	eb42 0303 	adc.w	r3, r2, r3
 8006516:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	663b      	str	r3, [r7, #96]	@ 0x60
 8006522:	667a      	str	r2, [r7, #100]	@ 0x64
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006530:	4649      	mov	r1, r9
 8006532:	008b      	lsls	r3, r1, #2
 8006534:	4641      	mov	r1, r8
 8006536:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800653a:	4641      	mov	r1, r8
 800653c:	008a      	lsls	r2, r1, #2
 800653e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006542:	f7fa fb89 	bl	8000c58 <__aeabi_uldivmod>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4b0d      	ldr	r3, [pc, #52]	@ (8006580 <UART_SetConfig+0x4e4>)
 800654c:	fba3 1302 	umull	r1, r3, r3, r2
 8006550:	095b      	lsrs	r3, r3, #5
 8006552:	2164      	movs	r1, #100	@ 0x64
 8006554:	fb01 f303 	mul.w	r3, r1, r3
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	3332      	adds	r3, #50	@ 0x32
 800655e:	4a08      	ldr	r2, [pc, #32]	@ (8006580 <UART_SetConfig+0x4e4>)
 8006560:	fba2 2303 	umull	r2, r3, r2, r3
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	f003 020f 	and.w	r2, r3, #15
 800656a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4422      	add	r2, r4
 8006572:	609a      	str	r2, [r3, #8]
}
 8006574:	bf00      	nop
 8006576:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800657a:	46bd      	mov	sp, r7
 800657c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006580:	51eb851f 	.word	0x51eb851f

08006584 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006584:	b084      	sub	sp, #16
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	f107 001c 	add.w	r0, r7, #28
 8006592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006596:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800659a:	2b01      	cmp	r3, #1
 800659c:	d123      	bne.n	80065e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80065b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d105      	bne.n	80065da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f001 fae2 	bl	8007ba4 <USB_CoreReset>
 80065e0:	4603      	mov	r3, r0
 80065e2:	73fb      	strb	r3, [r7, #15]
 80065e4:	e01b      	b.n	800661e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f001 fad6 	bl	8007ba4 <USB_CoreReset>
 80065f8:	4603      	mov	r3, r0
 80065fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006600:	2b00      	cmp	r3, #0
 8006602:	d106      	bne.n	8006612 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006608:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006610:	e005      	b.n	800661e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006616:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800661e:	7fbb      	ldrb	r3, [r7, #30]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d10b      	bne.n	800663c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f043 0206 	orr.w	r2, r3, #6
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f043 0220 	orr.w	r2, r3, #32
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006648:	b004      	add	sp, #16
 800664a:	4770      	bx	lr

0800664c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	4613      	mov	r3, r2
 8006658:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d165      	bne.n	800672c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	4a41      	ldr	r2, [pc, #260]	@ (8006768 <USB_SetTurnaroundTime+0x11c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d906      	bls.n	8006676 <USB_SetTurnaroundTime+0x2a>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4a40      	ldr	r2, [pc, #256]	@ (800676c <USB_SetTurnaroundTime+0x120>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d202      	bcs.n	8006676 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006670:	230f      	movs	r3, #15
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	e062      	b.n	800673c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	4a3c      	ldr	r2, [pc, #240]	@ (800676c <USB_SetTurnaroundTime+0x120>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d306      	bcc.n	800668c <USB_SetTurnaroundTime+0x40>
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	4a3b      	ldr	r2, [pc, #236]	@ (8006770 <USB_SetTurnaroundTime+0x124>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d202      	bcs.n	800668c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006686:	230e      	movs	r3, #14
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	e057      	b.n	800673c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4a38      	ldr	r2, [pc, #224]	@ (8006770 <USB_SetTurnaroundTime+0x124>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d306      	bcc.n	80066a2 <USB_SetTurnaroundTime+0x56>
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4a37      	ldr	r2, [pc, #220]	@ (8006774 <USB_SetTurnaroundTime+0x128>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d202      	bcs.n	80066a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800669c:	230d      	movs	r3, #13
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	e04c      	b.n	800673c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4a33      	ldr	r2, [pc, #204]	@ (8006774 <USB_SetTurnaroundTime+0x128>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d306      	bcc.n	80066b8 <USB_SetTurnaroundTime+0x6c>
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	4a32      	ldr	r2, [pc, #200]	@ (8006778 <USB_SetTurnaroundTime+0x12c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d802      	bhi.n	80066b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066b2:	230c      	movs	r3, #12
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	e041      	b.n	800673c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006778 <USB_SetTurnaroundTime+0x12c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d906      	bls.n	80066ce <USB_SetTurnaroundTime+0x82>
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4a2e      	ldr	r2, [pc, #184]	@ (800677c <USB_SetTurnaroundTime+0x130>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d802      	bhi.n	80066ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066c8:	230b      	movs	r3, #11
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	e036      	b.n	800673c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	4a2a      	ldr	r2, [pc, #168]	@ (800677c <USB_SetTurnaroundTime+0x130>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d906      	bls.n	80066e4 <USB_SetTurnaroundTime+0x98>
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	4a29      	ldr	r2, [pc, #164]	@ (8006780 <USB_SetTurnaroundTime+0x134>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d802      	bhi.n	80066e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80066de:	230a      	movs	r3, #10
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	e02b      	b.n	800673c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4a26      	ldr	r2, [pc, #152]	@ (8006780 <USB_SetTurnaroundTime+0x134>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d906      	bls.n	80066fa <USB_SetTurnaroundTime+0xae>
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4a25      	ldr	r2, [pc, #148]	@ (8006784 <USB_SetTurnaroundTime+0x138>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d202      	bcs.n	80066fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80066f4:	2309      	movs	r3, #9
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	e020      	b.n	800673c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4a21      	ldr	r2, [pc, #132]	@ (8006784 <USB_SetTurnaroundTime+0x138>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d306      	bcc.n	8006710 <USB_SetTurnaroundTime+0xc4>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	4a20      	ldr	r2, [pc, #128]	@ (8006788 <USB_SetTurnaroundTime+0x13c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d802      	bhi.n	8006710 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800670a:	2308      	movs	r3, #8
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	e015      	b.n	800673c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	4a1d      	ldr	r2, [pc, #116]	@ (8006788 <USB_SetTurnaroundTime+0x13c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d906      	bls.n	8006726 <USB_SetTurnaroundTime+0xda>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4a1c      	ldr	r2, [pc, #112]	@ (800678c <USB_SetTurnaroundTime+0x140>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d202      	bcs.n	8006726 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006720:	2307      	movs	r3, #7
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	e00a      	b.n	800673c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006726:	2306      	movs	r3, #6
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	e007      	b.n	800673c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006732:	2309      	movs	r3, #9
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	e001      	b.n	800673c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006738:	2309      	movs	r3, #9
 800673a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	029b      	lsls	r3, r3, #10
 8006750:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006754:	431a      	orrs	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	00d8acbf 	.word	0x00d8acbf
 800676c:	00e4e1c0 	.word	0x00e4e1c0
 8006770:	00f42400 	.word	0x00f42400
 8006774:	01067380 	.word	0x01067380
 8006778:	011a499f 	.word	0x011a499f
 800677c:	01312cff 	.word	0x01312cff
 8006780:	014ca43f 	.word	0x014ca43f
 8006784:	016e3600 	.word	0x016e3600
 8006788:	01a6ab1f 	.word	0x01a6ab1f
 800678c:	01e84800 	.word	0x01e84800

08006790 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f043 0201 	orr.w	r2, r3, #1
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f023 0201 	bic.w	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d115      	bne.n	8006822 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006802:	200a      	movs	r0, #10
 8006804:	f7fb ff30 	bl	8002668 <HAL_Delay>
      ms += 10U;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	330a      	adds	r3, #10
 800680c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f001 f939 	bl	8007a86 <USB_GetMode>
 8006814:	4603      	mov	r3, r0
 8006816:	2b01      	cmp	r3, #1
 8006818:	d01e      	beq.n	8006858 <USB_SetCurrentMode+0x84>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2bc7      	cmp	r3, #199	@ 0xc7
 800681e:	d9f0      	bls.n	8006802 <USB_SetCurrentMode+0x2e>
 8006820:	e01a      	b.n	8006858 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d115      	bne.n	8006854 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006834:	200a      	movs	r0, #10
 8006836:	f7fb ff17 	bl	8002668 <HAL_Delay>
      ms += 10U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	330a      	adds	r3, #10
 800683e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 f920 	bl	8007a86 <USB_GetMode>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d005      	beq.n	8006858 <USB_SetCurrentMode+0x84>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006850:	d9f0      	bls.n	8006834 <USB_SetCurrentMode+0x60>
 8006852:	e001      	b.n	8006858 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e005      	b.n	8006864 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2bc8      	cmp	r3, #200	@ 0xc8
 800685c:	d101      	bne.n	8006862 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e000      	b.n	8006864 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800686c:	b084      	sub	sp, #16
 800686e:	b580      	push	{r7, lr}
 8006870:	b086      	sub	sp, #24
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800687a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006886:	2300      	movs	r3, #0
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	e009      	b.n	80068a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	3340      	adds	r3, #64	@ 0x40
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	2200      	movs	r2, #0
 8006898:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	3301      	adds	r3, #1
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2b0e      	cmp	r3, #14
 80068a4:	d9f2      	bls.n	800688c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d11c      	bne.n	80068e8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068bc:	f043 0302 	orr.w	r3, r3, #2
 80068c0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068de:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80068e6:	e00b      	b.n	8006900 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ec:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006906:	461a      	mov	r2, r3
 8006908:	2300      	movs	r3, #0
 800690a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800690c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006910:	2b01      	cmp	r3, #1
 8006912:	d10d      	bne.n	8006930 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006918:	2b00      	cmp	r3, #0
 800691a:	d104      	bne.n	8006926 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800691c:	2100      	movs	r1, #0
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f968 	bl	8006bf4 <USB_SetDevSpeed>
 8006924:	e008      	b.n	8006938 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006926:	2101      	movs	r1, #1
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f963 	bl	8006bf4 <USB_SetDevSpeed>
 800692e:	e003      	b.n	8006938 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006930:	2103      	movs	r1, #3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f95e 	bl	8006bf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006938:	2110      	movs	r1, #16
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f8fa 	bl	8006b34 <USB_FlushTxFifo>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f924 	bl	8006b98 <USB_FlushRxFifo>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006960:	461a      	mov	r2, r3
 8006962:	2300      	movs	r3, #0
 8006964:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800696c:	461a      	mov	r2, r3
 800696e:	2300      	movs	r3, #0
 8006970:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006978:	461a      	mov	r2, r3
 800697a:	2300      	movs	r3, #0
 800697c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800697e:	2300      	movs	r3, #0
 8006980:	613b      	str	r3, [r7, #16]
 8006982:	e043      	b.n	8006a0c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006996:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800699a:	d118      	bne.n	80069ce <USB_DevInit+0x162>
    {
      if (i == 0U)
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ae:	461a      	mov	r2, r3
 80069b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	e013      	b.n	80069e0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c4:	461a      	mov	r2, r3
 80069c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	e008      	b.n	80069e0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069da:	461a      	mov	r2, r3
 80069dc:	2300      	movs	r3, #0
 80069de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ec:	461a      	mov	r2, r3
 80069ee:	2300      	movs	r3, #0
 80069f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069fe:	461a      	mov	r2, r3
 8006a00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	613b      	str	r3, [r7, #16]
 8006a0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a10:	461a      	mov	r2, r3
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d3b5      	bcc.n	8006984 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a18:	2300      	movs	r3, #0
 8006a1a:	613b      	str	r3, [r7, #16]
 8006a1c:	e043      	b.n	8006aa6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a34:	d118      	bne.n	8006a68 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	e013      	b.n	8006a7a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	e008      	b.n	8006a7a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a74:	461a      	mov	r2, r3
 8006a76:	2300      	movs	r3, #0
 8006a78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a86:	461a      	mov	r2, r3
 8006a88:	2300      	movs	r3, #0
 8006a8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006aaa:	461a      	mov	r2, r3
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d3b5      	bcc.n	8006a1e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ac4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006ad2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ad4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d105      	bne.n	8006ae8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	f043 0210 	orr.w	r2, r3, #16
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699a      	ldr	r2, [r3, #24]
 8006aec:	4b10      	ldr	r3, [pc, #64]	@ (8006b30 <USB_DevInit+0x2c4>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006af4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d005      	beq.n	8006b08 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	f043 0208 	orr.w	r2, r3, #8
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d107      	bne.n	8006b20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b18:	f043 0304 	orr.w	r3, r3, #4
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b2c:	b004      	add	sp, #16
 8006b2e:	4770      	bx	lr
 8006b30:	803c3800 	.word	0x803c3800

08006b34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3301      	adds	r3, #1
 8006b46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b4e:	d901      	bls.n	8006b54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e01b      	b.n	8006b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	daf2      	bge.n	8006b42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	019b      	lsls	r3, r3, #6
 8006b64:	f043 0220 	orr.w	r2, r3, #32
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b78:	d901      	bls.n	8006b7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e006      	b.n	8006b8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	d0f0      	beq.n	8006b6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bb0:	d901      	bls.n	8006bb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e018      	b.n	8006be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	daf2      	bge.n	8006ba4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2210      	movs	r2, #16
 8006bc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bd4:	d901      	bls.n	8006bda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e006      	b.n	8006be8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 0310 	and.w	r3, r3, #16
 8006be2:	2b10      	cmp	r3, #16
 8006be4:	d0f0      	beq.n	8006bc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	68f9      	ldr	r1, [r7, #12]
 8006c10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c14:	4313      	orrs	r3, r2
 8006c16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b087      	sub	sp, #28
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 0306 	and.w	r3, r3, #6
 8006c3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d102      	bne.n	8006c4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c46:	2300      	movs	r3, #0
 8006c48:	75fb      	strb	r3, [r7, #23]
 8006c4a:	e00a      	b.n	8006c62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d002      	beq.n	8006c58 <USB_GetDevSpeed+0x32>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b06      	cmp	r3, #6
 8006c56:	d102      	bne.n	8006c5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c58:	2302      	movs	r3, #2
 8006c5a:	75fb      	strb	r3, [r7, #23]
 8006c5c:	e001      	b.n	8006c62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c5e:	230f      	movs	r3, #15
 8006c60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d13a      	bne.n	8006d02 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c92:	69da      	ldr	r2, [r3, #28]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f003 030f 	and.w	r3, r3, #15
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	68f9      	ldr	r1, [r7, #12]
 8006ca6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006caa:	4313      	orrs	r3, r2
 8006cac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d155      	bne.n	8006d70 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	791b      	ldrb	r3, [r3, #4]
 8006cde:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ce0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	059b      	lsls	r3, r3, #22
 8006ce6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	0151      	lsls	r1, r2, #5
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	e036      	b.n	8006d70 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d08:	69da      	ldr	r2, [r3, #28]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	2101      	movs	r1, #1
 8006d14:	fa01 f303 	lsl.w	r3, r1, r3
 8006d18:	041b      	lsls	r3, r3, #16
 8006d1a:	68f9      	ldr	r1, [r7, #12]
 8006d1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d20:	4313      	orrs	r3, r2
 8006d22:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d11a      	bne.n	8006d70 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	791b      	ldrb	r3, [r3, #4]
 8006d54:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d56:	430b      	orrs	r3, r1
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	0151      	lsls	r1, r2, #5
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	440a      	add	r2, r1
 8006d62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d6e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
	...

08006d80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d161      	bne.n	8006e60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006db2:	d11f      	bne.n	8006df4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	0151      	lsls	r1, r2, #5
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	440a      	add	r2, r1
 8006dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006dd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006df2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	f003 030f 	and.w	r3, r3, #15
 8006e04:	2101      	movs	r1, #1
 8006e06:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	43db      	mvns	r3, r3
 8006e0e:	68f9      	ldr	r1, [r7, #12]
 8006e10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e14:	4013      	ands	r3, r2
 8006e16:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e1e:	69da      	ldr	r2, [r3, #28]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	2101      	movs	r1, #1
 8006e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	43db      	mvns	r3, r3
 8006e32:	68f9      	ldr	r1, [r7, #12]
 8006e34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e38:	4013      	ands	r3, r2
 8006e3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	0159      	lsls	r1, r3, #5
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	440b      	add	r3, r1
 8006e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e56:	4619      	mov	r1, r3
 8006e58:	4b35      	ldr	r3, [pc, #212]	@ (8006f30 <USB_DeactivateEndpoint+0x1b0>)
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]
 8006e5e:	e060      	b.n	8006f22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e76:	d11f      	bne.n	8006eb8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	0151      	lsls	r1, r2, #5
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	440a      	add	r2, r1
 8006eae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006eb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ebe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	2101      	movs	r1, #1
 8006eca:	fa01 f303 	lsl.w	r3, r1, r3
 8006ece:	041b      	lsls	r3, r3, #16
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ed8:	4013      	ands	r3, r2
 8006eda:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	2101      	movs	r1, #1
 8006eee:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef2:	041b      	lsls	r3, r3, #16
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	68f9      	ldr	r1, [r7, #12]
 8006ef8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006efc:	4013      	ands	r3, r2
 8006efe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	0159      	lsls	r1, r3, #5
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	440b      	add	r3, r1
 8006f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4b05      	ldr	r3, [pc, #20]	@ (8006f34 <USB_DeactivateEndpoint+0x1b4>)
 8006f1e:	4013      	ands	r3, r2
 8006f20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	ec337800 	.word	0xec337800
 8006f34:	eff37800 	.word	0xeff37800

08006f38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08a      	sub	sp, #40	@ 0x28
 8006f3c:	af02      	add	r7, sp, #8
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	4613      	mov	r3, r2
 8006f44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	f040 817a 	bne.w	800724e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d132      	bne.n	8006fc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f7c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f80:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	0151      	lsls	r1, r2, #5
 8006f98:	69fa      	ldr	r2, [r7, #28]
 8006f9a:	440a      	add	r2, r1
 8006f9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fa0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	0151      	lsls	r1, r2, #5
 8006fb8:	69fa      	ldr	r2, [r7, #28]
 8006fba:	440a      	add	r2, r1
 8006fbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fc0:	0cdb      	lsrs	r3, r3, #19
 8006fc2:	04db      	lsls	r3, r3, #19
 8006fc4:	6113      	str	r3, [r2, #16]
 8006fc6:	e092      	b.n	80070ee <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	0151      	lsls	r1, r2, #5
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	440a      	add	r2, r1
 8006fde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fe2:	0cdb      	lsrs	r3, r3, #19
 8006fe4:	04db      	lsls	r3, r3, #19
 8006fe6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007002:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007006:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800700a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d11a      	bne.n	8007048 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	691a      	ldr	r2, [r3, #16]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	429a      	cmp	r2, r3
 800701c:	d903      	bls.n	8007026 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	689a      	ldr	r2, [r3, #8]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	0151      	lsls	r1, r2, #5
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	440a      	add	r2, r1
 800703c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007040:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007044:	6113      	str	r3, [r2, #16]
 8007046:	e01b      	b.n	8007080 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007054:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	6919      	ldr	r1, [r3, #16]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	440b      	add	r3, r1
 8007060:	1e59      	subs	r1, r3, #1
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	fbb1 f3f3 	udiv	r3, r1, r3
 800706a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800706c:	4ba2      	ldr	r3, [pc, #648]	@ (80072f8 <USB_EPStartXfer+0x3c0>)
 800706e:	400b      	ands	r3, r1
 8007070:	69b9      	ldr	r1, [r7, #24]
 8007072:	0148      	lsls	r0, r1, #5
 8007074:	69f9      	ldr	r1, [r7, #28]
 8007076:	4401      	add	r1, r0
 8007078:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800707c:	4313      	orrs	r3, r2
 800707e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708c:	691a      	ldr	r2, [r3, #16]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007096:	69b9      	ldr	r1, [r7, #24]
 8007098:	0148      	lsls	r0, r1, #5
 800709a:	69f9      	ldr	r1, [r7, #28]
 800709c:	4401      	add	r1, r0
 800709e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80070a2:	4313      	orrs	r3, r2
 80070a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	791b      	ldrb	r3, [r3, #4]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d11f      	bne.n	80070ee <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070c8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80070cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	0151      	lsls	r1, r2, #5
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	440a      	add	r2, r1
 80070e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d14b      	bne.n	800718c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d009      	beq.n	8007110 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007108:	461a      	mov	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	791b      	ldrb	r3, [r3, #4]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d128      	bne.n	800716a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007124:	2b00      	cmp	r3, #0
 8007126:	d110      	bne.n	800714a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	440a      	add	r2, r1
 800713e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007142:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	e00f      	b.n	800716a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	69fa      	ldr	r2, [r7, #28]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007168:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	0151      	lsls	r1, r2, #5
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	440a      	add	r2, r1
 8007180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007184:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	e165      	b.n	8007458 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80071aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	791b      	ldrb	r3, [r3, #4]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d015      	beq.n	80071e0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 814d 	beq.w	8007458 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	2101      	movs	r1, #1
 80071d0:	fa01 f303 	lsl.w	r3, r1, r3
 80071d4:	69f9      	ldr	r1, [r7, #28]
 80071d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071da:	4313      	orrs	r3, r2
 80071dc:	634b      	str	r3, [r1, #52]	@ 0x34
 80071de:	e13b      	b.n	8007458 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d110      	bne.n	8007212 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	0151      	lsls	r1, r2, #5
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	440a      	add	r2, r1
 8007206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800720a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	e00f      	b.n	8007232 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800722c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007230:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	68d9      	ldr	r1, [r3, #12]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	781a      	ldrb	r2, [r3, #0]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	b298      	uxth	r0, r3
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	4603      	mov	r3, r0
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 f9b8 	bl	80075bc <USB_WritePacket>
 800724c:	e104      	b.n	8007458 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	69fa      	ldr	r2, [r7, #28]
 8007262:	440a      	add	r2, r1
 8007264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007268:	0cdb      	lsrs	r3, r3, #19
 800726a:	04db      	lsls	r3, r3, #19
 800726c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	440a      	add	r2, r1
 8007284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007288:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800728c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007290:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d131      	bne.n	80072fc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072bc:	691a      	ldr	r2, [r3, #16]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c6:	69b9      	ldr	r1, [r7, #24]
 80072c8:	0148      	lsls	r0, r1, #5
 80072ca:	69f9      	ldr	r1, [r7, #28]
 80072cc:	4401      	add	r1, r0
 80072ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80072d2:	4313      	orrs	r3, r2
 80072d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	0151      	lsls	r1, r2, #5
 80072e8:	69fa      	ldr	r2, [r7, #28]
 80072ea:	440a      	add	r2, r1
 80072ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072f4:	6113      	str	r3, [r2, #16]
 80072f6:	e061      	b.n	80073bc <USB_EPStartXfer+0x484>
 80072f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d123      	bne.n	800734c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007310:	691a      	ldr	r2, [r3, #16]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800731a:	69b9      	ldr	r1, [r7, #24]
 800731c:	0148      	lsls	r0, r1, #5
 800731e:	69f9      	ldr	r1, [r7, #28]
 8007320:	4401      	add	r1, r0
 8007322:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007326:	4313      	orrs	r3, r2
 8007328:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	0151      	lsls	r1, r2, #5
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	440a      	add	r2, r1
 8007340:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007344:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007348:	6113      	str	r3, [r2, #16]
 800734a:	e037      	b.n	80073bc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	4413      	add	r3, r2
 8007356:	1e5a      	subs	r2, r3, #1
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007360:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	8afa      	ldrh	r2, [r7, #22]
 8007368:	fb03 f202 	mul.w	r2, r3, r2
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737c:	691a      	ldr	r2, [r3, #16]
 800737e:	8afb      	ldrh	r3, [r7, #22]
 8007380:	04d9      	lsls	r1, r3, #19
 8007382:	4b38      	ldr	r3, [pc, #224]	@ (8007464 <USB_EPStartXfer+0x52c>)
 8007384:	400b      	ands	r3, r1
 8007386:	69b9      	ldr	r1, [r7, #24]
 8007388:	0148      	lsls	r0, r1, #5
 800738a:	69f9      	ldr	r1, [r7, #28]
 800738c:	4401      	add	r1, r0
 800738e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007392:	4313      	orrs	r3, r2
 8007394:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a2:	691a      	ldr	r2, [r3, #16]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073ac:	69b9      	ldr	r1, [r7, #24]
 80073ae:	0148      	lsls	r0, r1, #5
 80073b0:	69f9      	ldr	r1, [r7, #28]
 80073b2:	4401      	add	r1, r0
 80073b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80073b8:	4313      	orrs	r3, r2
 80073ba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80073bc:	79fb      	ldrb	r3, [r7, #7]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d10d      	bne.n	80073de <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	68d9      	ldr	r1, [r3, #12]
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073da:	460a      	mov	r2, r1
 80073dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	791b      	ldrb	r3, [r3, #4]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d128      	bne.n	8007438 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d110      	bne.n	8007418 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	0151      	lsls	r1, r2, #5
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	440a      	add	r2, r1
 800740c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007410:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	e00f      	b.n	8007438 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	0151      	lsls	r1, r2, #5
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	440a      	add	r2, r1
 800742e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007436:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	440a      	add	r2, r1
 800744e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007452:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007456:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3720      	adds	r7, #32
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	1ff80000 	.word	0x1ff80000

08007468 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	785b      	ldrb	r3, [r3, #1]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d14a      	bne.n	800751c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800749a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800749e:	f040 8086 	bne.w	80075ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	7812      	ldrb	r2, [r2, #0]
 80074b6:	0151      	lsls	r1, r2, #5
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	440a      	add	r2, r1
 80074bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	7812      	ldrb	r2, [r2, #0]
 80074da:	0151      	lsls	r1, r2, #5
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	440a      	add	r2, r1
 80074e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3301      	adds	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d902      	bls.n	8007500 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	75fb      	strb	r3, [r7, #23]
          break;
 80074fe:	e056      	b.n	80075ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007514:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007518:	d0e7      	beq.n	80074ea <USB_EPStopXfer+0x82>
 800751a:	e048      	b.n	80075ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007530:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007534:	d13b      	bne.n	80075ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	7812      	ldrb	r2, [r2, #0]
 800754a:	0151      	lsls	r1, r2, #5
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	440a      	add	r2, r1
 8007550:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007554:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007558:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	7812      	ldrb	r2, [r2, #0]
 800756e:	0151      	lsls	r1, r2, #5
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	440a      	add	r2, r1
 8007574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007578:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800757c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3301      	adds	r3, #1
 8007582:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f242 7210 	movw	r2, #10000	@ 0x2710
 800758a:	4293      	cmp	r3, r2
 800758c:	d902      	bls.n	8007594 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	75fb      	strb	r3, [r7, #23]
          break;
 8007592:	e00c      	b.n	80075ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075ac:	d0e7      	beq.n	800757e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80075ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	371c      	adds	r7, #28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80075bc:	b480      	push	{r7}
 80075be:	b089      	sub	sp, #36	@ 0x24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4611      	mov	r1, r2
 80075c8:	461a      	mov	r2, r3
 80075ca:	460b      	mov	r3, r1
 80075cc:	71fb      	strb	r3, [r7, #7]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80075da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d123      	bne.n	800762a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80075e2:	88bb      	ldrh	r3, [r7, #4]
 80075e4:	3303      	adds	r3, #3
 80075e6:	089b      	lsrs	r3, r3, #2
 80075e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80075ea:	2300      	movs	r3, #0
 80075ec:	61bb      	str	r3, [r7, #24]
 80075ee:	e018      	b.n	8007622 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	031a      	lsls	r2, r3, #12
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075fc:	461a      	mov	r2, r3
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	3301      	adds	r3, #1
 8007608:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	3301      	adds	r3, #1
 800760e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	3301      	adds	r3, #1
 8007614:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	3301      	adds	r3, #1
 800761a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	3301      	adds	r3, #1
 8007620:	61bb      	str	r3, [r7, #24]
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	429a      	cmp	r2, r3
 8007628:	d3e2      	bcc.n	80075f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3724      	adds	r7, #36	@ 0x24
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007638:	b480      	push	{r7}
 800763a:	b08b      	sub	sp, #44	@ 0x2c
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	4613      	mov	r3, r2
 8007644:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800764e:	88fb      	ldrh	r3, [r7, #6]
 8007650:	089b      	lsrs	r3, r3, #2
 8007652:	b29b      	uxth	r3, r3
 8007654:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007656:	88fb      	ldrh	r3, [r7, #6]
 8007658:	f003 0303 	and.w	r3, r3, #3
 800765c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800765e:	2300      	movs	r3, #0
 8007660:	623b      	str	r3, [r7, #32]
 8007662:	e014      	b.n	800768e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	3301      	adds	r3, #1
 8007674:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	3301      	adds	r3, #1
 800767a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767e:	3301      	adds	r3, #1
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007684:	3301      	adds	r3, #1
 8007686:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	3301      	adds	r3, #1
 800768c:	623b      	str	r3, [r7, #32]
 800768e:	6a3a      	ldr	r2, [r7, #32]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	429a      	cmp	r2, r3
 8007694:	d3e6      	bcc.n	8007664 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007696:	8bfb      	ldrh	r3, [r7, #30]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01e      	beq.n	80076da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076a6:	461a      	mov	r2, r3
 80076a8:	f107 0310 	add.w	r3, r7, #16
 80076ac:	6812      	ldr	r2, [r2, #0]
 80076ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	fa22 f303 	lsr.w	r3, r2, r3
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	701a      	strb	r2, [r3, #0]
      i++;
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	3301      	adds	r3, #1
 80076c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	3301      	adds	r3, #1
 80076cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80076ce:	8bfb      	ldrh	r3, [r7, #30]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076d4:	8bfb      	ldrh	r3, [r7, #30]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1ea      	bne.n	80076b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076dc:	4618      	mov	r0, r3
 80076de:	372c      	adds	r7, #44	@ 0x2c
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d12c      	bne.n	800775e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	db12      	blt.n	800773c <USB_EPSetStall+0x54>
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00f      	beq.n	800773c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	0151      	lsls	r1, r2, #5
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	440a      	add	r2, r1
 8007732:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007736:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800773a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	0151      	lsls	r1, r2, #5
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	440a      	add	r2, r1
 8007752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007756:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	e02b      	b.n	80077b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	db12      	blt.n	8007796 <USB_EPSetStall+0xae>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00f      	beq.n	8007796 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4413      	add	r3, r2
 800777e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	0151      	lsls	r1, r2, #5
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	440a      	add	r2, r1
 800778c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007790:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007794:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	0151      	lsls	r1, r2, #5
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	440a      	add	r2, r1
 80077ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80077b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d128      	bne.n	8007832 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	0151      	lsls	r1, r2, #5
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	440a      	add	r2, r1
 80077f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	791b      	ldrb	r3, [r3, #4]
 8007804:	2b03      	cmp	r3, #3
 8007806:	d003      	beq.n	8007810 <USB_EPClearStall+0x4c>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	791b      	ldrb	r3, [r3, #4]
 800780c:	2b02      	cmp	r3, #2
 800780e:	d138      	bne.n	8007882 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	440a      	add	r2, r1
 8007826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800782a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	e027      	b.n	8007882 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800784c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007850:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	791b      	ldrb	r3, [r3, #4]
 8007856:	2b03      	cmp	r3, #3
 8007858:	d003      	beq.n	8007862 <USB_EPClearStall+0x9e>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	791b      	ldrb	r3, [r3, #4]
 800785e:	2b02      	cmp	r3, #2
 8007860:	d10f      	bne.n	8007882 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	0151      	lsls	r1, r2, #5
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	440a      	add	r2, r1
 8007878:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800787c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007880:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80078b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	78fb      	ldrb	r3, [r7, #3]
 80078be:	011b      	lsls	r3, r3, #4
 80078c0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80078c4:	68f9      	ldr	r1, [r7, #12]
 80078c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078ca:	4313      	orrs	r3, r2
 80078cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80078f6:	f023 0303 	bic.w	r3, r3, #3
 80078fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800790a:	f023 0302 	bic.w	r3, r3, #2
 800790e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800791e:	b480      	push	{r7}
 8007920:	b085      	sub	sp, #20
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007938:	f023 0303 	bic.w	r3, r3, #3
 800793c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800794c:	f043 0302 	orr.w	r3, r3, #2
 8007950:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4013      	ands	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007978:	68fb      	ldr	r3, [r7, #12]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007986:	b480      	push	{r7}
 8007988:	b085      	sub	sp, #20
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	4013      	ands	r3, r2
 80079a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	0c1b      	lsrs	r3, r3, #16
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	4013      	ands	r3, r2
 80079dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	b29b      	uxth	r3, r3
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b085      	sub	sp, #20
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80079fe:	78fb      	ldrb	r3, [r7, #3]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b087      	sub	sp, #28
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	460b      	mov	r3, r1
 8007a34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a4c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007a4e:	78fb      	ldrb	r3, [r7, #3]
 8007a50:	f003 030f 	and.w	r3, r3, #15
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5a:	01db      	lsls	r3, r3, #7
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4013      	ands	r3, r2
 8007a76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a78:	68bb      	ldr	r3, [r7, #8]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	f003 0301 	and.w	r3, r3, #1
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b085      	sub	sp, #20
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007abc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007ac0:	f023 0307 	bic.w	r3, r3, #7
 8007ac4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ad8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	460b      	mov	r3, r1
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	333c      	adds	r3, #60	@ 0x3c
 8007afe:	3304      	adds	r3, #4
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	4a26      	ldr	r2, [pc, #152]	@ (8007ba0 <USB_EP0_OutStart+0xb8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d90a      	bls.n	8007b22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b1c:	d101      	bne.n	8007b22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e037      	b.n	8007b92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b28:	461a      	mov	r2, r3
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b50:	f043 0318 	orr.w	r3, r3, #24
 8007b54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b64:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007b68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007b6a:	7afb      	ldrb	r3, [r7, #11]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d10f      	bne.n	8007b90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b8a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007b8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	371c      	adds	r7, #28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	4f54300a 	.word	0x4f54300a

08007ba4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bbc:	d901      	bls.n	8007bc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e01b      	b.n	8007bfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	daf2      	bge.n	8007bb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f043 0201 	orr.w	r2, r3, #1
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007be6:	d901      	bls.n	8007bec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e006      	b.n	8007bfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d0f0      	beq.n	8007bda <USB_CoreReset+0x36>

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
	...

08007c08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c14:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007c18:	f002 fc88 	bl	800a52c <USBD_static_malloc>
 8007c1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d109      	bne.n	8007c38 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	32b0      	adds	r2, #176	@ 0xb0
 8007c2e:	2100      	movs	r1, #0
 8007c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007c34:	2302      	movs	r3, #2
 8007c36:	e0d4      	b.n	8007de2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007c38:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f003 fad1 	bl	800b1e6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	32b0      	adds	r2, #176	@ 0xb0
 8007c4e:	68f9      	ldr	r1, [r7, #12]
 8007c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	32b0      	adds	r2, #176	@ 0xb0
 8007c5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	7c1b      	ldrb	r3, [r3, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d138      	bne.n	8007ce2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007c70:	4b5e      	ldr	r3, [pc, #376]	@ (8007dec <USBD_CDC_Init+0x1e4>)
 8007c72:	7819      	ldrb	r1, [r3, #0]
 8007c74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c78:	2202      	movs	r2, #2
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f002 fb33 	bl	800a2e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007c80:	4b5a      	ldr	r3, [pc, #360]	@ (8007dec <USBD_CDC_Init+0x1e4>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	f003 020f 	and.w	r2, r3, #15
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	440b      	add	r3, r1
 8007c94:	3324      	adds	r3, #36	@ 0x24
 8007c96:	2201      	movs	r2, #1
 8007c98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007c9a:	4b55      	ldr	r3, [pc, #340]	@ (8007df0 <USBD_CDC_Init+0x1e8>)
 8007c9c:	7819      	ldrb	r1, [r3, #0]
 8007c9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f002 fb1e 	bl	800a2e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007caa:	4b51      	ldr	r3, [pc, #324]	@ (8007df0 <USBD_CDC_Init+0x1e8>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	f003 020f 	and.w	r2, r3, #15
 8007cb2:	6879      	ldr	r1, [r7, #4]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	440b      	add	r3, r1
 8007cbe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8007df4 <USBD_CDC_Init+0x1ec>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	f003 020f 	and.w	r2, r3, #15
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	440b      	add	r3, r1
 8007cda:	3326      	adds	r3, #38	@ 0x26
 8007cdc:	2210      	movs	r2, #16
 8007cde:	801a      	strh	r2, [r3, #0]
 8007ce0:	e035      	b.n	8007d4e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ce2:	4b42      	ldr	r3, [pc, #264]	@ (8007dec <USBD_CDC_Init+0x1e4>)
 8007ce4:	7819      	ldrb	r1, [r3, #0]
 8007ce6:	2340      	movs	r3, #64	@ 0x40
 8007ce8:	2202      	movs	r2, #2
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f002 fafb 	bl	800a2e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8007dec <USBD_CDC_Init+0x1e4>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	f003 020f 	and.w	r2, r3, #15
 8007cf8:	6879      	ldr	r1, [r7, #4]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	440b      	add	r3, r1
 8007d04:	3324      	adds	r3, #36	@ 0x24
 8007d06:	2201      	movs	r2, #1
 8007d08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d0a:	4b39      	ldr	r3, [pc, #228]	@ (8007df0 <USBD_CDC_Init+0x1e8>)
 8007d0c:	7819      	ldrb	r1, [r3, #0]
 8007d0e:	2340      	movs	r3, #64	@ 0x40
 8007d10:	2202      	movs	r2, #2
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f002 fae7 	bl	800a2e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d18:	4b35      	ldr	r3, [pc, #212]	@ (8007df0 <USBD_CDC_Init+0x1e8>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	f003 020f 	and.w	r2, r3, #15
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	4613      	mov	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	440b      	add	r3, r1
 8007d2c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d30:	2201      	movs	r2, #1
 8007d32:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d34:	4b2f      	ldr	r3, [pc, #188]	@ (8007df4 <USBD_CDC_Init+0x1ec>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	f003 020f 	and.w	r2, r3, #15
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	3326      	adds	r3, #38	@ 0x26
 8007d4a:	2210      	movs	r2, #16
 8007d4c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d4e:	4b29      	ldr	r3, [pc, #164]	@ (8007df4 <USBD_CDC_Init+0x1ec>)
 8007d50:	7819      	ldrb	r1, [r3, #0]
 8007d52:	2308      	movs	r3, #8
 8007d54:	2203      	movs	r2, #3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f002 fac5 	bl	800a2e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007d5c:	4b25      	ldr	r3, [pc, #148]	@ (8007df4 <USBD_CDC_Init+0x1ec>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	f003 020f 	and.w	r2, r3, #15
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	440b      	add	r3, r1
 8007d70:	3324      	adds	r3, #36	@ 0x24
 8007d72:	2201      	movs	r2, #1
 8007d74:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	33b0      	adds	r3, #176	@ 0xb0
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007dac:	2302      	movs	r3, #2
 8007dae:	e018      	b.n	8007de2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	7c1b      	ldrb	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007db8:	4b0d      	ldr	r3, [pc, #52]	@ (8007df0 <USBD_CDC_Init+0x1e8>)
 8007dba:	7819      	ldrb	r1, [r3, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007dc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f002 fb7c 	bl	800a4c4 <USBD_LL_PrepareReceive>
 8007dcc:	e008      	b.n	8007de0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007dce:	4b08      	ldr	r3, [pc, #32]	@ (8007df0 <USBD_CDC_Init+0x1e8>)
 8007dd0:	7819      	ldrb	r1, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007dd8:	2340      	movs	r3, #64	@ 0x40
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f002 fb72 	bl	800a4c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20000093 	.word	0x20000093
 8007df0:	20000094 	.word	0x20000094
 8007df4:	20000095 	.word	0x20000095

08007df8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007e04:	4b3a      	ldr	r3, [pc, #232]	@ (8007ef0 <USBD_CDC_DeInit+0xf8>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f002 fa91 	bl	800a332 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007e10:	4b37      	ldr	r3, [pc, #220]	@ (8007ef0 <USBD_CDC_DeInit+0xf8>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	f003 020f 	and.w	r2, r3, #15
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	440b      	add	r3, r1
 8007e24:	3324      	adds	r3, #36	@ 0x24
 8007e26:	2200      	movs	r2, #0
 8007e28:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007e2a:	4b32      	ldr	r3, [pc, #200]	@ (8007ef4 <USBD_CDC_DeInit+0xfc>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f002 fa7e 	bl	800a332 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007e36:	4b2f      	ldr	r3, [pc, #188]	@ (8007ef4 <USBD_CDC_DeInit+0xfc>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	f003 020f 	and.w	r2, r3, #15
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	4613      	mov	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	440b      	add	r3, r1
 8007e4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007e4e:	2200      	movs	r2, #0
 8007e50:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007e52:	4b29      	ldr	r3, [pc, #164]	@ (8007ef8 <USBD_CDC_DeInit+0x100>)
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f002 fa6a 	bl	800a332 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007e5e:	4b26      	ldr	r3, [pc, #152]	@ (8007ef8 <USBD_CDC_DeInit+0x100>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	f003 020f 	and.w	r2, r3, #15
 8007e66:	6879      	ldr	r1, [r7, #4]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	440b      	add	r3, r1
 8007e72:	3324      	adds	r3, #36	@ 0x24
 8007e74:	2200      	movs	r2, #0
 8007e76:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007e78:	4b1f      	ldr	r3, [pc, #124]	@ (8007ef8 <USBD_CDC_DeInit+0x100>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	f003 020f 	and.w	r2, r3, #15
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	4613      	mov	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	440b      	add	r3, r1
 8007e8c:	3326      	adds	r3, #38	@ 0x26
 8007e8e:	2200      	movs	r2, #0
 8007e90:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	32b0      	adds	r2, #176	@ 0xb0
 8007e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01f      	beq.n	8007ee4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	33b0      	adds	r3, #176	@ 0xb0
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	32b0      	adds	r2, #176	@ 0xb0
 8007ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f002 fb3e 	bl	800a548 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	32b0      	adds	r2, #176	@ 0xb0
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000093 	.word	0x20000093
 8007ef4:	20000094 	.word	0x20000094
 8007ef8:	20000095 	.word	0x20000095

08007efc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	32b0      	adds	r2, #176	@ 0xb0
 8007f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e0bf      	b.n	80080ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d050      	beq.n	8007fda <USBD_CDC_Setup+0xde>
 8007f38:	2b20      	cmp	r3, #32
 8007f3a:	f040 80af 	bne.w	800809c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	88db      	ldrh	r3, [r3, #6]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d03a      	beq.n	8007fbc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	b25b      	sxtb	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	da1b      	bge.n	8007f88 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	33b0      	adds	r3, #176	@ 0xb0
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	683a      	ldr	r2, [r7, #0]
 8007f64:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007f66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	88d2      	ldrh	r2, [r2, #6]
 8007f6c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	88db      	ldrh	r3, [r3, #6]
 8007f72:	2b07      	cmp	r3, #7
 8007f74:	bf28      	it	cs
 8007f76:	2307      	movcs	r3, #7
 8007f78:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	89fa      	ldrh	r2, [r7, #14]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 fd87 	bl	8009a94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007f86:	e090      	b.n	80080aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	785a      	ldrb	r2, [r3, #1]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	88db      	ldrh	r3, [r3, #6]
 8007f96:	2b3f      	cmp	r3, #63	@ 0x3f
 8007f98:	d803      	bhi.n	8007fa2 <USBD_CDC_Setup+0xa6>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	88db      	ldrh	r3, [r3, #6]
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	e000      	b.n	8007fa4 <USBD_CDC_Setup+0xa8>
 8007fa2:	2240      	movs	r2, #64	@ 0x40
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007faa:	6939      	ldr	r1, [r7, #16]
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 fd99 	bl	8009aec <USBD_CtlPrepareRx>
      break;
 8007fba:	e076      	b.n	80080aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	33b0      	adds	r3, #176	@ 0xb0
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	7850      	ldrb	r0, [r2, #1]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	4798      	blx	r3
      break;
 8007fd8:	e067      	b.n	80080aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	785b      	ldrb	r3, [r3, #1]
 8007fde:	2b0b      	cmp	r3, #11
 8007fe0:	d851      	bhi.n	8008086 <USBD_CDC_Setup+0x18a>
 8007fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe8 <USBD_CDC_Setup+0xec>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08008019 	.word	0x08008019
 8007fec:	08008095 	.word	0x08008095
 8007ff0:	08008087 	.word	0x08008087
 8007ff4:	08008087 	.word	0x08008087
 8007ff8:	08008087 	.word	0x08008087
 8007ffc:	08008087 	.word	0x08008087
 8008000:	08008087 	.word	0x08008087
 8008004:	08008087 	.word	0x08008087
 8008008:	08008087 	.word	0x08008087
 800800c:	08008087 	.word	0x08008087
 8008010:	08008043 	.word	0x08008043
 8008014:	0800806d 	.word	0x0800806d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b03      	cmp	r3, #3
 8008022:	d107      	bne.n	8008034 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008024:	f107 030a 	add.w	r3, r7, #10
 8008028:	2202      	movs	r2, #2
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 fd31 	bl	8009a94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008032:	e032      	b.n	800809a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fcbb 	bl	80099b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800803c:	2303      	movs	r3, #3
 800803e:	75fb      	strb	r3, [r7, #23]
          break;
 8008040:	e02b      	b.n	800809a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b03      	cmp	r3, #3
 800804c:	d107      	bne.n	800805e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800804e:	f107 030d 	add.w	r3, r7, #13
 8008052:	2201      	movs	r2, #1
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 fd1c 	bl	8009a94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800805c:	e01d      	b.n	800809a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 fca6 	bl	80099b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008066:	2303      	movs	r3, #3
 8008068:	75fb      	strb	r3, [r7, #23]
          break;
 800806a:	e016      	b.n	800809a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b03      	cmp	r3, #3
 8008076:	d00f      	beq.n	8008098 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 fc99 	bl	80099b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008080:	2303      	movs	r3, #3
 8008082:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008084:	e008      	b.n	8008098 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 fc92 	bl	80099b2 <USBD_CtlError>
          ret = USBD_FAIL;
 800808e:	2303      	movs	r3, #3
 8008090:	75fb      	strb	r3, [r7, #23]
          break;
 8008092:	e002      	b.n	800809a <USBD_CDC_Setup+0x19e>
          break;
 8008094:	bf00      	nop
 8008096:	e008      	b.n	80080aa <USBD_CDC_Setup+0x1ae>
          break;
 8008098:	bf00      	nop
      }
      break;
 800809a:	e006      	b.n	80080aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f001 fc87 	bl	80099b2 <USBD_CtlError>
      ret = USBD_FAIL;
 80080a4:	2303      	movs	r3, #3
 80080a6:	75fb      	strb	r3, [r7, #23]
      break;
 80080a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	32b0      	adds	r2, #176	@ 0xb0
 80080d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80080da:	2303      	movs	r3, #3
 80080dc:	e065      	b.n	80081aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	32b0      	adds	r2, #176	@ 0xb0
 80080e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	f003 020f 	and.w	r2, r3, #15
 80080f4:	6879      	ldr	r1, [r7, #4]
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	440b      	add	r3, r1
 8008100:	3318      	adds	r3, #24
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d02f      	beq.n	8008168 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008108:	78fb      	ldrb	r3, [r7, #3]
 800810a:	f003 020f 	and.w	r2, r3, #15
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4613      	mov	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	440b      	add	r3, r1
 800811a:	3318      	adds	r3, #24
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	78fb      	ldrb	r3, [r7, #3]
 8008120:	f003 010f 	and.w	r1, r3, #15
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	460b      	mov	r3, r1
 8008128:	00db      	lsls	r3, r3, #3
 800812a:	440b      	add	r3, r1
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4403      	add	r3, r0
 8008130:	331c      	adds	r3, #28
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	fbb2 f1f3 	udiv	r1, r2, r3
 8008138:	fb01 f303 	mul.w	r3, r1, r3
 800813c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800813e:	2b00      	cmp	r3, #0
 8008140:	d112      	bne.n	8008168 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008142:	78fb      	ldrb	r3, [r7, #3]
 8008144:	f003 020f 	and.w	r2, r3, #15
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	4613      	mov	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	440b      	add	r3, r1
 8008154:	3318      	adds	r3, #24
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800815a:	78f9      	ldrb	r1, [r7, #3]
 800815c:	2300      	movs	r3, #0
 800815e:	2200      	movs	r2, #0
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f002 f98e 	bl	800a482 <USBD_LL_Transmit>
 8008166:	e01f      	b.n	80081a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2200      	movs	r2, #0
 800816c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	33b0      	adds	r3, #176	@ 0xb0
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4413      	add	r3, r2
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d010      	beq.n	80081a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	33b0      	adds	r3, #176	@ 0xb0
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80081a4:	78fa      	ldrb	r2, [r7, #3]
 80081a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	460b      	mov	r3, r1
 80081bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	32b0      	adds	r2, #176	@ 0xb0
 80081c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	32b0      	adds	r2, #176	@ 0xb0
 80081d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e01a      	b.n	800821a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80081e4:	78fb      	ldrb	r3, [r7, #3]
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f002 f98c 	bl	800a506 <USBD_LL_GetRxDataSize>
 80081ee:	4602      	mov	r2, r0
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	33b0      	adds	r3, #176	@ 0xb0
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008214:	4611      	mov	r1, r2
 8008216:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	32b0      	adds	r2, #176	@ 0xb0
 8008234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008238:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008240:	2303      	movs	r3, #3
 8008242:	e024      	b.n	800828e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	33b0      	adds	r3, #176	@ 0xb0
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d019      	beq.n	800828c <USBD_CDC_EP0_RxReady+0x6a>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800825e:	2bff      	cmp	r3, #255	@ 0xff
 8008260:	d014      	beq.n	800828c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	33b0      	adds	r3, #176	@ 0xb0
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800827a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008282:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	22ff      	movs	r2, #255	@ 0xff
 8008288:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
	...

08008298 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80082a0:	2182      	movs	r1, #130	@ 0x82
 80082a2:	4818      	ldr	r0, [pc, #96]	@ (8008304 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80082a4:	f000 fd4f 	bl	8008d46 <USBD_GetEpDesc>
 80082a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80082aa:	2101      	movs	r1, #1
 80082ac:	4815      	ldr	r0, [pc, #84]	@ (8008304 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80082ae:	f000 fd4a 	bl	8008d46 <USBD_GetEpDesc>
 80082b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80082b4:	2181      	movs	r1, #129	@ 0x81
 80082b6:	4813      	ldr	r0, [pc, #76]	@ (8008304 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80082b8:	f000 fd45 	bl	8008d46 <USBD_GetEpDesc>
 80082bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	2210      	movs	r2, #16
 80082c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d006      	beq.n	80082de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082d8:	711a      	strb	r2, [r3, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d006      	beq.n	80082f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082ec:	711a      	strb	r2, [r3, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2243      	movs	r2, #67	@ 0x43
 80082f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082f8:	4b02      	ldr	r3, [pc, #8]	@ (8008304 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	20000050 	.word	0x20000050

08008308 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008310:	2182      	movs	r1, #130	@ 0x82
 8008312:	4818      	ldr	r0, [pc, #96]	@ (8008374 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008314:	f000 fd17 	bl	8008d46 <USBD_GetEpDesc>
 8008318:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800831a:	2101      	movs	r1, #1
 800831c:	4815      	ldr	r0, [pc, #84]	@ (8008374 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800831e:	f000 fd12 	bl	8008d46 <USBD_GetEpDesc>
 8008322:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008324:	2181      	movs	r1, #129	@ 0x81
 8008326:	4813      	ldr	r0, [pc, #76]	@ (8008374 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008328:	f000 fd0d 	bl	8008d46 <USBD_GetEpDesc>
 800832c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2210      	movs	r2, #16
 8008338:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d006      	beq.n	800834e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	2200      	movs	r2, #0
 8008344:	711a      	strb	r2, [r3, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f042 0202 	orr.w	r2, r2, #2
 800834c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d006      	beq.n	8008362 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	711a      	strb	r2, [r3, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f042 0202 	orr.w	r2, r2, #2
 8008360:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2243      	movs	r2, #67	@ 0x43
 8008366:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008368:	4b02      	ldr	r3, [pc, #8]	@ (8008374 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20000050 	.word	0x20000050

08008378 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008380:	2182      	movs	r1, #130	@ 0x82
 8008382:	4818      	ldr	r0, [pc, #96]	@ (80083e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008384:	f000 fcdf 	bl	8008d46 <USBD_GetEpDesc>
 8008388:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800838a:	2101      	movs	r1, #1
 800838c:	4815      	ldr	r0, [pc, #84]	@ (80083e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800838e:	f000 fcda 	bl	8008d46 <USBD_GetEpDesc>
 8008392:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008394:	2181      	movs	r1, #129	@ 0x81
 8008396:	4813      	ldr	r0, [pc, #76]	@ (80083e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008398:	f000 fcd5 	bl	8008d46 <USBD_GetEpDesc>
 800839c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2210      	movs	r2, #16
 80083a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d006      	beq.n	80083be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083b8:	711a      	strb	r2, [r3, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d006      	beq.n	80083d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083cc:	711a      	strb	r2, [r3, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2243      	movs	r2, #67	@ 0x43
 80083d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80083d8:	4b02      	ldr	r3, [pc, #8]	@ (80083e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20000050 	.word	0x20000050

080083e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	220a      	movs	r2, #10
 80083f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80083f6:	4b03      	ldr	r3, [pc, #12]	@ (8008404 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	2000000c 	.word	0x2000000c

08008408 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008418:	2303      	movs	r3, #3
 800841a:	e009      	b.n	8008430 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	33b0      	adds	r3, #176	@ 0xb0
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	32b0      	adds	r2, #176	@ 0xb0
 8008452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008456:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800845e:	2303      	movs	r3, #3
 8008460:	e008      	b.n	8008474 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	32b0      	adds	r2, #176	@ 0xb0
 8008494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008498:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e004      	b.n	80084ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
	...

080084bc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	32b0      	adds	r2, #176	@ 0xb0
 80084ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80084d4:	2301      	movs	r3, #1
 80084d6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80084de:	2303      	movs	r3, #3
 80084e0:	e025      	b.n	800852e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d11f      	bne.n	800852c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80084f4:	4b10      	ldr	r3, [pc, #64]	@ (8008538 <USBD_CDC_TransmitPacket+0x7c>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f003 020f 	and.w	r2, r3, #15
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	4613      	mov	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4403      	add	r3, r0
 800850e:	3318      	adds	r3, #24
 8008510:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008512:	4b09      	ldr	r3, [pc, #36]	@ (8008538 <USBD_CDC_TransmitPacket+0x7c>)
 8008514:	7819      	ldrb	r1, [r3, #0]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 ffad 	bl	800a482 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800852c:	7bfb      	ldrb	r3, [r7, #15]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000093 	.word	0x20000093

0800853c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	32b0      	adds	r2, #176	@ 0xb0
 800854e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008552:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	32b0      	adds	r2, #176	@ 0xb0
 800855e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008566:	2303      	movs	r3, #3
 8008568:	e018      	b.n	800859c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	7c1b      	ldrb	r3, [r3, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10a      	bne.n	8008588 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008572:	4b0c      	ldr	r3, [pc, #48]	@ (80085a4 <USBD_CDC_ReceivePacket+0x68>)
 8008574:	7819      	ldrb	r1, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800857c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 ff9f 	bl	800a4c4 <USBD_LL_PrepareReceive>
 8008586:	e008      	b.n	800859a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008588:	4b06      	ldr	r3, [pc, #24]	@ (80085a4 <USBD_CDC_ReceivePacket+0x68>)
 800858a:	7819      	ldrb	r1, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008592:	2340      	movs	r3, #64	@ 0x40
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 ff95 	bl	800a4c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	20000094 	.word	0x20000094

080085a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	4613      	mov	r3, r2
 80085b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80085bc:	2303      	movs	r3, #3
 80085be:	e01f      	b.n	8008600 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	79fa      	ldrb	r2, [r7, #7]
 80085f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f001 fe0f 	bl	800a218 <USBD_LL_Init>
 80085fa:	4603      	mov	r3, r0
 80085fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008612:	2300      	movs	r3, #0
 8008614:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800861c:	2303      	movs	r3, #3
 800861e:	e025      	b.n	800866c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	32ae      	adds	r2, #174	@ 0xae
 8008632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00f      	beq.n	800865c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	32ae      	adds	r2, #174	@ 0xae
 8008646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864c:	f107 020e 	add.w	r2, r7, #14
 8008650:	4610      	mov	r0, r2
 8008652:	4798      	blx	r3
 8008654:	4602      	mov	r2, r0
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 fe17 	bl	800a2b0 <USBD_LL_Start>
 8008682:	4603      	mov	r3, r0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008694:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008696:	4618      	mov	r0, r3
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	460b      	mov	r3, r1
 80086ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d009      	beq.n	80086d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	78fa      	ldrb	r2, [r7, #3]
 80086c6:	4611      	mov	r1, r2
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	4798      	blx	r3
 80086cc:	4603      	mov	r3, r0
 80086ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b084      	sub	sp, #16
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	460b      	mov	r3, r1
 80086e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	4798      	blx	r3
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008700:	2303      	movs	r3, #3
 8008702:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	4618      	mov	r0, r3
 8008722:	f001 f90c 	bl	800993e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008734:	461a      	mov	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008742:	f003 031f 	and.w	r3, r3, #31
 8008746:	2b02      	cmp	r3, #2
 8008748:	d01a      	beq.n	8008780 <USBD_LL_SetupStage+0x72>
 800874a:	2b02      	cmp	r3, #2
 800874c:	d822      	bhi.n	8008794 <USBD_LL_SetupStage+0x86>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d002      	beq.n	8008758 <USBD_LL_SetupStage+0x4a>
 8008752:	2b01      	cmp	r3, #1
 8008754:	d00a      	beq.n	800876c <USBD_LL_SetupStage+0x5e>
 8008756:	e01d      	b.n	8008794 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fb63 	bl	8008e2c <USBD_StdDevReq>
 8008766:	4603      	mov	r3, r0
 8008768:	73fb      	strb	r3, [r7, #15]
      break;
 800876a:	e020      	b.n	80087ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fbcb 	bl	8008f10 <USBD_StdItfReq>
 800877a:	4603      	mov	r3, r0
 800877c:	73fb      	strb	r3, [r7, #15]
      break;
 800877e:	e016      	b.n	80087ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fc2d 	bl	8008fe8 <USBD_StdEPReq>
 800878e:	4603      	mov	r3, r0
 8008790:	73fb      	strb	r3, [r7, #15]
      break;
 8008792:	e00c      	b.n	80087ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800879a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 fde4 	bl	800a370 <USBD_LL_StallEP>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73fb      	strb	r3, [r7, #15]
      break;
 80087ac:	bf00      	nop
  }

  return ret;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	460b      	mov	r3, r1
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80087ca:	7afb      	ldrb	r3, [r7, #11]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d16e      	bne.n	80088ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80087d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80087de:	2b03      	cmp	r3, #3
 80087e0:	f040 8098 	bne.w	8008914 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d913      	bls.n	8008818 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	1ad2      	subs	r2, r2, r3
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	68da      	ldr	r2, [r3, #12]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	4293      	cmp	r3, r2
 8008808:	bf28      	it	cs
 800880a:	4613      	movcs	r3, r2
 800880c:	461a      	mov	r2, r3
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f001 f988 	bl	8009b26 <USBD_CtlContinueRx>
 8008816:	e07d      	b.n	8008914 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800881e:	f003 031f 	and.w	r3, r3, #31
 8008822:	2b02      	cmp	r3, #2
 8008824:	d014      	beq.n	8008850 <USBD_LL_DataOutStage+0x98>
 8008826:	2b02      	cmp	r3, #2
 8008828:	d81d      	bhi.n	8008866 <USBD_LL_DataOutStage+0xae>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <USBD_LL_DataOutStage+0x7c>
 800882e:	2b01      	cmp	r3, #1
 8008830:	d003      	beq.n	800883a <USBD_LL_DataOutStage+0x82>
 8008832:	e018      	b.n	8008866 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008834:	2300      	movs	r3, #0
 8008836:	75bb      	strb	r3, [r7, #22]
            break;
 8008838:	e018      	b.n	800886c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008840:	b2db      	uxtb	r3, r3
 8008842:	4619      	mov	r1, r3
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fa64 	bl	8008d12 <USBD_CoreFindIF>
 800884a:	4603      	mov	r3, r0
 800884c:	75bb      	strb	r3, [r7, #22]
            break;
 800884e:	e00d      	b.n	800886c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008856:	b2db      	uxtb	r3, r3
 8008858:	4619      	mov	r1, r3
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 fa66 	bl	8008d2c <USBD_CoreFindEP>
 8008860:	4603      	mov	r3, r0
 8008862:	75bb      	strb	r3, [r7, #22]
            break;
 8008864:	e002      	b.n	800886c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	75bb      	strb	r3, [r7, #22]
            break;
 800886a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800886c:	7dbb      	ldrb	r3, [r7, #22]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d119      	bne.n	80088a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b03      	cmp	r3, #3
 800887c:	d113      	bne.n	80088a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800887e:	7dba      	ldrb	r2, [r7, #22]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	32ae      	adds	r2, #174	@ 0xae
 8008884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00b      	beq.n	80088a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800888e:	7dba      	ldrb	r2, [r7, #22]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008896:	7dba      	ldrb	r2, [r7, #22]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	32ae      	adds	r2, #174	@ 0xae
 800889c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f001 f94e 	bl	8009b48 <USBD_CtlSendStatus>
 80088ac:	e032      	b.n	8008914 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80088ae:	7afb      	ldrb	r3, [r7, #11]
 80088b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	4619      	mov	r1, r3
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f000 fa37 	bl	8008d2c <USBD_CoreFindEP>
 80088be:	4603      	mov	r3, r0
 80088c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088c2:	7dbb      	ldrb	r3, [r7, #22]
 80088c4:	2bff      	cmp	r3, #255	@ 0xff
 80088c6:	d025      	beq.n	8008914 <USBD_LL_DataOutStage+0x15c>
 80088c8:	7dbb      	ldrb	r3, [r7, #22]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d122      	bne.n	8008914 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	d117      	bne.n	800890a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80088da:	7dba      	ldrb	r2, [r7, #22]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	32ae      	adds	r2, #174	@ 0xae
 80088e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00f      	beq.n	800890a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80088ea:	7dba      	ldrb	r2, [r7, #22]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80088f2:	7dba      	ldrb	r2, [r7, #22]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	32ae      	adds	r2, #174	@ 0xae
 80088f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	7afa      	ldrb	r2, [r7, #11]
 8008900:	4611      	mov	r1, r2
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	4798      	blx	r3
 8008906:	4603      	mov	r3, r0
 8008908:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	e000      	b.n	8008916 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b086      	sub	sp, #24
 8008922:	af00      	add	r7, sp, #0
 8008924:	60f8      	str	r0, [r7, #12]
 8008926:	460b      	mov	r3, r1
 8008928:	607a      	str	r2, [r7, #4]
 800892a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800892c:	7afb      	ldrb	r3, [r7, #11]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d16f      	bne.n	8008a12 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3314      	adds	r3, #20
 8008936:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800893e:	2b02      	cmp	r3, #2
 8008940:	d15a      	bne.n	80089f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	689a      	ldr	r2, [r3, #8]
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	429a      	cmp	r2, r3
 800894c:	d914      	bls.n	8008978 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	689a      	ldr	r2, [r3, #8]
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	1ad2      	subs	r2, r2, r3
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	461a      	mov	r2, r3
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f001 f8b0 	bl	8009aca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800896a:	2300      	movs	r3, #0
 800896c:	2200      	movs	r2, #0
 800896e:	2100      	movs	r1, #0
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f001 fda7 	bl	800a4c4 <USBD_LL_PrepareReceive>
 8008976:	e03f      	b.n	80089f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	429a      	cmp	r2, r3
 8008982:	d11c      	bne.n	80089be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800898c:	429a      	cmp	r2, r3
 800898e:	d316      	bcc.n	80089be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800899a:	429a      	cmp	r2, r3
 800899c:	d20f      	bcs.n	80089be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800899e:	2200      	movs	r2, #0
 80089a0:	2100      	movs	r1, #0
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f001 f891 	bl	8009aca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089b0:	2300      	movs	r3, #0
 80089b2:	2200      	movs	r2, #0
 80089b4:	2100      	movs	r1, #0
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f001 fd84 	bl	800a4c4 <USBD_LL_PrepareReceive>
 80089bc:	e01c      	b.n	80089f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d10f      	bne.n	80089ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d009      	beq.n	80089ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ea:	2180      	movs	r1, #128	@ 0x80
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f001 fcbf 	bl	800a370 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f001 f8bb 	bl	8009b6e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d03a      	beq.n	8008a78 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f7ff fe42 	bl	800868c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008a10:	e032      	b.n	8008a78 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008a12:	7afb      	ldrb	r3, [r7, #11]
 8008a14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 f985 	bl	8008d2c <USBD_CoreFindEP>
 8008a22:	4603      	mov	r3, r0
 8008a24:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	2bff      	cmp	r3, #255	@ 0xff
 8008a2a:	d025      	beq.n	8008a78 <USBD_LL_DataInStage+0x15a>
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d122      	bne.n	8008a78 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d11c      	bne.n	8008a78 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008a3e:	7dfa      	ldrb	r2, [r7, #23]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	32ae      	adds	r2, #174	@ 0xae
 8008a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d014      	beq.n	8008a78 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008a4e:	7dfa      	ldrb	r2, [r7, #23]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008a56:	7dfa      	ldrb	r2, [r7, #23]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	32ae      	adds	r2, #174	@ 0xae
 8008a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	7afa      	ldrb	r2, [r7, #11]
 8008a64:	4611      	mov	r1, r2
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	4798      	blx	r3
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008a6e:	7dbb      	ldrb	r3, [r7, #22]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008a74:	7dbb      	ldrb	r3, [r7, #22]
 8008a76:	e000      	b.n	8008a7a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d014      	beq.n	8008ae8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00e      	beq.n	8008ae8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	6852      	ldr	r2, [r2, #4]
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	4611      	mov	r1, r2
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	4798      	blx	r3
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ae8:	2340      	movs	r3, #64	@ 0x40
 8008aea:	2200      	movs	r2, #0
 8008aec:	2100      	movs	r1, #0
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f001 fbf9 	bl	800a2e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2240      	movs	r2, #64	@ 0x40
 8008b00:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b04:	2340      	movs	r3, #64	@ 0x40
 8008b06:	2200      	movs	r2, #0
 8008b08:	2180      	movs	r1, #128	@ 0x80
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 fbeb 	bl	800a2e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2240      	movs	r2, #64	@ 0x40
 8008b1a:	621a      	str	r2, [r3, #32]

  return ret;
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	78fa      	ldrb	r2, [r7, #3]
 8008b36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b083      	sub	sp, #12
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b04      	cmp	r3, #4
 8008b58:	d006      	beq.n	8008b68 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2204      	movs	r2, #4
 8008b6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d106      	bne.n	8008ba0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d110      	bne.n	8008be4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00b      	beq.n	8008be4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d005      	beq.n	8008be4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	32ae      	adds	r2, #174	@ 0xae
 8008c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e01c      	b.n	8008c4a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d115      	bne.n	8008c48 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	32ae      	adds	r2, #174	@ 0xae
 8008c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00b      	beq.n	8008c48 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	32ae      	adds	r2, #174	@ 0xae
 8008c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3e:	6a1b      	ldr	r3, [r3, #32]
 8008c40:	78fa      	ldrb	r2, [r7, #3]
 8008c42:	4611      	mov	r1, r2
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	32ae      	adds	r2, #174	@ 0xae
 8008c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e01c      	b.n	8008cae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d115      	bne.n	8008cac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	32ae      	adds	r2, #174	@ 0xae
 8008c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00b      	beq.n	8008cac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	32ae      	adds	r2, #174	@ 0xae
 8008c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca4:	78fa      	ldrb	r2, [r7, #3]
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00e      	beq.n	8008d08 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	6852      	ldr	r2, [r2, #4]
 8008cf6:	b2d2      	uxtb	r2, r2
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	4798      	blx	r3
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008d04:	2303      	movs	r3, #3
 8008d06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b083      	sub	sp, #12
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d1e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d38:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b086      	sub	sp, #24
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	885b      	ldrh	r3, [r3, #2]
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	7812      	ldrb	r2, [r2, #0]
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d91f      	bls.n	8008dac <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008d72:	e013      	b.n	8008d9c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008d74:	f107 030a 	add.w	r3, r7, #10
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6978      	ldr	r0, [r7, #20]
 8008d7c:	f000 f81b 	bl	8008db6 <USBD_GetNextDesc>
 8008d80:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	785b      	ldrb	r3, [r3, #1]
 8008d86:	2b05      	cmp	r3, #5
 8008d88:	d108      	bne.n	8008d9c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	789b      	ldrb	r3, [r3, #2]
 8008d92:	78fa      	ldrb	r2, [r7, #3]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d008      	beq.n	8008daa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	885b      	ldrh	r3, [r3, #2]
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	897b      	ldrh	r3, [r7, #10]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d8e5      	bhi.n	8008d74 <USBD_GetEpDesc+0x2e>
 8008da8:	e000      	b.n	8008dac <USBD_GetEpDesc+0x66>
          break;
 8008daa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008dac:	693b      	ldr	r3, [r7, #16]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3718      	adds	r7, #24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b085      	sub	sp, #20
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	7812      	ldrb	r2, [r2, #0]
 8008dcc:	4413      	add	r3, r2
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4413      	add	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008de0:	68fb      	ldr	r3, [r7, #12]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b087      	sub	sp, #28
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	3301      	adds	r3, #1
 8008e04:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e0c:	8a3b      	ldrh	r3, [r7, #16]
 8008e0e:	021b      	lsls	r3, r3, #8
 8008e10:	b21a      	sxth	r2, r3
 8008e12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	b21b      	sxth	r3, r3
 8008e1a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e1c:	89fb      	ldrh	r3, [r7, #14]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	371c      	adds	r7, #28
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
	...

08008e2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e42:	2b40      	cmp	r3, #64	@ 0x40
 8008e44:	d005      	beq.n	8008e52 <USBD_StdDevReq+0x26>
 8008e46:	2b40      	cmp	r3, #64	@ 0x40
 8008e48:	d857      	bhi.n	8008efa <USBD_StdDevReq+0xce>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00f      	beq.n	8008e6e <USBD_StdDevReq+0x42>
 8008e4e:	2b20      	cmp	r3, #32
 8008e50:	d153      	bne.n	8008efa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	32ae      	adds	r2, #174	@ 0xae
 8008e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	4798      	blx	r3
 8008e68:	4603      	mov	r3, r0
 8008e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e6c:	e04a      	b.n	8008f04 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	785b      	ldrb	r3, [r3, #1]
 8008e72:	2b09      	cmp	r3, #9
 8008e74:	d83b      	bhi.n	8008eee <USBD_StdDevReq+0xc2>
 8008e76:	a201      	add	r2, pc, #4	@ (adr r2, 8008e7c <USBD_StdDevReq+0x50>)
 8008e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7c:	08008ed1 	.word	0x08008ed1
 8008e80:	08008ee5 	.word	0x08008ee5
 8008e84:	08008eef 	.word	0x08008eef
 8008e88:	08008edb 	.word	0x08008edb
 8008e8c:	08008eef 	.word	0x08008eef
 8008e90:	08008eaf 	.word	0x08008eaf
 8008e94:	08008ea5 	.word	0x08008ea5
 8008e98:	08008eef 	.word	0x08008eef
 8008e9c:	08008ec7 	.word	0x08008ec7
 8008ea0:	08008eb9 	.word	0x08008eb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa3c 	bl	8009324 <USBD_GetDescriptor>
          break;
 8008eac:	e024      	b.n	8008ef8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fba1 	bl	80095f8 <USBD_SetAddress>
          break;
 8008eb6:	e01f      	b.n	8008ef8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fbe0 	bl	8009680 <USBD_SetConfig>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73fb      	strb	r3, [r7, #15]
          break;
 8008ec4:	e018      	b.n	8008ef8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fc83 	bl	80097d4 <USBD_GetConfig>
          break;
 8008ece:	e013      	b.n	8008ef8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fcb4 	bl	8009840 <USBD_GetStatus>
          break;
 8008ed8:	e00e      	b.n	8008ef8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fce3 	bl	80098a8 <USBD_SetFeature>
          break;
 8008ee2:	e009      	b.n	8008ef8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fd07 	bl	80098fa <USBD_ClrFeature>
          break;
 8008eec:	e004      	b.n	8008ef8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fd5e 	bl	80099b2 <USBD_CtlError>
          break;
 8008ef6:	bf00      	nop
      }
      break;
 8008ef8:	e004      	b.n	8008f04 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fd58 	bl	80099b2 <USBD_CtlError>
      break;
 8008f02:	bf00      	nop
  }

  return ret;
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop

08008f10 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f26:	2b40      	cmp	r3, #64	@ 0x40
 8008f28:	d005      	beq.n	8008f36 <USBD_StdItfReq+0x26>
 8008f2a:	2b40      	cmp	r3, #64	@ 0x40
 8008f2c:	d852      	bhi.n	8008fd4 <USBD_StdItfReq+0xc4>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <USBD_StdItfReq+0x26>
 8008f32:	2b20      	cmp	r3, #32
 8008f34:	d14e      	bne.n	8008fd4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d840      	bhi.n	8008fc6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	889b      	ldrh	r3, [r3, #4]
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d836      	bhi.n	8008fbc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	889b      	ldrh	r3, [r3, #4]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff fedb 	bl	8008d12 <USBD_CoreFindIF>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
 8008f62:	2bff      	cmp	r3, #255	@ 0xff
 8008f64:	d01d      	beq.n	8008fa2 <USBD_StdItfReq+0x92>
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d11a      	bne.n	8008fa2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008f6c:	7bba      	ldrb	r2, [r7, #14]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	32ae      	adds	r2, #174	@ 0xae
 8008f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00f      	beq.n	8008f9c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008f7c:	7bba      	ldrb	r2, [r7, #14]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f84:	7bba      	ldrb	r2, [r7, #14]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	32ae      	adds	r2, #174	@ 0xae
 8008f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	4798      	blx	r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f9a:	e004      	b.n	8008fa6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008fa0:	e001      	b.n	8008fa6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	88db      	ldrh	r3, [r3, #6]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d110      	bne.n	8008fd0 <USBD_StdItfReq+0xc0>
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10d      	bne.n	8008fd0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fdc7 	bl	8009b48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008fba:	e009      	b.n	8008fd0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fcf7 	bl	80099b2 <USBD_CtlError>
          break;
 8008fc4:	e004      	b.n	8008fd0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fcf2 	bl	80099b2 <USBD_CtlError>
          break;
 8008fce:	e000      	b.n	8008fd2 <USBD_StdItfReq+0xc2>
          break;
 8008fd0:	bf00      	nop
      }
      break;
 8008fd2:	e004      	b.n	8008fde <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fceb 	bl	80099b2 <USBD_CtlError>
      break;
 8008fdc:	bf00      	nop
  }

  return ret;
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	889b      	ldrh	r3, [r3, #4]
 8008ffa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009004:	2b40      	cmp	r3, #64	@ 0x40
 8009006:	d007      	beq.n	8009018 <USBD_StdEPReq+0x30>
 8009008:	2b40      	cmp	r3, #64	@ 0x40
 800900a:	f200 817f 	bhi.w	800930c <USBD_StdEPReq+0x324>
 800900e:	2b00      	cmp	r3, #0
 8009010:	d02a      	beq.n	8009068 <USBD_StdEPReq+0x80>
 8009012:	2b20      	cmp	r3, #32
 8009014:	f040 817a 	bne.w	800930c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7ff fe85 	bl	8008d2c <USBD_CoreFindEP>
 8009022:	4603      	mov	r3, r0
 8009024:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009026:	7b7b      	ldrb	r3, [r7, #13]
 8009028:	2bff      	cmp	r3, #255	@ 0xff
 800902a:	f000 8174 	beq.w	8009316 <USBD_StdEPReq+0x32e>
 800902e:	7b7b      	ldrb	r3, [r7, #13]
 8009030:	2b00      	cmp	r3, #0
 8009032:	f040 8170 	bne.w	8009316 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009036:	7b7a      	ldrb	r2, [r7, #13]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800903e:	7b7a      	ldrb	r2, [r7, #13]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	32ae      	adds	r2, #174	@ 0xae
 8009044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 8163 	beq.w	8009316 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009050:	7b7a      	ldrb	r2, [r7, #13]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	32ae      	adds	r2, #174	@ 0xae
 8009056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	4798      	blx	r3
 8009062:	4603      	mov	r3, r0
 8009064:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009066:	e156      	b.n	8009316 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	785b      	ldrb	r3, [r3, #1]
 800906c:	2b03      	cmp	r3, #3
 800906e:	d008      	beq.n	8009082 <USBD_StdEPReq+0x9a>
 8009070:	2b03      	cmp	r3, #3
 8009072:	f300 8145 	bgt.w	8009300 <USBD_StdEPReq+0x318>
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 809b 	beq.w	80091b2 <USBD_StdEPReq+0x1ca>
 800907c:	2b01      	cmp	r3, #1
 800907e:	d03c      	beq.n	80090fa <USBD_StdEPReq+0x112>
 8009080:	e13e      	b.n	8009300 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b02      	cmp	r3, #2
 800908c:	d002      	beq.n	8009094 <USBD_StdEPReq+0xac>
 800908e:	2b03      	cmp	r3, #3
 8009090:	d016      	beq.n	80090c0 <USBD_StdEPReq+0xd8>
 8009092:	e02c      	b.n	80090ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00d      	beq.n	80090b6 <USBD_StdEPReq+0xce>
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	2b80      	cmp	r3, #128	@ 0x80
 800909e:	d00a      	beq.n	80090b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f001 f963 	bl	800a370 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090aa:	2180      	movs	r1, #128	@ 0x80
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 f95f 	bl	800a370 <USBD_LL_StallEP>
 80090b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090b4:	e020      	b.n	80090f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fc7a 	bl	80099b2 <USBD_CtlError>
              break;
 80090be:	e01b      	b.n	80090f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	885b      	ldrh	r3, [r3, #2]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10e      	bne.n	80090e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00b      	beq.n	80090e6 <USBD_StdEPReq+0xfe>
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
 80090d0:	2b80      	cmp	r3, #128	@ 0x80
 80090d2:	d008      	beq.n	80090e6 <USBD_StdEPReq+0xfe>
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	88db      	ldrh	r3, [r3, #6]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d104      	bne.n	80090e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f001 f945 	bl	800a370 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fd2e 	bl	8009b48 <USBD_CtlSendStatus>

              break;
 80090ec:	e004      	b.n	80090f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 fc5e 	bl	80099b2 <USBD_CtlError>
              break;
 80090f6:	bf00      	nop
          }
          break;
 80090f8:	e107      	b.n	800930a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b02      	cmp	r3, #2
 8009104:	d002      	beq.n	800910c <USBD_StdEPReq+0x124>
 8009106:	2b03      	cmp	r3, #3
 8009108:	d016      	beq.n	8009138 <USBD_StdEPReq+0x150>
 800910a:	e04b      	b.n	80091a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00d      	beq.n	800912e <USBD_StdEPReq+0x146>
 8009112:	7bbb      	ldrb	r3, [r7, #14]
 8009114:	2b80      	cmp	r3, #128	@ 0x80
 8009116:	d00a      	beq.n	800912e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f001 f927 	bl	800a370 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009122:	2180      	movs	r1, #128	@ 0x80
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 f923 	bl	800a370 <USBD_LL_StallEP>
 800912a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800912c:	e040      	b.n	80091b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fc3e 	bl	80099b2 <USBD_CtlError>
              break;
 8009136:	e03b      	b.n	80091b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	885b      	ldrh	r3, [r3, #2]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d136      	bne.n	80091ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009140:	7bbb      	ldrb	r3, [r7, #14]
 8009142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009146:	2b00      	cmp	r3, #0
 8009148:	d004      	beq.n	8009154 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f001 f92d 	bl	800a3ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fcf7 	bl	8009b48 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff fde4 	bl	8008d2c <USBD_CoreFindEP>
 8009164:	4603      	mov	r3, r0
 8009166:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009168:	7b7b      	ldrb	r3, [r7, #13]
 800916a:	2bff      	cmp	r3, #255	@ 0xff
 800916c:	d01f      	beq.n	80091ae <USBD_StdEPReq+0x1c6>
 800916e:	7b7b      	ldrb	r3, [r7, #13]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d11c      	bne.n	80091ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009174:	7b7a      	ldrb	r2, [r7, #13]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800917c:	7b7a      	ldrb	r2, [r7, #13]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	32ae      	adds	r2, #174	@ 0xae
 8009182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d010      	beq.n	80091ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800918c:	7b7a      	ldrb	r2, [r7, #13]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	32ae      	adds	r2, #174	@ 0xae
 8009192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	4798      	blx	r3
 800919e:	4603      	mov	r3, r0
 80091a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80091a2:	e004      	b.n	80091ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fc03 	bl	80099b2 <USBD_CtlError>
              break;
 80091ac:	e000      	b.n	80091b0 <USBD_StdEPReq+0x1c8>
              break;
 80091ae:	bf00      	nop
          }
          break;
 80091b0:	e0ab      	b.n	800930a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d002      	beq.n	80091c4 <USBD_StdEPReq+0x1dc>
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d032      	beq.n	8009228 <USBD_StdEPReq+0x240>
 80091c2:	e097      	b.n	80092f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d007      	beq.n	80091da <USBD_StdEPReq+0x1f2>
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
 80091cc:	2b80      	cmp	r3, #128	@ 0x80
 80091ce:	d004      	beq.n	80091da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fbed 	bl	80099b2 <USBD_CtlError>
                break;
 80091d8:	e091      	b.n	80092fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	da0b      	bge.n	80091fa <USBD_StdEPReq+0x212>
 80091e2:	7bbb      	ldrb	r3, [r7, #14]
 80091e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091e8:	4613      	mov	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	3310      	adds	r3, #16
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	4413      	add	r3, r2
 80091f6:	3304      	adds	r3, #4
 80091f8:	e00b      	b.n	8009212 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091fa:	7bbb      	ldrb	r3, [r7, #14]
 80091fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009200:	4613      	mov	r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4413      	add	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	4413      	add	r3, r2
 8009210:	3304      	adds	r3, #4
 8009212:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2202      	movs	r2, #2
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fc37 	bl	8009a94 <USBD_CtlSendData>
              break;
 8009226:	e06a      	b.n	80092fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009228:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800922c:	2b00      	cmp	r3, #0
 800922e:	da11      	bge.n	8009254 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	f003 020f 	and.w	r2, r3, #15
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	4613      	mov	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	440b      	add	r3, r1
 8009242:	3324      	adds	r3, #36	@ 0x24
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d117      	bne.n	800927a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fbb0 	bl	80099b2 <USBD_CtlError>
                  break;
 8009252:	e054      	b.n	80092fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009254:	7bbb      	ldrb	r3, [r7, #14]
 8009256:	f003 020f 	and.w	r2, r3, #15
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	4613      	mov	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	440b      	add	r3, r1
 8009266:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d104      	bne.n	800927a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fb9d 	bl	80099b2 <USBD_CtlError>
                  break;
 8009278:	e041      	b.n	80092fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800927a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800927e:	2b00      	cmp	r3, #0
 8009280:	da0b      	bge.n	800929a <USBD_StdEPReq+0x2b2>
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009288:	4613      	mov	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	3310      	adds	r3, #16
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	4413      	add	r3, r2
 8009296:	3304      	adds	r3, #4
 8009298:	e00b      	b.n	80092b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800929a:	7bbb      	ldrb	r3, [r7, #14]
 800929c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092a0:	4613      	mov	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	4413      	add	r3, r2
 80092b0:	3304      	adds	r3, #4
 80092b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80092b4:	7bbb      	ldrb	r3, [r7, #14]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d002      	beq.n	80092c0 <USBD_StdEPReq+0x2d8>
 80092ba:	7bbb      	ldrb	r3, [r7, #14]
 80092bc:	2b80      	cmp	r3, #128	@ 0x80
 80092be:	d103      	bne.n	80092c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
 80092c6:	e00e      	b.n	80092e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 f88d 	bl	800a3ec <USBD_LL_IsStallEP>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d003      	beq.n	80092e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2201      	movs	r2, #1
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	e002      	b.n	80092e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2202      	movs	r2, #2
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fbd1 	bl	8009a94 <USBD_CtlSendData>
              break;
 80092f2:	e004      	b.n	80092fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fb5b 	bl	80099b2 <USBD_CtlError>
              break;
 80092fc:	bf00      	nop
          }
          break;
 80092fe:	e004      	b.n	800930a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fb55 	bl	80099b2 <USBD_CtlError>
          break;
 8009308:	bf00      	nop
      }
      break;
 800930a:	e005      	b.n	8009318 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fb4f 	bl	80099b2 <USBD_CtlError>
      break;
 8009314:	e000      	b.n	8009318 <USBD_StdEPReq+0x330>
      break;
 8009316:	bf00      	nop
  }

  return ret;
 8009318:	7bfb      	ldrb	r3, [r7, #15]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800932e:	2300      	movs	r3, #0
 8009330:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009336:	2300      	movs	r3, #0
 8009338:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	885b      	ldrh	r3, [r3, #2]
 800933e:	0a1b      	lsrs	r3, r3, #8
 8009340:	b29b      	uxth	r3, r3
 8009342:	3b01      	subs	r3, #1
 8009344:	2b06      	cmp	r3, #6
 8009346:	f200 8128 	bhi.w	800959a <USBD_GetDescriptor+0x276>
 800934a:	a201      	add	r2, pc, #4	@ (adr r2, 8009350 <USBD_GetDescriptor+0x2c>)
 800934c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009350:	0800936d 	.word	0x0800936d
 8009354:	08009385 	.word	0x08009385
 8009358:	080093c5 	.word	0x080093c5
 800935c:	0800959b 	.word	0x0800959b
 8009360:	0800959b 	.word	0x0800959b
 8009364:	0800953b 	.word	0x0800953b
 8009368:	08009567 	.word	0x08009567
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	7c12      	ldrb	r2, [r2, #16]
 8009378:	f107 0108 	add.w	r1, r7, #8
 800937c:	4610      	mov	r0, r2
 800937e:	4798      	blx	r3
 8009380:	60f8      	str	r0, [r7, #12]
      break;
 8009382:	e112      	b.n	80095aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	7c1b      	ldrb	r3, [r3, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10d      	bne.n	80093a8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009394:	f107 0208 	add.w	r2, r7, #8
 8009398:	4610      	mov	r0, r2
 800939a:	4798      	blx	r3
 800939c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3301      	adds	r3, #1
 80093a2:	2202      	movs	r2, #2
 80093a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80093a6:	e100      	b.n	80095aa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b0:	f107 0208 	add.w	r2, r7, #8
 80093b4:	4610      	mov	r0, r2
 80093b6:	4798      	blx	r3
 80093b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	3301      	adds	r3, #1
 80093be:	2202      	movs	r2, #2
 80093c0:	701a      	strb	r2, [r3, #0]
      break;
 80093c2:	e0f2      	b.n	80095aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	885b      	ldrh	r3, [r3, #2]
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b05      	cmp	r3, #5
 80093cc:	f200 80ac 	bhi.w	8009528 <USBD_GetDescriptor+0x204>
 80093d0:	a201      	add	r2, pc, #4	@ (adr r2, 80093d8 <USBD_GetDescriptor+0xb4>)
 80093d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d6:	bf00      	nop
 80093d8:	080093f1 	.word	0x080093f1
 80093dc:	08009425 	.word	0x08009425
 80093e0:	08009459 	.word	0x08009459
 80093e4:	0800948d 	.word	0x0800948d
 80093e8:	080094c1 	.word	0x080094c1
 80093ec:	080094f5 	.word	0x080094f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00b      	beq.n	8009414 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	7c12      	ldrb	r2, [r2, #16]
 8009408:	f107 0108 	add.w	r1, r7, #8
 800940c:	4610      	mov	r0, r2
 800940e:	4798      	blx	r3
 8009410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009412:	e091      	b.n	8009538 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 facb 	bl	80099b2 <USBD_CtlError>
            err++;
 800941c:	7afb      	ldrb	r3, [r7, #11]
 800941e:	3301      	adds	r3, #1
 8009420:	72fb      	strb	r3, [r7, #11]
          break;
 8009422:	e089      	b.n	8009538 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	7c12      	ldrb	r2, [r2, #16]
 800943c:	f107 0108 	add.w	r1, r7, #8
 8009440:	4610      	mov	r0, r2
 8009442:	4798      	blx	r3
 8009444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009446:	e077      	b.n	8009538 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fab1 	bl	80099b2 <USBD_CtlError>
            err++;
 8009450:	7afb      	ldrb	r3, [r7, #11]
 8009452:	3301      	adds	r3, #1
 8009454:	72fb      	strb	r3, [r7, #11]
          break;
 8009456:	e06f      	b.n	8009538 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00b      	beq.n	800947c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	7c12      	ldrb	r2, [r2, #16]
 8009470:	f107 0108 	add.w	r1, r7, #8
 8009474:	4610      	mov	r0, r2
 8009476:	4798      	blx	r3
 8009478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800947a:	e05d      	b.n	8009538 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800947c:	6839      	ldr	r1, [r7, #0]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fa97 	bl	80099b2 <USBD_CtlError>
            err++;
 8009484:	7afb      	ldrb	r3, [r7, #11]
 8009486:	3301      	adds	r3, #1
 8009488:	72fb      	strb	r3, [r7, #11]
          break;
 800948a:	e055      	b.n	8009538 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00b      	beq.n	80094b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	7c12      	ldrb	r2, [r2, #16]
 80094a4:	f107 0108 	add.w	r1, r7, #8
 80094a8:	4610      	mov	r0, r2
 80094aa:	4798      	blx	r3
 80094ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ae:	e043      	b.n	8009538 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa7d 	bl	80099b2 <USBD_CtlError>
            err++;
 80094b8:	7afb      	ldrb	r3, [r7, #11]
 80094ba:	3301      	adds	r3, #1
 80094bc:	72fb      	strb	r3, [r7, #11]
          break;
 80094be:	e03b      	b.n	8009538 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00b      	beq.n	80094e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	7c12      	ldrb	r2, [r2, #16]
 80094d8:	f107 0108 	add.w	r1, r7, #8
 80094dc:	4610      	mov	r0, r2
 80094de:	4798      	blx	r3
 80094e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094e2:	e029      	b.n	8009538 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fa63 	bl	80099b2 <USBD_CtlError>
            err++;
 80094ec:	7afb      	ldrb	r3, [r7, #11]
 80094ee:	3301      	adds	r3, #1
 80094f0:	72fb      	strb	r3, [r7, #11]
          break;
 80094f2:	e021      	b.n	8009538 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00b      	beq.n	8009518 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	7c12      	ldrb	r2, [r2, #16]
 800950c:	f107 0108 	add.w	r1, r7, #8
 8009510:	4610      	mov	r0, r2
 8009512:	4798      	blx	r3
 8009514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009516:	e00f      	b.n	8009538 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fa49 	bl	80099b2 <USBD_CtlError>
            err++;
 8009520:	7afb      	ldrb	r3, [r7, #11]
 8009522:	3301      	adds	r3, #1
 8009524:	72fb      	strb	r3, [r7, #11]
          break;
 8009526:	e007      	b.n	8009538 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fa41 	bl	80099b2 <USBD_CtlError>
          err++;
 8009530:	7afb      	ldrb	r3, [r7, #11]
 8009532:	3301      	adds	r3, #1
 8009534:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009536:	bf00      	nop
      }
      break;
 8009538:	e037      	b.n	80095aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	7c1b      	ldrb	r3, [r3, #16]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d109      	bne.n	8009556 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800954a:	f107 0208 	add.w	r2, r7, #8
 800954e:	4610      	mov	r0, r2
 8009550:	4798      	blx	r3
 8009552:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009554:	e029      	b.n	80095aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fa2a 	bl	80099b2 <USBD_CtlError>
        err++;
 800955e:	7afb      	ldrb	r3, [r7, #11]
 8009560:	3301      	adds	r3, #1
 8009562:	72fb      	strb	r3, [r7, #11]
      break;
 8009564:	e021      	b.n	80095aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	7c1b      	ldrb	r3, [r3, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10d      	bne.n	800958a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009576:	f107 0208 	add.w	r2, r7, #8
 800957a:	4610      	mov	r0, r2
 800957c:	4798      	blx	r3
 800957e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3301      	adds	r3, #1
 8009584:	2207      	movs	r2, #7
 8009586:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009588:	e00f      	b.n	80095aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fa10 	bl	80099b2 <USBD_CtlError>
        err++;
 8009592:	7afb      	ldrb	r3, [r7, #11]
 8009594:	3301      	adds	r3, #1
 8009596:	72fb      	strb	r3, [r7, #11]
      break;
 8009598:	e007      	b.n	80095aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fa08 	bl	80099b2 <USBD_CtlError>
      err++;
 80095a2:	7afb      	ldrb	r3, [r7, #11]
 80095a4:	3301      	adds	r3, #1
 80095a6:	72fb      	strb	r3, [r7, #11]
      break;
 80095a8:	bf00      	nop
  }

  if (err != 0U)
 80095aa:	7afb      	ldrb	r3, [r7, #11]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d11e      	bne.n	80095ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	88db      	ldrh	r3, [r3, #6]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d016      	beq.n	80095e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80095b8:	893b      	ldrh	r3, [r7, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00e      	beq.n	80095dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	88da      	ldrh	r2, [r3, #6]
 80095c2:	893b      	ldrh	r3, [r7, #8]
 80095c4:	4293      	cmp	r3, r2
 80095c6:	bf28      	it	cs
 80095c8:	4613      	movcs	r3, r2
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095ce:	893b      	ldrh	r3, [r7, #8]
 80095d0:	461a      	mov	r2, r3
 80095d2:	68f9      	ldr	r1, [r7, #12]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fa5d 	bl	8009a94 <USBD_CtlSendData>
 80095da:	e009      	b.n	80095f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f9e7 	bl	80099b2 <USBD_CtlError>
 80095e4:	e004      	b.n	80095f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 faae 	bl	8009b48 <USBD_CtlSendStatus>
 80095ec:	e000      	b.n	80095f0 <USBD_GetDescriptor+0x2cc>
    return;
 80095ee:	bf00      	nop
  }
}
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop

080095f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	889b      	ldrh	r3, [r3, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d131      	bne.n	800966e <USBD_SetAddress+0x76>
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	88db      	ldrh	r3, [r3, #6]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d12d      	bne.n	800966e <USBD_SetAddress+0x76>
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	885b      	ldrh	r3, [r3, #2]
 8009616:	2b7f      	cmp	r3, #127	@ 0x7f
 8009618:	d829      	bhi.n	800966e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	885b      	ldrh	r3, [r3, #2]
 800961e:	b2db      	uxtb	r3, r3
 8009620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009624:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b03      	cmp	r3, #3
 8009630:	d104      	bne.n	800963c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f9bc 	bl	80099b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963a:	e01d      	b.n	8009678 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	7bfa      	ldrb	r2, [r7, #15]
 8009640:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fefb 	bl	800a444 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fa7a 	bl	8009b48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d004      	beq.n	8009664 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009662:	e009      	b.n	8009678 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800966c:	e004      	b.n	8009678 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f99e 	bl	80099b2 <USBD_CtlError>
  }
}
 8009676:	bf00      	nop
 8009678:	bf00      	nop
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	885b      	ldrh	r3, [r3, #2]
 8009692:	b2da      	uxtb	r2, r3
 8009694:	4b4e      	ldr	r3, [pc, #312]	@ (80097d0 <USBD_SetConfig+0x150>)
 8009696:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009698:	4b4d      	ldr	r3, [pc, #308]	@ (80097d0 <USBD_SetConfig+0x150>)
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d905      	bls.n	80096ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f985 	bl	80099b2 <USBD_CtlError>
    return USBD_FAIL;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e08c      	b.n	80097c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d002      	beq.n	80096be <USBD_SetConfig+0x3e>
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d029      	beq.n	8009710 <USBD_SetConfig+0x90>
 80096bc:	e075      	b.n	80097aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80096be:	4b44      	ldr	r3, [pc, #272]	@ (80097d0 <USBD_SetConfig+0x150>)
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d020      	beq.n	8009708 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80096c6:	4b42      	ldr	r3, [pc, #264]	@ (80097d0 <USBD_SetConfig+0x150>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096d0:	4b3f      	ldr	r3, [pc, #252]	@ (80097d0 <USBD_SetConfig+0x150>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7fe ffe3 	bl	80086a2 <USBD_SetClassConfig>
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d008      	beq.n	80096f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f962 	bl	80099b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2202      	movs	r2, #2
 80096f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096f6:	e065      	b.n	80097c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fa25 	bl	8009b48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2203      	movs	r2, #3
 8009702:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009706:	e05d      	b.n	80097c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fa1d 	bl	8009b48 <USBD_CtlSendStatus>
      break;
 800970e:	e059      	b.n	80097c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009710:	4b2f      	ldr	r3, [pc, #188]	@ (80097d0 <USBD_SetConfig+0x150>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d112      	bne.n	800973e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2202      	movs	r2, #2
 800971c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009720:	4b2b      	ldr	r3, [pc, #172]	@ (80097d0 <USBD_SetConfig+0x150>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	461a      	mov	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800972a:	4b29      	ldr	r3, [pc, #164]	@ (80097d0 <USBD_SetConfig+0x150>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7fe ffd2 	bl	80086da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fa06 	bl	8009b48 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800973c:	e042      	b.n	80097c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800973e:	4b24      	ldr	r3, [pc, #144]	@ (80097d0 <USBD_SetConfig+0x150>)
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	429a      	cmp	r2, r3
 800974a:	d02a      	beq.n	80097a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	b2db      	uxtb	r3, r3
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f7fe ffc0 	bl	80086da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800975a:	4b1d      	ldr	r3, [pc, #116]	@ (80097d0 <USBD_SetConfig+0x150>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	461a      	mov	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009764:	4b1a      	ldr	r3, [pc, #104]	@ (80097d0 <USBD_SetConfig+0x150>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7fe ff99 	bl	80086a2 <USBD_SetClassConfig>
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00f      	beq.n	800979a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f918 	bl	80099b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	b2db      	uxtb	r3, r3
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7fe ffa5 	bl	80086da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009798:	e014      	b.n	80097c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f9d4 	bl	8009b48 <USBD_CtlSendStatus>
      break;
 80097a0:	e010      	b.n	80097c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f9d0 	bl	8009b48 <USBD_CtlSendStatus>
      break;
 80097a8:	e00c      	b.n	80097c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f900 	bl	80099b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097b2:	4b07      	ldr	r3, [pc, #28]	@ (80097d0 <USBD_SetConfig+0x150>)
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	4619      	mov	r1, r3
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7fe ff8e 	bl	80086da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80097be:	2303      	movs	r3, #3
 80097c0:	73fb      	strb	r3, [r7, #15]
      break;
 80097c2:	bf00      	nop
  }

  return ret;
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	20000538 	.word	0x20000538

080097d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	88db      	ldrh	r3, [r3, #6]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d004      	beq.n	80097f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f8e2 	bl	80099b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80097ee:	e023      	b.n	8009838 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	dc02      	bgt.n	8009802 <USBD_GetConfig+0x2e>
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dc03      	bgt.n	8009808 <USBD_GetConfig+0x34>
 8009800:	e015      	b.n	800982e <USBD_GetConfig+0x5a>
 8009802:	2b03      	cmp	r3, #3
 8009804:	d00b      	beq.n	800981e <USBD_GetConfig+0x4a>
 8009806:	e012      	b.n	800982e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	3308      	adds	r3, #8
 8009812:	2201      	movs	r2, #1
 8009814:	4619      	mov	r1, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 f93c 	bl	8009a94 <USBD_CtlSendData>
        break;
 800981c:	e00c      	b.n	8009838 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3304      	adds	r3, #4
 8009822:	2201      	movs	r2, #1
 8009824:	4619      	mov	r1, r3
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f934 	bl	8009a94 <USBD_CtlSendData>
        break;
 800982c:	e004      	b.n	8009838 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800982e:	6839      	ldr	r1, [r7, #0]
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f8be 	bl	80099b2 <USBD_CtlError>
        break;
 8009836:	bf00      	nop
}
 8009838:	bf00      	nop
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009850:	b2db      	uxtb	r3, r3
 8009852:	3b01      	subs	r3, #1
 8009854:	2b02      	cmp	r3, #2
 8009856:	d81e      	bhi.n	8009896 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	88db      	ldrh	r3, [r3, #6]
 800985c:	2b02      	cmp	r3, #2
 800985e:	d004      	beq.n	800986a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f8a5 	bl	80099b2 <USBD_CtlError>
        break;
 8009868:	e01a      	b.n	80098a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009876:	2b00      	cmp	r3, #0
 8009878:	d005      	beq.n	8009886 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	f043 0202 	orr.w	r2, r3, #2
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	330c      	adds	r3, #12
 800988a:	2202      	movs	r2, #2
 800988c:	4619      	mov	r1, r3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f900 	bl	8009a94 <USBD_CtlSendData>
      break;
 8009894:	e004      	b.n	80098a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f88a 	bl	80099b2 <USBD_CtlError>
      break;
 800989e:	bf00      	nop
  }
}
 80098a0:	bf00      	nop
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	885b      	ldrh	r3, [r3, #2]
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d107      	bne.n	80098ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f940 	bl	8009b48 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80098c8:	e013      	b.n	80098f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	885b      	ldrh	r3, [r3, #2]
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d10b      	bne.n	80098ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	889b      	ldrh	r3, [r3, #4]
 80098d6:	0a1b      	lsrs	r3, r3, #8
 80098d8:	b29b      	uxth	r3, r3
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f930 	bl	8009b48 <USBD_CtlSendStatus>
}
 80098e8:	e003      	b.n	80098f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f860 	bl	80099b2 <USBD_CtlError>
}
 80098f2:	bf00      	nop
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b082      	sub	sp, #8
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800990a:	b2db      	uxtb	r3, r3
 800990c:	3b01      	subs	r3, #1
 800990e:	2b02      	cmp	r3, #2
 8009910:	d80b      	bhi.n	800992a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	885b      	ldrh	r3, [r3, #2]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d10c      	bne.n	8009934 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f910 	bl	8009b48 <USBD_CtlSendStatus>
      }
      break;
 8009928:	e004      	b.n	8009934 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f840 	bl	80099b2 <USBD_CtlError>
      break;
 8009932:	e000      	b.n	8009936 <USBD_ClrFeature+0x3c>
      break;
 8009934:	bf00      	nop
  }
}
 8009936:	bf00      	nop
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	781a      	ldrb	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3301      	adds	r3, #1
 8009958:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	781a      	ldrb	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3301      	adds	r3, #1
 8009966:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f7ff fa40 	bl	8008dee <SWAPBYTE>
 800996e:	4603      	mov	r3, r0
 8009970:	461a      	mov	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3301      	adds	r3, #1
 800997a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	3301      	adds	r3, #1
 8009980:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f7ff fa33 	bl	8008dee <SWAPBYTE>
 8009988:	4603      	mov	r3, r0
 800998a:	461a      	mov	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	3301      	adds	r3, #1
 8009994:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	3301      	adds	r3, #1
 800999a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7ff fa26 	bl	8008dee <SWAPBYTE>
 80099a2:	4603      	mov	r3, r0
 80099a4:	461a      	mov	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	80da      	strh	r2, [r3, #6]
}
 80099aa:	bf00      	nop
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b082      	sub	sp, #8
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80099bc:	2180      	movs	r1, #128	@ 0x80
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fcd6 	bl	800a370 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80099c4:	2100      	movs	r1, #0
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fcd2 	bl	800a370 <USBD_LL_StallEP>
}
 80099cc:	bf00      	nop
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d036      	beq.n	8009a58 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80099ee:	6938      	ldr	r0, [r7, #16]
 80099f0:	f000 f836 	bl	8009a60 <USBD_GetLen>
 80099f4:	4603      	mov	r3, r0
 80099f6:	3301      	adds	r3, #1
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	4413      	add	r3, r2
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	7812      	ldrb	r2, [r2, #0]
 8009a0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a0e:	7dfb      	ldrb	r3, [r7, #23]
 8009a10:	3301      	adds	r3, #1
 8009a12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009a14:	7dfb      	ldrb	r3, [r7, #23]
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	4413      	add	r3, r2
 8009a1a:	2203      	movs	r2, #3
 8009a1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
 8009a20:	3301      	adds	r3, #1
 8009a22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009a24:	e013      	b.n	8009a4e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009a26:	7dfb      	ldrb	r3, [r7, #23]
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	7812      	ldrb	r2, [r2, #0]
 8009a30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	3301      	adds	r3, #1
 8009a36:	613b      	str	r3, [r7, #16]
    idx++;
 8009a38:	7dfb      	ldrb	r3, [r7, #23]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a3e:	7dfb      	ldrb	r3, [r7, #23]
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	4413      	add	r3, r2
 8009a44:	2200      	movs	r2, #0
 8009a46:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a48:	7dfb      	ldrb	r3, [r7, #23]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1e7      	bne.n	8009a26 <USBD_GetString+0x52>
 8009a56:	e000      	b.n	8009a5a <USBD_GetString+0x86>
    return;
 8009a58:	bf00      	nop
  }
}
 8009a5a:	3718      	adds	r7, #24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a70:	e005      	b.n	8009a7e <USBD_GetLen+0x1e>
  {
    len++;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
 8009a74:	3301      	adds	r3, #1
 8009a76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1f5      	bne.n	8009a72 <USBD_GetLen+0x12>
  }

  return len;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	2100      	movs	r1, #0
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f000 fce1 	bl	800a482 <USBD_LL_Transmit>

  return USBD_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	2100      	movs	r1, #0
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f000 fcd0 	bl	800a482 <USBD_LL_Transmit>

  return USBD_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2203      	movs	r2, #3
 8009afc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	2100      	movs	r1, #0
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f000 fcd4 	bl	800a4c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	2100      	movs	r1, #0
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 fcc3 	bl	800a4c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2204      	movs	r2, #4
 8009b54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b58:	2300      	movs	r3, #0
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fc8f 	bl	800a482 <USBD_LL_Transmit>

  return USBD_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2205      	movs	r2, #5
 8009b7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b7e:	2300      	movs	r3, #0
 8009b80:	2200      	movs	r2, #0
 8009b82:	2100      	movs	r1, #0
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fc9d 	bl	800a4c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	4912      	ldr	r1, [pc, #72]	@ (8009be4 <MX_USB_DEVICE_Init+0x50>)
 8009b9c:	4812      	ldr	r0, [pc, #72]	@ (8009be8 <MX_USB_DEVICE_Init+0x54>)
 8009b9e:	f7fe fd03 	bl	80085a8 <USBD_Init>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009ba8:	f7f7 fe7a 	bl	80018a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009bac:	490f      	ldr	r1, [pc, #60]	@ (8009bec <MX_USB_DEVICE_Init+0x58>)
 8009bae:	480e      	ldr	r0, [pc, #56]	@ (8009be8 <MX_USB_DEVICE_Init+0x54>)
 8009bb0:	f7fe fd2a 	bl	8008608 <USBD_RegisterClass>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009bba:	f7f7 fe71 	bl	80018a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009bbe:	490c      	ldr	r1, [pc, #48]	@ (8009bf0 <MX_USB_DEVICE_Init+0x5c>)
 8009bc0:	4809      	ldr	r0, [pc, #36]	@ (8009be8 <MX_USB_DEVICE_Init+0x54>)
 8009bc2:	f7fe fc21 	bl	8008408 <USBD_CDC_RegisterInterface>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009bcc:	f7f7 fe68 	bl	80018a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009bd0:	4805      	ldr	r0, [pc, #20]	@ (8009be8 <MX_USB_DEVICE_Init+0x54>)
 8009bd2:	f7fe fd4f 	bl	8008674 <USBD_Start>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009bdc:	f7f7 fe60 	bl	80018a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009be0:	bf00      	nop
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	200000ac 	.word	0x200000ac
 8009be8:	2000053c 	.word	0x2000053c
 8009bec:	20000018 	.word	0x20000018
 8009bf0:	20000098 	.word	0x20000098

08009bf4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4905      	ldr	r1, [pc, #20]	@ (8009c10 <CDC_Init_FS+0x1c>)
 8009bfc:	4805      	ldr	r0, [pc, #20]	@ (8009c14 <CDC_Init_FS+0x20>)
 8009bfe:	f7fe fc1d 	bl	800843c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009c02:	4905      	ldr	r1, [pc, #20]	@ (8009c18 <CDC_Init_FS+0x24>)
 8009c04:	4803      	ldr	r0, [pc, #12]	@ (8009c14 <CDC_Init_FS+0x20>)
 8009c06:	f7fe fc3b 	bl	8008480 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009c0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	20000c18 	.word	0x20000c18
 8009c14:	2000053c 	.word	0x2000053c
 8009c18:	20000818 	.word	0x20000818

08009c1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009c20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	6039      	str	r1, [r7, #0]
 8009c36:	71fb      	strb	r3, [r7, #7]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009c3c:	79fb      	ldrb	r3, [r7, #7]
 8009c3e:	2b23      	cmp	r3, #35	@ 0x23
 8009c40:	d84a      	bhi.n	8009cd8 <CDC_Control_FS+0xac>
 8009c42:	a201      	add	r2, pc, #4	@ (adr r2, 8009c48 <CDC_Control_FS+0x1c>)
 8009c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c48:	08009cd9 	.word	0x08009cd9
 8009c4c:	08009cd9 	.word	0x08009cd9
 8009c50:	08009cd9 	.word	0x08009cd9
 8009c54:	08009cd9 	.word	0x08009cd9
 8009c58:	08009cd9 	.word	0x08009cd9
 8009c5c:	08009cd9 	.word	0x08009cd9
 8009c60:	08009cd9 	.word	0x08009cd9
 8009c64:	08009cd9 	.word	0x08009cd9
 8009c68:	08009cd9 	.word	0x08009cd9
 8009c6c:	08009cd9 	.word	0x08009cd9
 8009c70:	08009cd9 	.word	0x08009cd9
 8009c74:	08009cd9 	.word	0x08009cd9
 8009c78:	08009cd9 	.word	0x08009cd9
 8009c7c:	08009cd9 	.word	0x08009cd9
 8009c80:	08009cd9 	.word	0x08009cd9
 8009c84:	08009cd9 	.word	0x08009cd9
 8009c88:	08009cd9 	.word	0x08009cd9
 8009c8c:	08009cd9 	.word	0x08009cd9
 8009c90:	08009cd9 	.word	0x08009cd9
 8009c94:	08009cd9 	.word	0x08009cd9
 8009c98:	08009cd9 	.word	0x08009cd9
 8009c9c:	08009cd9 	.word	0x08009cd9
 8009ca0:	08009cd9 	.word	0x08009cd9
 8009ca4:	08009cd9 	.word	0x08009cd9
 8009ca8:	08009cd9 	.word	0x08009cd9
 8009cac:	08009cd9 	.word	0x08009cd9
 8009cb0:	08009cd9 	.word	0x08009cd9
 8009cb4:	08009cd9 	.word	0x08009cd9
 8009cb8:	08009cd9 	.word	0x08009cd9
 8009cbc:	08009cd9 	.word	0x08009cd9
 8009cc0:	08009cd9 	.word	0x08009cd9
 8009cc4:	08009cd9 	.word	0x08009cd9
 8009cc8:	08009cd9 	.word	0x08009cd9
 8009ccc:	08009cd9 	.word	0x08009cd9
 8009cd0:	08009cd9 	.word	0x08009cd9
 8009cd4:	08009cd9 	.word	0x08009cd9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009cd8:	bf00      	nop
  }

  return (USBD_OK);
 8009cda:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	4805      	ldr	r0, [pc, #20]	@ (8009d0c <CDC_Receive_FS+0x24>)
 8009cf6:	f7fe fbc3 	bl	8008480 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009cfa:	4804      	ldr	r0, [pc, #16]	@ (8009d0c <CDC_Receive_FS+0x24>)
 8009cfc:	f7fe fc1e 	bl	800853c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009d00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	2000053c 	.word	0x2000053c

08009d10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d20:	4b0d      	ldr	r3, [pc, #52]	@ (8009d58 <CDC_Transmit_FS+0x48>)
 8009d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e00b      	b.n	8009d4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d36:	887b      	ldrh	r3, [r7, #2]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	6879      	ldr	r1, [r7, #4]
 8009d3c:	4806      	ldr	r0, [pc, #24]	@ (8009d58 <CDC_Transmit_FS+0x48>)
 8009d3e:	f7fe fb7d 	bl	800843c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d42:	4805      	ldr	r0, [pc, #20]	@ (8009d58 <CDC_Transmit_FS+0x48>)
 8009d44:	f7fe fbba 	bl	80084bc <USBD_CDC_TransmitPacket>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	2000053c 	.word	0x2000053c

08009d5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	4613      	mov	r3, r2
 8009d68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009d6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
	...

08009d80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	4603      	mov	r3, r0
 8009d88:	6039      	str	r1, [r7, #0]
 8009d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	2212      	movs	r2, #18
 8009d90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d92:	4b03      	ldr	r3, [pc, #12]	@ (8009da0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	200000c8 	.word	0x200000c8

08009da4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	6039      	str	r1, [r7, #0]
 8009dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	2204      	movs	r2, #4
 8009db4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009db6:	4b03      	ldr	r3, [pc, #12]	@ (8009dc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	200000dc 	.word	0x200000dc

08009dc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	6039      	str	r1, [r7, #0]
 8009dd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d105      	bne.n	8009de6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	4907      	ldr	r1, [pc, #28]	@ (8009dfc <USBD_FS_ProductStrDescriptor+0x34>)
 8009dde:	4808      	ldr	r0, [pc, #32]	@ (8009e00 <USBD_FS_ProductStrDescriptor+0x38>)
 8009de0:	f7ff fdf8 	bl	80099d4 <USBD_GetString>
 8009de4:	e004      	b.n	8009df0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	4904      	ldr	r1, [pc, #16]	@ (8009dfc <USBD_FS_ProductStrDescriptor+0x34>)
 8009dea:	4805      	ldr	r0, [pc, #20]	@ (8009e00 <USBD_FS_ProductStrDescriptor+0x38>)
 8009dec:	f7ff fdf2 	bl	80099d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009df0:	4b02      	ldr	r3, [pc, #8]	@ (8009dfc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20001018 	.word	0x20001018
 8009e00:	0800d5fc 	.word	0x0800d5fc

08009e04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	6039      	str	r1, [r7, #0]
 8009e0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	4904      	ldr	r1, [pc, #16]	@ (8009e24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e14:	4804      	ldr	r0, [pc, #16]	@ (8009e28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e16:	f7ff fddd 	bl	80099d4 <USBD_GetString>
  return USBD_StrDesc;
 8009e1a:	4b02      	ldr	r3, [pc, #8]	@ (8009e24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	20001018 	.word	0x20001018
 8009e28:	0800d614 	.word	0x0800d614

08009e2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	4603      	mov	r3, r0
 8009e34:	6039      	str	r1, [r7, #0]
 8009e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	221a      	movs	r2, #26
 8009e3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e3e:	f000 f843 	bl	8009ec8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e42:	4b02      	ldr	r3, [pc, #8]	@ (8009e4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	200000e0 	.word	0x200000e0

08009e50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	4603      	mov	r3, r0
 8009e58:	6039      	str	r1, [r7, #0]
 8009e5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e5c:	79fb      	ldrb	r3, [r7, #7]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d105      	bne.n	8009e6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	4907      	ldr	r1, [pc, #28]	@ (8009e84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e66:	4808      	ldr	r0, [pc, #32]	@ (8009e88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e68:	f7ff fdb4 	bl	80099d4 <USBD_GetString>
 8009e6c:	e004      	b.n	8009e78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	4904      	ldr	r1, [pc, #16]	@ (8009e84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e72:	4805      	ldr	r0, [pc, #20]	@ (8009e88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e74:	f7ff fdae 	bl	80099d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e78:	4b02      	ldr	r3, [pc, #8]	@ (8009e84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20001018 	.word	0x20001018
 8009e88:	0800d628 	.word	0x0800d628

08009e8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	6039      	str	r1, [r7, #0]
 8009e96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e98:	79fb      	ldrb	r3, [r7, #7]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d105      	bne.n	8009eaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e9e:	683a      	ldr	r2, [r7, #0]
 8009ea0:	4907      	ldr	r1, [pc, #28]	@ (8009ec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ea2:	4808      	ldr	r0, [pc, #32]	@ (8009ec4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ea4:	f7ff fd96 	bl	80099d4 <USBD_GetString>
 8009ea8:	e004      	b.n	8009eb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	4904      	ldr	r1, [pc, #16]	@ (8009ec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009eae:	4805      	ldr	r0, [pc, #20]	@ (8009ec4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009eb0:	f7ff fd90 	bl	80099d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009eb4:	4b02      	ldr	r3, [pc, #8]	@ (8009ec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20001018 	.word	0x20001018
 8009ec4:	0800d634 	.word	0x0800d634

08009ec8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ece:	4b0f      	ldr	r3, [pc, #60]	@ (8009f0c <Get_SerialNum+0x44>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8009f10 <Get_SerialNum+0x48>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009eda:	4b0e      	ldr	r3, [pc, #56]	@ (8009f14 <Get_SerialNum+0x4c>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d009      	beq.n	8009f02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009eee:	2208      	movs	r2, #8
 8009ef0:	4909      	ldr	r1, [pc, #36]	@ (8009f18 <Get_SerialNum+0x50>)
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f000 f814 	bl	8009f20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ef8:	2204      	movs	r2, #4
 8009efa:	4908      	ldr	r1, [pc, #32]	@ (8009f1c <Get_SerialNum+0x54>)
 8009efc:	68b8      	ldr	r0, [r7, #8]
 8009efe:	f000 f80f 	bl	8009f20 <IntToUnicode>
  }
}
 8009f02:	bf00      	nop
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	1fff7a10 	.word	0x1fff7a10
 8009f10:	1fff7a14 	.word	0x1fff7a14
 8009f14:	1fff7a18 	.word	0x1fff7a18
 8009f18:	200000e2 	.word	0x200000e2
 8009f1c:	200000f2 	.word	0x200000f2

08009f20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f32:	2300      	movs	r3, #0
 8009f34:	75fb      	strb	r3, [r7, #23]
 8009f36:	e027      	b.n	8009f88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	0f1b      	lsrs	r3, r3, #28
 8009f3c:	2b09      	cmp	r3, #9
 8009f3e:	d80b      	bhi.n	8009f58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	0f1b      	lsrs	r3, r3, #28
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	7dfb      	ldrb	r3, [r7, #23]
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	440b      	add	r3, r1
 8009f50:	3230      	adds	r2, #48	@ 0x30
 8009f52:	b2d2      	uxtb	r2, r2
 8009f54:	701a      	strb	r2, [r3, #0]
 8009f56:	e00a      	b.n	8009f6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	0f1b      	lsrs	r3, r3, #28
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	7dfb      	ldrb	r3, [r7, #23]
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	4619      	mov	r1, r3
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	440b      	add	r3, r1
 8009f68:	3237      	adds	r2, #55	@ 0x37
 8009f6a:	b2d2      	uxtb	r2, r2
 8009f6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	011b      	lsls	r3, r3, #4
 8009f72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	3301      	adds	r3, #1
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	2200      	movs	r2, #0
 8009f80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	3301      	adds	r3, #1
 8009f86:	75fb      	strb	r3, [r7, #23]
 8009f88:	7dfa      	ldrb	r2, [r7, #23]
 8009f8a:	79fb      	ldrb	r3, [r7, #7]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d3d3      	bcc.n	8009f38 <IntToUnicode+0x18>
  }
}
 8009f90:	bf00      	nop
 8009f92:	bf00      	nop
 8009f94:	371c      	adds	r7, #28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
	...

08009fa0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b08a      	sub	sp, #40	@ 0x28
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fa8:	f107 0314 	add.w	r3, r7, #20
 8009fac:	2200      	movs	r2, #0
 8009fae:	601a      	str	r2, [r3, #0]
 8009fb0:	605a      	str	r2, [r3, #4]
 8009fb2:	609a      	str	r2, [r3, #8]
 8009fb4:	60da      	str	r2, [r3, #12]
 8009fb6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009fc0:	d13a      	bne.n	800a038 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	613b      	str	r3, [r7, #16]
 8009fc6:	4b1e      	ldr	r3, [pc, #120]	@ (800a040 <HAL_PCD_MspInit+0xa0>)
 8009fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fca:	4a1d      	ldr	r2, [pc, #116]	@ (800a040 <HAL_PCD_MspInit+0xa0>)
 8009fcc:	f043 0301 	orr.w	r3, r3, #1
 8009fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8009fd2:	4b1b      	ldr	r3, [pc, #108]	@ (800a040 <HAL_PCD_MspInit+0xa0>)
 8009fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	613b      	str	r3, [r7, #16]
 8009fdc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009fde:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fec:	2303      	movs	r3, #3
 8009fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ff0:	230a      	movs	r3, #10
 8009ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ff4:	f107 0314 	add.w	r3, r7, #20
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	4812      	ldr	r0, [pc, #72]	@ (800a044 <HAL_PCD_MspInit+0xa4>)
 8009ffc:	f7f9 f86c 	bl	80030d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a000:	4b0f      	ldr	r3, [pc, #60]	@ (800a040 <HAL_PCD_MspInit+0xa0>)
 800a002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a004:	4a0e      	ldr	r2, [pc, #56]	@ (800a040 <HAL_PCD_MspInit+0xa0>)
 800a006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a00a:	6353      	str	r3, [r2, #52]	@ 0x34
 800a00c:	2300      	movs	r3, #0
 800a00e:	60fb      	str	r3, [r7, #12]
 800a010:	4b0b      	ldr	r3, [pc, #44]	@ (800a040 <HAL_PCD_MspInit+0xa0>)
 800a012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a014:	4a0a      	ldr	r2, [pc, #40]	@ (800a040 <HAL_PCD_MspInit+0xa0>)
 800a016:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a01a:	6453      	str	r3, [r2, #68]	@ 0x44
 800a01c:	4b08      	ldr	r3, [pc, #32]	@ (800a040 <HAL_PCD_MspInit+0xa0>)
 800a01e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a024:	60fb      	str	r3, [r7, #12]
 800a026:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a028:	2200      	movs	r2, #0
 800a02a:	2100      	movs	r1, #0
 800a02c:	2043      	movs	r0, #67	@ 0x43
 800a02e:	f7f8 fc1a 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a032:	2043      	movs	r0, #67	@ 0x43
 800a034:	f7f8 fc33 	bl	800289e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a038:	bf00      	nop
 800a03a:	3728      	adds	r7, #40	@ 0x28
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	40023800 	.word	0x40023800
 800a044:	40020000 	.word	0x40020000

0800a048 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a05c:	4619      	mov	r1, r3
 800a05e:	4610      	mov	r0, r2
 800a060:	f7fe fb55 	bl	800870e <USBD_LL_SetupStage>
}
 800a064:	bf00      	nop
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	460b      	mov	r3, r1
 800a076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a07e:	78fa      	ldrb	r2, [r7, #3]
 800a080:	6879      	ldr	r1, [r7, #4]
 800a082:	4613      	mov	r3, r2
 800a084:	00db      	lsls	r3, r3, #3
 800a086:	4413      	add	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	440b      	add	r3, r1
 800a08c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	78fb      	ldrb	r3, [r7, #3]
 800a094:	4619      	mov	r1, r3
 800a096:	f7fe fb8f 	bl	80087b8 <USBD_LL_DataOutStage>
}
 800a09a:	bf00      	nop
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b082      	sub	sp, #8
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a0b4:	78fa      	ldrb	r2, [r7, #3]
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	00db      	lsls	r3, r3, #3
 800a0bc:	4413      	add	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	440b      	add	r3, r1
 800a0c2:	3320      	adds	r3, #32
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	78fb      	ldrb	r3, [r7, #3]
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	f7fe fc28 	bl	800891e <USBD_LL_DataInStage>
}
 800a0ce:	bf00      	nop
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b082      	sub	sp, #8
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fe fd62 	bl	8008bae <USBD_LL_SOF>
}
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b084      	sub	sp, #16
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	79db      	ldrb	r3, [r3, #7]
 800a102:	2b02      	cmp	r3, #2
 800a104:	d001      	beq.n	800a10a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a106:	f7f7 fbcb 	bl	80018a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a110:	7bfa      	ldrb	r2, [r7, #15]
 800a112:	4611      	mov	r1, r2
 800a114:	4618      	mov	r0, r3
 800a116:	f7fe fd06 	bl	8008b26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a120:	4618      	mov	r0, r3
 800a122:	f7fe fcae 	bl	8008a82 <USBD_LL_Reset>
}
 800a126:	bf00      	nop
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
	...

0800a130 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fd01 	bl	8008b46 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	6812      	ldr	r2, [r2, #0]
 800a152:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a156:	f043 0301 	orr.w	r3, r3, #1
 800a15a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	7adb      	ldrb	r3, [r3, #11]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a164:	4b04      	ldr	r3, [pc, #16]	@ (800a178 <HAL_PCD_SuspendCallback+0x48>)
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	4a03      	ldr	r2, [pc, #12]	@ (800a178 <HAL_PCD_SuspendCallback+0x48>)
 800a16a:	f043 0306 	orr.w	r3, r3, #6
 800a16e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	e000ed00 	.word	0xe000ed00

0800a17c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe fcf7 	bl	8008b7e <USBD_LL_Resume>
}
 800a190:	bf00      	nop
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1aa:	78fa      	ldrb	r2, [r7, #3]
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe fd4f 	bl	8008c52 <USBD_LL_IsoOUTIncomplete>
}
 800a1b4:	bf00      	nop
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1ce:	78fa      	ldrb	r2, [r7, #3]
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fe fd0b 	bl	8008bee <USBD_LL_IsoINIncomplete>
}
 800a1d8:	bf00      	nop
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe fd61 	bl	8008cb6 <USBD_LL_DevConnected>
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fe fd5e 	bl	8008ccc <USBD_LL_DevDisconnected>
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d13c      	bne.n	800a2a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a228:	4a20      	ldr	r2, [pc, #128]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a1e      	ldr	r2, [pc, #120]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a234:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a238:	4b1c      	ldr	r3, [pc, #112]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a23a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a23e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a240:	4b1a      	ldr	r3, [pc, #104]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a242:	2204      	movs	r2, #4
 800a244:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a246:	4b19      	ldr	r3, [pc, #100]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a248:	2202      	movs	r2, #2
 800a24a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a24c:	4b17      	ldr	r3, [pc, #92]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a24e:	2200      	movs	r2, #0
 800a250:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a252:	4b16      	ldr	r3, [pc, #88]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a254:	2202      	movs	r2, #2
 800a256:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a258:	4b14      	ldr	r3, [pc, #80]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a25a:	2200      	movs	r2, #0
 800a25c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a25e:	4b13      	ldr	r3, [pc, #76]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a260:	2200      	movs	r2, #0
 800a262:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a264:	4b11      	ldr	r3, [pc, #68]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a266:	2200      	movs	r2, #0
 800a268:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a26a:	4b10      	ldr	r3, [pc, #64]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a270:	4b0e      	ldr	r3, [pc, #56]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a272:	2200      	movs	r2, #0
 800a274:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a276:	480d      	ldr	r0, [pc, #52]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a278:	f7f9 f8cb 	bl	8003412 <HAL_PCD_Init>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a282:	f7f7 fb0d 	bl	80018a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a286:	2180      	movs	r1, #128	@ 0x80
 800a288:	4808      	ldr	r0, [pc, #32]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a28a:	f7fa faf6 	bl	800487a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a28e:	2240      	movs	r2, #64	@ 0x40
 800a290:	2100      	movs	r1, #0
 800a292:	4806      	ldr	r0, [pc, #24]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a294:	f7fa faaa 	bl	80047ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a298:	2280      	movs	r2, #128	@ 0x80
 800a29a:	2101      	movs	r1, #1
 800a29c:	4803      	ldr	r0, [pc, #12]	@ (800a2ac <USBD_LL_Init+0x94>)
 800a29e:	f7fa faa5 	bl	80047ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20001218 	.word	0x20001218

0800a2b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7f9 f9b2 	bl	8003630 <HAL_PCD_Start>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2d0:	7bfb      	ldrb	r3, [r7, #15]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f000 f942 	bl	800a55c <USBD_Get_USB_Status>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	70fb      	strb	r3, [r7, #3]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70bb      	strb	r3, [r7, #2]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a30e:	78bb      	ldrb	r3, [r7, #2]
 800a310:	883a      	ldrh	r2, [r7, #0]
 800a312:	78f9      	ldrb	r1, [r7, #3]
 800a314:	f7f9 fe86 	bl	8004024 <HAL_PCD_EP_Open>
 800a318:	4603      	mov	r3, r0
 800a31a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 f91c 	bl	800a55c <USBD_Get_USB_Status>
 800a324:	4603      	mov	r3, r0
 800a326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a328:	7bbb      	ldrb	r3, [r7, #14]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b084      	sub	sp, #16
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	460b      	mov	r3, r1
 800a33c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a34c:	78fa      	ldrb	r2, [r7, #3]
 800a34e:	4611      	mov	r1, r2
 800a350:	4618      	mov	r0, r3
 800a352:	f7f9 fecf 	bl	80040f4 <HAL_PCD_EP_Close>
 800a356:	4603      	mov	r3, r0
 800a358:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 f8fd 	bl	800a55c <USBD_Get_USB_Status>
 800a362:	4603      	mov	r3, r0
 800a364:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a366:	7bbb      	ldrb	r3, [r7, #14]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	460b      	mov	r3, r1
 800a37a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a38a:	78fa      	ldrb	r2, [r7, #3]
 800a38c:	4611      	mov	r1, r2
 800a38e:	4618      	mov	r0, r3
 800a390:	f7f9 ff87 	bl	80042a2 <HAL_PCD_EP_SetStall>
 800a394:	4603      	mov	r3, r0
 800a396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a398:	7bfb      	ldrb	r3, [r7, #15]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 f8de 	bl	800a55c <USBD_Get_USB_Status>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3c8:	78fa      	ldrb	r2, [r7, #3]
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7f9 ffcb 	bl	8004368 <HAL_PCD_EP_ClrStall>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 f8bf 	bl	800a55c <USBD_Get_USB_Status>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a404:	2b00      	cmp	r3, #0
 800a406:	da0b      	bge.n	800a420 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a408:	78fb      	ldrb	r3, [r7, #3]
 800a40a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a40e:	68f9      	ldr	r1, [r7, #12]
 800a410:	4613      	mov	r3, r2
 800a412:	00db      	lsls	r3, r3, #3
 800a414:	4413      	add	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	440b      	add	r3, r1
 800a41a:	3316      	adds	r3, #22
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	e00b      	b.n	800a438 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a420:	78fb      	ldrb	r3, [r7, #3]
 800a422:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a426:	68f9      	ldr	r1, [r7, #12]
 800a428:	4613      	mov	r3, r2
 800a42a:	00db      	lsls	r3, r3, #3
 800a42c:	4413      	add	r3, r2
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	440b      	add	r3, r1
 800a432:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a436:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a454:	2300      	movs	r3, #0
 800a456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a45e:	78fa      	ldrb	r2, [r7, #3]
 800a460:	4611      	mov	r1, r2
 800a462:	4618      	mov	r0, r3
 800a464:	f7f9 fdba 	bl	8003fdc <HAL_PCD_SetAddress>
 800a468:	4603      	mov	r3, r0
 800a46a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 f874 	bl	800a55c <USBD_Get_USB_Status>
 800a474:	4603      	mov	r3, r0
 800a476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a478:	7bbb      	ldrb	r3, [r7, #14]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b086      	sub	sp, #24
 800a486:	af00      	add	r7, sp, #0
 800a488:	60f8      	str	r0, [r7, #12]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	603b      	str	r3, [r7, #0]
 800a48e:	460b      	mov	r3, r1
 800a490:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a496:	2300      	movs	r3, #0
 800a498:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a4a0:	7af9      	ldrb	r1, [r7, #11]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	f7f9 fec2 	bl	800422e <HAL_PCD_EP_Transmit>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f000 f853 	bl	800a55c <USBD_Get_USB_Status>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	607a      	str	r2, [r7, #4]
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a4e2:	7af9      	ldrb	r1, [r7, #11]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	f7f9 fe4e 	bl	8004188 <HAL_PCD_EP_Receive>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4f0:	7dfb      	ldrb	r3, [r7, #23]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f000 f832 	bl	800a55c <USBD_Get_USB_Status>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3718      	adds	r7, #24
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b082      	sub	sp, #8
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	460b      	mov	r3, r1
 800a510:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a518:	78fa      	ldrb	r2, [r7, #3]
 800a51a:	4611      	mov	r1, r2
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7f9 fe6e 	bl	80041fe <HAL_PCD_EP_GetRxCount>
 800a522:	4603      	mov	r3, r0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a534:	4b03      	ldr	r3, [pc, #12]	@ (800a544 <USBD_static_malloc+0x18>)
}
 800a536:	4618      	mov	r0, r3
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	200016fc 	.word	0x200016fc

0800a548 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]

}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a56a:	79fb      	ldrb	r3, [r7, #7]
 800a56c:	2b03      	cmp	r3, #3
 800a56e:	d817      	bhi.n	800a5a0 <USBD_Get_USB_Status+0x44>
 800a570:	a201      	add	r2, pc, #4	@ (adr r2, 800a578 <USBD_Get_USB_Status+0x1c>)
 800a572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a576:	bf00      	nop
 800a578:	0800a589 	.word	0x0800a589
 800a57c:	0800a58f 	.word	0x0800a58f
 800a580:	0800a595 	.word	0x0800a595
 800a584:	0800a59b 	.word	0x0800a59b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
    break;
 800a58c:	e00b      	b.n	800a5a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a58e:	2303      	movs	r3, #3
 800a590:	73fb      	strb	r3, [r7, #15]
    break;
 800a592:	e008      	b.n	800a5a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a594:	2301      	movs	r3, #1
 800a596:	73fb      	strb	r3, [r7, #15]
    break;
 800a598:	e005      	b.n	800a5a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a59a:	2303      	movs	r3, #3
 800a59c:	73fb      	strb	r3, [r7, #15]
    break;
 800a59e:	e002      	b.n	800a5a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a4:	bf00      	nop
  }
  return usb_status;
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <atoi>:
 800a5b4:	220a      	movs	r2, #10
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	f000 b87a 	b.w	800a6b0 <strtol>

0800a5bc <_strtol_l.constprop.0>:
 800a5bc:	2b24      	cmp	r3, #36	@ 0x24
 800a5be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c2:	4686      	mov	lr, r0
 800a5c4:	4690      	mov	r8, r2
 800a5c6:	d801      	bhi.n	800a5cc <_strtol_l.constprop.0+0x10>
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d106      	bne.n	800a5da <_strtol_l.constprop.0+0x1e>
 800a5cc:	f000 fe74 	bl	800b2b8 <__errno>
 800a5d0:	2316      	movs	r3, #22
 800a5d2:	6003      	str	r3, [r0, #0]
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5da:	4834      	ldr	r0, [pc, #208]	@ (800a6ac <_strtol_l.constprop.0+0xf0>)
 800a5dc:	460d      	mov	r5, r1
 800a5de:	462a      	mov	r2, r5
 800a5e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5e4:	5d06      	ldrb	r6, [r0, r4]
 800a5e6:	f016 0608 	ands.w	r6, r6, #8
 800a5ea:	d1f8      	bne.n	800a5de <_strtol_l.constprop.0+0x22>
 800a5ec:	2c2d      	cmp	r4, #45	@ 0x2d
 800a5ee:	d12d      	bne.n	800a64c <_strtol_l.constprop.0+0x90>
 800a5f0:	782c      	ldrb	r4, [r5, #0]
 800a5f2:	2601      	movs	r6, #1
 800a5f4:	1c95      	adds	r5, r2, #2
 800a5f6:	f033 0210 	bics.w	r2, r3, #16
 800a5fa:	d109      	bne.n	800a610 <_strtol_l.constprop.0+0x54>
 800a5fc:	2c30      	cmp	r4, #48	@ 0x30
 800a5fe:	d12a      	bne.n	800a656 <_strtol_l.constprop.0+0x9a>
 800a600:	782a      	ldrb	r2, [r5, #0]
 800a602:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a606:	2a58      	cmp	r2, #88	@ 0x58
 800a608:	d125      	bne.n	800a656 <_strtol_l.constprop.0+0x9a>
 800a60a:	786c      	ldrb	r4, [r5, #1]
 800a60c:	2310      	movs	r3, #16
 800a60e:	3502      	adds	r5, #2
 800a610:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a614:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a618:	2200      	movs	r2, #0
 800a61a:	fbbc f9f3 	udiv	r9, ip, r3
 800a61e:	4610      	mov	r0, r2
 800a620:	fb03 ca19 	mls	sl, r3, r9, ip
 800a624:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a628:	2f09      	cmp	r7, #9
 800a62a:	d81b      	bhi.n	800a664 <_strtol_l.constprop.0+0xa8>
 800a62c:	463c      	mov	r4, r7
 800a62e:	42a3      	cmp	r3, r4
 800a630:	dd27      	ble.n	800a682 <_strtol_l.constprop.0+0xc6>
 800a632:	1c57      	adds	r7, r2, #1
 800a634:	d007      	beq.n	800a646 <_strtol_l.constprop.0+0x8a>
 800a636:	4581      	cmp	r9, r0
 800a638:	d320      	bcc.n	800a67c <_strtol_l.constprop.0+0xc0>
 800a63a:	d101      	bne.n	800a640 <_strtol_l.constprop.0+0x84>
 800a63c:	45a2      	cmp	sl, r4
 800a63e:	db1d      	blt.n	800a67c <_strtol_l.constprop.0+0xc0>
 800a640:	fb00 4003 	mla	r0, r0, r3, r4
 800a644:	2201      	movs	r2, #1
 800a646:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a64a:	e7eb      	b.n	800a624 <_strtol_l.constprop.0+0x68>
 800a64c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a64e:	bf04      	itt	eq
 800a650:	782c      	ldrbeq	r4, [r5, #0]
 800a652:	1c95      	addeq	r5, r2, #2
 800a654:	e7cf      	b.n	800a5f6 <_strtol_l.constprop.0+0x3a>
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1da      	bne.n	800a610 <_strtol_l.constprop.0+0x54>
 800a65a:	2c30      	cmp	r4, #48	@ 0x30
 800a65c:	bf0c      	ite	eq
 800a65e:	2308      	moveq	r3, #8
 800a660:	230a      	movne	r3, #10
 800a662:	e7d5      	b.n	800a610 <_strtol_l.constprop.0+0x54>
 800a664:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a668:	2f19      	cmp	r7, #25
 800a66a:	d801      	bhi.n	800a670 <_strtol_l.constprop.0+0xb4>
 800a66c:	3c37      	subs	r4, #55	@ 0x37
 800a66e:	e7de      	b.n	800a62e <_strtol_l.constprop.0+0x72>
 800a670:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a674:	2f19      	cmp	r7, #25
 800a676:	d804      	bhi.n	800a682 <_strtol_l.constprop.0+0xc6>
 800a678:	3c57      	subs	r4, #87	@ 0x57
 800a67a:	e7d8      	b.n	800a62e <_strtol_l.constprop.0+0x72>
 800a67c:	f04f 32ff 	mov.w	r2, #4294967295
 800a680:	e7e1      	b.n	800a646 <_strtol_l.constprop.0+0x8a>
 800a682:	1c53      	adds	r3, r2, #1
 800a684:	d108      	bne.n	800a698 <_strtol_l.constprop.0+0xdc>
 800a686:	2322      	movs	r3, #34	@ 0x22
 800a688:	f8ce 3000 	str.w	r3, [lr]
 800a68c:	4660      	mov	r0, ip
 800a68e:	f1b8 0f00 	cmp.w	r8, #0
 800a692:	d0a0      	beq.n	800a5d6 <_strtol_l.constprop.0+0x1a>
 800a694:	1e69      	subs	r1, r5, #1
 800a696:	e006      	b.n	800a6a6 <_strtol_l.constprop.0+0xea>
 800a698:	b106      	cbz	r6, 800a69c <_strtol_l.constprop.0+0xe0>
 800a69a:	4240      	negs	r0, r0
 800a69c:	f1b8 0f00 	cmp.w	r8, #0
 800a6a0:	d099      	beq.n	800a5d6 <_strtol_l.constprop.0+0x1a>
 800a6a2:	2a00      	cmp	r2, #0
 800a6a4:	d1f6      	bne.n	800a694 <_strtol_l.constprop.0+0xd8>
 800a6a6:	f8c8 1000 	str.w	r1, [r8]
 800a6aa:	e794      	b.n	800a5d6 <_strtol_l.constprop.0+0x1a>
 800a6ac:	0800d665 	.word	0x0800d665

0800a6b0 <strtol>:
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	460a      	mov	r2, r1
 800a6b4:	4601      	mov	r1, r0
 800a6b6:	4802      	ldr	r0, [pc, #8]	@ (800a6c0 <strtol+0x10>)
 800a6b8:	6800      	ldr	r0, [r0, #0]
 800a6ba:	f7ff bf7f 	b.w	800a5bc <_strtol_l.constprop.0>
 800a6be:	bf00      	nop
 800a6c0:	20000108 	.word	0x20000108

0800a6c4 <__cvt>:
 800a6c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c8:	ec57 6b10 	vmov	r6, r7, d0
 800a6cc:	2f00      	cmp	r7, #0
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	463b      	mov	r3, r7
 800a6d4:	bfbb      	ittet	lt
 800a6d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a6da:	461f      	movlt	r7, r3
 800a6dc:	2300      	movge	r3, #0
 800a6de:	232d      	movlt	r3, #45	@ 0x2d
 800a6e0:	700b      	strb	r3, [r1, #0]
 800a6e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6e4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a6e8:	4691      	mov	r9, r2
 800a6ea:	f023 0820 	bic.w	r8, r3, #32
 800a6ee:	bfbc      	itt	lt
 800a6f0:	4632      	movlt	r2, r6
 800a6f2:	4616      	movlt	r6, r2
 800a6f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a6f8:	d005      	beq.n	800a706 <__cvt+0x42>
 800a6fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a6fe:	d100      	bne.n	800a702 <__cvt+0x3e>
 800a700:	3401      	adds	r4, #1
 800a702:	2102      	movs	r1, #2
 800a704:	e000      	b.n	800a708 <__cvt+0x44>
 800a706:	2103      	movs	r1, #3
 800a708:	ab03      	add	r3, sp, #12
 800a70a:	9301      	str	r3, [sp, #4]
 800a70c:	ab02      	add	r3, sp, #8
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	ec47 6b10 	vmov	d0, r6, r7
 800a714:	4653      	mov	r3, sl
 800a716:	4622      	mov	r2, r4
 800a718:	f000 fe86 	bl	800b428 <_dtoa_r>
 800a71c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a720:	4605      	mov	r5, r0
 800a722:	d119      	bne.n	800a758 <__cvt+0x94>
 800a724:	f019 0f01 	tst.w	r9, #1
 800a728:	d00e      	beq.n	800a748 <__cvt+0x84>
 800a72a:	eb00 0904 	add.w	r9, r0, r4
 800a72e:	2200      	movs	r2, #0
 800a730:	2300      	movs	r3, #0
 800a732:	4630      	mov	r0, r6
 800a734:	4639      	mov	r1, r7
 800a736:	f7f6 f9cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800a73a:	b108      	cbz	r0, 800a740 <__cvt+0x7c>
 800a73c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a740:	2230      	movs	r2, #48	@ 0x30
 800a742:	9b03      	ldr	r3, [sp, #12]
 800a744:	454b      	cmp	r3, r9
 800a746:	d31e      	bcc.n	800a786 <__cvt+0xc2>
 800a748:	9b03      	ldr	r3, [sp, #12]
 800a74a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a74c:	1b5b      	subs	r3, r3, r5
 800a74e:	4628      	mov	r0, r5
 800a750:	6013      	str	r3, [r2, #0]
 800a752:	b004      	add	sp, #16
 800a754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a758:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a75c:	eb00 0904 	add.w	r9, r0, r4
 800a760:	d1e5      	bne.n	800a72e <__cvt+0x6a>
 800a762:	7803      	ldrb	r3, [r0, #0]
 800a764:	2b30      	cmp	r3, #48	@ 0x30
 800a766:	d10a      	bne.n	800a77e <__cvt+0xba>
 800a768:	2200      	movs	r2, #0
 800a76a:	2300      	movs	r3, #0
 800a76c:	4630      	mov	r0, r6
 800a76e:	4639      	mov	r1, r7
 800a770:	f7f6 f9b2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a774:	b918      	cbnz	r0, 800a77e <__cvt+0xba>
 800a776:	f1c4 0401 	rsb	r4, r4, #1
 800a77a:	f8ca 4000 	str.w	r4, [sl]
 800a77e:	f8da 3000 	ldr.w	r3, [sl]
 800a782:	4499      	add	r9, r3
 800a784:	e7d3      	b.n	800a72e <__cvt+0x6a>
 800a786:	1c59      	adds	r1, r3, #1
 800a788:	9103      	str	r1, [sp, #12]
 800a78a:	701a      	strb	r2, [r3, #0]
 800a78c:	e7d9      	b.n	800a742 <__cvt+0x7e>

0800a78e <__exponent>:
 800a78e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a790:	2900      	cmp	r1, #0
 800a792:	bfba      	itte	lt
 800a794:	4249      	neglt	r1, r1
 800a796:	232d      	movlt	r3, #45	@ 0x2d
 800a798:	232b      	movge	r3, #43	@ 0x2b
 800a79a:	2909      	cmp	r1, #9
 800a79c:	7002      	strb	r2, [r0, #0]
 800a79e:	7043      	strb	r3, [r0, #1]
 800a7a0:	dd29      	ble.n	800a7f6 <__exponent+0x68>
 800a7a2:	f10d 0307 	add.w	r3, sp, #7
 800a7a6:	461d      	mov	r5, r3
 800a7a8:	270a      	movs	r7, #10
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	fbb1 f6f7 	udiv	r6, r1, r7
 800a7b0:	fb07 1416 	mls	r4, r7, r6, r1
 800a7b4:	3430      	adds	r4, #48	@ 0x30
 800a7b6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	2c63      	cmp	r4, #99	@ 0x63
 800a7be:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7c2:	4631      	mov	r1, r6
 800a7c4:	dcf1      	bgt.n	800a7aa <__exponent+0x1c>
 800a7c6:	3130      	adds	r1, #48	@ 0x30
 800a7c8:	1e94      	subs	r4, r2, #2
 800a7ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a7ce:	1c41      	adds	r1, r0, #1
 800a7d0:	4623      	mov	r3, r4
 800a7d2:	42ab      	cmp	r3, r5
 800a7d4:	d30a      	bcc.n	800a7ec <__exponent+0x5e>
 800a7d6:	f10d 0309 	add.w	r3, sp, #9
 800a7da:	1a9b      	subs	r3, r3, r2
 800a7dc:	42ac      	cmp	r4, r5
 800a7de:	bf88      	it	hi
 800a7e0:	2300      	movhi	r3, #0
 800a7e2:	3302      	adds	r3, #2
 800a7e4:	4403      	add	r3, r0
 800a7e6:	1a18      	subs	r0, r3, r0
 800a7e8:	b003      	add	sp, #12
 800a7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a7f0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a7f4:	e7ed      	b.n	800a7d2 <__exponent+0x44>
 800a7f6:	2330      	movs	r3, #48	@ 0x30
 800a7f8:	3130      	adds	r1, #48	@ 0x30
 800a7fa:	7083      	strb	r3, [r0, #2]
 800a7fc:	70c1      	strb	r1, [r0, #3]
 800a7fe:	1d03      	adds	r3, r0, #4
 800a800:	e7f1      	b.n	800a7e6 <__exponent+0x58>
	...

0800a804 <_printf_float>:
 800a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a808:	b08d      	sub	sp, #52	@ 0x34
 800a80a:	460c      	mov	r4, r1
 800a80c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a810:	4616      	mov	r6, r2
 800a812:	461f      	mov	r7, r3
 800a814:	4605      	mov	r5, r0
 800a816:	f000 fd05 	bl	800b224 <_localeconv_r>
 800a81a:	6803      	ldr	r3, [r0, #0]
 800a81c:	9304      	str	r3, [sp, #16]
 800a81e:	4618      	mov	r0, r3
 800a820:	f7f5 fd2e 	bl	8000280 <strlen>
 800a824:	2300      	movs	r3, #0
 800a826:	930a      	str	r3, [sp, #40]	@ 0x28
 800a828:	f8d8 3000 	ldr.w	r3, [r8]
 800a82c:	9005      	str	r0, [sp, #20]
 800a82e:	3307      	adds	r3, #7
 800a830:	f023 0307 	bic.w	r3, r3, #7
 800a834:	f103 0208 	add.w	r2, r3, #8
 800a838:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a83c:	f8d4 b000 	ldr.w	fp, [r4]
 800a840:	f8c8 2000 	str.w	r2, [r8]
 800a844:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a848:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a84c:	9307      	str	r3, [sp, #28]
 800a84e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a852:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a85a:	4b9c      	ldr	r3, [pc, #624]	@ (800aacc <_printf_float+0x2c8>)
 800a85c:	f04f 32ff 	mov.w	r2, #4294967295
 800a860:	f7f6 f96c 	bl	8000b3c <__aeabi_dcmpun>
 800a864:	bb70      	cbnz	r0, 800a8c4 <_printf_float+0xc0>
 800a866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a86a:	4b98      	ldr	r3, [pc, #608]	@ (800aacc <_printf_float+0x2c8>)
 800a86c:	f04f 32ff 	mov.w	r2, #4294967295
 800a870:	f7f6 f946 	bl	8000b00 <__aeabi_dcmple>
 800a874:	bb30      	cbnz	r0, 800a8c4 <_printf_float+0xc0>
 800a876:	2200      	movs	r2, #0
 800a878:	2300      	movs	r3, #0
 800a87a:	4640      	mov	r0, r8
 800a87c:	4649      	mov	r1, r9
 800a87e:	f7f6 f935 	bl	8000aec <__aeabi_dcmplt>
 800a882:	b110      	cbz	r0, 800a88a <_printf_float+0x86>
 800a884:	232d      	movs	r3, #45	@ 0x2d
 800a886:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a88a:	4a91      	ldr	r2, [pc, #580]	@ (800aad0 <_printf_float+0x2cc>)
 800a88c:	4b91      	ldr	r3, [pc, #580]	@ (800aad4 <_printf_float+0x2d0>)
 800a88e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a892:	bf94      	ite	ls
 800a894:	4690      	movls	r8, r2
 800a896:	4698      	movhi	r8, r3
 800a898:	2303      	movs	r3, #3
 800a89a:	6123      	str	r3, [r4, #16]
 800a89c:	f02b 0304 	bic.w	r3, fp, #4
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	f04f 0900 	mov.w	r9, #0
 800a8a6:	9700      	str	r7, [sp, #0]
 800a8a8:	4633      	mov	r3, r6
 800a8aa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f000 f9d2 	bl	800ac58 <_printf_common>
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	f040 808d 	bne.w	800a9d4 <_printf_float+0x1d0>
 800a8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a8be:	b00d      	add	sp, #52	@ 0x34
 800a8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c4:	4642      	mov	r2, r8
 800a8c6:	464b      	mov	r3, r9
 800a8c8:	4640      	mov	r0, r8
 800a8ca:	4649      	mov	r1, r9
 800a8cc:	f7f6 f936 	bl	8000b3c <__aeabi_dcmpun>
 800a8d0:	b140      	cbz	r0, 800a8e4 <_printf_float+0xe0>
 800a8d2:	464b      	mov	r3, r9
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	bfbc      	itt	lt
 800a8d8:	232d      	movlt	r3, #45	@ 0x2d
 800a8da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a8de:	4a7e      	ldr	r2, [pc, #504]	@ (800aad8 <_printf_float+0x2d4>)
 800a8e0:	4b7e      	ldr	r3, [pc, #504]	@ (800aadc <_printf_float+0x2d8>)
 800a8e2:	e7d4      	b.n	800a88e <_printf_float+0x8a>
 800a8e4:	6863      	ldr	r3, [r4, #4]
 800a8e6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a8ea:	9206      	str	r2, [sp, #24]
 800a8ec:	1c5a      	adds	r2, r3, #1
 800a8ee:	d13b      	bne.n	800a968 <_printf_float+0x164>
 800a8f0:	2306      	movs	r3, #6
 800a8f2:	6063      	str	r3, [r4, #4]
 800a8f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	6022      	str	r2, [r4, #0]
 800a8fc:	9303      	str	r3, [sp, #12]
 800a8fe:	ab0a      	add	r3, sp, #40	@ 0x28
 800a900:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a904:	ab09      	add	r3, sp, #36	@ 0x24
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	6861      	ldr	r1, [r4, #4]
 800a90a:	ec49 8b10 	vmov	d0, r8, r9
 800a90e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a912:	4628      	mov	r0, r5
 800a914:	f7ff fed6 	bl	800a6c4 <__cvt>
 800a918:	9b06      	ldr	r3, [sp, #24]
 800a91a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a91c:	2b47      	cmp	r3, #71	@ 0x47
 800a91e:	4680      	mov	r8, r0
 800a920:	d129      	bne.n	800a976 <_printf_float+0x172>
 800a922:	1cc8      	adds	r0, r1, #3
 800a924:	db02      	blt.n	800a92c <_printf_float+0x128>
 800a926:	6863      	ldr	r3, [r4, #4]
 800a928:	4299      	cmp	r1, r3
 800a92a:	dd41      	ble.n	800a9b0 <_printf_float+0x1ac>
 800a92c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a930:	fa5f fa8a 	uxtb.w	sl, sl
 800a934:	3901      	subs	r1, #1
 800a936:	4652      	mov	r2, sl
 800a938:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a93c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a93e:	f7ff ff26 	bl	800a78e <__exponent>
 800a942:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a944:	1813      	adds	r3, r2, r0
 800a946:	2a01      	cmp	r2, #1
 800a948:	4681      	mov	r9, r0
 800a94a:	6123      	str	r3, [r4, #16]
 800a94c:	dc02      	bgt.n	800a954 <_printf_float+0x150>
 800a94e:	6822      	ldr	r2, [r4, #0]
 800a950:	07d2      	lsls	r2, r2, #31
 800a952:	d501      	bpl.n	800a958 <_printf_float+0x154>
 800a954:	3301      	adds	r3, #1
 800a956:	6123      	str	r3, [r4, #16]
 800a958:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d0a2      	beq.n	800a8a6 <_printf_float+0xa2>
 800a960:	232d      	movs	r3, #45	@ 0x2d
 800a962:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a966:	e79e      	b.n	800a8a6 <_printf_float+0xa2>
 800a968:	9a06      	ldr	r2, [sp, #24]
 800a96a:	2a47      	cmp	r2, #71	@ 0x47
 800a96c:	d1c2      	bne.n	800a8f4 <_printf_float+0xf0>
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1c0      	bne.n	800a8f4 <_printf_float+0xf0>
 800a972:	2301      	movs	r3, #1
 800a974:	e7bd      	b.n	800a8f2 <_printf_float+0xee>
 800a976:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a97a:	d9db      	bls.n	800a934 <_printf_float+0x130>
 800a97c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a980:	d118      	bne.n	800a9b4 <_printf_float+0x1b0>
 800a982:	2900      	cmp	r1, #0
 800a984:	6863      	ldr	r3, [r4, #4]
 800a986:	dd0b      	ble.n	800a9a0 <_printf_float+0x19c>
 800a988:	6121      	str	r1, [r4, #16]
 800a98a:	b913      	cbnz	r3, 800a992 <_printf_float+0x18e>
 800a98c:	6822      	ldr	r2, [r4, #0]
 800a98e:	07d0      	lsls	r0, r2, #31
 800a990:	d502      	bpl.n	800a998 <_printf_float+0x194>
 800a992:	3301      	adds	r3, #1
 800a994:	440b      	add	r3, r1
 800a996:	6123      	str	r3, [r4, #16]
 800a998:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a99a:	f04f 0900 	mov.w	r9, #0
 800a99e:	e7db      	b.n	800a958 <_printf_float+0x154>
 800a9a0:	b913      	cbnz	r3, 800a9a8 <_printf_float+0x1a4>
 800a9a2:	6822      	ldr	r2, [r4, #0]
 800a9a4:	07d2      	lsls	r2, r2, #31
 800a9a6:	d501      	bpl.n	800a9ac <_printf_float+0x1a8>
 800a9a8:	3302      	adds	r3, #2
 800a9aa:	e7f4      	b.n	800a996 <_printf_float+0x192>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e7f2      	b.n	800a996 <_printf_float+0x192>
 800a9b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a9b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9b6:	4299      	cmp	r1, r3
 800a9b8:	db05      	blt.n	800a9c6 <_printf_float+0x1c2>
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	6121      	str	r1, [r4, #16]
 800a9be:	07d8      	lsls	r0, r3, #31
 800a9c0:	d5ea      	bpl.n	800a998 <_printf_float+0x194>
 800a9c2:	1c4b      	adds	r3, r1, #1
 800a9c4:	e7e7      	b.n	800a996 <_printf_float+0x192>
 800a9c6:	2900      	cmp	r1, #0
 800a9c8:	bfd4      	ite	le
 800a9ca:	f1c1 0202 	rsble	r2, r1, #2
 800a9ce:	2201      	movgt	r2, #1
 800a9d0:	4413      	add	r3, r2
 800a9d2:	e7e0      	b.n	800a996 <_printf_float+0x192>
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	055a      	lsls	r2, r3, #21
 800a9d8:	d407      	bmi.n	800a9ea <_printf_float+0x1e6>
 800a9da:	6923      	ldr	r3, [r4, #16]
 800a9dc:	4642      	mov	r2, r8
 800a9de:	4631      	mov	r1, r6
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	47b8      	blx	r7
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	d12b      	bne.n	800aa40 <_printf_float+0x23c>
 800a9e8:	e767      	b.n	800a8ba <_printf_float+0xb6>
 800a9ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a9ee:	f240 80dd 	bls.w	800abac <_printf_float+0x3a8>
 800a9f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f7f6 f86d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	d033      	beq.n	800aa6a <_printf_float+0x266>
 800aa02:	4a37      	ldr	r2, [pc, #220]	@ (800aae0 <_printf_float+0x2dc>)
 800aa04:	2301      	movs	r3, #1
 800aa06:	4631      	mov	r1, r6
 800aa08:	4628      	mov	r0, r5
 800aa0a:	47b8      	blx	r7
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	f43f af54 	beq.w	800a8ba <_printf_float+0xb6>
 800aa12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aa16:	4543      	cmp	r3, r8
 800aa18:	db02      	blt.n	800aa20 <_printf_float+0x21c>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	07d8      	lsls	r0, r3, #31
 800aa1e:	d50f      	bpl.n	800aa40 <_printf_float+0x23c>
 800aa20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa24:	4631      	mov	r1, r6
 800aa26:	4628      	mov	r0, r5
 800aa28:	47b8      	blx	r7
 800aa2a:	3001      	adds	r0, #1
 800aa2c:	f43f af45 	beq.w	800a8ba <_printf_float+0xb6>
 800aa30:	f04f 0900 	mov.w	r9, #0
 800aa34:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa38:	f104 0a1a 	add.w	sl, r4, #26
 800aa3c:	45c8      	cmp	r8, r9
 800aa3e:	dc09      	bgt.n	800aa54 <_printf_float+0x250>
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	079b      	lsls	r3, r3, #30
 800aa44:	f100 8103 	bmi.w	800ac4e <_printf_float+0x44a>
 800aa48:	68e0      	ldr	r0, [r4, #12]
 800aa4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa4c:	4298      	cmp	r0, r3
 800aa4e:	bfb8      	it	lt
 800aa50:	4618      	movlt	r0, r3
 800aa52:	e734      	b.n	800a8be <_printf_float+0xba>
 800aa54:	2301      	movs	r3, #1
 800aa56:	4652      	mov	r2, sl
 800aa58:	4631      	mov	r1, r6
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	47b8      	blx	r7
 800aa5e:	3001      	adds	r0, #1
 800aa60:	f43f af2b 	beq.w	800a8ba <_printf_float+0xb6>
 800aa64:	f109 0901 	add.w	r9, r9, #1
 800aa68:	e7e8      	b.n	800aa3c <_printf_float+0x238>
 800aa6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	dc39      	bgt.n	800aae4 <_printf_float+0x2e0>
 800aa70:	4a1b      	ldr	r2, [pc, #108]	@ (800aae0 <_printf_float+0x2dc>)
 800aa72:	2301      	movs	r3, #1
 800aa74:	4631      	mov	r1, r6
 800aa76:	4628      	mov	r0, r5
 800aa78:	47b8      	blx	r7
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	f43f af1d 	beq.w	800a8ba <_printf_float+0xb6>
 800aa80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aa84:	ea59 0303 	orrs.w	r3, r9, r3
 800aa88:	d102      	bne.n	800aa90 <_printf_float+0x28c>
 800aa8a:	6823      	ldr	r3, [r4, #0]
 800aa8c:	07d9      	lsls	r1, r3, #31
 800aa8e:	d5d7      	bpl.n	800aa40 <_printf_float+0x23c>
 800aa90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa94:	4631      	mov	r1, r6
 800aa96:	4628      	mov	r0, r5
 800aa98:	47b8      	blx	r7
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	f43f af0d 	beq.w	800a8ba <_printf_float+0xb6>
 800aaa0:	f04f 0a00 	mov.w	sl, #0
 800aaa4:	f104 0b1a 	add.w	fp, r4, #26
 800aaa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaaa:	425b      	negs	r3, r3
 800aaac:	4553      	cmp	r3, sl
 800aaae:	dc01      	bgt.n	800aab4 <_printf_float+0x2b0>
 800aab0:	464b      	mov	r3, r9
 800aab2:	e793      	b.n	800a9dc <_printf_float+0x1d8>
 800aab4:	2301      	movs	r3, #1
 800aab6:	465a      	mov	r2, fp
 800aab8:	4631      	mov	r1, r6
 800aaba:	4628      	mov	r0, r5
 800aabc:	47b8      	blx	r7
 800aabe:	3001      	adds	r0, #1
 800aac0:	f43f aefb 	beq.w	800a8ba <_printf_float+0xb6>
 800aac4:	f10a 0a01 	add.w	sl, sl, #1
 800aac8:	e7ee      	b.n	800aaa8 <_printf_float+0x2a4>
 800aaca:	bf00      	nop
 800aacc:	7fefffff 	.word	0x7fefffff
 800aad0:	0800d765 	.word	0x0800d765
 800aad4:	0800d769 	.word	0x0800d769
 800aad8:	0800d76d 	.word	0x0800d76d
 800aadc:	0800d771 	.word	0x0800d771
 800aae0:	0800d775 	.word	0x0800d775
 800aae4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aae6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aaea:	4553      	cmp	r3, sl
 800aaec:	bfa8      	it	ge
 800aaee:	4653      	movge	r3, sl
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	4699      	mov	r9, r3
 800aaf4:	dc36      	bgt.n	800ab64 <_printf_float+0x360>
 800aaf6:	f04f 0b00 	mov.w	fp, #0
 800aafa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aafe:	f104 021a 	add.w	r2, r4, #26
 800ab02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab04:	9306      	str	r3, [sp, #24]
 800ab06:	eba3 0309 	sub.w	r3, r3, r9
 800ab0a:	455b      	cmp	r3, fp
 800ab0c:	dc31      	bgt.n	800ab72 <_printf_float+0x36e>
 800ab0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab10:	459a      	cmp	sl, r3
 800ab12:	dc3a      	bgt.n	800ab8a <_printf_float+0x386>
 800ab14:	6823      	ldr	r3, [r4, #0]
 800ab16:	07da      	lsls	r2, r3, #31
 800ab18:	d437      	bmi.n	800ab8a <_printf_float+0x386>
 800ab1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab1c:	ebaa 0903 	sub.w	r9, sl, r3
 800ab20:	9b06      	ldr	r3, [sp, #24]
 800ab22:	ebaa 0303 	sub.w	r3, sl, r3
 800ab26:	4599      	cmp	r9, r3
 800ab28:	bfa8      	it	ge
 800ab2a:	4699      	movge	r9, r3
 800ab2c:	f1b9 0f00 	cmp.w	r9, #0
 800ab30:	dc33      	bgt.n	800ab9a <_printf_float+0x396>
 800ab32:	f04f 0800 	mov.w	r8, #0
 800ab36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab3a:	f104 0b1a 	add.w	fp, r4, #26
 800ab3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab40:	ebaa 0303 	sub.w	r3, sl, r3
 800ab44:	eba3 0309 	sub.w	r3, r3, r9
 800ab48:	4543      	cmp	r3, r8
 800ab4a:	f77f af79 	ble.w	800aa40 <_printf_float+0x23c>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	465a      	mov	r2, fp
 800ab52:	4631      	mov	r1, r6
 800ab54:	4628      	mov	r0, r5
 800ab56:	47b8      	blx	r7
 800ab58:	3001      	adds	r0, #1
 800ab5a:	f43f aeae 	beq.w	800a8ba <_printf_float+0xb6>
 800ab5e:	f108 0801 	add.w	r8, r8, #1
 800ab62:	e7ec      	b.n	800ab3e <_printf_float+0x33a>
 800ab64:	4642      	mov	r2, r8
 800ab66:	4631      	mov	r1, r6
 800ab68:	4628      	mov	r0, r5
 800ab6a:	47b8      	blx	r7
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	d1c2      	bne.n	800aaf6 <_printf_float+0x2f2>
 800ab70:	e6a3      	b.n	800a8ba <_printf_float+0xb6>
 800ab72:	2301      	movs	r3, #1
 800ab74:	4631      	mov	r1, r6
 800ab76:	4628      	mov	r0, r5
 800ab78:	9206      	str	r2, [sp, #24]
 800ab7a:	47b8      	blx	r7
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	f43f ae9c 	beq.w	800a8ba <_printf_float+0xb6>
 800ab82:	9a06      	ldr	r2, [sp, #24]
 800ab84:	f10b 0b01 	add.w	fp, fp, #1
 800ab88:	e7bb      	b.n	800ab02 <_printf_float+0x2fe>
 800ab8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab8e:	4631      	mov	r1, r6
 800ab90:	4628      	mov	r0, r5
 800ab92:	47b8      	blx	r7
 800ab94:	3001      	adds	r0, #1
 800ab96:	d1c0      	bne.n	800ab1a <_printf_float+0x316>
 800ab98:	e68f      	b.n	800a8ba <_printf_float+0xb6>
 800ab9a:	9a06      	ldr	r2, [sp, #24]
 800ab9c:	464b      	mov	r3, r9
 800ab9e:	4442      	add	r2, r8
 800aba0:	4631      	mov	r1, r6
 800aba2:	4628      	mov	r0, r5
 800aba4:	47b8      	blx	r7
 800aba6:	3001      	adds	r0, #1
 800aba8:	d1c3      	bne.n	800ab32 <_printf_float+0x32e>
 800abaa:	e686      	b.n	800a8ba <_printf_float+0xb6>
 800abac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800abb0:	f1ba 0f01 	cmp.w	sl, #1
 800abb4:	dc01      	bgt.n	800abba <_printf_float+0x3b6>
 800abb6:	07db      	lsls	r3, r3, #31
 800abb8:	d536      	bpl.n	800ac28 <_printf_float+0x424>
 800abba:	2301      	movs	r3, #1
 800abbc:	4642      	mov	r2, r8
 800abbe:	4631      	mov	r1, r6
 800abc0:	4628      	mov	r0, r5
 800abc2:	47b8      	blx	r7
 800abc4:	3001      	adds	r0, #1
 800abc6:	f43f ae78 	beq.w	800a8ba <_printf_float+0xb6>
 800abca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abce:	4631      	mov	r1, r6
 800abd0:	4628      	mov	r0, r5
 800abd2:	47b8      	blx	r7
 800abd4:	3001      	adds	r0, #1
 800abd6:	f43f ae70 	beq.w	800a8ba <_printf_float+0xb6>
 800abda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800abde:	2200      	movs	r2, #0
 800abe0:	2300      	movs	r3, #0
 800abe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abe6:	f7f5 ff77 	bl	8000ad8 <__aeabi_dcmpeq>
 800abea:	b9c0      	cbnz	r0, 800ac1e <_printf_float+0x41a>
 800abec:	4653      	mov	r3, sl
 800abee:	f108 0201 	add.w	r2, r8, #1
 800abf2:	4631      	mov	r1, r6
 800abf4:	4628      	mov	r0, r5
 800abf6:	47b8      	blx	r7
 800abf8:	3001      	adds	r0, #1
 800abfa:	d10c      	bne.n	800ac16 <_printf_float+0x412>
 800abfc:	e65d      	b.n	800a8ba <_printf_float+0xb6>
 800abfe:	2301      	movs	r3, #1
 800ac00:	465a      	mov	r2, fp
 800ac02:	4631      	mov	r1, r6
 800ac04:	4628      	mov	r0, r5
 800ac06:	47b8      	blx	r7
 800ac08:	3001      	adds	r0, #1
 800ac0a:	f43f ae56 	beq.w	800a8ba <_printf_float+0xb6>
 800ac0e:	f108 0801 	add.w	r8, r8, #1
 800ac12:	45d0      	cmp	r8, sl
 800ac14:	dbf3      	blt.n	800abfe <_printf_float+0x3fa>
 800ac16:	464b      	mov	r3, r9
 800ac18:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ac1c:	e6df      	b.n	800a9de <_printf_float+0x1da>
 800ac1e:	f04f 0800 	mov.w	r8, #0
 800ac22:	f104 0b1a 	add.w	fp, r4, #26
 800ac26:	e7f4      	b.n	800ac12 <_printf_float+0x40e>
 800ac28:	2301      	movs	r3, #1
 800ac2a:	4642      	mov	r2, r8
 800ac2c:	e7e1      	b.n	800abf2 <_printf_float+0x3ee>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	464a      	mov	r2, r9
 800ac32:	4631      	mov	r1, r6
 800ac34:	4628      	mov	r0, r5
 800ac36:	47b8      	blx	r7
 800ac38:	3001      	adds	r0, #1
 800ac3a:	f43f ae3e 	beq.w	800a8ba <_printf_float+0xb6>
 800ac3e:	f108 0801 	add.w	r8, r8, #1
 800ac42:	68e3      	ldr	r3, [r4, #12]
 800ac44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac46:	1a5b      	subs	r3, r3, r1
 800ac48:	4543      	cmp	r3, r8
 800ac4a:	dcf0      	bgt.n	800ac2e <_printf_float+0x42a>
 800ac4c:	e6fc      	b.n	800aa48 <_printf_float+0x244>
 800ac4e:	f04f 0800 	mov.w	r8, #0
 800ac52:	f104 0919 	add.w	r9, r4, #25
 800ac56:	e7f4      	b.n	800ac42 <_printf_float+0x43e>

0800ac58 <_printf_common>:
 800ac58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac5c:	4616      	mov	r6, r2
 800ac5e:	4698      	mov	r8, r3
 800ac60:	688a      	ldr	r2, [r1, #8]
 800ac62:	690b      	ldr	r3, [r1, #16]
 800ac64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	bfb8      	it	lt
 800ac6c:	4613      	movlt	r3, r2
 800ac6e:	6033      	str	r3, [r6, #0]
 800ac70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac74:	4607      	mov	r7, r0
 800ac76:	460c      	mov	r4, r1
 800ac78:	b10a      	cbz	r2, 800ac7e <_printf_common+0x26>
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	6033      	str	r3, [r6, #0]
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	0699      	lsls	r1, r3, #26
 800ac82:	bf42      	ittt	mi
 800ac84:	6833      	ldrmi	r3, [r6, #0]
 800ac86:	3302      	addmi	r3, #2
 800ac88:	6033      	strmi	r3, [r6, #0]
 800ac8a:	6825      	ldr	r5, [r4, #0]
 800ac8c:	f015 0506 	ands.w	r5, r5, #6
 800ac90:	d106      	bne.n	800aca0 <_printf_common+0x48>
 800ac92:	f104 0a19 	add.w	sl, r4, #25
 800ac96:	68e3      	ldr	r3, [r4, #12]
 800ac98:	6832      	ldr	r2, [r6, #0]
 800ac9a:	1a9b      	subs	r3, r3, r2
 800ac9c:	42ab      	cmp	r3, r5
 800ac9e:	dc26      	bgt.n	800acee <_printf_common+0x96>
 800aca0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aca4:	6822      	ldr	r2, [r4, #0]
 800aca6:	3b00      	subs	r3, #0
 800aca8:	bf18      	it	ne
 800acaa:	2301      	movne	r3, #1
 800acac:	0692      	lsls	r2, r2, #26
 800acae:	d42b      	bmi.n	800ad08 <_printf_common+0xb0>
 800acb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800acb4:	4641      	mov	r1, r8
 800acb6:	4638      	mov	r0, r7
 800acb8:	47c8      	blx	r9
 800acba:	3001      	adds	r0, #1
 800acbc:	d01e      	beq.n	800acfc <_printf_common+0xa4>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	6922      	ldr	r2, [r4, #16]
 800acc2:	f003 0306 	and.w	r3, r3, #6
 800acc6:	2b04      	cmp	r3, #4
 800acc8:	bf02      	ittt	eq
 800acca:	68e5      	ldreq	r5, [r4, #12]
 800accc:	6833      	ldreq	r3, [r6, #0]
 800acce:	1aed      	subeq	r5, r5, r3
 800acd0:	68a3      	ldr	r3, [r4, #8]
 800acd2:	bf0c      	ite	eq
 800acd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acd8:	2500      	movne	r5, #0
 800acda:	4293      	cmp	r3, r2
 800acdc:	bfc4      	itt	gt
 800acde:	1a9b      	subgt	r3, r3, r2
 800ace0:	18ed      	addgt	r5, r5, r3
 800ace2:	2600      	movs	r6, #0
 800ace4:	341a      	adds	r4, #26
 800ace6:	42b5      	cmp	r5, r6
 800ace8:	d11a      	bne.n	800ad20 <_printf_common+0xc8>
 800acea:	2000      	movs	r0, #0
 800acec:	e008      	b.n	800ad00 <_printf_common+0xa8>
 800acee:	2301      	movs	r3, #1
 800acf0:	4652      	mov	r2, sl
 800acf2:	4641      	mov	r1, r8
 800acf4:	4638      	mov	r0, r7
 800acf6:	47c8      	blx	r9
 800acf8:	3001      	adds	r0, #1
 800acfa:	d103      	bne.n	800ad04 <_printf_common+0xac>
 800acfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ad00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad04:	3501      	adds	r5, #1
 800ad06:	e7c6      	b.n	800ac96 <_printf_common+0x3e>
 800ad08:	18e1      	adds	r1, r4, r3
 800ad0a:	1c5a      	adds	r2, r3, #1
 800ad0c:	2030      	movs	r0, #48	@ 0x30
 800ad0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad12:	4422      	add	r2, r4
 800ad14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad1c:	3302      	adds	r3, #2
 800ad1e:	e7c7      	b.n	800acb0 <_printf_common+0x58>
 800ad20:	2301      	movs	r3, #1
 800ad22:	4622      	mov	r2, r4
 800ad24:	4641      	mov	r1, r8
 800ad26:	4638      	mov	r0, r7
 800ad28:	47c8      	blx	r9
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	d0e6      	beq.n	800acfc <_printf_common+0xa4>
 800ad2e:	3601      	adds	r6, #1
 800ad30:	e7d9      	b.n	800ace6 <_printf_common+0x8e>
	...

0800ad34 <_printf_i>:
 800ad34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad38:	7e0f      	ldrb	r7, [r1, #24]
 800ad3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad3c:	2f78      	cmp	r7, #120	@ 0x78
 800ad3e:	4691      	mov	r9, r2
 800ad40:	4680      	mov	r8, r0
 800ad42:	460c      	mov	r4, r1
 800ad44:	469a      	mov	sl, r3
 800ad46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad4a:	d807      	bhi.n	800ad5c <_printf_i+0x28>
 800ad4c:	2f62      	cmp	r7, #98	@ 0x62
 800ad4e:	d80a      	bhi.n	800ad66 <_printf_i+0x32>
 800ad50:	2f00      	cmp	r7, #0
 800ad52:	f000 80d2 	beq.w	800aefa <_printf_i+0x1c6>
 800ad56:	2f58      	cmp	r7, #88	@ 0x58
 800ad58:	f000 80b9 	beq.w	800aece <_printf_i+0x19a>
 800ad5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad64:	e03a      	b.n	800addc <_printf_i+0xa8>
 800ad66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad6a:	2b15      	cmp	r3, #21
 800ad6c:	d8f6      	bhi.n	800ad5c <_printf_i+0x28>
 800ad6e:	a101      	add	r1, pc, #4	@ (adr r1, 800ad74 <_printf_i+0x40>)
 800ad70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad74:	0800adcd 	.word	0x0800adcd
 800ad78:	0800ade1 	.word	0x0800ade1
 800ad7c:	0800ad5d 	.word	0x0800ad5d
 800ad80:	0800ad5d 	.word	0x0800ad5d
 800ad84:	0800ad5d 	.word	0x0800ad5d
 800ad88:	0800ad5d 	.word	0x0800ad5d
 800ad8c:	0800ade1 	.word	0x0800ade1
 800ad90:	0800ad5d 	.word	0x0800ad5d
 800ad94:	0800ad5d 	.word	0x0800ad5d
 800ad98:	0800ad5d 	.word	0x0800ad5d
 800ad9c:	0800ad5d 	.word	0x0800ad5d
 800ada0:	0800aee1 	.word	0x0800aee1
 800ada4:	0800ae0b 	.word	0x0800ae0b
 800ada8:	0800ae9b 	.word	0x0800ae9b
 800adac:	0800ad5d 	.word	0x0800ad5d
 800adb0:	0800ad5d 	.word	0x0800ad5d
 800adb4:	0800af03 	.word	0x0800af03
 800adb8:	0800ad5d 	.word	0x0800ad5d
 800adbc:	0800ae0b 	.word	0x0800ae0b
 800adc0:	0800ad5d 	.word	0x0800ad5d
 800adc4:	0800ad5d 	.word	0x0800ad5d
 800adc8:	0800aea3 	.word	0x0800aea3
 800adcc:	6833      	ldr	r3, [r6, #0]
 800adce:	1d1a      	adds	r2, r3, #4
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	6032      	str	r2, [r6, #0]
 800add4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800add8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800addc:	2301      	movs	r3, #1
 800adde:	e09d      	b.n	800af1c <_printf_i+0x1e8>
 800ade0:	6833      	ldr	r3, [r6, #0]
 800ade2:	6820      	ldr	r0, [r4, #0]
 800ade4:	1d19      	adds	r1, r3, #4
 800ade6:	6031      	str	r1, [r6, #0]
 800ade8:	0606      	lsls	r6, r0, #24
 800adea:	d501      	bpl.n	800adf0 <_printf_i+0xbc>
 800adec:	681d      	ldr	r5, [r3, #0]
 800adee:	e003      	b.n	800adf8 <_printf_i+0xc4>
 800adf0:	0645      	lsls	r5, r0, #25
 800adf2:	d5fb      	bpl.n	800adec <_printf_i+0xb8>
 800adf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800adf8:	2d00      	cmp	r5, #0
 800adfa:	da03      	bge.n	800ae04 <_printf_i+0xd0>
 800adfc:	232d      	movs	r3, #45	@ 0x2d
 800adfe:	426d      	negs	r5, r5
 800ae00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae04:	4859      	ldr	r0, [pc, #356]	@ (800af6c <_printf_i+0x238>)
 800ae06:	230a      	movs	r3, #10
 800ae08:	e011      	b.n	800ae2e <_printf_i+0xfa>
 800ae0a:	6821      	ldr	r1, [r4, #0]
 800ae0c:	6833      	ldr	r3, [r6, #0]
 800ae0e:	0608      	lsls	r0, r1, #24
 800ae10:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae14:	d402      	bmi.n	800ae1c <_printf_i+0xe8>
 800ae16:	0649      	lsls	r1, r1, #25
 800ae18:	bf48      	it	mi
 800ae1a:	b2ad      	uxthmi	r5, r5
 800ae1c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae1e:	4853      	ldr	r0, [pc, #332]	@ (800af6c <_printf_i+0x238>)
 800ae20:	6033      	str	r3, [r6, #0]
 800ae22:	bf14      	ite	ne
 800ae24:	230a      	movne	r3, #10
 800ae26:	2308      	moveq	r3, #8
 800ae28:	2100      	movs	r1, #0
 800ae2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae2e:	6866      	ldr	r6, [r4, #4]
 800ae30:	60a6      	str	r6, [r4, #8]
 800ae32:	2e00      	cmp	r6, #0
 800ae34:	bfa2      	ittt	ge
 800ae36:	6821      	ldrge	r1, [r4, #0]
 800ae38:	f021 0104 	bicge.w	r1, r1, #4
 800ae3c:	6021      	strge	r1, [r4, #0]
 800ae3e:	b90d      	cbnz	r5, 800ae44 <_printf_i+0x110>
 800ae40:	2e00      	cmp	r6, #0
 800ae42:	d04b      	beq.n	800aedc <_printf_i+0x1a8>
 800ae44:	4616      	mov	r6, r2
 800ae46:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae4a:	fb03 5711 	mls	r7, r3, r1, r5
 800ae4e:	5dc7      	ldrb	r7, [r0, r7]
 800ae50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae54:	462f      	mov	r7, r5
 800ae56:	42bb      	cmp	r3, r7
 800ae58:	460d      	mov	r5, r1
 800ae5a:	d9f4      	bls.n	800ae46 <_printf_i+0x112>
 800ae5c:	2b08      	cmp	r3, #8
 800ae5e:	d10b      	bne.n	800ae78 <_printf_i+0x144>
 800ae60:	6823      	ldr	r3, [r4, #0]
 800ae62:	07df      	lsls	r7, r3, #31
 800ae64:	d508      	bpl.n	800ae78 <_printf_i+0x144>
 800ae66:	6923      	ldr	r3, [r4, #16]
 800ae68:	6861      	ldr	r1, [r4, #4]
 800ae6a:	4299      	cmp	r1, r3
 800ae6c:	bfde      	ittt	le
 800ae6e:	2330      	movle	r3, #48	@ 0x30
 800ae70:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae74:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae78:	1b92      	subs	r2, r2, r6
 800ae7a:	6122      	str	r2, [r4, #16]
 800ae7c:	f8cd a000 	str.w	sl, [sp]
 800ae80:	464b      	mov	r3, r9
 800ae82:	aa03      	add	r2, sp, #12
 800ae84:	4621      	mov	r1, r4
 800ae86:	4640      	mov	r0, r8
 800ae88:	f7ff fee6 	bl	800ac58 <_printf_common>
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	d14a      	bne.n	800af26 <_printf_i+0x1f2>
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295
 800ae94:	b004      	add	sp, #16
 800ae96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	f043 0320 	orr.w	r3, r3, #32
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	4833      	ldr	r0, [pc, #204]	@ (800af70 <_printf_i+0x23c>)
 800aea4:	2778      	movs	r7, #120	@ 0x78
 800aea6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	6831      	ldr	r1, [r6, #0]
 800aeae:	061f      	lsls	r7, r3, #24
 800aeb0:	f851 5b04 	ldr.w	r5, [r1], #4
 800aeb4:	d402      	bmi.n	800aebc <_printf_i+0x188>
 800aeb6:	065f      	lsls	r7, r3, #25
 800aeb8:	bf48      	it	mi
 800aeba:	b2ad      	uxthmi	r5, r5
 800aebc:	6031      	str	r1, [r6, #0]
 800aebe:	07d9      	lsls	r1, r3, #31
 800aec0:	bf44      	itt	mi
 800aec2:	f043 0320 	orrmi.w	r3, r3, #32
 800aec6:	6023      	strmi	r3, [r4, #0]
 800aec8:	b11d      	cbz	r5, 800aed2 <_printf_i+0x19e>
 800aeca:	2310      	movs	r3, #16
 800aecc:	e7ac      	b.n	800ae28 <_printf_i+0xf4>
 800aece:	4827      	ldr	r0, [pc, #156]	@ (800af6c <_printf_i+0x238>)
 800aed0:	e7e9      	b.n	800aea6 <_printf_i+0x172>
 800aed2:	6823      	ldr	r3, [r4, #0]
 800aed4:	f023 0320 	bic.w	r3, r3, #32
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	e7f6      	b.n	800aeca <_printf_i+0x196>
 800aedc:	4616      	mov	r6, r2
 800aede:	e7bd      	b.n	800ae5c <_printf_i+0x128>
 800aee0:	6833      	ldr	r3, [r6, #0]
 800aee2:	6825      	ldr	r5, [r4, #0]
 800aee4:	6961      	ldr	r1, [r4, #20]
 800aee6:	1d18      	adds	r0, r3, #4
 800aee8:	6030      	str	r0, [r6, #0]
 800aeea:	062e      	lsls	r6, r5, #24
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	d501      	bpl.n	800aef4 <_printf_i+0x1c0>
 800aef0:	6019      	str	r1, [r3, #0]
 800aef2:	e002      	b.n	800aefa <_printf_i+0x1c6>
 800aef4:	0668      	lsls	r0, r5, #25
 800aef6:	d5fb      	bpl.n	800aef0 <_printf_i+0x1bc>
 800aef8:	8019      	strh	r1, [r3, #0]
 800aefa:	2300      	movs	r3, #0
 800aefc:	6123      	str	r3, [r4, #16]
 800aefe:	4616      	mov	r6, r2
 800af00:	e7bc      	b.n	800ae7c <_printf_i+0x148>
 800af02:	6833      	ldr	r3, [r6, #0]
 800af04:	1d1a      	adds	r2, r3, #4
 800af06:	6032      	str	r2, [r6, #0]
 800af08:	681e      	ldr	r6, [r3, #0]
 800af0a:	6862      	ldr	r2, [r4, #4]
 800af0c:	2100      	movs	r1, #0
 800af0e:	4630      	mov	r0, r6
 800af10:	f7f5 f966 	bl	80001e0 <memchr>
 800af14:	b108      	cbz	r0, 800af1a <_printf_i+0x1e6>
 800af16:	1b80      	subs	r0, r0, r6
 800af18:	6060      	str	r0, [r4, #4]
 800af1a:	6863      	ldr	r3, [r4, #4]
 800af1c:	6123      	str	r3, [r4, #16]
 800af1e:	2300      	movs	r3, #0
 800af20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af24:	e7aa      	b.n	800ae7c <_printf_i+0x148>
 800af26:	6923      	ldr	r3, [r4, #16]
 800af28:	4632      	mov	r2, r6
 800af2a:	4649      	mov	r1, r9
 800af2c:	4640      	mov	r0, r8
 800af2e:	47d0      	blx	sl
 800af30:	3001      	adds	r0, #1
 800af32:	d0ad      	beq.n	800ae90 <_printf_i+0x15c>
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	079b      	lsls	r3, r3, #30
 800af38:	d413      	bmi.n	800af62 <_printf_i+0x22e>
 800af3a:	68e0      	ldr	r0, [r4, #12]
 800af3c:	9b03      	ldr	r3, [sp, #12]
 800af3e:	4298      	cmp	r0, r3
 800af40:	bfb8      	it	lt
 800af42:	4618      	movlt	r0, r3
 800af44:	e7a6      	b.n	800ae94 <_printf_i+0x160>
 800af46:	2301      	movs	r3, #1
 800af48:	4632      	mov	r2, r6
 800af4a:	4649      	mov	r1, r9
 800af4c:	4640      	mov	r0, r8
 800af4e:	47d0      	blx	sl
 800af50:	3001      	adds	r0, #1
 800af52:	d09d      	beq.n	800ae90 <_printf_i+0x15c>
 800af54:	3501      	adds	r5, #1
 800af56:	68e3      	ldr	r3, [r4, #12]
 800af58:	9903      	ldr	r1, [sp, #12]
 800af5a:	1a5b      	subs	r3, r3, r1
 800af5c:	42ab      	cmp	r3, r5
 800af5e:	dcf2      	bgt.n	800af46 <_printf_i+0x212>
 800af60:	e7eb      	b.n	800af3a <_printf_i+0x206>
 800af62:	2500      	movs	r5, #0
 800af64:	f104 0619 	add.w	r6, r4, #25
 800af68:	e7f5      	b.n	800af56 <_printf_i+0x222>
 800af6a:	bf00      	nop
 800af6c:	0800d777 	.word	0x0800d777
 800af70:	0800d788 	.word	0x0800d788

0800af74 <std>:
 800af74:	2300      	movs	r3, #0
 800af76:	b510      	push	{r4, lr}
 800af78:	4604      	mov	r4, r0
 800af7a:	e9c0 3300 	strd	r3, r3, [r0]
 800af7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af82:	6083      	str	r3, [r0, #8]
 800af84:	8181      	strh	r1, [r0, #12]
 800af86:	6643      	str	r3, [r0, #100]	@ 0x64
 800af88:	81c2      	strh	r2, [r0, #14]
 800af8a:	6183      	str	r3, [r0, #24]
 800af8c:	4619      	mov	r1, r3
 800af8e:	2208      	movs	r2, #8
 800af90:	305c      	adds	r0, #92	@ 0x5c
 800af92:	f000 f928 	bl	800b1e6 <memset>
 800af96:	4b0d      	ldr	r3, [pc, #52]	@ (800afcc <std+0x58>)
 800af98:	6263      	str	r3, [r4, #36]	@ 0x24
 800af9a:	4b0d      	ldr	r3, [pc, #52]	@ (800afd0 <std+0x5c>)
 800af9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af9e:	4b0d      	ldr	r3, [pc, #52]	@ (800afd4 <std+0x60>)
 800afa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afa2:	4b0d      	ldr	r3, [pc, #52]	@ (800afd8 <std+0x64>)
 800afa4:	6323      	str	r3, [r4, #48]	@ 0x30
 800afa6:	4b0d      	ldr	r3, [pc, #52]	@ (800afdc <std+0x68>)
 800afa8:	6224      	str	r4, [r4, #32]
 800afaa:	429c      	cmp	r4, r3
 800afac:	d006      	beq.n	800afbc <std+0x48>
 800afae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afb2:	4294      	cmp	r4, r2
 800afb4:	d002      	beq.n	800afbc <std+0x48>
 800afb6:	33d0      	adds	r3, #208	@ 0xd0
 800afb8:	429c      	cmp	r4, r3
 800afba:	d105      	bne.n	800afc8 <std+0x54>
 800afbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800afc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afc4:	f000 b9a2 	b.w	800b30c <__retarget_lock_init_recursive>
 800afc8:	bd10      	pop	{r4, pc}
 800afca:	bf00      	nop
 800afcc:	0800b161 	.word	0x0800b161
 800afd0:	0800b183 	.word	0x0800b183
 800afd4:	0800b1bb 	.word	0x0800b1bb
 800afd8:	0800b1df 	.word	0x0800b1df
 800afdc:	2000191c 	.word	0x2000191c

0800afe0 <stdio_exit_handler>:
 800afe0:	4a02      	ldr	r2, [pc, #8]	@ (800afec <stdio_exit_handler+0xc>)
 800afe2:	4903      	ldr	r1, [pc, #12]	@ (800aff0 <stdio_exit_handler+0x10>)
 800afe4:	4803      	ldr	r0, [pc, #12]	@ (800aff4 <stdio_exit_handler+0x14>)
 800afe6:	f000 b869 	b.w	800b0bc <_fwalk_sglue>
 800afea:	bf00      	nop
 800afec:	200000fc 	.word	0x200000fc
 800aff0:	0800cc6d 	.word	0x0800cc6d
 800aff4:	2000010c 	.word	0x2000010c

0800aff8 <cleanup_stdio>:
 800aff8:	6841      	ldr	r1, [r0, #4]
 800affa:	4b0c      	ldr	r3, [pc, #48]	@ (800b02c <cleanup_stdio+0x34>)
 800affc:	4299      	cmp	r1, r3
 800affe:	b510      	push	{r4, lr}
 800b000:	4604      	mov	r4, r0
 800b002:	d001      	beq.n	800b008 <cleanup_stdio+0x10>
 800b004:	f001 fe32 	bl	800cc6c <_fflush_r>
 800b008:	68a1      	ldr	r1, [r4, #8]
 800b00a:	4b09      	ldr	r3, [pc, #36]	@ (800b030 <cleanup_stdio+0x38>)
 800b00c:	4299      	cmp	r1, r3
 800b00e:	d002      	beq.n	800b016 <cleanup_stdio+0x1e>
 800b010:	4620      	mov	r0, r4
 800b012:	f001 fe2b 	bl	800cc6c <_fflush_r>
 800b016:	68e1      	ldr	r1, [r4, #12]
 800b018:	4b06      	ldr	r3, [pc, #24]	@ (800b034 <cleanup_stdio+0x3c>)
 800b01a:	4299      	cmp	r1, r3
 800b01c:	d004      	beq.n	800b028 <cleanup_stdio+0x30>
 800b01e:	4620      	mov	r0, r4
 800b020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b024:	f001 be22 	b.w	800cc6c <_fflush_r>
 800b028:	bd10      	pop	{r4, pc}
 800b02a:	bf00      	nop
 800b02c:	2000191c 	.word	0x2000191c
 800b030:	20001984 	.word	0x20001984
 800b034:	200019ec 	.word	0x200019ec

0800b038 <global_stdio_init.part.0>:
 800b038:	b510      	push	{r4, lr}
 800b03a:	4b0b      	ldr	r3, [pc, #44]	@ (800b068 <global_stdio_init.part.0+0x30>)
 800b03c:	4c0b      	ldr	r4, [pc, #44]	@ (800b06c <global_stdio_init.part.0+0x34>)
 800b03e:	4a0c      	ldr	r2, [pc, #48]	@ (800b070 <global_stdio_init.part.0+0x38>)
 800b040:	601a      	str	r2, [r3, #0]
 800b042:	4620      	mov	r0, r4
 800b044:	2200      	movs	r2, #0
 800b046:	2104      	movs	r1, #4
 800b048:	f7ff ff94 	bl	800af74 <std>
 800b04c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b050:	2201      	movs	r2, #1
 800b052:	2109      	movs	r1, #9
 800b054:	f7ff ff8e 	bl	800af74 <std>
 800b058:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b05c:	2202      	movs	r2, #2
 800b05e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b062:	2112      	movs	r1, #18
 800b064:	f7ff bf86 	b.w	800af74 <std>
 800b068:	20001a54 	.word	0x20001a54
 800b06c:	2000191c 	.word	0x2000191c
 800b070:	0800afe1 	.word	0x0800afe1

0800b074 <__sfp_lock_acquire>:
 800b074:	4801      	ldr	r0, [pc, #4]	@ (800b07c <__sfp_lock_acquire+0x8>)
 800b076:	f000 b94a 	b.w	800b30e <__retarget_lock_acquire_recursive>
 800b07a:	bf00      	nop
 800b07c:	20001a5d 	.word	0x20001a5d

0800b080 <__sfp_lock_release>:
 800b080:	4801      	ldr	r0, [pc, #4]	@ (800b088 <__sfp_lock_release+0x8>)
 800b082:	f000 b945 	b.w	800b310 <__retarget_lock_release_recursive>
 800b086:	bf00      	nop
 800b088:	20001a5d 	.word	0x20001a5d

0800b08c <__sinit>:
 800b08c:	b510      	push	{r4, lr}
 800b08e:	4604      	mov	r4, r0
 800b090:	f7ff fff0 	bl	800b074 <__sfp_lock_acquire>
 800b094:	6a23      	ldr	r3, [r4, #32]
 800b096:	b11b      	cbz	r3, 800b0a0 <__sinit+0x14>
 800b098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b09c:	f7ff bff0 	b.w	800b080 <__sfp_lock_release>
 800b0a0:	4b04      	ldr	r3, [pc, #16]	@ (800b0b4 <__sinit+0x28>)
 800b0a2:	6223      	str	r3, [r4, #32]
 800b0a4:	4b04      	ldr	r3, [pc, #16]	@ (800b0b8 <__sinit+0x2c>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1f5      	bne.n	800b098 <__sinit+0xc>
 800b0ac:	f7ff ffc4 	bl	800b038 <global_stdio_init.part.0>
 800b0b0:	e7f2      	b.n	800b098 <__sinit+0xc>
 800b0b2:	bf00      	nop
 800b0b4:	0800aff9 	.word	0x0800aff9
 800b0b8:	20001a54 	.word	0x20001a54

0800b0bc <_fwalk_sglue>:
 800b0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	4688      	mov	r8, r1
 800b0c4:	4614      	mov	r4, r2
 800b0c6:	2600      	movs	r6, #0
 800b0c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0cc:	f1b9 0901 	subs.w	r9, r9, #1
 800b0d0:	d505      	bpl.n	800b0de <_fwalk_sglue+0x22>
 800b0d2:	6824      	ldr	r4, [r4, #0]
 800b0d4:	2c00      	cmp	r4, #0
 800b0d6:	d1f7      	bne.n	800b0c8 <_fwalk_sglue+0xc>
 800b0d8:	4630      	mov	r0, r6
 800b0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0de:	89ab      	ldrh	r3, [r5, #12]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d907      	bls.n	800b0f4 <_fwalk_sglue+0x38>
 800b0e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	d003      	beq.n	800b0f4 <_fwalk_sglue+0x38>
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	47c0      	blx	r8
 800b0f2:	4306      	orrs	r6, r0
 800b0f4:	3568      	adds	r5, #104	@ 0x68
 800b0f6:	e7e9      	b.n	800b0cc <_fwalk_sglue+0x10>

0800b0f8 <sniprintf>:
 800b0f8:	b40c      	push	{r2, r3}
 800b0fa:	b530      	push	{r4, r5, lr}
 800b0fc:	4b17      	ldr	r3, [pc, #92]	@ (800b15c <sniprintf+0x64>)
 800b0fe:	1e0c      	subs	r4, r1, #0
 800b100:	681d      	ldr	r5, [r3, #0]
 800b102:	b09d      	sub	sp, #116	@ 0x74
 800b104:	da08      	bge.n	800b118 <sniprintf+0x20>
 800b106:	238b      	movs	r3, #139	@ 0x8b
 800b108:	602b      	str	r3, [r5, #0]
 800b10a:	f04f 30ff 	mov.w	r0, #4294967295
 800b10e:	b01d      	add	sp, #116	@ 0x74
 800b110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b114:	b002      	add	sp, #8
 800b116:	4770      	bx	lr
 800b118:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b11c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b120:	bf14      	ite	ne
 800b122:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b126:	4623      	moveq	r3, r4
 800b128:	9304      	str	r3, [sp, #16]
 800b12a:	9307      	str	r3, [sp, #28]
 800b12c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b130:	9002      	str	r0, [sp, #8]
 800b132:	9006      	str	r0, [sp, #24]
 800b134:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b138:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b13a:	ab21      	add	r3, sp, #132	@ 0x84
 800b13c:	a902      	add	r1, sp, #8
 800b13e:	4628      	mov	r0, r5
 800b140:	9301      	str	r3, [sp, #4]
 800b142:	f001 fc13 	bl	800c96c <_svfiprintf_r>
 800b146:	1c43      	adds	r3, r0, #1
 800b148:	bfbc      	itt	lt
 800b14a:	238b      	movlt	r3, #139	@ 0x8b
 800b14c:	602b      	strlt	r3, [r5, #0]
 800b14e:	2c00      	cmp	r4, #0
 800b150:	d0dd      	beq.n	800b10e <sniprintf+0x16>
 800b152:	9b02      	ldr	r3, [sp, #8]
 800b154:	2200      	movs	r2, #0
 800b156:	701a      	strb	r2, [r3, #0]
 800b158:	e7d9      	b.n	800b10e <sniprintf+0x16>
 800b15a:	bf00      	nop
 800b15c:	20000108 	.word	0x20000108

0800b160 <__sread>:
 800b160:	b510      	push	{r4, lr}
 800b162:	460c      	mov	r4, r1
 800b164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b168:	f000 f882 	bl	800b270 <_read_r>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	bfab      	itete	ge
 800b170:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b172:	89a3      	ldrhlt	r3, [r4, #12]
 800b174:	181b      	addge	r3, r3, r0
 800b176:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b17a:	bfac      	ite	ge
 800b17c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b17e:	81a3      	strhlt	r3, [r4, #12]
 800b180:	bd10      	pop	{r4, pc}

0800b182 <__swrite>:
 800b182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b186:	461f      	mov	r7, r3
 800b188:	898b      	ldrh	r3, [r1, #12]
 800b18a:	05db      	lsls	r3, r3, #23
 800b18c:	4605      	mov	r5, r0
 800b18e:	460c      	mov	r4, r1
 800b190:	4616      	mov	r6, r2
 800b192:	d505      	bpl.n	800b1a0 <__swrite+0x1e>
 800b194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b198:	2302      	movs	r3, #2
 800b19a:	2200      	movs	r2, #0
 800b19c:	f000 f856 	bl	800b24c <_lseek_r>
 800b1a0:	89a3      	ldrh	r3, [r4, #12]
 800b1a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1aa:	81a3      	strh	r3, [r4, #12]
 800b1ac:	4632      	mov	r2, r6
 800b1ae:	463b      	mov	r3, r7
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1b6:	f000 b86d 	b.w	800b294 <_write_r>

0800b1ba <__sseek>:
 800b1ba:	b510      	push	{r4, lr}
 800b1bc:	460c      	mov	r4, r1
 800b1be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c2:	f000 f843 	bl	800b24c <_lseek_r>
 800b1c6:	1c43      	adds	r3, r0, #1
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	bf15      	itete	ne
 800b1cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1d6:	81a3      	strheq	r3, [r4, #12]
 800b1d8:	bf18      	it	ne
 800b1da:	81a3      	strhne	r3, [r4, #12]
 800b1dc:	bd10      	pop	{r4, pc}

0800b1de <__sclose>:
 800b1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e2:	f000 b823 	b.w	800b22c <_close_r>

0800b1e6 <memset>:
 800b1e6:	4402      	add	r2, r0
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d100      	bne.n	800b1f0 <memset+0xa>
 800b1ee:	4770      	bx	lr
 800b1f0:	f803 1b01 	strb.w	r1, [r3], #1
 800b1f4:	e7f9      	b.n	800b1ea <memset+0x4>

0800b1f6 <strstr>:
 800b1f6:	780a      	ldrb	r2, [r1, #0]
 800b1f8:	b570      	push	{r4, r5, r6, lr}
 800b1fa:	b96a      	cbnz	r2, 800b218 <strstr+0x22>
 800b1fc:	bd70      	pop	{r4, r5, r6, pc}
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d109      	bne.n	800b216 <strstr+0x20>
 800b202:	460c      	mov	r4, r1
 800b204:	4605      	mov	r5, r0
 800b206:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d0f6      	beq.n	800b1fc <strstr+0x6>
 800b20e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b212:	429e      	cmp	r6, r3
 800b214:	d0f7      	beq.n	800b206 <strstr+0x10>
 800b216:	3001      	adds	r0, #1
 800b218:	7803      	ldrb	r3, [r0, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1ef      	bne.n	800b1fe <strstr+0x8>
 800b21e:	4618      	mov	r0, r3
 800b220:	e7ec      	b.n	800b1fc <strstr+0x6>
	...

0800b224 <_localeconv_r>:
 800b224:	4800      	ldr	r0, [pc, #0]	@ (800b228 <_localeconv_r+0x4>)
 800b226:	4770      	bx	lr
 800b228:	20000248 	.word	0x20000248

0800b22c <_close_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	4d06      	ldr	r5, [pc, #24]	@ (800b248 <_close_r+0x1c>)
 800b230:	2300      	movs	r3, #0
 800b232:	4604      	mov	r4, r0
 800b234:	4608      	mov	r0, r1
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	f7f6 fce2 	bl	8001c00 <_close>
 800b23c:	1c43      	adds	r3, r0, #1
 800b23e:	d102      	bne.n	800b246 <_close_r+0x1a>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	b103      	cbz	r3, 800b246 <_close_r+0x1a>
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	bd38      	pop	{r3, r4, r5, pc}
 800b248:	20001a58 	.word	0x20001a58

0800b24c <_lseek_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	4d07      	ldr	r5, [pc, #28]	@ (800b26c <_lseek_r+0x20>)
 800b250:	4604      	mov	r4, r0
 800b252:	4608      	mov	r0, r1
 800b254:	4611      	mov	r1, r2
 800b256:	2200      	movs	r2, #0
 800b258:	602a      	str	r2, [r5, #0]
 800b25a:	461a      	mov	r2, r3
 800b25c:	f7f6 fcf7 	bl	8001c4e <_lseek>
 800b260:	1c43      	adds	r3, r0, #1
 800b262:	d102      	bne.n	800b26a <_lseek_r+0x1e>
 800b264:	682b      	ldr	r3, [r5, #0]
 800b266:	b103      	cbz	r3, 800b26a <_lseek_r+0x1e>
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	bd38      	pop	{r3, r4, r5, pc}
 800b26c:	20001a58 	.word	0x20001a58

0800b270 <_read_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4d07      	ldr	r5, [pc, #28]	@ (800b290 <_read_r+0x20>)
 800b274:	4604      	mov	r4, r0
 800b276:	4608      	mov	r0, r1
 800b278:	4611      	mov	r1, r2
 800b27a:	2200      	movs	r2, #0
 800b27c:	602a      	str	r2, [r5, #0]
 800b27e:	461a      	mov	r2, r3
 800b280:	f7f6 fc85 	bl	8001b8e <_read>
 800b284:	1c43      	adds	r3, r0, #1
 800b286:	d102      	bne.n	800b28e <_read_r+0x1e>
 800b288:	682b      	ldr	r3, [r5, #0]
 800b28a:	b103      	cbz	r3, 800b28e <_read_r+0x1e>
 800b28c:	6023      	str	r3, [r4, #0]
 800b28e:	bd38      	pop	{r3, r4, r5, pc}
 800b290:	20001a58 	.word	0x20001a58

0800b294 <_write_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4d07      	ldr	r5, [pc, #28]	@ (800b2b4 <_write_r+0x20>)
 800b298:	4604      	mov	r4, r0
 800b29a:	4608      	mov	r0, r1
 800b29c:	4611      	mov	r1, r2
 800b29e:	2200      	movs	r2, #0
 800b2a0:	602a      	str	r2, [r5, #0]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	f7f6 fc90 	bl	8001bc8 <_write>
 800b2a8:	1c43      	adds	r3, r0, #1
 800b2aa:	d102      	bne.n	800b2b2 <_write_r+0x1e>
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	b103      	cbz	r3, 800b2b2 <_write_r+0x1e>
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	bd38      	pop	{r3, r4, r5, pc}
 800b2b4:	20001a58 	.word	0x20001a58

0800b2b8 <__errno>:
 800b2b8:	4b01      	ldr	r3, [pc, #4]	@ (800b2c0 <__errno+0x8>)
 800b2ba:	6818      	ldr	r0, [r3, #0]
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	20000108 	.word	0x20000108

0800b2c4 <__libc_init_array>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	4d0d      	ldr	r5, [pc, #52]	@ (800b2fc <__libc_init_array+0x38>)
 800b2c8:	4c0d      	ldr	r4, [pc, #52]	@ (800b300 <__libc_init_array+0x3c>)
 800b2ca:	1b64      	subs	r4, r4, r5
 800b2cc:	10a4      	asrs	r4, r4, #2
 800b2ce:	2600      	movs	r6, #0
 800b2d0:	42a6      	cmp	r6, r4
 800b2d2:	d109      	bne.n	800b2e8 <__libc_init_array+0x24>
 800b2d4:	4d0b      	ldr	r5, [pc, #44]	@ (800b304 <__libc_init_array+0x40>)
 800b2d6:	4c0c      	ldr	r4, [pc, #48]	@ (800b308 <__libc_init_array+0x44>)
 800b2d8:	f002 f866 	bl	800d3a8 <_init>
 800b2dc:	1b64      	subs	r4, r4, r5
 800b2de:	10a4      	asrs	r4, r4, #2
 800b2e0:	2600      	movs	r6, #0
 800b2e2:	42a6      	cmp	r6, r4
 800b2e4:	d105      	bne.n	800b2f2 <__libc_init_array+0x2e>
 800b2e6:	bd70      	pop	{r4, r5, r6, pc}
 800b2e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2ec:	4798      	blx	r3
 800b2ee:	3601      	adds	r6, #1
 800b2f0:	e7ee      	b.n	800b2d0 <__libc_init_array+0xc>
 800b2f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2f6:	4798      	blx	r3
 800b2f8:	3601      	adds	r6, #1
 800b2fa:	e7f2      	b.n	800b2e2 <__libc_init_array+0x1e>
 800b2fc:	0800d9e0 	.word	0x0800d9e0
 800b300:	0800d9e0 	.word	0x0800d9e0
 800b304:	0800d9e0 	.word	0x0800d9e0
 800b308:	0800d9e4 	.word	0x0800d9e4

0800b30c <__retarget_lock_init_recursive>:
 800b30c:	4770      	bx	lr

0800b30e <__retarget_lock_acquire_recursive>:
 800b30e:	4770      	bx	lr

0800b310 <__retarget_lock_release_recursive>:
 800b310:	4770      	bx	lr

0800b312 <quorem>:
 800b312:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b316:	6903      	ldr	r3, [r0, #16]
 800b318:	690c      	ldr	r4, [r1, #16]
 800b31a:	42a3      	cmp	r3, r4
 800b31c:	4607      	mov	r7, r0
 800b31e:	db7e      	blt.n	800b41e <quorem+0x10c>
 800b320:	3c01      	subs	r4, #1
 800b322:	f101 0814 	add.w	r8, r1, #20
 800b326:	00a3      	lsls	r3, r4, #2
 800b328:	f100 0514 	add.w	r5, r0, #20
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b332:	9301      	str	r3, [sp, #4]
 800b334:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b338:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b33c:	3301      	adds	r3, #1
 800b33e:	429a      	cmp	r2, r3
 800b340:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b344:	fbb2 f6f3 	udiv	r6, r2, r3
 800b348:	d32e      	bcc.n	800b3a8 <quorem+0x96>
 800b34a:	f04f 0a00 	mov.w	sl, #0
 800b34e:	46c4      	mov	ip, r8
 800b350:	46ae      	mov	lr, r5
 800b352:	46d3      	mov	fp, sl
 800b354:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b358:	b298      	uxth	r0, r3
 800b35a:	fb06 a000 	mla	r0, r6, r0, sl
 800b35e:	0c02      	lsrs	r2, r0, #16
 800b360:	0c1b      	lsrs	r3, r3, #16
 800b362:	fb06 2303 	mla	r3, r6, r3, r2
 800b366:	f8de 2000 	ldr.w	r2, [lr]
 800b36a:	b280      	uxth	r0, r0
 800b36c:	b292      	uxth	r2, r2
 800b36e:	1a12      	subs	r2, r2, r0
 800b370:	445a      	add	r2, fp
 800b372:	f8de 0000 	ldr.w	r0, [lr]
 800b376:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b380:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b384:	b292      	uxth	r2, r2
 800b386:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b38a:	45e1      	cmp	r9, ip
 800b38c:	f84e 2b04 	str.w	r2, [lr], #4
 800b390:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b394:	d2de      	bcs.n	800b354 <quorem+0x42>
 800b396:	9b00      	ldr	r3, [sp, #0]
 800b398:	58eb      	ldr	r3, [r5, r3]
 800b39a:	b92b      	cbnz	r3, 800b3a8 <quorem+0x96>
 800b39c:	9b01      	ldr	r3, [sp, #4]
 800b39e:	3b04      	subs	r3, #4
 800b3a0:	429d      	cmp	r5, r3
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	d32f      	bcc.n	800b406 <quorem+0xf4>
 800b3a6:	613c      	str	r4, [r7, #16]
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	f001 f97b 	bl	800c6a4 <__mcmp>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	db25      	blt.n	800b3fe <quorem+0xec>
 800b3b2:	4629      	mov	r1, r5
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	f858 2b04 	ldr.w	r2, [r8], #4
 800b3ba:	f8d1 c000 	ldr.w	ip, [r1]
 800b3be:	fa1f fe82 	uxth.w	lr, r2
 800b3c2:	fa1f f38c 	uxth.w	r3, ip
 800b3c6:	eba3 030e 	sub.w	r3, r3, lr
 800b3ca:	4403      	add	r3, r0
 800b3cc:	0c12      	lsrs	r2, r2, #16
 800b3ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b3d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3dc:	45c1      	cmp	r9, r8
 800b3de:	f841 3b04 	str.w	r3, [r1], #4
 800b3e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b3e6:	d2e6      	bcs.n	800b3b6 <quorem+0xa4>
 800b3e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3f0:	b922      	cbnz	r2, 800b3fc <quorem+0xea>
 800b3f2:	3b04      	subs	r3, #4
 800b3f4:	429d      	cmp	r5, r3
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	d30b      	bcc.n	800b412 <quorem+0x100>
 800b3fa:	613c      	str	r4, [r7, #16]
 800b3fc:	3601      	adds	r6, #1
 800b3fe:	4630      	mov	r0, r6
 800b400:	b003      	add	sp, #12
 800b402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b406:	6812      	ldr	r2, [r2, #0]
 800b408:	3b04      	subs	r3, #4
 800b40a:	2a00      	cmp	r2, #0
 800b40c:	d1cb      	bne.n	800b3a6 <quorem+0x94>
 800b40e:	3c01      	subs	r4, #1
 800b410:	e7c6      	b.n	800b3a0 <quorem+0x8e>
 800b412:	6812      	ldr	r2, [r2, #0]
 800b414:	3b04      	subs	r3, #4
 800b416:	2a00      	cmp	r2, #0
 800b418:	d1ef      	bne.n	800b3fa <quorem+0xe8>
 800b41a:	3c01      	subs	r4, #1
 800b41c:	e7ea      	b.n	800b3f4 <quorem+0xe2>
 800b41e:	2000      	movs	r0, #0
 800b420:	e7ee      	b.n	800b400 <quorem+0xee>
 800b422:	0000      	movs	r0, r0
 800b424:	0000      	movs	r0, r0
	...

0800b428 <_dtoa_r>:
 800b428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42c:	69c7      	ldr	r7, [r0, #28]
 800b42e:	b099      	sub	sp, #100	@ 0x64
 800b430:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b434:	ec55 4b10 	vmov	r4, r5, d0
 800b438:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b43a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b43c:	4683      	mov	fp, r0
 800b43e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b440:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b442:	b97f      	cbnz	r7, 800b464 <_dtoa_r+0x3c>
 800b444:	2010      	movs	r0, #16
 800b446:	f000 fdfd 	bl	800c044 <malloc>
 800b44a:	4602      	mov	r2, r0
 800b44c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b450:	b920      	cbnz	r0, 800b45c <_dtoa_r+0x34>
 800b452:	4ba7      	ldr	r3, [pc, #668]	@ (800b6f0 <_dtoa_r+0x2c8>)
 800b454:	21ef      	movs	r1, #239	@ 0xef
 800b456:	48a7      	ldr	r0, [pc, #668]	@ (800b6f4 <_dtoa_r+0x2cc>)
 800b458:	f001 fc68 	bl	800cd2c <__assert_func>
 800b45c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b460:	6007      	str	r7, [r0, #0]
 800b462:	60c7      	str	r7, [r0, #12]
 800b464:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b468:	6819      	ldr	r1, [r3, #0]
 800b46a:	b159      	cbz	r1, 800b484 <_dtoa_r+0x5c>
 800b46c:	685a      	ldr	r2, [r3, #4]
 800b46e:	604a      	str	r2, [r1, #4]
 800b470:	2301      	movs	r3, #1
 800b472:	4093      	lsls	r3, r2
 800b474:	608b      	str	r3, [r1, #8]
 800b476:	4658      	mov	r0, fp
 800b478:	f000 feda 	bl	800c230 <_Bfree>
 800b47c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b480:	2200      	movs	r2, #0
 800b482:	601a      	str	r2, [r3, #0]
 800b484:	1e2b      	subs	r3, r5, #0
 800b486:	bfb9      	ittee	lt
 800b488:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b48c:	9303      	strlt	r3, [sp, #12]
 800b48e:	2300      	movge	r3, #0
 800b490:	6033      	strge	r3, [r6, #0]
 800b492:	9f03      	ldr	r7, [sp, #12]
 800b494:	4b98      	ldr	r3, [pc, #608]	@ (800b6f8 <_dtoa_r+0x2d0>)
 800b496:	bfbc      	itt	lt
 800b498:	2201      	movlt	r2, #1
 800b49a:	6032      	strlt	r2, [r6, #0]
 800b49c:	43bb      	bics	r3, r7
 800b49e:	d112      	bne.n	800b4c6 <_dtoa_r+0x9e>
 800b4a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b4a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b4a6:	6013      	str	r3, [r2, #0]
 800b4a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4ac:	4323      	orrs	r3, r4
 800b4ae:	f000 854d 	beq.w	800bf4c <_dtoa_r+0xb24>
 800b4b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b70c <_dtoa_r+0x2e4>
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f000 854f 	beq.w	800bf5c <_dtoa_r+0xb34>
 800b4be:	f10a 0303 	add.w	r3, sl, #3
 800b4c2:	f000 bd49 	b.w	800bf58 <_dtoa_r+0xb30>
 800b4c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	ec51 0b17 	vmov	r0, r1, d7
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b4d6:	f7f5 faff 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4da:	4680      	mov	r8, r0
 800b4dc:	b158      	cbz	r0, 800b4f6 <_dtoa_r+0xce>
 800b4de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	6013      	str	r3, [r2, #0]
 800b4e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4e6:	b113      	cbz	r3, 800b4ee <_dtoa_r+0xc6>
 800b4e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b4ea:	4b84      	ldr	r3, [pc, #528]	@ (800b6fc <_dtoa_r+0x2d4>)
 800b4ec:	6013      	str	r3, [r2, #0]
 800b4ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b710 <_dtoa_r+0x2e8>
 800b4f2:	f000 bd33 	b.w	800bf5c <_dtoa_r+0xb34>
 800b4f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b4fa:	aa16      	add	r2, sp, #88	@ 0x58
 800b4fc:	a917      	add	r1, sp, #92	@ 0x5c
 800b4fe:	4658      	mov	r0, fp
 800b500:	f001 f980 	bl	800c804 <__d2b>
 800b504:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b508:	4681      	mov	r9, r0
 800b50a:	2e00      	cmp	r6, #0
 800b50c:	d077      	beq.n	800b5fe <_dtoa_r+0x1d6>
 800b50e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b510:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b51c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b520:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b524:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b528:	4619      	mov	r1, r3
 800b52a:	2200      	movs	r2, #0
 800b52c:	4b74      	ldr	r3, [pc, #464]	@ (800b700 <_dtoa_r+0x2d8>)
 800b52e:	f7f4 feb3 	bl	8000298 <__aeabi_dsub>
 800b532:	a369      	add	r3, pc, #420	@ (adr r3, 800b6d8 <_dtoa_r+0x2b0>)
 800b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b538:	f7f5 f866 	bl	8000608 <__aeabi_dmul>
 800b53c:	a368      	add	r3, pc, #416	@ (adr r3, 800b6e0 <_dtoa_r+0x2b8>)
 800b53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b542:	f7f4 feab 	bl	800029c <__adddf3>
 800b546:	4604      	mov	r4, r0
 800b548:	4630      	mov	r0, r6
 800b54a:	460d      	mov	r5, r1
 800b54c:	f7f4 fff2 	bl	8000534 <__aeabi_i2d>
 800b550:	a365      	add	r3, pc, #404	@ (adr r3, 800b6e8 <_dtoa_r+0x2c0>)
 800b552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b556:	f7f5 f857 	bl	8000608 <__aeabi_dmul>
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	4620      	mov	r0, r4
 800b560:	4629      	mov	r1, r5
 800b562:	f7f4 fe9b 	bl	800029c <__adddf3>
 800b566:	4604      	mov	r4, r0
 800b568:	460d      	mov	r5, r1
 800b56a:	f7f5 fafd 	bl	8000b68 <__aeabi_d2iz>
 800b56e:	2200      	movs	r2, #0
 800b570:	4607      	mov	r7, r0
 800b572:	2300      	movs	r3, #0
 800b574:	4620      	mov	r0, r4
 800b576:	4629      	mov	r1, r5
 800b578:	f7f5 fab8 	bl	8000aec <__aeabi_dcmplt>
 800b57c:	b140      	cbz	r0, 800b590 <_dtoa_r+0x168>
 800b57e:	4638      	mov	r0, r7
 800b580:	f7f4 ffd8 	bl	8000534 <__aeabi_i2d>
 800b584:	4622      	mov	r2, r4
 800b586:	462b      	mov	r3, r5
 800b588:	f7f5 faa6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b58c:	b900      	cbnz	r0, 800b590 <_dtoa_r+0x168>
 800b58e:	3f01      	subs	r7, #1
 800b590:	2f16      	cmp	r7, #22
 800b592:	d851      	bhi.n	800b638 <_dtoa_r+0x210>
 800b594:	4b5b      	ldr	r3, [pc, #364]	@ (800b704 <_dtoa_r+0x2dc>)
 800b596:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5a2:	f7f5 faa3 	bl	8000aec <__aeabi_dcmplt>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d048      	beq.n	800b63c <_dtoa_r+0x214>
 800b5aa:	3f01      	subs	r7, #1
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	9312      	str	r3, [sp, #72]	@ 0x48
 800b5b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b5b2:	1b9b      	subs	r3, r3, r6
 800b5b4:	1e5a      	subs	r2, r3, #1
 800b5b6:	bf44      	itt	mi
 800b5b8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b5bc:	2300      	movmi	r3, #0
 800b5be:	9208      	str	r2, [sp, #32]
 800b5c0:	bf54      	ite	pl
 800b5c2:	f04f 0800 	movpl.w	r8, #0
 800b5c6:	9308      	strmi	r3, [sp, #32]
 800b5c8:	2f00      	cmp	r7, #0
 800b5ca:	db39      	blt.n	800b640 <_dtoa_r+0x218>
 800b5cc:	9b08      	ldr	r3, [sp, #32]
 800b5ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b5d0:	443b      	add	r3, r7
 800b5d2:	9308      	str	r3, [sp, #32]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5da:	2b09      	cmp	r3, #9
 800b5dc:	d864      	bhi.n	800b6a8 <_dtoa_r+0x280>
 800b5de:	2b05      	cmp	r3, #5
 800b5e0:	bfc4      	itt	gt
 800b5e2:	3b04      	subgt	r3, #4
 800b5e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b5e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5e8:	f1a3 0302 	sub.w	r3, r3, #2
 800b5ec:	bfcc      	ite	gt
 800b5ee:	2400      	movgt	r4, #0
 800b5f0:	2401      	movle	r4, #1
 800b5f2:	2b03      	cmp	r3, #3
 800b5f4:	d863      	bhi.n	800b6be <_dtoa_r+0x296>
 800b5f6:	e8df f003 	tbb	[pc, r3]
 800b5fa:	372a      	.short	0x372a
 800b5fc:	5535      	.short	0x5535
 800b5fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b602:	441e      	add	r6, r3
 800b604:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b608:	2b20      	cmp	r3, #32
 800b60a:	bfc1      	itttt	gt
 800b60c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b610:	409f      	lslgt	r7, r3
 800b612:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b616:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b61a:	bfd6      	itet	le
 800b61c:	f1c3 0320 	rsble	r3, r3, #32
 800b620:	ea47 0003 	orrgt.w	r0, r7, r3
 800b624:	fa04 f003 	lslle.w	r0, r4, r3
 800b628:	f7f4 ff74 	bl	8000514 <__aeabi_ui2d>
 800b62c:	2201      	movs	r2, #1
 800b62e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b632:	3e01      	subs	r6, #1
 800b634:	9214      	str	r2, [sp, #80]	@ 0x50
 800b636:	e777      	b.n	800b528 <_dtoa_r+0x100>
 800b638:	2301      	movs	r3, #1
 800b63a:	e7b8      	b.n	800b5ae <_dtoa_r+0x186>
 800b63c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b63e:	e7b7      	b.n	800b5b0 <_dtoa_r+0x188>
 800b640:	427b      	negs	r3, r7
 800b642:	930a      	str	r3, [sp, #40]	@ 0x28
 800b644:	2300      	movs	r3, #0
 800b646:	eba8 0807 	sub.w	r8, r8, r7
 800b64a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b64c:	e7c4      	b.n	800b5d8 <_dtoa_r+0x1b0>
 800b64e:	2300      	movs	r3, #0
 800b650:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b654:	2b00      	cmp	r3, #0
 800b656:	dc35      	bgt.n	800b6c4 <_dtoa_r+0x29c>
 800b658:	2301      	movs	r3, #1
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	9307      	str	r3, [sp, #28]
 800b65e:	461a      	mov	r2, r3
 800b660:	920e      	str	r2, [sp, #56]	@ 0x38
 800b662:	e00b      	b.n	800b67c <_dtoa_r+0x254>
 800b664:	2301      	movs	r3, #1
 800b666:	e7f3      	b.n	800b650 <_dtoa_r+0x228>
 800b668:	2300      	movs	r3, #0
 800b66a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b66c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b66e:	18fb      	adds	r3, r7, r3
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	3301      	adds	r3, #1
 800b674:	2b01      	cmp	r3, #1
 800b676:	9307      	str	r3, [sp, #28]
 800b678:	bfb8      	it	lt
 800b67a:	2301      	movlt	r3, #1
 800b67c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b680:	2100      	movs	r1, #0
 800b682:	2204      	movs	r2, #4
 800b684:	f102 0514 	add.w	r5, r2, #20
 800b688:	429d      	cmp	r5, r3
 800b68a:	d91f      	bls.n	800b6cc <_dtoa_r+0x2a4>
 800b68c:	6041      	str	r1, [r0, #4]
 800b68e:	4658      	mov	r0, fp
 800b690:	f000 fd8e 	bl	800c1b0 <_Balloc>
 800b694:	4682      	mov	sl, r0
 800b696:	2800      	cmp	r0, #0
 800b698:	d13c      	bne.n	800b714 <_dtoa_r+0x2ec>
 800b69a:	4b1b      	ldr	r3, [pc, #108]	@ (800b708 <_dtoa_r+0x2e0>)
 800b69c:	4602      	mov	r2, r0
 800b69e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b6a2:	e6d8      	b.n	800b456 <_dtoa_r+0x2e>
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e7e0      	b.n	800b66a <_dtoa_r+0x242>
 800b6a8:	2401      	movs	r4, #1
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	9307      	str	r3, [sp, #28]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2312      	movs	r3, #18
 800b6bc:	e7d0      	b.n	800b660 <_dtoa_r+0x238>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6c2:	e7f5      	b.n	800b6b0 <_dtoa_r+0x288>
 800b6c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6c6:	9300      	str	r3, [sp, #0]
 800b6c8:	9307      	str	r3, [sp, #28]
 800b6ca:	e7d7      	b.n	800b67c <_dtoa_r+0x254>
 800b6cc:	3101      	adds	r1, #1
 800b6ce:	0052      	lsls	r2, r2, #1
 800b6d0:	e7d8      	b.n	800b684 <_dtoa_r+0x25c>
 800b6d2:	bf00      	nop
 800b6d4:	f3af 8000 	nop.w
 800b6d8:	636f4361 	.word	0x636f4361
 800b6dc:	3fd287a7 	.word	0x3fd287a7
 800b6e0:	8b60c8b3 	.word	0x8b60c8b3
 800b6e4:	3fc68a28 	.word	0x3fc68a28
 800b6e8:	509f79fb 	.word	0x509f79fb
 800b6ec:	3fd34413 	.word	0x3fd34413
 800b6f0:	0800d7a6 	.word	0x0800d7a6
 800b6f4:	0800d7bd 	.word	0x0800d7bd
 800b6f8:	7ff00000 	.word	0x7ff00000
 800b6fc:	0800d776 	.word	0x0800d776
 800b700:	3ff80000 	.word	0x3ff80000
 800b704:	0800d8b8 	.word	0x0800d8b8
 800b708:	0800d815 	.word	0x0800d815
 800b70c:	0800d7a2 	.word	0x0800d7a2
 800b710:	0800d775 	.word	0x0800d775
 800b714:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b718:	6018      	str	r0, [r3, #0]
 800b71a:	9b07      	ldr	r3, [sp, #28]
 800b71c:	2b0e      	cmp	r3, #14
 800b71e:	f200 80a4 	bhi.w	800b86a <_dtoa_r+0x442>
 800b722:	2c00      	cmp	r4, #0
 800b724:	f000 80a1 	beq.w	800b86a <_dtoa_r+0x442>
 800b728:	2f00      	cmp	r7, #0
 800b72a:	dd33      	ble.n	800b794 <_dtoa_r+0x36c>
 800b72c:	4bad      	ldr	r3, [pc, #692]	@ (800b9e4 <_dtoa_r+0x5bc>)
 800b72e:	f007 020f 	and.w	r2, r7, #15
 800b732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b736:	ed93 7b00 	vldr	d7, [r3]
 800b73a:	05f8      	lsls	r0, r7, #23
 800b73c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b740:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b744:	d516      	bpl.n	800b774 <_dtoa_r+0x34c>
 800b746:	4ba8      	ldr	r3, [pc, #672]	@ (800b9e8 <_dtoa_r+0x5c0>)
 800b748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b74c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b750:	f7f5 f884 	bl	800085c <__aeabi_ddiv>
 800b754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b758:	f004 040f 	and.w	r4, r4, #15
 800b75c:	2603      	movs	r6, #3
 800b75e:	4da2      	ldr	r5, [pc, #648]	@ (800b9e8 <_dtoa_r+0x5c0>)
 800b760:	b954      	cbnz	r4, 800b778 <_dtoa_r+0x350>
 800b762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b76a:	f7f5 f877 	bl	800085c <__aeabi_ddiv>
 800b76e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b772:	e028      	b.n	800b7c6 <_dtoa_r+0x39e>
 800b774:	2602      	movs	r6, #2
 800b776:	e7f2      	b.n	800b75e <_dtoa_r+0x336>
 800b778:	07e1      	lsls	r1, r4, #31
 800b77a:	d508      	bpl.n	800b78e <_dtoa_r+0x366>
 800b77c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b780:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b784:	f7f4 ff40 	bl	8000608 <__aeabi_dmul>
 800b788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b78c:	3601      	adds	r6, #1
 800b78e:	1064      	asrs	r4, r4, #1
 800b790:	3508      	adds	r5, #8
 800b792:	e7e5      	b.n	800b760 <_dtoa_r+0x338>
 800b794:	f000 80d2 	beq.w	800b93c <_dtoa_r+0x514>
 800b798:	427c      	negs	r4, r7
 800b79a:	4b92      	ldr	r3, [pc, #584]	@ (800b9e4 <_dtoa_r+0x5bc>)
 800b79c:	4d92      	ldr	r5, [pc, #584]	@ (800b9e8 <_dtoa_r+0x5c0>)
 800b79e:	f004 020f 	and.w	r2, r4, #15
 800b7a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7ae:	f7f4 ff2b 	bl	8000608 <__aeabi_dmul>
 800b7b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7b6:	1124      	asrs	r4, r4, #4
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	2602      	movs	r6, #2
 800b7bc:	2c00      	cmp	r4, #0
 800b7be:	f040 80b2 	bne.w	800b926 <_dtoa_r+0x4fe>
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1d3      	bne.n	800b76e <_dtoa_r+0x346>
 800b7c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b7c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 80b7 	beq.w	800b940 <_dtoa_r+0x518>
 800b7d2:	4b86      	ldr	r3, [pc, #536]	@ (800b9ec <_dtoa_r+0x5c4>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	4629      	mov	r1, r5
 800b7da:	f7f5 f987 	bl	8000aec <__aeabi_dcmplt>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	f000 80ae 	beq.w	800b940 <_dtoa_r+0x518>
 800b7e4:	9b07      	ldr	r3, [sp, #28]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f000 80aa 	beq.w	800b940 <_dtoa_r+0x518>
 800b7ec:	9b00      	ldr	r3, [sp, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	dd37      	ble.n	800b862 <_dtoa_r+0x43a>
 800b7f2:	1e7b      	subs	r3, r7, #1
 800b7f4:	9304      	str	r3, [sp, #16]
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	4b7d      	ldr	r3, [pc, #500]	@ (800b9f0 <_dtoa_r+0x5c8>)
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	f7f4 ff03 	bl	8000608 <__aeabi_dmul>
 800b802:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b806:	9c00      	ldr	r4, [sp, #0]
 800b808:	3601      	adds	r6, #1
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7f4 fe92 	bl	8000534 <__aeabi_i2d>
 800b810:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b814:	f7f4 fef8 	bl	8000608 <__aeabi_dmul>
 800b818:	4b76      	ldr	r3, [pc, #472]	@ (800b9f4 <_dtoa_r+0x5cc>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	f7f4 fd3e 	bl	800029c <__adddf3>
 800b820:	4605      	mov	r5, r0
 800b822:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b826:	2c00      	cmp	r4, #0
 800b828:	f040 808d 	bne.w	800b946 <_dtoa_r+0x51e>
 800b82c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b830:	4b71      	ldr	r3, [pc, #452]	@ (800b9f8 <_dtoa_r+0x5d0>)
 800b832:	2200      	movs	r2, #0
 800b834:	f7f4 fd30 	bl	8000298 <__aeabi_dsub>
 800b838:	4602      	mov	r2, r0
 800b83a:	460b      	mov	r3, r1
 800b83c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b840:	462a      	mov	r2, r5
 800b842:	4633      	mov	r3, r6
 800b844:	f7f5 f970 	bl	8000b28 <__aeabi_dcmpgt>
 800b848:	2800      	cmp	r0, #0
 800b84a:	f040 828b 	bne.w	800bd64 <_dtoa_r+0x93c>
 800b84e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b852:	462a      	mov	r2, r5
 800b854:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b858:	f7f5 f948 	bl	8000aec <__aeabi_dcmplt>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	f040 8128 	bne.w	800bab2 <_dtoa_r+0x68a>
 800b862:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b866:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b86a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f2c0 815a 	blt.w	800bb26 <_dtoa_r+0x6fe>
 800b872:	2f0e      	cmp	r7, #14
 800b874:	f300 8157 	bgt.w	800bb26 <_dtoa_r+0x6fe>
 800b878:	4b5a      	ldr	r3, [pc, #360]	@ (800b9e4 <_dtoa_r+0x5bc>)
 800b87a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b87e:	ed93 7b00 	vldr	d7, [r3]
 800b882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b884:	2b00      	cmp	r3, #0
 800b886:	ed8d 7b00 	vstr	d7, [sp]
 800b88a:	da03      	bge.n	800b894 <_dtoa_r+0x46c>
 800b88c:	9b07      	ldr	r3, [sp, #28]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f340 8101 	ble.w	800ba96 <_dtoa_r+0x66e>
 800b894:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b898:	4656      	mov	r6, sl
 800b89a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b89e:	4620      	mov	r0, r4
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	f7f4 ffdb 	bl	800085c <__aeabi_ddiv>
 800b8a6:	f7f5 f95f 	bl	8000b68 <__aeabi_d2iz>
 800b8aa:	4680      	mov	r8, r0
 800b8ac:	f7f4 fe42 	bl	8000534 <__aeabi_i2d>
 800b8b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8b4:	f7f4 fea8 	bl	8000608 <__aeabi_dmul>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	4620      	mov	r0, r4
 800b8be:	4629      	mov	r1, r5
 800b8c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b8c4:	f7f4 fce8 	bl	8000298 <__aeabi_dsub>
 800b8c8:	f806 4b01 	strb.w	r4, [r6], #1
 800b8cc:	9d07      	ldr	r5, [sp, #28]
 800b8ce:	eba6 040a 	sub.w	r4, r6, sl
 800b8d2:	42a5      	cmp	r5, r4
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	f040 8117 	bne.w	800bb0a <_dtoa_r+0x6e2>
 800b8dc:	f7f4 fcde 	bl	800029c <__adddf3>
 800b8e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	460d      	mov	r5, r1
 800b8e8:	f7f5 f91e 	bl	8000b28 <__aeabi_dcmpgt>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	f040 80f9 	bne.w	800bae4 <_dtoa_r+0x6bc>
 800b8f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	f7f5 f8ed 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8fe:	b118      	cbz	r0, 800b908 <_dtoa_r+0x4e0>
 800b900:	f018 0f01 	tst.w	r8, #1
 800b904:	f040 80ee 	bne.w	800bae4 <_dtoa_r+0x6bc>
 800b908:	4649      	mov	r1, r9
 800b90a:	4658      	mov	r0, fp
 800b90c:	f000 fc90 	bl	800c230 <_Bfree>
 800b910:	2300      	movs	r3, #0
 800b912:	7033      	strb	r3, [r6, #0]
 800b914:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b916:	3701      	adds	r7, #1
 800b918:	601f      	str	r7, [r3, #0]
 800b91a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 831d 	beq.w	800bf5c <_dtoa_r+0xb34>
 800b922:	601e      	str	r6, [r3, #0]
 800b924:	e31a      	b.n	800bf5c <_dtoa_r+0xb34>
 800b926:	07e2      	lsls	r2, r4, #31
 800b928:	d505      	bpl.n	800b936 <_dtoa_r+0x50e>
 800b92a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b92e:	f7f4 fe6b 	bl	8000608 <__aeabi_dmul>
 800b932:	3601      	adds	r6, #1
 800b934:	2301      	movs	r3, #1
 800b936:	1064      	asrs	r4, r4, #1
 800b938:	3508      	adds	r5, #8
 800b93a:	e73f      	b.n	800b7bc <_dtoa_r+0x394>
 800b93c:	2602      	movs	r6, #2
 800b93e:	e742      	b.n	800b7c6 <_dtoa_r+0x39e>
 800b940:	9c07      	ldr	r4, [sp, #28]
 800b942:	9704      	str	r7, [sp, #16]
 800b944:	e761      	b.n	800b80a <_dtoa_r+0x3e2>
 800b946:	4b27      	ldr	r3, [pc, #156]	@ (800b9e4 <_dtoa_r+0x5bc>)
 800b948:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b94a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b94e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b952:	4454      	add	r4, sl
 800b954:	2900      	cmp	r1, #0
 800b956:	d053      	beq.n	800ba00 <_dtoa_r+0x5d8>
 800b958:	4928      	ldr	r1, [pc, #160]	@ (800b9fc <_dtoa_r+0x5d4>)
 800b95a:	2000      	movs	r0, #0
 800b95c:	f7f4 ff7e 	bl	800085c <__aeabi_ddiv>
 800b960:	4633      	mov	r3, r6
 800b962:	462a      	mov	r2, r5
 800b964:	f7f4 fc98 	bl	8000298 <__aeabi_dsub>
 800b968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b96c:	4656      	mov	r6, sl
 800b96e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b972:	f7f5 f8f9 	bl	8000b68 <__aeabi_d2iz>
 800b976:	4605      	mov	r5, r0
 800b978:	f7f4 fddc 	bl	8000534 <__aeabi_i2d>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b984:	f7f4 fc88 	bl	8000298 <__aeabi_dsub>
 800b988:	3530      	adds	r5, #48	@ 0x30
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b992:	f806 5b01 	strb.w	r5, [r6], #1
 800b996:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b99a:	f7f5 f8a7 	bl	8000aec <__aeabi_dcmplt>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d171      	bne.n	800ba86 <_dtoa_r+0x65e>
 800b9a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9a6:	4911      	ldr	r1, [pc, #68]	@ (800b9ec <_dtoa_r+0x5c4>)
 800b9a8:	2000      	movs	r0, #0
 800b9aa:	f7f4 fc75 	bl	8000298 <__aeabi_dsub>
 800b9ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b9b2:	f7f5 f89b 	bl	8000aec <__aeabi_dcmplt>
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	f040 8095 	bne.w	800bae6 <_dtoa_r+0x6be>
 800b9bc:	42a6      	cmp	r6, r4
 800b9be:	f43f af50 	beq.w	800b862 <_dtoa_r+0x43a>
 800b9c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b9c6:	4b0a      	ldr	r3, [pc, #40]	@ (800b9f0 <_dtoa_r+0x5c8>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f7f4 fe1d 	bl	8000608 <__aeabi_dmul>
 800b9ce:	4b08      	ldr	r3, [pc, #32]	@ (800b9f0 <_dtoa_r+0x5c8>)
 800b9d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9da:	f7f4 fe15 	bl	8000608 <__aeabi_dmul>
 800b9de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9e2:	e7c4      	b.n	800b96e <_dtoa_r+0x546>
 800b9e4:	0800d8b8 	.word	0x0800d8b8
 800b9e8:	0800d890 	.word	0x0800d890
 800b9ec:	3ff00000 	.word	0x3ff00000
 800b9f0:	40240000 	.word	0x40240000
 800b9f4:	401c0000 	.word	0x401c0000
 800b9f8:	40140000 	.word	0x40140000
 800b9fc:	3fe00000 	.word	0x3fe00000
 800ba00:	4631      	mov	r1, r6
 800ba02:	4628      	mov	r0, r5
 800ba04:	f7f4 fe00 	bl	8000608 <__aeabi_dmul>
 800ba08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ba0c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ba0e:	4656      	mov	r6, sl
 800ba10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba14:	f7f5 f8a8 	bl	8000b68 <__aeabi_d2iz>
 800ba18:	4605      	mov	r5, r0
 800ba1a:	f7f4 fd8b 	bl	8000534 <__aeabi_i2d>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	460b      	mov	r3, r1
 800ba22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba26:	f7f4 fc37 	bl	8000298 <__aeabi_dsub>
 800ba2a:	3530      	adds	r5, #48	@ 0x30
 800ba2c:	f806 5b01 	strb.w	r5, [r6], #1
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	42a6      	cmp	r6, r4
 800ba36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba3a:	f04f 0200 	mov.w	r2, #0
 800ba3e:	d124      	bne.n	800ba8a <_dtoa_r+0x662>
 800ba40:	4bac      	ldr	r3, [pc, #688]	@ (800bcf4 <_dtoa_r+0x8cc>)
 800ba42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ba46:	f7f4 fc29 	bl	800029c <__adddf3>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba52:	f7f5 f869 	bl	8000b28 <__aeabi_dcmpgt>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d145      	bne.n	800bae6 <_dtoa_r+0x6be>
 800ba5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba5e:	49a5      	ldr	r1, [pc, #660]	@ (800bcf4 <_dtoa_r+0x8cc>)
 800ba60:	2000      	movs	r0, #0
 800ba62:	f7f4 fc19 	bl	8000298 <__aeabi_dsub>
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba6e:	f7f5 f83d 	bl	8000aec <__aeabi_dcmplt>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	f43f aef5 	beq.w	800b862 <_dtoa_r+0x43a>
 800ba78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ba7a:	1e73      	subs	r3, r6, #1
 800ba7c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ba7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba82:	2b30      	cmp	r3, #48	@ 0x30
 800ba84:	d0f8      	beq.n	800ba78 <_dtoa_r+0x650>
 800ba86:	9f04      	ldr	r7, [sp, #16]
 800ba88:	e73e      	b.n	800b908 <_dtoa_r+0x4e0>
 800ba8a:	4b9b      	ldr	r3, [pc, #620]	@ (800bcf8 <_dtoa_r+0x8d0>)
 800ba8c:	f7f4 fdbc 	bl	8000608 <__aeabi_dmul>
 800ba90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba94:	e7bc      	b.n	800ba10 <_dtoa_r+0x5e8>
 800ba96:	d10c      	bne.n	800bab2 <_dtoa_r+0x68a>
 800ba98:	4b98      	ldr	r3, [pc, #608]	@ (800bcfc <_dtoa_r+0x8d4>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800baa0:	f7f4 fdb2 	bl	8000608 <__aeabi_dmul>
 800baa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800baa8:	f7f5 f834 	bl	8000b14 <__aeabi_dcmpge>
 800baac:	2800      	cmp	r0, #0
 800baae:	f000 8157 	beq.w	800bd60 <_dtoa_r+0x938>
 800bab2:	2400      	movs	r4, #0
 800bab4:	4625      	mov	r5, r4
 800bab6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bab8:	43db      	mvns	r3, r3
 800baba:	9304      	str	r3, [sp, #16]
 800babc:	4656      	mov	r6, sl
 800babe:	2700      	movs	r7, #0
 800bac0:	4621      	mov	r1, r4
 800bac2:	4658      	mov	r0, fp
 800bac4:	f000 fbb4 	bl	800c230 <_Bfree>
 800bac8:	2d00      	cmp	r5, #0
 800baca:	d0dc      	beq.n	800ba86 <_dtoa_r+0x65e>
 800bacc:	b12f      	cbz	r7, 800bada <_dtoa_r+0x6b2>
 800bace:	42af      	cmp	r7, r5
 800bad0:	d003      	beq.n	800bada <_dtoa_r+0x6b2>
 800bad2:	4639      	mov	r1, r7
 800bad4:	4658      	mov	r0, fp
 800bad6:	f000 fbab 	bl	800c230 <_Bfree>
 800bada:	4629      	mov	r1, r5
 800badc:	4658      	mov	r0, fp
 800bade:	f000 fba7 	bl	800c230 <_Bfree>
 800bae2:	e7d0      	b.n	800ba86 <_dtoa_r+0x65e>
 800bae4:	9704      	str	r7, [sp, #16]
 800bae6:	4633      	mov	r3, r6
 800bae8:	461e      	mov	r6, r3
 800baea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800baee:	2a39      	cmp	r2, #57	@ 0x39
 800baf0:	d107      	bne.n	800bb02 <_dtoa_r+0x6da>
 800baf2:	459a      	cmp	sl, r3
 800baf4:	d1f8      	bne.n	800bae8 <_dtoa_r+0x6c0>
 800baf6:	9a04      	ldr	r2, [sp, #16]
 800baf8:	3201      	adds	r2, #1
 800bafa:	9204      	str	r2, [sp, #16]
 800bafc:	2230      	movs	r2, #48	@ 0x30
 800bafe:	f88a 2000 	strb.w	r2, [sl]
 800bb02:	781a      	ldrb	r2, [r3, #0]
 800bb04:	3201      	adds	r2, #1
 800bb06:	701a      	strb	r2, [r3, #0]
 800bb08:	e7bd      	b.n	800ba86 <_dtoa_r+0x65e>
 800bb0a:	4b7b      	ldr	r3, [pc, #492]	@ (800bcf8 <_dtoa_r+0x8d0>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f7f4 fd7b 	bl	8000608 <__aeabi_dmul>
 800bb12:	2200      	movs	r2, #0
 800bb14:	2300      	movs	r3, #0
 800bb16:	4604      	mov	r4, r0
 800bb18:	460d      	mov	r5, r1
 800bb1a:	f7f4 ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	f43f aebb 	beq.w	800b89a <_dtoa_r+0x472>
 800bb24:	e6f0      	b.n	800b908 <_dtoa_r+0x4e0>
 800bb26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bb28:	2a00      	cmp	r2, #0
 800bb2a:	f000 80db 	beq.w	800bce4 <_dtoa_r+0x8bc>
 800bb2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb30:	2a01      	cmp	r2, #1
 800bb32:	f300 80bf 	bgt.w	800bcb4 <_dtoa_r+0x88c>
 800bb36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bb38:	2a00      	cmp	r2, #0
 800bb3a:	f000 80b7 	beq.w	800bcac <_dtoa_r+0x884>
 800bb3e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bb42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bb44:	4646      	mov	r6, r8
 800bb46:	9a08      	ldr	r2, [sp, #32]
 800bb48:	2101      	movs	r1, #1
 800bb4a:	441a      	add	r2, r3
 800bb4c:	4658      	mov	r0, fp
 800bb4e:	4498      	add	r8, r3
 800bb50:	9208      	str	r2, [sp, #32]
 800bb52:	f000 fc21 	bl	800c398 <__i2b>
 800bb56:	4605      	mov	r5, r0
 800bb58:	b15e      	cbz	r6, 800bb72 <_dtoa_r+0x74a>
 800bb5a:	9b08      	ldr	r3, [sp, #32]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	dd08      	ble.n	800bb72 <_dtoa_r+0x74a>
 800bb60:	42b3      	cmp	r3, r6
 800bb62:	9a08      	ldr	r2, [sp, #32]
 800bb64:	bfa8      	it	ge
 800bb66:	4633      	movge	r3, r6
 800bb68:	eba8 0803 	sub.w	r8, r8, r3
 800bb6c:	1af6      	subs	r6, r6, r3
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	9308      	str	r3, [sp, #32]
 800bb72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb74:	b1f3      	cbz	r3, 800bbb4 <_dtoa_r+0x78c>
 800bb76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 80b7 	beq.w	800bcec <_dtoa_r+0x8c4>
 800bb7e:	b18c      	cbz	r4, 800bba4 <_dtoa_r+0x77c>
 800bb80:	4629      	mov	r1, r5
 800bb82:	4622      	mov	r2, r4
 800bb84:	4658      	mov	r0, fp
 800bb86:	f000 fcc7 	bl	800c518 <__pow5mult>
 800bb8a:	464a      	mov	r2, r9
 800bb8c:	4601      	mov	r1, r0
 800bb8e:	4605      	mov	r5, r0
 800bb90:	4658      	mov	r0, fp
 800bb92:	f000 fc17 	bl	800c3c4 <__multiply>
 800bb96:	4649      	mov	r1, r9
 800bb98:	9004      	str	r0, [sp, #16]
 800bb9a:	4658      	mov	r0, fp
 800bb9c:	f000 fb48 	bl	800c230 <_Bfree>
 800bba0:	9b04      	ldr	r3, [sp, #16]
 800bba2:	4699      	mov	r9, r3
 800bba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bba6:	1b1a      	subs	r2, r3, r4
 800bba8:	d004      	beq.n	800bbb4 <_dtoa_r+0x78c>
 800bbaa:	4649      	mov	r1, r9
 800bbac:	4658      	mov	r0, fp
 800bbae:	f000 fcb3 	bl	800c518 <__pow5mult>
 800bbb2:	4681      	mov	r9, r0
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	4658      	mov	r0, fp
 800bbb8:	f000 fbee 	bl	800c398 <__i2b>
 800bbbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 81cf 	beq.w	800bf64 <_dtoa_r+0xb3c>
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	4601      	mov	r1, r0
 800bbca:	4658      	mov	r0, fp
 800bbcc:	f000 fca4 	bl	800c518 <__pow5mult>
 800bbd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	f300 8095 	bgt.w	800bd04 <_dtoa_r+0x8dc>
 800bbda:	9b02      	ldr	r3, [sp, #8]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f040 8087 	bne.w	800bcf0 <_dtoa_r+0x8c8>
 800bbe2:	9b03      	ldr	r3, [sp, #12]
 800bbe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f040 8089 	bne.w	800bd00 <_dtoa_r+0x8d8>
 800bbee:	9b03      	ldr	r3, [sp, #12]
 800bbf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbf4:	0d1b      	lsrs	r3, r3, #20
 800bbf6:	051b      	lsls	r3, r3, #20
 800bbf8:	b12b      	cbz	r3, 800bc06 <_dtoa_r+0x7de>
 800bbfa:	9b08      	ldr	r3, [sp, #32]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	9308      	str	r3, [sp, #32]
 800bc00:	f108 0801 	add.w	r8, r8, #1
 800bc04:	2301      	movs	r3, #1
 800bc06:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f000 81b0 	beq.w	800bf70 <_dtoa_r+0xb48>
 800bc10:	6923      	ldr	r3, [r4, #16]
 800bc12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc16:	6918      	ldr	r0, [r3, #16]
 800bc18:	f000 fb72 	bl	800c300 <__hi0bits>
 800bc1c:	f1c0 0020 	rsb	r0, r0, #32
 800bc20:	9b08      	ldr	r3, [sp, #32]
 800bc22:	4418      	add	r0, r3
 800bc24:	f010 001f 	ands.w	r0, r0, #31
 800bc28:	d077      	beq.n	800bd1a <_dtoa_r+0x8f2>
 800bc2a:	f1c0 0320 	rsb	r3, r0, #32
 800bc2e:	2b04      	cmp	r3, #4
 800bc30:	dd6b      	ble.n	800bd0a <_dtoa_r+0x8e2>
 800bc32:	9b08      	ldr	r3, [sp, #32]
 800bc34:	f1c0 001c 	rsb	r0, r0, #28
 800bc38:	4403      	add	r3, r0
 800bc3a:	4480      	add	r8, r0
 800bc3c:	4406      	add	r6, r0
 800bc3e:	9308      	str	r3, [sp, #32]
 800bc40:	f1b8 0f00 	cmp.w	r8, #0
 800bc44:	dd05      	ble.n	800bc52 <_dtoa_r+0x82a>
 800bc46:	4649      	mov	r1, r9
 800bc48:	4642      	mov	r2, r8
 800bc4a:	4658      	mov	r0, fp
 800bc4c:	f000 fcbe 	bl	800c5cc <__lshift>
 800bc50:	4681      	mov	r9, r0
 800bc52:	9b08      	ldr	r3, [sp, #32]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	dd05      	ble.n	800bc64 <_dtoa_r+0x83c>
 800bc58:	4621      	mov	r1, r4
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	4658      	mov	r0, fp
 800bc5e:	f000 fcb5 	bl	800c5cc <__lshift>
 800bc62:	4604      	mov	r4, r0
 800bc64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d059      	beq.n	800bd1e <_dtoa_r+0x8f6>
 800bc6a:	4621      	mov	r1, r4
 800bc6c:	4648      	mov	r0, r9
 800bc6e:	f000 fd19 	bl	800c6a4 <__mcmp>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	da53      	bge.n	800bd1e <_dtoa_r+0x8f6>
 800bc76:	1e7b      	subs	r3, r7, #1
 800bc78:	9304      	str	r3, [sp, #16]
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	220a      	movs	r2, #10
 800bc80:	4658      	mov	r0, fp
 800bc82:	f000 faf7 	bl	800c274 <__multadd>
 800bc86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc88:	4681      	mov	r9, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	f000 8172 	beq.w	800bf74 <_dtoa_r+0xb4c>
 800bc90:	2300      	movs	r3, #0
 800bc92:	4629      	mov	r1, r5
 800bc94:	220a      	movs	r2, #10
 800bc96:	4658      	mov	r0, fp
 800bc98:	f000 faec 	bl	800c274 <__multadd>
 800bc9c:	9b00      	ldr	r3, [sp, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	4605      	mov	r5, r0
 800bca2:	dc67      	bgt.n	800bd74 <_dtoa_r+0x94c>
 800bca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	dc41      	bgt.n	800bd2e <_dtoa_r+0x906>
 800bcaa:	e063      	b.n	800bd74 <_dtoa_r+0x94c>
 800bcac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bcae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bcb2:	e746      	b.n	800bb42 <_dtoa_r+0x71a>
 800bcb4:	9b07      	ldr	r3, [sp, #28]
 800bcb6:	1e5c      	subs	r4, r3, #1
 800bcb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcba:	42a3      	cmp	r3, r4
 800bcbc:	bfbf      	itttt	lt
 800bcbe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bcc0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bcc2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bcc4:	1ae3      	sublt	r3, r4, r3
 800bcc6:	bfb4      	ite	lt
 800bcc8:	18d2      	addlt	r2, r2, r3
 800bcca:	1b1c      	subge	r4, r3, r4
 800bccc:	9b07      	ldr	r3, [sp, #28]
 800bcce:	bfbc      	itt	lt
 800bcd0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bcd2:	2400      	movlt	r4, #0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	bfb5      	itete	lt
 800bcd8:	eba8 0603 	sublt.w	r6, r8, r3
 800bcdc:	9b07      	ldrge	r3, [sp, #28]
 800bcde:	2300      	movlt	r3, #0
 800bce0:	4646      	movge	r6, r8
 800bce2:	e730      	b.n	800bb46 <_dtoa_r+0x71e>
 800bce4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bce6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bce8:	4646      	mov	r6, r8
 800bcea:	e735      	b.n	800bb58 <_dtoa_r+0x730>
 800bcec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcee:	e75c      	b.n	800bbaa <_dtoa_r+0x782>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	e788      	b.n	800bc06 <_dtoa_r+0x7de>
 800bcf4:	3fe00000 	.word	0x3fe00000
 800bcf8:	40240000 	.word	0x40240000
 800bcfc:	40140000 	.word	0x40140000
 800bd00:	9b02      	ldr	r3, [sp, #8]
 800bd02:	e780      	b.n	800bc06 <_dtoa_r+0x7de>
 800bd04:	2300      	movs	r3, #0
 800bd06:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd08:	e782      	b.n	800bc10 <_dtoa_r+0x7e8>
 800bd0a:	d099      	beq.n	800bc40 <_dtoa_r+0x818>
 800bd0c:	9a08      	ldr	r2, [sp, #32]
 800bd0e:	331c      	adds	r3, #28
 800bd10:	441a      	add	r2, r3
 800bd12:	4498      	add	r8, r3
 800bd14:	441e      	add	r6, r3
 800bd16:	9208      	str	r2, [sp, #32]
 800bd18:	e792      	b.n	800bc40 <_dtoa_r+0x818>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	e7f6      	b.n	800bd0c <_dtoa_r+0x8e4>
 800bd1e:	9b07      	ldr	r3, [sp, #28]
 800bd20:	9704      	str	r7, [sp, #16]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	dc20      	bgt.n	800bd68 <_dtoa_r+0x940>
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	dd1e      	ble.n	800bd6c <_dtoa_r+0x944>
 800bd2e:	9b00      	ldr	r3, [sp, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f47f aec0 	bne.w	800bab6 <_dtoa_r+0x68e>
 800bd36:	4621      	mov	r1, r4
 800bd38:	2205      	movs	r2, #5
 800bd3a:	4658      	mov	r0, fp
 800bd3c:	f000 fa9a 	bl	800c274 <__multadd>
 800bd40:	4601      	mov	r1, r0
 800bd42:	4604      	mov	r4, r0
 800bd44:	4648      	mov	r0, r9
 800bd46:	f000 fcad 	bl	800c6a4 <__mcmp>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	f77f aeb3 	ble.w	800bab6 <_dtoa_r+0x68e>
 800bd50:	4656      	mov	r6, sl
 800bd52:	2331      	movs	r3, #49	@ 0x31
 800bd54:	f806 3b01 	strb.w	r3, [r6], #1
 800bd58:	9b04      	ldr	r3, [sp, #16]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	9304      	str	r3, [sp, #16]
 800bd5e:	e6ae      	b.n	800babe <_dtoa_r+0x696>
 800bd60:	9c07      	ldr	r4, [sp, #28]
 800bd62:	9704      	str	r7, [sp, #16]
 800bd64:	4625      	mov	r5, r4
 800bd66:	e7f3      	b.n	800bd50 <_dtoa_r+0x928>
 800bd68:	9b07      	ldr	r3, [sp, #28]
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f000 8104 	beq.w	800bf7c <_dtoa_r+0xb54>
 800bd74:	2e00      	cmp	r6, #0
 800bd76:	dd05      	ble.n	800bd84 <_dtoa_r+0x95c>
 800bd78:	4629      	mov	r1, r5
 800bd7a:	4632      	mov	r2, r6
 800bd7c:	4658      	mov	r0, fp
 800bd7e:	f000 fc25 	bl	800c5cc <__lshift>
 800bd82:	4605      	mov	r5, r0
 800bd84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d05a      	beq.n	800be40 <_dtoa_r+0xa18>
 800bd8a:	6869      	ldr	r1, [r5, #4]
 800bd8c:	4658      	mov	r0, fp
 800bd8e:	f000 fa0f 	bl	800c1b0 <_Balloc>
 800bd92:	4606      	mov	r6, r0
 800bd94:	b928      	cbnz	r0, 800bda2 <_dtoa_r+0x97a>
 800bd96:	4b84      	ldr	r3, [pc, #528]	@ (800bfa8 <_dtoa_r+0xb80>)
 800bd98:	4602      	mov	r2, r0
 800bd9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bd9e:	f7ff bb5a 	b.w	800b456 <_dtoa_r+0x2e>
 800bda2:	692a      	ldr	r2, [r5, #16]
 800bda4:	3202      	adds	r2, #2
 800bda6:	0092      	lsls	r2, r2, #2
 800bda8:	f105 010c 	add.w	r1, r5, #12
 800bdac:	300c      	adds	r0, #12
 800bdae:	f000 ffaf 	bl	800cd10 <memcpy>
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	4631      	mov	r1, r6
 800bdb6:	4658      	mov	r0, fp
 800bdb8:	f000 fc08 	bl	800c5cc <__lshift>
 800bdbc:	f10a 0301 	add.w	r3, sl, #1
 800bdc0:	9307      	str	r3, [sp, #28]
 800bdc2:	9b00      	ldr	r3, [sp, #0]
 800bdc4:	4453      	add	r3, sl
 800bdc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdc8:	9b02      	ldr	r3, [sp, #8]
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	462f      	mov	r7, r5
 800bdd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	9b07      	ldr	r3, [sp, #28]
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	4648      	mov	r0, r9
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	f7ff fa98 	bl	800b312 <quorem>
 800bde2:	4639      	mov	r1, r7
 800bde4:	9002      	str	r0, [sp, #8]
 800bde6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bdea:	4648      	mov	r0, r9
 800bdec:	f000 fc5a 	bl	800c6a4 <__mcmp>
 800bdf0:	462a      	mov	r2, r5
 800bdf2:	9008      	str	r0, [sp, #32]
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	4658      	mov	r0, fp
 800bdf8:	f000 fc70 	bl	800c6dc <__mdiff>
 800bdfc:	68c2      	ldr	r2, [r0, #12]
 800bdfe:	4606      	mov	r6, r0
 800be00:	bb02      	cbnz	r2, 800be44 <_dtoa_r+0xa1c>
 800be02:	4601      	mov	r1, r0
 800be04:	4648      	mov	r0, r9
 800be06:	f000 fc4d 	bl	800c6a4 <__mcmp>
 800be0a:	4602      	mov	r2, r0
 800be0c:	4631      	mov	r1, r6
 800be0e:	4658      	mov	r0, fp
 800be10:	920e      	str	r2, [sp, #56]	@ 0x38
 800be12:	f000 fa0d 	bl	800c230 <_Bfree>
 800be16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be1a:	9e07      	ldr	r6, [sp, #28]
 800be1c:	ea43 0102 	orr.w	r1, r3, r2
 800be20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be22:	4319      	orrs	r1, r3
 800be24:	d110      	bne.n	800be48 <_dtoa_r+0xa20>
 800be26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be2a:	d029      	beq.n	800be80 <_dtoa_r+0xa58>
 800be2c:	9b08      	ldr	r3, [sp, #32]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	dd02      	ble.n	800be38 <_dtoa_r+0xa10>
 800be32:	9b02      	ldr	r3, [sp, #8]
 800be34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800be38:	9b00      	ldr	r3, [sp, #0]
 800be3a:	f883 8000 	strb.w	r8, [r3]
 800be3e:	e63f      	b.n	800bac0 <_dtoa_r+0x698>
 800be40:	4628      	mov	r0, r5
 800be42:	e7bb      	b.n	800bdbc <_dtoa_r+0x994>
 800be44:	2201      	movs	r2, #1
 800be46:	e7e1      	b.n	800be0c <_dtoa_r+0x9e4>
 800be48:	9b08      	ldr	r3, [sp, #32]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	db04      	blt.n	800be58 <_dtoa_r+0xa30>
 800be4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be50:	430b      	orrs	r3, r1
 800be52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be54:	430b      	orrs	r3, r1
 800be56:	d120      	bne.n	800be9a <_dtoa_r+0xa72>
 800be58:	2a00      	cmp	r2, #0
 800be5a:	dded      	ble.n	800be38 <_dtoa_r+0xa10>
 800be5c:	4649      	mov	r1, r9
 800be5e:	2201      	movs	r2, #1
 800be60:	4658      	mov	r0, fp
 800be62:	f000 fbb3 	bl	800c5cc <__lshift>
 800be66:	4621      	mov	r1, r4
 800be68:	4681      	mov	r9, r0
 800be6a:	f000 fc1b 	bl	800c6a4 <__mcmp>
 800be6e:	2800      	cmp	r0, #0
 800be70:	dc03      	bgt.n	800be7a <_dtoa_r+0xa52>
 800be72:	d1e1      	bne.n	800be38 <_dtoa_r+0xa10>
 800be74:	f018 0f01 	tst.w	r8, #1
 800be78:	d0de      	beq.n	800be38 <_dtoa_r+0xa10>
 800be7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be7e:	d1d8      	bne.n	800be32 <_dtoa_r+0xa0a>
 800be80:	9a00      	ldr	r2, [sp, #0]
 800be82:	2339      	movs	r3, #57	@ 0x39
 800be84:	7013      	strb	r3, [r2, #0]
 800be86:	4633      	mov	r3, r6
 800be88:	461e      	mov	r6, r3
 800be8a:	3b01      	subs	r3, #1
 800be8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800be90:	2a39      	cmp	r2, #57	@ 0x39
 800be92:	d052      	beq.n	800bf3a <_dtoa_r+0xb12>
 800be94:	3201      	adds	r2, #1
 800be96:	701a      	strb	r2, [r3, #0]
 800be98:	e612      	b.n	800bac0 <_dtoa_r+0x698>
 800be9a:	2a00      	cmp	r2, #0
 800be9c:	dd07      	ble.n	800beae <_dtoa_r+0xa86>
 800be9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bea2:	d0ed      	beq.n	800be80 <_dtoa_r+0xa58>
 800bea4:	9a00      	ldr	r2, [sp, #0]
 800bea6:	f108 0301 	add.w	r3, r8, #1
 800beaa:	7013      	strb	r3, [r2, #0]
 800beac:	e608      	b.n	800bac0 <_dtoa_r+0x698>
 800beae:	9b07      	ldr	r3, [sp, #28]
 800beb0:	9a07      	ldr	r2, [sp, #28]
 800beb2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800beb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800beb8:	4293      	cmp	r3, r2
 800beba:	d028      	beq.n	800bf0e <_dtoa_r+0xae6>
 800bebc:	4649      	mov	r1, r9
 800bebe:	2300      	movs	r3, #0
 800bec0:	220a      	movs	r2, #10
 800bec2:	4658      	mov	r0, fp
 800bec4:	f000 f9d6 	bl	800c274 <__multadd>
 800bec8:	42af      	cmp	r7, r5
 800beca:	4681      	mov	r9, r0
 800becc:	f04f 0300 	mov.w	r3, #0
 800bed0:	f04f 020a 	mov.w	r2, #10
 800bed4:	4639      	mov	r1, r7
 800bed6:	4658      	mov	r0, fp
 800bed8:	d107      	bne.n	800beea <_dtoa_r+0xac2>
 800beda:	f000 f9cb 	bl	800c274 <__multadd>
 800bede:	4607      	mov	r7, r0
 800bee0:	4605      	mov	r5, r0
 800bee2:	9b07      	ldr	r3, [sp, #28]
 800bee4:	3301      	adds	r3, #1
 800bee6:	9307      	str	r3, [sp, #28]
 800bee8:	e774      	b.n	800bdd4 <_dtoa_r+0x9ac>
 800beea:	f000 f9c3 	bl	800c274 <__multadd>
 800beee:	4629      	mov	r1, r5
 800bef0:	4607      	mov	r7, r0
 800bef2:	2300      	movs	r3, #0
 800bef4:	220a      	movs	r2, #10
 800bef6:	4658      	mov	r0, fp
 800bef8:	f000 f9bc 	bl	800c274 <__multadd>
 800befc:	4605      	mov	r5, r0
 800befe:	e7f0      	b.n	800bee2 <_dtoa_r+0xaba>
 800bf00:	9b00      	ldr	r3, [sp, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	bfcc      	ite	gt
 800bf06:	461e      	movgt	r6, r3
 800bf08:	2601      	movle	r6, #1
 800bf0a:	4456      	add	r6, sl
 800bf0c:	2700      	movs	r7, #0
 800bf0e:	4649      	mov	r1, r9
 800bf10:	2201      	movs	r2, #1
 800bf12:	4658      	mov	r0, fp
 800bf14:	f000 fb5a 	bl	800c5cc <__lshift>
 800bf18:	4621      	mov	r1, r4
 800bf1a:	4681      	mov	r9, r0
 800bf1c:	f000 fbc2 	bl	800c6a4 <__mcmp>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	dcb0      	bgt.n	800be86 <_dtoa_r+0xa5e>
 800bf24:	d102      	bne.n	800bf2c <_dtoa_r+0xb04>
 800bf26:	f018 0f01 	tst.w	r8, #1
 800bf2a:	d1ac      	bne.n	800be86 <_dtoa_r+0xa5e>
 800bf2c:	4633      	mov	r3, r6
 800bf2e:	461e      	mov	r6, r3
 800bf30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf34:	2a30      	cmp	r2, #48	@ 0x30
 800bf36:	d0fa      	beq.n	800bf2e <_dtoa_r+0xb06>
 800bf38:	e5c2      	b.n	800bac0 <_dtoa_r+0x698>
 800bf3a:	459a      	cmp	sl, r3
 800bf3c:	d1a4      	bne.n	800be88 <_dtoa_r+0xa60>
 800bf3e:	9b04      	ldr	r3, [sp, #16]
 800bf40:	3301      	adds	r3, #1
 800bf42:	9304      	str	r3, [sp, #16]
 800bf44:	2331      	movs	r3, #49	@ 0x31
 800bf46:	f88a 3000 	strb.w	r3, [sl]
 800bf4a:	e5b9      	b.n	800bac0 <_dtoa_r+0x698>
 800bf4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bfac <_dtoa_r+0xb84>
 800bf52:	b11b      	cbz	r3, 800bf5c <_dtoa_r+0xb34>
 800bf54:	f10a 0308 	add.w	r3, sl, #8
 800bf58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bf5a:	6013      	str	r3, [r2, #0]
 800bf5c:	4650      	mov	r0, sl
 800bf5e:	b019      	add	sp, #100	@ 0x64
 800bf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	f77f ae37 	ble.w	800bbda <_dtoa_r+0x7b2>
 800bf6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf70:	2001      	movs	r0, #1
 800bf72:	e655      	b.n	800bc20 <_dtoa_r+0x7f8>
 800bf74:	9b00      	ldr	r3, [sp, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f77f aed6 	ble.w	800bd28 <_dtoa_r+0x900>
 800bf7c:	4656      	mov	r6, sl
 800bf7e:	4621      	mov	r1, r4
 800bf80:	4648      	mov	r0, r9
 800bf82:	f7ff f9c6 	bl	800b312 <quorem>
 800bf86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bf8a:	f806 8b01 	strb.w	r8, [r6], #1
 800bf8e:	9b00      	ldr	r3, [sp, #0]
 800bf90:	eba6 020a 	sub.w	r2, r6, sl
 800bf94:	4293      	cmp	r3, r2
 800bf96:	ddb3      	ble.n	800bf00 <_dtoa_r+0xad8>
 800bf98:	4649      	mov	r1, r9
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	220a      	movs	r2, #10
 800bf9e:	4658      	mov	r0, fp
 800bfa0:	f000 f968 	bl	800c274 <__multadd>
 800bfa4:	4681      	mov	r9, r0
 800bfa6:	e7ea      	b.n	800bf7e <_dtoa_r+0xb56>
 800bfa8:	0800d815 	.word	0x0800d815
 800bfac:	0800d799 	.word	0x0800d799

0800bfb0 <_free_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	2900      	cmp	r1, #0
 800bfb6:	d041      	beq.n	800c03c <_free_r+0x8c>
 800bfb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfbc:	1f0c      	subs	r4, r1, #4
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	bfb8      	it	lt
 800bfc2:	18e4      	addlt	r4, r4, r3
 800bfc4:	f000 f8e8 	bl	800c198 <__malloc_lock>
 800bfc8:	4a1d      	ldr	r2, [pc, #116]	@ (800c040 <_free_r+0x90>)
 800bfca:	6813      	ldr	r3, [r2, #0]
 800bfcc:	b933      	cbnz	r3, 800bfdc <_free_r+0x2c>
 800bfce:	6063      	str	r3, [r4, #4]
 800bfd0:	6014      	str	r4, [r2, #0]
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfd8:	f000 b8e4 	b.w	800c1a4 <__malloc_unlock>
 800bfdc:	42a3      	cmp	r3, r4
 800bfde:	d908      	bls.n	800bff2 <_free_r+0x42>
 800bfe0:	6820      	ldr	r0, [r4, #0]
 800bfe2:	1821      	adds	r1, r4, r0
 800bfe4:	428b      	cmp	r3, r1
 800bfe6:	bf01      	itttt	eq
 800bfe8:	6819      	ldreq	r1, [r3, #0]
 800bfea:	685b      	ldreq	r3, [r3, #4]
 800bfec:	1809      	addeq	r1, r1, r0
 800bfee:	6021      	streq	r1, [r4, #0]
 800bff0:	e7ed      	b.n	800bfce <_free_r+0x1e>
 800bff2:	461a      	mov	r2, r3
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	b10b      	cbz	r3, 800bffc <_free_r+0x4c>
 800bff8:	42a3      	cmp	r3, r4
 800bffa:	d9fa      	bls.n	800bff2 <_free_r+0x42>
 800bffc:	6811      	ldr	r1, [r2, #0]
 800bffe:	1850      	adds	r0, r2, r1
 800c000:	42a0      	cmp	r0, r4
 800c002:	d10b      	bne.n	800c01c <_free_r+0x6c>
 800c004:	6820      	ldr	r0, [r4, #0]
 800c006:	4401      	add	r1, r0
 800c008:	1850      	adds	r0, r2, r1
 800c00a:	4283      	cmp	r3, r0
 800c00c:	6011      	str	r1, [r2, #0]
 800c00e:	d1e0      	bne.n	800bfd2 <_free_r+0x22>
 800c010:	6818      	ldr	r0, [r3, #0]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	6053      	str	r3, [r2, #4]
 800c016:	4408      	add	r0, r1
 800c018:	6010      	str	r0, [r2, #0]
 800c01a:	e7da      	b.n	800bfd2 <_free_r+0x22>
 800c01c:	d902      	bls.n	800c024 <_free_r+0x74>
 800c01e:	230c      	movs	r3, #12
 800c020:	602b      	str	r3, [r5, #0]
 800c022:	e7d6      	b.n	800bfd2 <_free_r+0x22>
 800c024:	6820      	ldr	r0, [r4, #0]
 800c026:	1821      	adds	r1, r4, r0
 800c028:	428b      	cmp	r3, r1
 800c02a:	bf04      	itt	eq
 800c02c:	6819      	ldreq	r1, [r3, #0]
 800c02e:	685b      	ldreq	r3, [r3, #4]
 800c030:	6063      	str	r3, [r4, #4]
 800c032:	bf04      	itt	eq
 800c034:	1809      	addeq	r1, r1, r0
 800c036:	6021      	streq	r1, [r4, #0]
 800c038:	6054      	str	r4, [r2, #4]
 800c03a:	e7ca      	b.n	800bfd2 <_free_r+0x22>
 800c03c:	bd38      	pop	{r3, r4, r5, pc}
 800c03e:	bf00      	nop
 800c040:	20001a64 	.word	0x20001a64

0800c044 <malloc>:
 800c044:	4b02      	ldr	r3, [pc, #8]	@ (800c050 <malloc+0xc>)
 800c046:	4601      	mov	r1, r0
 800c048:	6818      	ldr	r0, [r3, #0]
 800c04a:	f000 b825 	b.w	800c098 <_malloc_r>
 800c04e:	bf00      	nop
 800c050:	20000108 	.word	0x20000108

0800c054 <sbrk_aligned>:
 800c054:	b570      	push	{r4, r5, r6, lr}
 800c056:	4e0f      	ldr	r6, [pc, #60]	@ (800c094 <sbrk_aligned+0x40>)
 800c058:	460c      	mov	r4, r1
 800c05a:	6831      	ldr	r1, [r6, #0]
 800c05c:	4605      	mov	r5, r0
 800c05e:	b911      	cbnz	r1, 800c066 <sbrk_aligned+0x12>
 800c060:	f000 fe46 	bl	800ccf0 <_sbrk_r>
 800c064:	6030      	str	r0, [r6, #0]
 800c066:	4621      	mov	r1, r4
 800c068:	4628      	mov	r0, r5
 800c06a:	f000 fe41 	bl	800ccf0 <_sbrk_r>
 800c06e:	1c43      	adds	r3, r0, #1
 800c070:	d103      	bne.n	800c07a <sbrk_aligned+0x26>
 800c072:	f04f 34ff 	mov.w	r4, #4294967295
 800c076:	4620      	mov	r0, r4
 800c078:	bd70      	pop	{r4, r5, r6, pc}
 800c07a:	1cc4      	adds	r4, r0, #3
 800c07c:	f024 0403 	bic.w	r4, r4, #3
 800c080:	42a0      	cmp	r0, r4
 800c082:	d0f8      	beq.n	800c076 <sbrk_aligned+0x22>
 800c084:	1a21      	subs	r1, r4, r0
 800c086:	4628      	mov	r0, r5
 800c088:	f000 fe32 	bl	800ccf0 <_sbrk_r>
 800c08c:	3001      	adds	r0, #1
 800c08e:	d1f2      	bne.n	800c076 <sbrk_aligned+0x22>
 800c090:	e7ef      	b.n	800c072 <sbrk_aligned+0x1e>
 800c092:	bf00      	nop
 800c094:	20001a60 	.word	0x20001a60

0800c098 <_malloc_r>:
 800c098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c09c:	1ccd      	adds	r5, r1, #3
 800c09e:	f025 0503 	bic.w	r5, r5, #3
 800c0a2:	3508      	adds	r5, #8
 800c0a4:	2d0c      	cmp	r5, #12
 800c0a6:	bf38      	it	cc
 800c0a8:	250c      	movcc	r5, #12
 800c0aa:	2d00      	cmp	r5, #0
 800c0ac:	4606      	mov	r6, r0
 800c0ae:	db01      	blt.n	800c0b4 <_malloc_r+0x1c>
 800c0b0:	42a9      	cmp	r1, r5
 800c0b2:	d904      	bls.n	800c0be <_malloc_r+0x26>
 800c0b4:	230c      	movs	r3, #12
 800c0b6:	6033      	str	r3, [r6, #0]
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c194 <_malloc_r+0xfc>
 800c0c2:	f000 f869 	bl	800c198 <__malloc_lock>
 800c0c6:	f8d8 3000 	ldr.w	r3, [r8]
 800c0ca:	461c      	mov	r4, r3
 800c0cc:	bb44      	cbnz	r4, 800c120 <_malloc_r+0x88>
 800c0ce:	4629      	mov	r1, r5
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	f7ff ffbf 	bl	800c054 <sbrk_aligned>
 800c0d6:	1c43      	adds	r3, r0, #1
 800c0d8:	4604      	mov	r4, r0
 800c0da:	d158      	bne.n	800c18e <_malloc_r+0xf6>
 800c0dc:	f8d8 4000 	ldr.w	r4, [r8]
 800c0e0:	4627      	mov	r7, r4
 800c0e2:	2f00      	cmp	r7, #0
 800c0e4:	d143      	bne.n	800c16e <_malloc_r+0xd6>
 800c0e6:	2c00      	cmp	r4, #0
 800c0e8:	d04b      	beq.n	800c182 <_malloc_r+0xea>
 800c0ea:	6823      	ldr	r3, [r4, #0]
 800c0ec:	4639      	mov	r1, r7
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	eb04 0903 	add.w	r9, r4, r3
 800c0f4:	f000 fdfc 	bl	800ccf0 <_sbrk_r>
 800c0f8:	4581      	cmp	r9, r0
 800c0fa:	d142      	bne.n	800c182 <_malloc_r+0xea>
 800c0fc:	6821      	ldr	r1, [r4, #0]
 800c0fe:	1a6d      	subs	r5, r5, r1
 800c100:	4629      	mov	r1, r5
 800c102:	4630      	mov	r0, r6
 800c104:	f7ff ffa6 	bl	800c054 <sbrk_aligned>
 800c108:	3001      	adds	r0, #1
 800c10a:	d03a      	beq.n	800c182 <_malloc_r+0xea>
 800c10c:	6823      	ldr	r3, [r4, #0]
 800c10e:	442b      	add	r3, r5
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	f8d8 3000 	ldr.w	r3, [r8]
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	bb62      	cbnz	r2, 800c174 <_malloc_r+0xdc>
 800c11a:	f8c8 7000 	str.w	r7, [r8]
 800c11e:	e00f      	b.n	800c140 <_malloc_r+0xa8>
 800c120:	6822      	ldr	r2, [r4, #0]
 800c122:	1b52      	subs	r2, r2, r5
 800c124:	d420      	bmi.n	800c168 <_malloc_r+0xd0>
 800c126:	2a0b      	cmp	r2, #11
 800c128:	d917      	bls.n	800c15a <_malloc_r+0xc2>
 800c12a:	1961      	adds	r1, r4, r5
 800c12c:	42a3      	cmp	r3, r4
 800c12e:	6025      	str	r5, [r4, #0]
 800c130:	bf18      	it	ne
 800c132:	6059      	strne	r1, [r3, #4]
 800c134:	6863      	ldr	r3, [r4, #4]
 800c136:	bf08      	it	eq
 800c138:	f8c8 1000 	streq.w	r1, [r8]
 800c13c:	5162      	str	r2, [r4, r5]
 800c13e:	604b      	str	r3, [r1, #4]
 800c140:	4630      	mov	r0, r6
 800c142:	f000 f82f 	bl	800c1a4 <__malloc_unlock>
 800c146:	f104 000b 	add.w	r0, r4, #11
 800c14a:	1d23      	adds	r3, r4, #4
 800c14c:	f020 0007 	bic.w	r0, r0, #7
 800c150:	1ac2      	subs	r2, r0, r3
 800c152:	bf1c      	itt	ne
 800c154:	1a1b      	subne	r3, r3, r0
 800c156:	50a3      	strne	r3, [r4, r2]
 800c158:	e7af      	b.n	800c0ba <_malloc_r+0x22>
 800c15a:	6862      	ldr	r2, [r4, #4]
 800c15c:	42a3      	cmp	r3, r4
 800c15e:	bf0c      	ite	eq
 800c160:	f8c8 2000 	streq.w	r2, [r8]
 800c164:	605a      	strne	r2, [r3, #4]
 800c166:	e7eb      	b.n	800c140 <_malloc_r+0xa8>
 800c168:	4623      	mov	r3, r4
 800c16a:	6864      	ldr	r4, [r4, #4]
 800c16c:	e7ae      	b.n	800c0cc <_malloc_r+0x34>
 800c16e:	463c      	mov	r4, r7
 800c170:	687f      	ldr	r7, [r7, #4]
 800c172:	e7b6      	b.n	800c0e2 <_malloc_r+0x4a>
 800c174:	461a      	mov	r2, r3
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	42a3      	cmp	r3, r4
 800c17a:	d1fb      	bne.n	800c174 <_malloc_r+0xdc>
 800c17c:	2300      	movs	r3, #0
 800c17e:	6053      	str	r3, [r2, #4]
 800c180:	e7de      	b.n	800c140 <_malloc_r+0xa8>
 800c182:	230c      	movs	r3, #12
 800c184:	6033      	str	r3, [r6, #0]
 800c186:	4630      	mov	r0, r6
 800c188:	f000 f80c 	bl	800c1a4 <__malloc_unlock>
 800c18c:	e794      	b.n	800c0b8 <_malloc_r+0x20>
 800c18e:	6005      	str	r5, [r0, #0]
 800c190:	e7d6      	b.n	800c140 <_malloc_r+0xa8>
 800c192:	bf00      	nop
 800c194:	20001a64 	.word	0x20001a64

0800c198 <__malloc_lock>:
 800c198:	4801      	ldr	r0, [pc, #4]	@ (800c1a0 <__malloc_lock+0x8>)
 800c19a:	f7ff b8b8 	b.w	800b30e <__retarget_lock_acquire_recursive>
 800c19e:	bf00      	nop
 800c1a0:	20001a5c 	.word	0x20001a5c

0800c1a4 <__malloc_unlock>:
 800c1a4:	4801      	ldr	r0, [pc, #4]	@ (800c1ac <__malloc_unlock+0x8>)
 800c1a6:	f7ff b8b3 	b.w	800b310 <__retarget_lock_release_recursive>
 800c1aa:	bf00      	nop
 800c1ac:	20001a5c 	.word	0x20001a5c

0800c1b0 <_Balloc>:
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	69c6      	ldr	r6, [r0, #28]
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	460d      	mov	r5, r1
 800c1b8:	b976      	cbnz	r6, 800c1d8 <_Balloc+0x28>
 800c1ba:	2010      	movs	r0, #16
 800c1bc:	f7ff ff42 	bl	800c044 <malloc>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	61e0      	str	r0, [r4, #28]
 800c1c4:	b920      	cbnz	r0, 800c1d0 <_Balloc+0x20>
 800c1c6:	4b18      	ldr	r3, [pc, #96]	@ (800c228 <_Balloc+0x78>)
 800c1c8:	4818      	ldr	r0, [pc, #96]	@ (800c22c <_Balloc+0x7c>)
 800c1ca:	216b      	movs	r1, #107	@ 0x6b
 800c1cc:	f000 fdae 	bl	800cd2c <__assert_func>
 800c1d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1d4:	6006      	str	r6, [r0, #0]
 800c1d6:	60c6      	str	r6, [r0, #12]
 800c1d8:	69e6      	ldr	r6, [r4, #28]
 800c1da:	68f3      	ldr	r3, [r6, #12]
 800c1dc:	b183      	cbz	r3, 800c200 <_Balloc+0x50>
 800c1de:	69e3      	ldr	r3, [r4, #28]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1e6:	b9b8      	cbnz	r0, 800c218 <_Balloc+0x68>
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	fa01 f605 	lsl.w	r6, r1, r5
 800c1ee:	1d72      	adds	r2, r6, #5
 800c1f0:	0092      	lsls	r2, r2, #2
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f000 fdb8 	bl	800cd68 <_calloc_r>
 800c1f8:	b160      	cbz	r0, 800c214 <_Balloc+0x64>
 800c1fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c1fe:	e00e      	b.n	800c21e <_Balloc+0x6e>
 800c200:	2221      	movs	r2, #33	@ 0x21
 800c202:	2104      	movs	r1, #4
 800c204:	4620      	mov	r0, r4
 800c206:	f000 fdaf 	bl	800cd68 <_calloc_r>
 800c20a:	69e3      	ldr	r3, [r4, #28]
 800c20c:	60f0      	str	r0, [r6, #12]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1e4      	bne.n	800c1de <_Balloc+0x2e>
 800c214:	2000      	movs	r0, #0
 800c216:	bd70      	pop	{r4, r5, r6, pc}
 800c218:	6802      	ldr	r2, [r0, #0]
 800c21a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c21e:	2300      	movs	r3, #0
 800c220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c224:	e7f7      	b.n	800c216 <_Balloc+0x66>
 800c226:	bf00      	nop
 800c228:	0800d7a6 	.word	0x0800d7a6
 800c22c:	0800d826 	.word	0x0800d826

0800c230 <_Bfree>:
 800c230:	b570      	push	{r4, r5, r6, lr}
 800c232:	69c6      	ldr	r6, [r0, #28]
 800c234:	4605      	mov	r5, r0
 800c236:	460c      	mov	r4, r1
 800c238:	b976      	cbnz	r6, 800c258 <_Bfree+0x28>
 800c23a:	2010      	movs	r0, #16
 800c23c:	f7ff ff02 	bl	800c044 <malloc>
 800c240:	4602      	mov	r2, r0
 800c242:	61e8      	str	r0, [r5, #28]
 800c244:	b920      	cbnz	r0, 800c250 <_Bfree+0x20>
 800c246:	4b09      	ldr	r3, [pc, #36]	@ (800c26c <_Bfree+0x3c>)
 800c248:	4809      	ldr	r0, [pc, #36]	@ (800c270 <_Bfree+0x40>)
 800c24a:	218f      	movs	r1, #143	@ 0x8f
 800c24c:	f000 fd6e 	bl	800cd2c <__assert_func>
 800c250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c254:	6006      	str	r6, [r0, #0]
 800c256:	60c6      	str	r6, [r0, #12]
 800c258:	b13c      	cbz	r4, 800c26a <_Bfree+0x3a>
 800c25a:	69eb      	ldr	r3, [r5, #28]
 800c25c:	6862      	ldr	r2, [r4, #4]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c264:	6021      	str	r1, [r4, #0]
 800c266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c26a:	bd70      	pop	{r4, r5, r6, pc}
 800c26c:	0800d7a6 	.word	0x0800d7a6
 800c270:	0800d826 	.word	0x0800d826

0800c274 <__multadd>:
 800c274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c278:	690d      	ldr	r5, [r1, #16]
 800c27a:	4607      	mov	r7, r0
 800c27c:	460c      	mov	r4, r1
 800c27e:	461e      	mov	r6, r3
 800c280:	f101 0c14 	add.w	ip, r1, #20
 800c284:	2000      	movs	r0, #0
 800c286:	f8dc 3000 	ldr.w	r3, [ip]
 800c28a:	b299      	uxth	r1, r3
 800c28c:	fb02 6101 	mla	r1, r2, r1, r6
 800c290:	0c1e      	lsrs	r6, r3, #16
 800c292:	0c0b      	lsrs	r3, r1, #16
 800c294:	fb02 3306 	mla	r3, r2, r6, r3
 800c298:	b289      	uxth	r1, r1
 800c29a:	3001      	adds	r0, #1
 800c29c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2a0:	4285      	cmp	r5, r0
 800c2a2:	f84c 1b04 	str.w	r1, [ip], #4
 800c2a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2aa:	dcec      	bgt.n	800c286 <__multadd+0x12>
 800c2ac:	b30e      	cbz	r6, 800c2f2 <__multadd+0x7e>
 800c2ae:	68a3      	ldr	r3, [r4, #8]
 800c2b0:	42ab      	cmp	r3, r5
 800c2b2:	dc19      	bgt.n	800c2e8 <__multadd+0x74>
 800c2b4:	6861      	ldr	r1, [r4, #4]
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	3101      	adds	r1, #1
 800c2ba:	f7ff ff79 	bl	800c1b0 <_Balloc>
 800c2be:	4680      	mov	r8, r0
 800c2c0:	b928      	cbnz	r0, 800c2ce <__multadd+0x5a>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	4b0c      	ldr	r3, [pc, #48]	@ (800c2f8 <__multadd+0x84>)
 800c2c6:	480d      	ldr	r0, [pc, #52]	@ (800c2fc <__multadd+0x88>)
 800c2c8:	21ba      	movs	r1, #186	@ 0xba
 800c2ca:	f000 fd2f 	bl	800cd2c <__assert_func>
 800c2ce:	6922      	ldr	r2, [r4, #16]
 800c2d0:	3202      	adds	r2, #2
 800c2d2:	f104 010c 	add.w	r1, r4, #12
 800c2d6:	0092      	lsls	r2, r2, #2
 800c2d8:	300c      	adds	r0, #12
 800c2da:	f000 fd19 	bl	800cd10 <memcpy>
 800c2de:	4621      	mov	r1, r4
 800c2e0:	4638      	mov	r0, r7
 800c2e2:	f7ff ffa5 	bl	800c230 <_Bfree>
 800c2e6:	4644      	mov	r4, r8
 800c2e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2ec:	3501      	adds	r5, #1
 800c2ee:	615e      	str	r6, [r3, #20]
 800c2f0:	6125      	str	r5, [r4, #16]
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f8:	0800d815 	.word	0x0800d815
 800c2fc:	0800d826 	.word	0x0800d826

0800c300 <__hi0bits>:
 800c300:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c304:	4603      	mov	r3, r0
 800c306:	bf36      	itet	cc
 800c308:	0403      	lslcc	r3, r0, #16
 800c30a:	2000      	movcs	r0, #0
 800c30c:	2010      	movcc	r0, #16
 800c30e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c312:	bf3c      	itt	cc
 800c314:	021b      	lslcc	r3, r3, #8
 800c316:	3008      	addcc	r0, #8
 800c318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c31c:	bf3c      	itt	cc
 800c31e:	011b      	lslcc	r3, r3, #4
 800c320:	3004      	addcc	r0, #4
 800c322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c326:	bf3c      	itt	cc
 800c328:	009b      	lslcc	r3, r3, #2
 800c32a:	3002      	addcc	r0, #2
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	db05      	blt.n	800c33c <__hi0bits+0x3c>
 800c330:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c334:	f100 0001 	add.w	r0, r0, #1
 800c338:	bf08      	it	eq
 800c33a:	2020      	moveq	r0, #32
 800c33c:	4770      	bx	lr

0800c33e <__lo0bits>:
 800c33e:	6803      	ldr	r3, [r0, #0]
 800c340:	4602      	mov	r2, r0
 800c342:	f013 0007 	ands.w	r0, r3, #7
 800c346:	d00b      	beq.n	800c360 <__lo0bits+0x22>
 800c348:	07d9      	lsls	r1, r3, #31
 800c34a:	d421      	bmi.n	800c390 <__lo0bits+0x52>
 800c34c:	0798      	lsls	r0, r3, #30
 800c34e:	bf49      	itett	mi
 800c350:	085b      	lsrmi	r3, r3, #1
 800c352:	089b      	lsrpl	r3, r3, #2
 800c354:	2001      	movmi	r0, #1
 800c356:	6013      	strmi	r3, [r2, #0]
 800c358:	bf5c      	itt	pl
 800c35a:	6013      	strpl	r3, [r2, #0]
 800c35c:	2002      	movpl	r0, #2
 800c35e:	4770      	bx	lr
 800c360:	b299      	uxth	r1, r3
 800c362:	b909      	cbnz	r1, 800c368 <__lo0bits+0x2a>
 800c364:	0c1b      	lsrs	r3, r3, #16
 800c366:	2010      	movs	r0, #16
 800c368:	b2d9      	uxtb	r1, r3
 800c36a:	b909      	cbnz	r1, 800c370 <__lo0bits+0x32>
 800c36c:	3008      	adds	r0, #8
 800c36e:	0a1b      	lsrs	r3, r3, #8
 800c370:	0719      	lsls	r1, r3, #28
 800c372:	bf04      	itt	eq
 800c374:	091b      	lsreq	r3, r3, #4
 800c376:	3004      	addeq	r0, #4
 800c378:	0799      	lsls	r1, r3, #30
 800c37a:	bf04      	itt	eq
 800c37c:	089b      	lsreq	r3, r3, #2
 800c37e:	3002      	addeq	r0, #2
 800c380:	07d9      	lsls	r1, r3, #31
 800c382:	d403      	bmi.n	800c38c <__lo0bits+0x4e>
 800c384:	085b      	lsrs	r3, r3, #1
 800c386:	f100 0001 	add.w	r0, r0, #1
 800c38a:	d003      	beq.n	800c394 <__lo0bits+0x56>
 800c38c:	6013      	str	r3, [r2, #0]
 800c38e:	4770      	bx	lr
 800c390:	2000      	movs	r0, #0
 800c392:	4770      	bx	lr
 800c394:	2020      	movs	r0, #32
 800c396:	4770      	bx	lr

0800c398 <__i2b>:
 800c398:	b510      	push	{r4, lr}
 800c39a:	460c      	mov	r4, r1
 800c39c:	2101      	movs	r1, #1
 800c39e:	f7ff ff07 	bl	800c1b0 <_Balloc>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	b928      	cbnz	r0, 800c3b2 <__i2b+0x1a>
 800c3a6:	4b05      	ldr	r3, [pc, #20]	@ (800c3bc <__i2b+0x24>)
 800c3a8:	4805      	ldr	r0, [pc, #20]	@ (800c3c0 <__i2b+0x28>)
 800c3aa:	f240 1145 	movw	r1, #325	@ 0x145
 800c3ae:	f000 fcbd 	bl	800cd2c <__assert_func>
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	6144      	str	r4, [r0, #20]
 800c3b6:	6103      	str	r3, [r0, #16]
 800c3b8:	bd10      	pop	{r4, pc}
 800c3ba:	bf00      	nop
 800c3bc:	0800d815 	.word	0x0800d815
 800c3c0:	0800d826 	.word	0x0800d826

0800c3c4 <__multiply>:
 800c3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c8:	4614      	mov	r4, r2
 800c3ca:	690a      	ldr	r2, [r1, #16]
 800c3cc:	6923      	ldr	r3, [r4, #16]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	bfa8      	it	ge
 800c3d2:	4623      	movge	r3, r4
 800c3d4:	460f      	mov	r7, r1
 800c3d6:	bfa4      	itt	ge
 800c3d8:	460c      	movge	r4, r1
 800c3da:	461f      	movge	r7, r3
 800c3dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c3e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c3e4:	68a3      	ldr	r3, [r4, #8]
 800c3e6:	6861      	ldr	r1, [r4, #4]
 800c3e8:	eb0a 0609 	add.w	r6, sl, r9
 800c3ec:	42b3      	cmp	r3, r6
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	bfb8      	it	lt
 800c3f2:	3101      	addlt	r1, #1
 800c3f4:	f7ff fedc 	bl	800c1b0 <_Balloc>
 800c3f8:	b930      	cbnz	r0, 800c408 <__multiply+0x44>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	4b44      	ldr	r3, [pc, #272]	@ (800c510 <__multiply+0x14c>)
 800c3fe:	4845      	ldr	r0, [pc, #276]	@ (800c514 <__multiply+0x150>)
 800c400:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c404:	f000 fc92 	bl	800cd2c <__assert_func>
 800c408:	f100 0514 	add.w	r5, r0, #20
 800c40c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c410:	462b      	mov	r3, r5
 800c412:	2200      	movs	r2, #0
 800c414:	4543      	cmp	r3, r8
 800c416:	d321      	bcc.n	800c45c <__multiply+0x98>
 800c418:	f107 0114 	add.w	r1, r7, #20
 800c41c:	f104 0214 	add.w	r2, r4, #20
 800c420:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c424:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c428:	9302      	str	r3, [sp, #8]
 800c42a:	1b13      	subs	r3, r2, r4
 800c42c:	3b15      	subs	r3, #21
 800c42e:	f023 0303 	bic.w	r3, r3, #3
 800c432:	3304      	adds	r3, #4
 800c434:	f104 0715 	add.w	r7, r4, #21
 800c438:	42ba      	cmp	r2, r7
 800c43a:	bf38      	it	cc
 800c43c:	2304      	movcc	r3, #4
 800c43e:	9301      	str	r3, [sp, #4]
 800c440:	9b02      	ldr	r3, [sp, #8]
 800c442:	9103      	str	r1, [sp, #12]
 800c444:	428b      	cmp	r3, r1
 800c446:	d80c      	bhi.n	800c462 <__multiply+0x9e>
 800c448:	2e00      	cmp	r6, #0
 800c44a:	dd03      	ble.n	800c454 <__multiply+0x90>
 800c44c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c450:	2b00      	cmp	r3, #0
 800c452:	d05b      	beq.n	800c50c <__multiply+0x148>
 800c454:	6106      	str	r6, [r0, #16]
 800c456:	b005      	add	sp, #20
 800c458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c45c:	f843 2b04 	str.w	r2, [r3], #4
 800c460:	e7d8      	b.n	800c414 <__multiply+0x50>
 800c462:	f8b1 a000 	ldrh.w	sl, [r1]
 800c466:	f1ba 0f00 	cmp.w	sl, #0
 800c46a:	d024      	beq.n	800c4b6 <__multiply+0xf2>
 800c46c:	f104 0e14 	add.w	lr, r4, #20
 800c470:	46a9      	mov	r9, r5
 800c472:	f04f 0c00 	mov.w	ip, #0
 800c476:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c47a:	f8d9 3000 	ldr.w	r3, [r9]
 800c47e:	fa1f fb87 	uxth.w	fp, r7
 800c482:	b29b      	uxth	r3, r3
 800c484:	fb0a 330b 	mla	r3, sl, fp, r3
 800c488:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c48c:	f8d9 7000 	ldr.w	r7, [r9]
 800c490:	4463      	add	r3, ip
 800c492:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c496:	fb0a c70b 	mla	r7, sl, fp, ip
 800c49a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c4a4:	4572      	cmp	r2, lr
 800c4a6:	f849 3b04 	str.w	r3, [r9], #4
 800c4aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c4ae:	d8e2      	bhi.n	800c476 <__multiply+0xb2>
 800c4b0:	9b01      	ldr	r3, [sp, #4]
 800c4b2:	f845 c003 	str.w	ip, [r5, r3]
 800c4b6:	9b03      	ldr	r3, [sp, #12]
 800c4b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c4bc:	3104      	adds	r1, #4
 800c4be:	f1b9 0f00 	cmp.w	r9, #0
 800c4c2:	d021      	beq.n	800c508 <__multiply+0x144>
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	f104 0c14 	add.w	ip, r4, #20
 800c4ca:	46ae      	mov	lr, r5
 800c4cc:	f04f 0a00 	mov.w	sl, #0
 800c4d0:	f8bc b000 	ldrh.w	fp, [ip]
 800c4d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c4d8:	fb09 770b 	mla	r7, r9, fp, r7
 800c4dc:	4457      	add	r7, sl
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c4e4:	f84e 3b04 	str.w	r3, [lr], #4
 800c4e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c4ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4f0:	f8be 3000 	ldrh.w	r3, [lr]
 800c4f4:	fb09 330a 	mla	r3, r9, sl, r3
 800c4f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c4fc:	4562      	cmp	r2, ip
 800c4fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c502:	d8e5      	bhi.n	800c4d0 <__multiply+0x10c>
 800c504:	9f01      	ldr	r7, [sp, #4]
 800c506:	51eb      	str	r3, [r5, r7]
 800c508:	3504      	adds	r5, #4
 800c50a:	e799      	b.n	800c440 <__multiply+0x7c>
 800c50c:	3e01      	subs	r6, #1
 800c50e:	e79b      	b.n	800c448 <__multiply+0x84>
 800c510:	0800d815 	.word	0x0800d815
 800c514:	0800d826 	.word	0x0800d826

0800c518 <__pow5mult>:
 800c518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c51c:	4615      	mov	r5, r2
 800c51e:	f012 0203 	ands.w	r2, r2, #3
 800c522:	4607      	mov	r7, r0
 800c524:	460e      	mov	r6, r1
 800c526:	d007      	beq.n	800c538 <__pow5mult+0x20>
 800c528:	4c25      	ldr	r4, [pc, #148]	@ (800c5c0 <__pow5mult+0xa8>)
 800c52a:	3a01      	subs	r2, #1
 800c52c:	2300      	movs	r3, #0
 800c52e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c532:	f7ff fe9f 	bl	800c274 <__multadd>
 800c536:	4606      	mov	r6, r0
 800c538:	10ad      	asrs	r5, r5, #2
 800c53a:	d03d      	beq.n	800c5b8 <__pow5mult+0xa0>
 800c53c:	69fc      	ldr	r4, [r7, #28]
 800c53e:	b97c      	cbnz	r4, 800c560 <__pow5mult+0x48>
 800c540:	2010      	movs	r0, #16
 800c542:	f7ff fd7f 	bl	800c044 <malloc>
 800c546:	4602      	mov	r2, r0
 800c548:	61f8      	str	r0, [r7, #28]
 800c54a:	b928      	cbnz	r0, 800c558 <__pow5mult+0x40>
 800c54c:	4b1d      	ldr	r3, [pc, #116]	@ (800c5c4 <__pow5mult+0xac>)
 800c54e:	481e      	ldr	r0, [pc, #120]	@ (800c5c8 <__pow5mult+0xb0>)
 800c550:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c554:	f000 fbea 	bl	800cd2c <__assert_func>
 800c558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c55c:	6004      	str	r4, [r0, #0]
 800c55e:	60c4      	str	r4, [r0, #12]
 800c560:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c568:	b94c      	cbnz	r4, 800c57e <__pow5mult+0x66>
 800c56a:	f240 2171 	movw	r1, #625	@ 0x271
 800c56e:	4638      	mov	r0, r7
 800c570:	f7ff ff12 	bl	800c398 <__i2b>
 800c574:	2300      	movs	r3, #0
 800c576:	f8c8 0008 	str.w	r0, [r8, #8]
 800c57a:	4604      	mov	r4, r0
 800c57c:	6003      	str	r3, [r0, #0]
 800c57e:	f04f 0900 	mov.w	r9, #0
 800c582:	07eb      	lsls	r3, r5, #31
 800c584:	d50a      	bpl.n	800c59c <__pow5mult+0x84>
 800c586:	4631      	mov	r1, r6
 800c588:	4622      	mov	r2, r4
 800c58a:	4638      	mov	r0, r7
 800c58c:	f7ff ff1a 	bl	800c3c4 <__multiply>
 800c590:	4631      	mov	r1, r6
 800c592:	4680      	mov	r8, r0
 800c594:	4638      	mov	r0, r7
 800c596:	f7ff fe4b 	bl	800c230 <_Bfree>
 800c59a:	4646      	mov	r6, r8
 800c59c:	106d      	asrs	r5, r5, #1
 800c59e:	d00b      	beq.n	800c5b8 <__pow5mult+0xa0>
 800c5a0:	6820      	ldr	r0, [r4, #0]
 800c5a2:	b938      	cbnz	r0, 800c5b4 <__pow5mult+0x9c>
 800c5a4:	4622      	mov	r2, r4
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	4638      	mov	r0, r7
 800c5aa:	f7ff ff0b 	bl	800c3c4 <__multiply>
 800c5ae:	6020      	str	r0, [r4, #0]
 800c5b0:	f8c0 9000 	str.w	r9, [r0]
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	e7e4      	b.n	800c582 <__pow5mult+0x6a>
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5be:	bf00      	nop
 800c5c0:	0800d880 	.word	0x0800d880
 800c5c4:	0800d7a6 	.word	0x0800d7a6
 800c5c8:	0800d826 	.word	0x0800d826

0800c5cc <__lshift>:
 800c5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d0:	460c      	mov	r4, r1
 800c5d2:	6849      	ldr	r1, [r1, #4]
 800c5d4:	6923      	ldr	r3, [r4, #16]
 800c5d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5da:	68a3      	ldr	r3, [r4, #8]
 800c5dc:	4607      	mov	r7, r0
 800c5de:	4691      	mov	r9, r2
 800c5e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5e4:	f108 0601 	add.w	r6, r8, #1
 800c5e8:	42b3      	cmp	r3, r6
 800c5ea:	db0b      	blt.n	800c604 <__lshift+0x38>
 800c5ec:	4638      	mov	r0, r7
 800c5ee:	f7ff fddf 	bl	800c1b0 <_Balloc>
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	b948      	cbnz	r0, 800c60a <__lshift+0x3e>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	4b28      	ldr	r3, [pc, #160]	@ (800c69c <__lshift+0xd0>)
 800c5fa:	4829      	ldr	r0, [pc, #164]	@ (800c6a0 <__lshift+0xd4>)
 800c5fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c600:	f000 fb94 	bl	800cd2c <__assert_func>
 800c604:	3101      	adds	r1, #1
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	e7ee      	b.n	800c5e8 <__lshift+0x1c>
 800c60a:	2300      	movs	r3, #0
 800c60c:	f100 0114 	add.w	r1, r0, #20
 800c610:	f100 0210 	add.w	r2, r0, #16
 800c614:	4618      	mov	r0, r3
 800c616:	4553      	cmp	r3, sl
 800c618:	db33      	blt.n	800c682 <__lshift+0xb6>
 800c61a:	6920      	ldr	r0, [r4, #16]
 800c61c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c620:	f104 0314 	add.w	r3, r4, #20
 800c624:	f019 091f 	ands.w	r9, r9, #31
 800c628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c62c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c630:	d02b      	beq.n	800c68a <__lshift+0xbe>
 800c632:	f1c9 0e20 	rsb	lr, r9, #32
 800c636:	468a      	mov	sl, r1
 800c638:	2200      	movs	r2, #0
 800c63a:	6818      	ldr	r0, [r3, #0]
 800c63c:	fa00 f009 	lsl.w	r0, r0, r9
 800c640:	4310      	orrs	r0, r2
 800c642:	f84a 0b04 	str.w	r0, [sl], #4
 800c646:	f853 2b04 	ldr.w	r2, [r3], #4
 800c64a:	459c      	cmp	ip, r3
 800c64c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c650:	d8f3      	bhi.n	800c63a <__lshift+0x6e>
 800c652:	ebac 0304 	sub.w	r3, ip, r4
 800c656:	3b15      	subs	r3, #21
 800c658:	f023 0303 	bic.w	r3, r3, #3
 800c65c:	3304      	adds	r3, #4
 800c65e:	f104 0015 	add.w	r0, r4, #21
 800c662:	4584      	cmp	ip, r0
 800c664:	bf38      	it	cc
 800c666:	2304      	movcc	r3, #4
 800c668:	50ca      	str	r2, [r1, r3]
 800c66a:	b10a      	cbz	r2, 800c670 <__lshift+0xa4>
 800c66c:	f108 0602 	add.w	r6, r8, #2
 800c670:	3e01      	subs	r6, #1
 800c672:	4638      	mov	r0, r7
 800c674:	612e      	str	r6, [r5, #16]
 800c676:	4621      	mov	r1, r4
 800c678:	f7ff fdda 	bl	800c230 <_Bfree>
 800c67c:	4628      	mov	r0, r5
 800c67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c682:	f842 0f04 	str.w	r0, [r2, #4]!
 800c686:	3301      	adds	r3, #1
 800c688:	e7c5      	b.n	800c616 <__lshift+0x4a>
 800c68a:	3904      	subs	r1, #4
 800c68c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c690:	f841 2f04 	str.w	r2, [r1, #4]!
 800c694:	459c      	cmp	ip, r3
 800c696:	d8f9      	bhi.n	800c68c <__lshift+0xc0>
 800c698:	e7ea      	b.n	800c670 <__lshift+0xa4>
 800c69a:	bf00      	nop
 800c69c:	0800d815 	.word	0x0800d815
 800c6a0:	0800d826 	.word	0x0800d826

0800c6a4 <__mcmp>:
 800c6a4:	690a      	ldr	r2, [r1, #16]
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	6900      	ldr	r0, [r0, #16]
 800c6aa:	1a80      	subs	r0, r0, r2
 800c6ac:	b530      	push	{r4, r5, lr}
 800c6ae:	d10e      	bne.n	800c6ce <__mcmp+0x2a>
 800c6b0:	3314      	adds	r3, #20
 800c6b2:	3114      	adds	r1, #20
 800c6b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c6b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c6bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c6c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c6c4:	4295      	cmp	r5, r2
 800c6c6:	d003      	beq.n	800c6d0 <__mcmp+0x2c>
 800c6c8:	d205      	bcs.n	800c6d6 <__mcmp+0x32>
 800c6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ce:	bd30      	pop	{r4, r5, pc}
 800c6d0:	42a3      	cmp	r3, r4
 800c6d2:	d3f3      	bcc.n	800c6bc <__mcmp+0x18>
 800c6d4:	e7fb      	b.n	800c6ce <__mcmp+0x2a>
 800c6d6:	2001      	movs	r0, #1
 800c6d8:	e7f9      	b.n	800c6ce <__mcmp+0x2a>
	...

0800c6dc <__mdiff>:
 800c6dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e0:	4689      	mov	r9, r1
 800c6e2:	4606      	mov	r6, r0
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	4648      	mov	r0, r9
 800c6e8:	4614      	mov	r4, r2
 800c6ea:	f7ff ffdb 	bl	800c6a4 <__mcmp>
 800c6ee:	1e05      	subs	r5, r0, #0
 800c6f0:	d112      	bne.n	800c718 <__mdiff+0x3c>
 800c6f2:	4629      	mov	r1, r5
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	f7ff fd5b 	bl	800c1b0 <_Balloc>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	b928      	cbnz	r0, 800c70a <__mdiff+0x2e>
 800c6fe:	4b3f      	ldr	r3, [pc, #252]	@ (800c7fc <__mdiff+0x120>)
 800c700:	f240 2137 	movw	r1, #567	@ 0x237
 800c704:	483e      	ldr	r0, [pc, #248]	@ (800c800 <__mdiff+0x124>)
 800c706:	f000 fb11 	bl	800cd2c <__assert_func>
 800c70a:	2301      	movs	r3, #1
 800c70c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c710:	4610      	mov	r0, r2
 800c712:	b003      	add	sp, #12
 800c714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c718:	bfbc      	itt	lt
 800c71a:	464b      	movlt	r3, r9
 800c71c:	46a1      	movlt	r9, r4
 800c71e:	4630      	mov	r0, r6
 800c720:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c724:	bfba      	itte	lt
 800c726:	461c      	movlt	r4, r3
 800c728:	2501      	movlt	r5, #1
 800c72a:	2500      	movge	r5, #0
 800c72c:	f7ff fd40 	bl	800c1b0 <_Balloc>
 800c730:	4602      	mov	r2, r0
 800c732:	b918      	cbnz	r0, 800c73c <__mdiff+0x60>
 800c734:	4b31      	ldr	r3, [pc, #196]	@ (800c7fc <__mdiff+0x120>)
 800c736:	f240 2145 	movw	r1, #581	@ 0x245
 800c73a:	e7e3      	b.n	800c704 <__mdiff+0x28>
 800c73c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c740:	6926      	ldr	r6, [r4, #16]
 800c742:	60c5      	str	r5, [r0, #12]
 800c744:	f109 0310 	add.w	r3, r9, #16
 800c748:	f109 0514 	add.w	r5, r9, #20
 800c74c:	f104 0e14 	add.w	lr, r4, #20
 800c750:	f100 0b14 	add.w	fp, r0, #20
 800c754:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c758:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c75c:	9301      	str	r3, [sp, #4]
 800c75e:	46d9      	mov	r9, fp
 800c760:	f04f 0c00 	mov.w	ip, #0
 800c764:	9b01      	ldr	r3, [sp, #4]
 800c766:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c76a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c76e:	9301      	str	r3, [sp, #4]
 800c770:	fa1f f38a 	uxth.w	r3, sl
 800c774:	4619      	mov	r1, r3
 800c776:	b283      	uxth	r3, r0
 800c778:	1acb      	subs	r3, r1, r3
 800c77a:	0c00      	lsrs	r0, r0, #16
 800c77c:	4463      	add	r3, ip
 800c77e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c782:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c786:	b29b      	uxth	r3, r3
 800c788:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c78c:	4576      	cmp	r6, lr
 800c78e:	f849 3b04 	str.w	r3, [r9], #4
 800c792:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c796:	d8e5      	bhi.n	800c764 <__mdiff+0x88>
 800c798:	1b33      	subs	r3, r6, r4
 800c79a:	3b15      	subs	r3, #21
 800c79c:	f023 0303 	bic.w	r3, r3, #3
 800c7a0:	3415      	adds	r4, #21
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	42a6      	cmp	r6, r4
 800c7a6:	bf38      	it	cc
 800c7a8:	2304      	movcc	r3, #4
 800c7aa:	441d      	add	r5, r3
 800c7ac:	445b      	add	r3, fp
 800c7ae:	461e      	mov	r6, r3
 800c7b0:	462c      	mov	r4, r5
 800c7b2:	4544      	cmp	r4, r8
 800c7b4:	d30e      	bcc.n	800c7d4 <__mdiff+0xf8>
 800c7b6:	f108 0103 	add.w	r1, r8, #3
 800c7ba:	1b49      	subs	r1, r1, r5
 800c7bc:	f021 0103 	bic.w	r1, r1, #3
 800c7c0:	3d03      	subs	r5, #3
 800c7c2:	45a8      	cmp	r8, r5
 800c7c4:	bf38      	it	cc
 800c7c6:	2100      	movcc	r1, #0
 800c7c8:	440b      	add	r3, r1
 800c7ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7ce:	b191      	cbz	r1, 800c7f6 <__mdiff+0x11a>
 800c7d0:	6117      	str	r7, [r2, #16]
 800c7d2:	e79d      	b.n	800c710 <__mdiff+0x34>
 800c7d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c7d8:	46e6      	mov	lr, ip
 800c7da:	0c08      	lsrs	r0, r1, #16
 800c7dc:	fa1c fc81 	uxtah	ip, ip, r1
 800c7e0:	4471      	add	r1, lr
 800c7e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c7e6:	b289      	uxth	r1, r1
 800c7e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c7ec:	f846 1b04 	str.w	r1, [r6], #4
 800c7f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7f4:	e7dd      	b.n	800c7b2 <__mdiff+0xd6>
 800c7f6:	3f01      	subs	r7, #1
 800c7f8:	e7e7      	b.n	800c7ca <__mdiff+0xee>
 800c7fa:	bf00      	nop
 800c7fc:	0800d815 	.word	0x0800d815
 800c800:	0800d826 	.word	0x0800d826

0800c804 <__d2b>:
 800c804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c808:	460f      	mov	r7, r1
 800c80a:	2101      	movs	r1, #1
 800c80c:	ec59 8b10 	vmov	r8, r9, d0
 800c810:	4616      	mov	r6, r2
 800c812:	f7ff fccd 	bl	800c1b0 <_Balloc>
 800c816:	4604      	mov	r4, r0
 800c818:	b930      	cbnz	r0, 800c828 <__d2b+0x24>
 800c81a:	4602      	mov	r2, r0
 800c81c:	4b23      	ldr	r3, [pc, #140]	@ (800c8ac <__d2b+0xa8>)
 800c81e:	4824      	ldr	r0, [pc, #144]	@ (800c8b0 <__d2b+0xac>)
 800c820:	f240 310f 	movw	r1, #783	@ 0x30f
 800c824:	f000 fa82 	bl	800cd2c <__assert_func>
 800c828:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c82c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c830:	b10d      	cbz	r5, 800c836 <__d2b+0x32>
 800c832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c836:	9301      	str	r3, [sp, #4]
 800c838:	f1b8 0300 	subs.w	r3, r8, #0
 800c83c:	d023      	beq.n	800c886 <__d2b+0x82>
 800c83e:	4668      	mov	r0, sp
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	f7ff fd7c 	bl	800c33e <__lo0bits>
 800c846:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c84a:	b1d0      	cbz	r0, 800c882 <__d2b+0x7e>
 800c84c:	f1c0 0320 	rsb	r3, r0, #32
 800c850:	fa02 f303 	lsl.w	r3, r2, r3
 800c854:	430b      	orrs	r3, r1
 800c856:	40c2      	lsrs	r2, r0
 800c858:	6163      	str	r3, [r4, #20]
 800c85a:	9201      	str	r2, [sp, #4]
 800c85c:	9b01      	ldr	r3, [sp, #4]
 800c85e:	61a3      	str	r3, [r4, #24]
 800c860:	2b00      	cmp	r3, #0
 800c862:	bf0c      	ite	eq
 800c864:	2201      	moveq	r2, #1
 800c866:	2202      	movne	r2, #2
 800c868:	6122      	str	r2, [r4, #16]
 800c86a:	b1a5      	cbz	r5, 800c896 <__d2b+0x92>
 800c86c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c870:	4405      	add	r5, r0
 800c872:	603d      	str	r5, [r7, #0]
 800c874:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c878:	6030      	str	r0, [r6, #0]
 800c87a:	4620      	mov	r0, r4
 800c87c:	b003      	add	sp, #12
 800c87e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c882:	6161      	str	r1, [r4, #20]
 800c884:	e7ea      	b.n	800c85c <__d2b+0x58>
 800c886:	a801      	add	r0, sp, #4
 800c888:	f7ff fd59 	bl	800c33e <__lo0bits>
 800c88c:	9b01      	ldr	r3, [sp, #4]
 800c88e:	6163      	str	r3, [r4, #20]
 800c890:	3020      	adds	r0, #32
 800c892:	2201      	movs	r2, #1
 800c894:	e7e8      	b.n	800c868 <__d2b+0x64>
 800c896:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c89a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c89e:	6038      	str	r0, [r7, #0]
 800c8a0:	6918      	ldr	r0, [r3, #16]
 800c8a2:	f7ff fd2d 	bl	800c300 <__hi0bits>
 800c8a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8aa:	e7e5      	b.n	800c878 <__d2b+0x74>
 800c8ac:	0800d815 	.word	0x0800d815
 800c8b0:	0800d826 	.word	0x0800d826

0800c8b4 <__ssputs_r>:
 800c8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8b8:	688e      	ldr	r6, [r1, #8]
 800c8ba:	461f      	mov	r7, r3
 800c8bc:	42be      	cmp	r6, r7
 800c8be:	680b      	ldr	r3, [r1, #0]
 800c8c0:	4682      	mov	sl, r0
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	4690      	mov	r8, r2
 800c8c6:	d82d      	bhi.n	800c924 <__ssputs_r+0x70>
 800c8c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c8d0:	d026      	beq.n	800c920 <__ssputs_r+0x6c>
 800c8d2:	6965      	ldr	r5, [r4, #20]
 800c8d4:	6909      	ldr	r1, [r1, #16]
 800c8d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8da:	eba3 0901 	sub.w	r9, r3, r1
 800c8de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8e2:	1c7b      	adds	r3, r7, #1
 800c8e4:	444b      	add	r3, r9
 800c8e6:	106d      	asrs	r5, r5, #1
 800c8e8:	429d      	cmp	r5, r3
 800c8ea:	bf38      	it	cc
 800c8ec:	461d      	movcc	r5, r3
 800c8ee:	0553      	lsls	r3, r2, #21
 800c8f0:	d527      	bpl.n	800c942 <__ssputs_r+0x8e>
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	f7ff fbd0 	bl	800c098 <_malloc_r>
 800c8f8:	4606      	mov	r6, r0
 800c8fa:	b360      	cbz	r0, 800c956 <__ssputs_r+0xa2>
 800c8fc:	6921      	ldr	r1, [r4, #16]
 800c8fe:	464a      	mov	r2, r9
 800c900:	f000 fa06 	bl	800cd10 <memcpy>
 800c904:	89a3      	ldrh	r3, [r4, #12]
 800c906:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c90a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c90e:	81a3      	strh	r3, [r4, #12]
 800c910:	6126      	str	r6, [r4, #16]
 800c912:	6165      	str	r5, [r4, #20]
 800c914:	444e      	add	r6, r9
 800c916:	eba5 0509 	sub.w	r5, r5, r9
 800c91a:	6026      	str	r6, [r4, #0]
 800c91c:	60a5      	str	r5, [r4, #8]
 800c91e:	463e      	mov	r6, r7
 800c920:	42be      	cmp	r6, r7
 800c922:	d900      	bls.n	800c926 <__ssputs_r+0x72>
 800c924:	463e      	mov	r6, r7
 800c926:	6820      	ldr	r0, [r4, #0]
 800c928:	4632      	mov	r2, r6
 800c92a:	4641      	mov	r1, r8
 800c92c:	f000 f9c6 	bl	800ccbc <memmove>
 800c930:	68a3      	ldr	r3, [r4, #8]
 800c932:	1b9b      	subs	r3, r3, r6
 800c934:	60a3      	str	r3, [r4, #8]
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	4433      	add	r3, r6
 800c93a:	6023      	str	r3, [r4, #0]
 800c93c:	2000      	movs	r0, #0
 800c93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c942:	462a      	mov	r2, r5
 800c944:	f000 fa36 	bl	800cdb4 <_realloc_r>
 800c948:	4606      	mov	r6, r0
 800c94a:	2800      	cmp	r0, #0
 800c94c:	d1e0      	bne.n	800c910 <__ssputs_r+0x5c>
 800c94e:	6921      	ldr	r1, [r4, #16]
 800c950:	4650      	mov	r0, sl
 800c952:	f7ff fb2d 	bl	800bfb0 <_free_r>
 800c956:	230c      	movs	r3, #12
 800c958:	f8ca 3000 	str.w	r3, [sl]
 800c95c:	89a3      	ldrh	r3, [r4, #12]
 800c95e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c962:	81a3      	strh	r3, [r4, #12]
 800c964:	f04f 30ff 	mov.w	r0, #4294967295
 800c968:	e7e9      	b.n	800c93e <__ssputs_r+0x8a>
	...

0800c96c <_svfiprintf_r>:
 800c96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c970:	4698      	mov	r8, r3
 800c972:	898b      	ldrh	r3, [r1, #12]
 800c974:	061b      	lsls	r3, r3, #24
 800c976:	b09d      	sub	sp, #116	@ 0x74
 800c978:	4607      	mov	r7, r0
 800c97a:	460d      	mov	r5, r1
 800c97c:	4614      	mov	r4, r2
 800c97e:	d510      	bpl.n	800c9a2 <_svfiprintf_r+0x36>
 800c980:	690b      	ldr	r3, [r1, #16]
 800c982:	b973      	cbnz	r3, 800c9a2 <_svfiprintf_r+0x36>
 800c984:	2140      	movs	r1, #64	@ 0x40
 800c986:	f7ff fb87 	bl	800c098 <_malloc_r>
 800c98a:	6028      	str	r0, [r5, #0]
 800c98c:	6128      	str	r0, [r5, #16]
 800c98e:	b930      	cbnz	r0, 800c99e <_svfiprintf_r+0x32>
 800c990:	230c      	movs	r3, #12
 800c992:	603b      	str	r3, [r7, #0]
 800c994:	f04f 30ff 	mov.w	r0, #4294967295
 800c998:	b01d      	add	sp, #116	@ 0x74
 800c99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99e:	2340      	movs	r3, #64	@ 0x40
 800c9a0:	616b      	str	r3, [r5, #20]
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9a6:	2320      	movs	r3, #32
 800c9a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9b0:	2330      	movs	r3, #48	@ 0x30
 800c9b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cb50 <_svfiprintf_r+0x1e4>
 800c9b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9ba:	f04f 0901 	mov.w	r9, #1
 800c9be:	4623      	mov	r3, r4
 800c9c0:	469a      	mov	sl, r3
 800c9c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9c6:	b10a      	cbz	r2, 800c9cc <_svfiprintf_r+0x60>
 800c9c8:	2a25      	cmp	r2, #37	@ 0x25
 800c9ca:	d1f9      	bne.n	800c9c0 <_svfiprintf_r+0x54>
 800c9cc:	ebba 0b04 	subs.w	fp, sl, r4
 800c9d0:	d00b      	beq.n	800c9ea <_svfiprintf_r+0x7e>
 800c9d2:	465b      	mov	r3, fp
 800c9d4:	4622      	mov	r2, r4
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	4638      	mov	r0, r7
 800c9da:	f7ff ff6b 	bl	800c8b4 <__ssputs_r>
 800c9de:	3001      	adds	r0, #1
 800c9e0:	f000 80a7 	beq.w	800cb32 <_svfiprintf_r+0x1c6>
 800c9e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9e6:	445a      	add	r2, fp
 800c9e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	f000 809f 	beq.w	800cb32 <_svfiprintf_r+0x1c6>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9fe:	f10a 0a01 	add.w	sl, sl, #1
 800ca02:	9304      	str	r3, [sp, #16]
 800ca04:	9307      	str	r3, [sp, #28]
 800ca06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca0c:	4654      	mov	r4, sl
 800ca0e:	2205      	movs	r2, #5
 800ca10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca14:	484e      	ldr	r0, [pc, #312]	@ (800cb50 <_svfiprintf_r+0x1e4>)
 800ca16:	f7f3 fbe3 	bl	80001e0 <memchr>
 800ca1a:	9a04      	ldr	r2, [sp, #16]
 800ca1c:	b9d8      	cbnz	r0, 800ca56 <_svfiprintf_r+0xea>
 800ca1e:	06d0      	lsls	r0, r2, #27
 800ca20:	bf44      	itt	mi
 800ca22:	2320      	movmi	r3, #32
 800ca24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca28:	0711      	lsls	r1, r2, #28
 800ca2a:	bf44      	itt	mi
 800ca2c:	232b      	movmi	r3, #43	@ 0x2b
 800ca2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca32:	f89a 3000 	ldrb.w	r3, [sl]
 800ca36:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca38:	d015      	beq.n	800ca66 <_svfiprintf_r+0xfa>
 800ca3a:	9a07      	ldr	r2, [sp, #28]
 800ca3c:	4654      	mov	r4, sl
 800ca3e:	2000      	movs	r0, #0
 800ca40:	f04f 0c0a 	mov.w	ip, #10
 800ca44:	4621      	mov	r1, r4
 800ca46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca4a:	3b30      	subs	r3, #48	@ 0x30
 800ca4c:	2b09      	cmp	r3, #9
 800ca4e:	d94b      	bls.n	800cae8 <_svfiprintf_r+0x17c>
 800ca50:	b1b0      	cbz	r0, 800ca80 <_svfiprintf_r+0x114>
 800ca52:	9207      	str	r2, [sp, #28]
 800ca54:	e014      	b.n	800ca80 <_svfiprintf_r+0x114>
 800ca56:	eba0 0308 	sub.w	r3, r0, r8
 800ca5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	9304      	str	r3, [sp, #16]
 800ca62:	46a2      	mov	sl, r4
 800ca64:	e7d2      	b.n	800ca0c <_svfiprintf_r+0xa0>
 800ca66:	9b03      	ldr	r3, [sp, #12]
 800ca68:	1d19      	adds	r1, r3, #4
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	9103      	str	r1, [sp, #12]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	bfbb      	ittet	lt
 800ca72:	425b      	neglt	r3, r3
 800ca74:	f042 0202 	orrlt.w	r2, r2, #2
 800ca78:	9307      	strge	r3, [sp, #28]
 800ca7a:	9307      	strlt	r3, [sp, #28]
 800ca7c:	bfb8      	it	lt
 800ca7e:	9204      	strlt	r2, [sp, #16]
 800ca80:	7823      	ldrb	r3, [r4, #0]
 800ca82:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca84:	d10a      	bne.n	800ca9c <_svfiprintf_r+0x130>
 800ca86:	7863      	ldrb	r3, [r4, #1]
 800ca88:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca8a:	d132      	bne.n	800caf2 <_svfiprintf_r+0x186>
 800ca8c:	9b03      	ldr	r3, [sp, #12]
 800ca8e:	1d1a      	adds	r2, r3, #4
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	9203      	str	r2, [sp, #12]
 800ca94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca98:	3402      	adds	r4, #2
 800ca9a:	9305      	str	r3, [sp, #20]
 800ca9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cb60 <_svfiprintf_r+0x1f4>
 800caa0:	7821      	ldrb	r1, [r4, #0]
 800caa2:	2203      	movs	r2, #3
 800caa4:	4650      	mov	r0, sl
 800caa6:	f7f3 fb9b 	bl	80001e0 <memchr>
 800caaa:	b138      	cbz	r0, 800cabc <_svfiprintf_r+0x150>
 800caac:	9b04      	ldr	r3, [sp, #16]
 800caae:	eba0 000a 	sub.w	r0, r0, sl
 800cab2:	2240      	movs	r2, #64	@ 0x40
 800cab4:	4082      	lsls	r2, r0
 800cab6:	4313      	orrs	r3, r2
 800cab8:	3401      	adds	r4, #1
 800caba:	9304      	str	r3, [sp, #16]
 800cabc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cac0:	4824      	ldr	r0, [pc, #144]	@ (800cb54 <_svfiprintf_r+0x1e8>)
 800cac2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cac6:	2206      	movs	r2, #6
 800cac8:	f7f3 fb8a 	bl	80001e0 <memchr>
 800cacc:	2800      	cmp	r0, #0
 800cace:	d036      	beq.n	800cb3e <_svfiprintf_r+0x1d2>
 800cad0:	4b21      	ldr	r3, [pc, #132]	@ (800cb58 <_svfiprintf_r+0x1ec>)
 800cad2:	bb1b      	cbnz	r3, 800cb1c <_svfiprintf_r+0x1b0>
 800cad4:	9b03      	ldr	r3, [sp, #12]
 800cad6:	3307      	adds	r3, #7
 800cad8:	f023 0307 	bic.w	r3, r3, #7
 800cadc:	3308      	adds	r3, #8
 800cade:	9303      	str	r3, [sp, #12]
 800cae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cae2:	4433      	add	r3, r6
 800cae4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cae6:	e76a      	b.n	800c9be <_svfiprintf_r+0x52>
 800cae8:	fb0c 3202 	mla	r2, ip, r2, r3
 800caec:	460c      	mov	r4, r1
 800caee:	2001      	movs	r0, #1
 800caf0:	e7a8      	b.n	800ca44 <_svfiprintf_r+0xd8>
 800caf2:	2300      	movs	r3, #0
 800caf4:	3401      	adds	r4, #1
 800caf6:	9305      	str	r3, [sp, #20]
 800caf8:	4619      	mov	r1, r3
 800cafa:	f04f 0c0a 	mov.w	ip, #10
 800cafe:	4620      	mov	r0, r4
 800cb00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb04:	3a30      	subs	r2, #48	@ 0x30
 800cb06:	2a09      	cmp	r2, #9
 800cb08:	d903      	bls.n	800cb12 <_svfiprintf_r+0x1a6>
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d0c6      	beq.n	800ca9c <_svfiprintf_r+0x130>
 800cb0e:	9105      	str	r1, [sp, #20]
 800cb10:	e7c4      	b.n	800ca9c <_svfiprintf_r+0x130>
 800cb12:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb16:	4604      	mov	r4, r0
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e7f0      	b.n	800cafe <_svfiprintf_r+0x192>
 800cb1c:	ab03      	add	r3, sp, #12
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	462a      	mov	r2, r5
 800cb22:	4b0e      	ldr	r3, [pc, #56]	@ (800cb5c <_svfiprintf_r+0x1f0>)
 800cb24:	a904      	add	r1, sp, #16
 800cb26:	4638      	mov	r0, r7
 800cb28:	f7fd fe6c 	bl	800a804 <_printf_float>
 800cb2c:	1c42      	adds	r2, r0, #1
 800cb2e:	4606      	mov	r6, r0
 800cb30:	d1d6      	bne.n	800cae0 <_svfiprintf_r+0x174>
 800cb32:	89ab      	ldrh	r3, [r5, #12]
 800cb34:	065b      	lsls	r3, r3, #25
 800cb36:	f53f af2d 	bmi.w	800c994 <_svfiprintf_r+0x28>
 800cb3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb3c:	e72c      	b.n	800c998 <_svfiprintf_r+0x2c>
 800cb3e:	ab03      	add	r3, sp, #12
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	462a      	mov	r2, r5
 800cb44:	4b05      	ldr	r3, [pc, #20]	@ (800cb5c <_svfiprintf_r+0x1f0>)
 800cb46:	a904      	add	r1, sp, #16
 800cb48:	4638      	mov	r0, r7
 800cb4a:	f7fe f8f3 	bl	800ad34 <_printf_i>
 800cb4e:	e7ed      	b.n	800cb2c <_svfiprintf_r+0x1c0>
 800cb50:	0800d980 	.word	0x0800d980
 800cb54:	0800d98a 	.word	0x0800d98a
 800cb58:	0800a805 	.word	0x0800a805
 800cb5c:	0800c8b5 	.word	0x0800c8b5
 800cb60:	0800d986 	.word	0x0800d986

0800cb64 <__sflush_r>:
 800cb64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb6c:	0716      	lsls	r6, r2, #28
 800cb6e:	4605      	mov	r5, r0
 800cb70:	460c      	mov	r4, r1
 800cb72:	d454      	bmi.n	800cc1e <__sflush_r+0xba>
 800cb74:	684b      	ldr	r3, [r1, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	dc02      	bgt.n	800cb80 <__sflush_r+0x1c>
 800cb7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	dd48      	ble.n	800cc12 <__sflush_r+0xae>
 800cb80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb82:	2e00      	cmp	r6, #0
 800cb84:	d045      	beq.n	800cc12 <__sflush_r+0xae>
 800cb86:	2300      	movs	r3, #0
 800cb88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb8c:	682f      	ldr	r7, [r5, #0]
 800cb8e:	6a21      	ldr	r1, [r4, #32]
 800cb90:	602b      	str	r3, [r5, #0]
 800cb92:	d030      	beq.n	800cbf6 <__sflush_r+0x92>
 800cb94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb96:	89a3      	ldrh	r3, [r4, #12]
 800cb98:	0759      	lsls	r1, r3, #29
 800cb9a:	d505      	bpl.n	800cba8 <__sflush_r+0x44>
 800cb9c:	6863      	ldr	r3, [r4, #4]
 800cb9e:	1ad2      	subs	r2, r2, r3
 800cba0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cba2:	b10b      	cbz	r3, 800cba8 <__sflush_r+0x44>
 800cba4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cba6:	1ad2      	subs	r2, r2, r3
 800cba8:	2300      	movs	r3, #0
 800cbaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbac:	6a21      	ldr	r1, [r4, #32]
 800cbae:	4628      	mov	r0, r5
 800cbb0:	47b0      	blx	r6
 800cbb2:	1c43      	adds	r3, r0, #1
 800cbb4:	89a3      	ldrh	r3, [r4, #12]
 800cbb6:	d106      	bne.n	800cbc6 <__sflush_r+0x62>
 800cbb8:	6829      	ldr	r1, [r5, #0]
 800cbba:	291d      	cmp	r1, #29
 800cbbc:	d82b      	bhi.n	800cc16 <__sflush_r+0xb2>
 800cbbe:	4a2a      	ldr	r2, [pc, #168]	@ (800cc68 <__sflush_r+0x104>)
 800cbc0:	410a      	asrs	r2, r1
 800cbc2:	07d6      	lsls	r6, r2, #31
 800cbc4:	d427      	bmi.n	800cc16 <__sflush_r+0xb2>
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	6062      	str	r2, [r4, #4]
 800cbca:	04d9      	lsls	r1, r3, #19
 800cbcc:	6922      	ldr	r2, [r4, #16]
 800cbce:	6022      	str	r2, [r4, #0]
 800cbd0:	d504      	bpl.n	800cbdc <__sflush_r+0x78>
 800cbd2:	1c42      	adds	r2, r0, #1
 800cbd4:	d101      	bne.n	800cbda <__sflush_r+0x76>
 800cbd6:	682b      	ldr	r3, [r5, #0]
 800cbd8:	b903      	cbnz	r3, 800cbdc <__sflush_r+0x78>
 800cbda:	6560      	str	r0, [r4, #84]	@ 0x54
 800cbdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbde:	602f      	str	r7, [r5, #0]
 800cbe0:	b1b9      	cbz	r1, 800cc12 <__sflush_r+0xae>
 800cbe2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbe6:	4299      	cmp	r1, r3
 800cbe8:	d002      	beq.n	800cbf0 <__sflush_r+0x8c>
 800cbea:	4628      	mov	r0, r5
 800cbec:	f7ff f9e0 	bl	800bfb0 <_free_r>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbf4:	e00d      	b.n	800cc12 <__sflush_r+0xae>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	47b0      	blx	r6
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	1c50      	adds	r0, r2, #1
 800cc00:	d1c9      	bne.n	800cb96 <__sflush_r+0x32>
 800cc02:	682b      	ldr	r3, [r5, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d0c6      	beq.n	800cb96 <__sflush_r+0x32>
 800cc08:	2b1d      	cmp	r3, #29
 800cc0a:	d001      	beq.n	800cc10 <__sflush_r+0xac>
 800cc0c:	2b16      	cmp	r3, #22
 800cc0e:	d11e      	bne.n	800cc4e <__sflush_r+0xea>
 800cc10:	602f      	str	r7, [r5, #0]
 800cc12:	2000      	movs	r0, #0
 800cc14:	e022      	b.n	800cc5c <__sflush_r+0xf8>
 800cc16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc1a:	b21b      	sxth	r3, r3
 800cc1c:	e01b      	b.n	800cc56 <__sflush_r+0xf2>
 800cc1e:	690f      	ldr	r7, [r1, #16]
 800cc20:	2f00      	cmp	r7, #0
 800cc22:	d0f6      	beq.n	800cc12 <__sflush_r+0xae>
 800cc24:	0793      	lsls	r3, r2, #30
 800cc26:	680e      	ldr	r6, [r1, #0]
 800cc28:	bf08      	it	eq
 800cc2a:	694b      	ldreq	r3, [r1, #20]
 800cc2c:	600f      	str	r7, [r1, #0]
 800cc2e:	bf18      	it	ne
 800cc30:	2300      	movne	r3, #0
 800cc32:	eba6 0807 	sub.w	r8, r6, r7
 800cc36:	608b      	str	r3, [r1, #8]
 800cc38:	f1b8 0f00 	cmp.w	r8, #0
 800cc3c:	dde9      	ble.n	800cc12 <__sflush_r+0xae>
 800cc3e:	6a21      	ldr	r1, [r4, #32]
 800cc40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc42:	4643      	mov	r3, r8
 800cc44:	463a      	mov	r2, r7
 800cc46:	4628      	mov	r0, r5
 800cc48:	47b0      	blx	r6
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	dc08      	bgt.n	800cc60 <__sflush_r+0xfc>
 800cc4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc56:	81a3      	strh	r3, [r4, #12]
 800cc58:	f04f 30ff 	mov.w	r0, #4294967295
 800cc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc60:	4407      	add	r7, r0
 800cc62:	eba8 0800 	sub.w	r8, r8, r0
 800cc66:	e7e7      	b.n	800cc38 <__sflush_r+0xd4>
 800cc68:	dfbffffe 	.word	0xdfbffffe

0800cc6c <_fflush_r>:
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	690b      	ldr	r3, [r1, #16]
 800cc70:	4605      	mov	r5, r0
 800cc72:	460c      	mov	r4, r1
 800cc74:	b913      	cbnz	r3, 800cc7c <_fflush_r+0x10>
 800cc76:	2500      	movs	r5, #0
 800cc78:	4628      	mov	r0, r5
 800cc7a:	bd38      	pop	{r3, r4, r5, pc}
 800cc7c:	b118      	cbz	r0, 800cc86 <_fflush_r+0x1a>
 800cc7e:	6a03      	ldr	r3, [r0, #32]
 800cc80:	b90b      	cbnz	r3, 800cc86 <_fflush_r+0x1a>
 800cc82:	f7fe fa03 	bl	800b08c <__sinit>
 800cc86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d0f3      	beq.n	800cc76 <_fflush_r+0xa>
 800cc8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc90:	07d0      	lsls	r0, r2, #31
 800cc92:	d404      	bmi.n	800cc9e <_fflush_r+0x32>
 800cc94:	0599      	lsls	r1, r3, #22
 800cc96:	d402      	bmi.n	800cc9e <_fflush_r+0x32>
 800cc98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc9a:	f7fe fb38 	bl	800b30e <__retarget_lock_acquire_recursive>
 800cc9e:	4628      	mov	r0, r5
 800cca0:	4621      	mov	r1, r4
 800cca2:	f7ff ff5f 	bl	800cb64 <__sflush_r>
 800cca6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cca8:	07da      	lsls	r2, r3, #31
 800ccaa:	4605      	mov	r5, r0
 800ccac:	d4e4      	bmi.n	800cc78 <_fflush_r+0xc>
 800ccae:	89a3      	ldrh	r3, [r4, #12]
 800ccb0:	059b      	lsls	r3, r3, #22
 800ccb2:	d4e1      	bmi.n	800cc78 <_fflush_r+0xc>
 800ccb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccb6:	f7fe fb2b 	bl	800b310 <__retarget_lock_release_recursive>
 800ccba:	e7dd      	b.n	800cc78 <_fflush_r+0xc>

0800ccbc <memmove>:
 800ccbc:	4288      	cmp	r0, r1
 800ccbe:	b510      	push	{r4, lr}
 800ccc0:	eb01 0402 	add.w	r4, r1, r2
 800ccc4:	d902      	bls.n	800cccc <memmove+0x10>
 800ccc6:	4284      	cmp	r4, r0
 800ccc8:	4623      	mov	r3, r4
 800ccca:	d807      	bhi.n	800ccdc <memmove+0x20>
 800cccc:	1e43      	subs	r3, r0, #1
 800ccce:	42a1      	cmp	r1, r4
 800ccd0:	d008      	beq.n	800cce4 <memmove+0x28>
 800ccd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccda:	e7f8      	b.n	800ccce <memmove+0x12>
 800ccdc:	4402      	add	r2, r0
 800ccde:	4601      	mov	r1, r0
 800cce0:	428a      	cmp	r2, r1
 800cce2:	d100      	bne.n	800cce6 <memmove+0x2a>
 800cce4:	bd10      	pop	{r4, pc}
 800cce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccee:	e7f7      	b.n	800cce0 <memmove+0x24>

0800ccf0 <_sbrk_r>:
 800ccf0:	b538      	push	{r3, r4, r5, lr}
 800ccf2:	4d06      	ldr	r5, [pc, #24]	@ (800cd0c <_sbrk_r+0x1c>)
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	4604      	mov	r4, r0
 800ccf8:	4608      	mov	r0, r1
 800ccfa:	602b      	str	r3, [r5, #0]
 800ccfc:	f7f4 ffb4 	bl	8001c68 <_sbrk>
 800cd00:	1c43      	adds	r3, r0, #1
 800cd02:	d102      	bne.n	800cd0a <_sbrk_r+0x1a>
 800cd04:	682b      	ldr	r3, [r5, #0]
 800cd06:	b103      	cbz	r3, 800cd0a <_sbrk_r+0x1a>
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	bd38      	pop	{r3, r4, r5, pc}
 800cd0c:	20001a58 	.word	0x20001a58

0800cd10 <memcpy>:
 800cd10:	440a      	add	r2, r1
 800cd12:	4291      	cmp	r1, r2
 800cd14:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd18:	d100      	bne.n	800cd1c <memcpy+0xc>
 800cd1a:	4770      	bx	lr
 800cd1c:	b510      	push	{r4, lr}
 800cd1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd26:	4291      	cmp	r1, r2
 800cd28:	d1f9      	bne.n	800cd1e <memcpy+0xe>
 800cd2a:	bd10      	pop	{r4, pc}

0800cd2c <__assert_func>:
 800cd2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd2e:	4614      	mov	r4, r2
 800cd30:	461a      	mov	r2, r3
 800cd32:	4b09      	ldr	r3, [pc, #36]	@ (800cd58 <__assert_func+0x2c>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4605      	mov	r5, r0
 800cd38:	68d8      	ldr	r0, [r3, #12]
 800cd3a:	b954      	cbnz	r4, 800cd52 <__assert_func+0x26>
 800cd3c:	4b07      	ldr	r3, [pc, #28]	@ (800cd5c <__assert_func+0x30>)
 800cd3e:	461c      	mov	r4, r3
 800cd40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd44:	9100      	str	r1, [sp, #0]
 800cd46:	462b      	mov	r3, r5
 800cd48:	4905      	ldr	r1, [pc, #20]	@ (800cd60 <__assert_func+0x34>)
 800cd4a:	f000 f86f 	bl	800ce2c <fiprintf>
 800cd4e:	f000 f87f 	bl	800ce50 <abort>
 800cd52:	4b04      	ldr	r3, [pc, #16]	@ (800cd64 <__assert_func+0x38>)
 800cd54:	e7f4      	b.n	800cd40 <__assert_func+0x14>
 800cd56:	bf00      	nop
 800cd58:	20000108 	.word	0x20000108
 800cd5c:	0800d9d6 	.word	0x0800d9d6
 800cd60:	0800d9a8 	.word	0x0800d9a8
 800cd64:	0800d99b 	.word	0x0800d99b

0800cd68 <_calloc_r>:
 800cd68:	b570      	push	{r4, r5, r6, lr}
 800cd6a:	fba1 5402 	umull	r5, r4, r1, r2
 800cd6e:	b93c      	cbnz	r4, 800cd80 <_calloc_r+0x18>
 800cd70:	4629      	mov	r1, r5
 800cd72:	f7ff f991 	bl	800c098 <_malloc_r>
 800cd76:	4606      	mov	r6, r0
 800cd78:	b928      	cbnz	r0, 800cd86 <_calloc_r+0x1e>
 800cd7a:	2600      	movs	r6, #0
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}
 800cd80:	220c      	movs	r2, #12
 800cd82:	6002      	str	r2, [r0, #0]
 800cd84:	e7f9      	b.n	800cd7a <_calloc_r+0x12>
 800cd86:	462a      	mov	r2, r5
 800cd88:	4621      	mov	r1, r4
 800cd8a:	f7fe fa2c 	bl	800b1e6 <memset>
 800cd8e:	e7f5      	b.n	800cd7c <_calloc_r+0x14>

0800cd90 <__ascii_mbtowc>:
 800cd90:	b082      	sub	sp, #8
 800cd92:	b901      	cbnz	r1, 800cd96 <__ascii_mbtowc+0x6>
 800cd94:	a901      	add	r1, sp, #4
 800cd96:	b142      	cbz	r2, 800cdaa <__ascii_mbtowc+0x1a>
 800cd98:	b14b      	cbz	r3, 800cdae <__ascii_mbtowc+0x1e>
 800cd9a:	7813      	ldrb	r3, [r2, #0]
 800cd9c:	600b      	str	r3, [r1, #0]
 800cd9e:	7812      	ldrb	r2, [r2, #0]
 800cda0:	1e10      	subs	r0, r2, #0
 800cda2:	bf18      	it	ne
 800cda4:	2001      	movne	r0, #1
 800cda6:	b002      	add	sp, #8
 800cda8:	4770      	bx	lr
 800cdaa:	4610      	mov	r0, r2
 800cdac:	e7fb      	b.n	800cda6 <__ascii_mbtowc+0x16>
 800cdae:	f06f 0001 	mvn.w	r0, #1
 800cdb2:	e7f8      	b.n	800cda6 <__ascii_mbtowc+0x16>

0800cdb4 <_realloc_r>:
 800cdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb8:	4680      	mov	r8, r0
 800cdba:	4615      	mov	r5, r2
 800cdbc:	460c      	mov	r4, r1
 800cdbe:	b921      	cbnz	r1, 800cdca <_realloc_r+0x16>
 800cdc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc4:	4611      	mov	r1, r2
 800cdc6:	f7ff b967 	b.w	800c098 <_malloc_r>
 800cdca:	b92a      	cbnz	r2, 800cdd8 <_realloc_r+0x24>
 800cdcc:	f7ff f8f0 	bl	800bfb0 <_free_r>
 800cdd0:	2400      	movs	r4, #0
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd8:	f000 f841 	bl	800ce5e <_malloc_usable_size_r>
 800cddc:	4285      	cmp	r5, r0
 800cdde:	4606      	mov	r6, r0
 800cde0:	d802      	bhi.n	800cde8 <_realloc_r+0x34>
 800cde2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cde6:	d8f4      	bhi.n	800cdd2 <_realloc_r+0x1e>
 800cde8:	4629      	mov	r1, r5
 800cdea:	4640      	mov	r0, r8
 800cdec:	f7ff f954 	bl	800c098 <_malloc_r>
 800cdf0:	4607      	mov	r7, r0
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	d0ec      	beq.n	800cdd0 <_realloc_r+0x1c>
 800cdf6:	42b5      	cmp	r5, r6
 800cdf8:	462a      	mov	r2, r5
 800cdfa:	4621      	mov	r1, r4
 800cdfc:	bf28      	it	cs
 800cdfe:	4632      	movcs	r2, r6
 800ce00:	f7ff ff86 	bl	800cd10 <memcpy>
 800ce04:	4621      	mov	r1, r4
 800ce06:	4640      	mov	r0, r8
 800ce08:	f7ff f8d2 	bl	800bfb0 <_free_r>
 800ce0c:	463c      	mov	r4, r7
 800ce0e:	e7e0      	b.n	800cdd2 <_realloc_r+0x1e>

0800ce10 <__ascii_wctomb>:
 800ce10:	4603      	mov	r3, r0
 800ce12:	4608      	mov	r0, r1
 800ce14:	b141      	cbz	r1, 800ce28 <__ascii_wctomb+0x18>
 800ce16:	2aff      	cmp	r2, #255	@ 0xff
 800ce18:	d904      	bls.n	800ce24 <__ascii_wctomb+0x14>
 800ce1a:	228a      	movs	r2, #138	@ 0x8a
 800ce1c:	601a      	str	r2, [r3, #0]
 800ce1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce22:	4770      	bx	lr
 800ce24:	700a      	strb	r2, [r1, #0]
 800ce26:	2001      	movs	r0, #1
 800ce28:	4770      	bx	lr
	...

0800ce2c <fiprintf>:
 800ce2c:	b40e      	push	{r1, r2, r3}
 800ce2e:	b503      	push	{r0, r1, lr}
 800ce30:	4601      	mov	r1, r0
 800ce32:	ab03      	add	r3, sp, #12
 800ce34:	4805      	ldr	r0, [pc, #20]	@ (800ce4c <fiprintf+0x20>)
 800ce36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce3a:	6800      	ldr	r0, [r0, #0]
 800ce3c:	9301      	str	r3, [sp, #4]
 800ce3e:	f000 f83f 	bl	800cec0 <_vfiprintf_r>
 800ce42:	b002      	add	sp, #8
 800ce44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce48:	b003      	add	sp, #12
 800ce4a:	4770      	bx	lr
 800ce4c:	20000108 	.word	0x20000108

0800ce50 <abort>:
 800ce50:	b508      	push	{r3, lr}
 800ce52:	2006      	movs	r0, #6
 800ce54:	f000 fa08 	bl	800d268 <raise>
 800ce58:	2001      	movs	r0, #1
 800ce5a:	f7f4 fe8d 	bl	8001b78 <_exit>

0800ce5e <_malloc_usable_size_r>:
 800ce5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce62:	1f18      	subs	r0, r3, #4
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	bfbc      	itt	lt
 800ce68:	580b      	ldrlt	r3, [r1, r0]
 800ce6a:	18c0      	addlt	r0, r0, r3
 800ce6c:	4770      	bx	lr

0800ce6e <__sfputc_r>:
 800ce6e:	6893      	ldr	r3, [r2, #8]
 800ce70:	3b01      	subs	r3, #1
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	b410      	push	{r4}
 800ce76:	6093      	str	r3, [r2, #8]
 800ce78:	da08      	bge.n	800ce8c <__sfputc_r+0x1e>
 800ce7a:	6994      	ldr	r4, [r2, #24]
 800ce7c:	42a3      	cmp	r3, r4
 800ce7e:	db01      	blt.n	800ce84 <__sfputc_r+0x16>
 800ce80:	290a      	cmp	r1, #10
 800ce82:	d103      	bne.n	800ce8c <__sfputc_r+0x1e>
 800ce84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce88:	f000 b932 	b.w	800d0f0 <__swbuf_r>
 800ce8c:	6813      	ldr	r3, [r2, #0]
 800ce8e:	1c58      	adds	r0, r3, #1
 800ce90:	6010      	str	r0, [r2, #0]
 800ce92:	7019      	strb	r1, [r3, #0]
 800ce94:	4608      	mov	r0, r1
 800ce96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <__sfputs_r>:
 800ce9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9e:	4606      	mov	r6, r0
 800cea0:	460f      	mov	r7, r1
 800cea2:	4614      	mov	r4, r2
 800cea4:	18d5      	adds	r5, r2, r3
 800cea6:	42ac      	cmp	r4, r5
 800cea8:	d101      	bne.n	800ceae <__sfputs_r+0x12>
 800ceaa:	2000      	movs	r0, #0
 800ceac:	e007      	b.n	800cebe <__sfputs_r+0x22>
 800ceae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceb2:	463a      	mov	r2, r7
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	f7ff ffda 	bl	800ce6e <__sfputc_r>
 800ceba:	1c43      	adds	r3, r0, #1
 800cebc:	d1f3      	bne.n	800cea6 <__sfputs_r+0xa>
 800cebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cec0 <_vfiprintf_r>:
 800cec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	460d      	mov	r5, r1
 800cec6:	b09d      	sub	sp, #116	@ 0x74
 800cec8:	4614      	mov	r4, r2
 800ceca:	4698      	mov	r8, r3
 800cecc:	4606      	mov	r6, r0
 800cece:	b118      	cbz	r0, 800ced8 <_vfiprintf_r+0x18>
 800ced0:	6a03      	ldr	r3, [r0, #32]
 800ced2:	b90b      	cbnz	r3, 800ced8 <_vfiprintf_r+0x18>
 800ced4:	f7fe f8da 	bl	800b08c <__sinit>
 800ced8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ceda:	07d9      	lsls	r1, r3, #31
 800cedc:	d405      	bmi.n	800ceea <_vfiprintf_r+0x2a>
 800cede:	89ab      	ldrh	r3, [r5, #12]
 800cee0:	059a      	lsls	r2, r3, #22
 800cee2:	d402      	bmi.n	800ceea <_vfiprintf_r+0x2a>
 800cee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cee6:	f7fe fa12 	bl	800b30e <__retarget_lock_acquire_recursive>
 800ceea:	89ab      	ldrh	r3, [r5, #12]
 800ceec:	071b      	lsls	r3, r3, #28
 800ceee:	d501      	bpl.n	800cef4 <_vfiprintf_r+0x34>
 800cef0:	692b      	ldr	r3, [r5, #16]
 800cef2:	b99b      	cbnz	r3, 800cf1c <_vfiprintf_r+0x5c>
 800cef4:	4629      	mov	r1, r5
 800cef6:	4630      	mov	r0, r6
 800cef8:	f000 f938 	bl	800d16c <__swsetup_r>
 800cefc:	b170      	cbz	r0, 800cf1c <_vfiprintf_r+0x5c>
 800cefe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf00:	07dc      	lsls	r4, r3, #31
 800cf02:	d504      	bpl.n	800cf0e <_vfiprintf_r+0x4e>
 800cf04:	f04f 30ff 	mov.w	r0, #4294967295
 800cf08:	b01d      	add	sp, #116	@ 0x74
 800cf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf0e:	89ab      	ldrh	r3, [r5, #12]
 800cf10:	0598      	lsls	r0, r3, #22
 800cf12:	d4f7      	bmi.n	800cf04 <_vfiprintf_r+0x44>
 800cf14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf16:	f7fe f9fb 	bl	800b310 <__retarget_lock_release_recursive>
 800cf1a:	e7f3      	b.n	800cf04 <_vfiprintf_r+0x44>
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf20:	2320      	movs	r3, #32
 800cf22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf26:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf2a:	2330      	movs	r3, #48	@ 0x30
 800cf2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d0dc <_vfiprintf_r+0x21c>
 800cf30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf34:	f04f 0901 	mov.w	r9, #1
 800cf38:	4623      	mov	r3, r4
 800cf3a:	469a      	mov	sl, r3
 800cf3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf40:	b10a      	cbz	r2, 800cf46 <_vfiprintf_r+0x86>
 800cf42:	2a25      	cmp	r2, #37	@ 0x25
 800cf44:	d1f9      	bne.n	800cf3a <_vfiprintf_r+0x7a>
 800cf46:	ebba 0b04 	subs.w	fp, sl, r4
 800cf4a:	d00b      	beq.n	800cf64 <_vfiprintf_r+0xa4>
 800cf4c:	465b      	mov	r3, fp
 800cf4e:	4622      	mov	r2, r4
 800cf50:	4629      	mov	r1, r5
 800cf52:	4630      	mov	r0, r6
 800cf54:	f7ff ffa2 	bl	800ce9c <__sfputs_r>
 800cf58:	3001      	adds	r0, #1
 800cf5a:	f000 80a7 	beq.w	800d0ac <_vfiprintf_r+0x1ec>
 800cf5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf60:	445a      	add	r2, fp
 800cf62:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf64:	f89a 3000 	ldrb.w	r3, [sl]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	f000 809f 	beq.w	800d0ac <_vfiprintf_r+0x1ec>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	f04f 32ff 	mov.w	r2, #4294967295
 800cf74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf78:	f10a 0a01 	add.w	sl, sl, #1
 800cf7c:	9304      	str	r3, [sp, #16]
 800cf7e:	9307      	str	r3, [sp, #28]
 800cf80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf84:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf86:	4654      	mov	r4, sl
 800cf88:	2205      	movs	r2, #5
 800cf8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf8e:	4853      	ldr	r0, [pc, #332]	@ (800d0dc <_vfiprintf_r+0x21c>)
 800cf90:	f7f3 f926 	bl	80001e0 <memchr>
 800cf94:	9a04      	ldr	r2, [sp, #16]
 800cf96:	b9d8      	cbnz	r0, 800cfd0 <_vfiprintf_r+0x110>
 800cf98:	06d1      	lsls	r1, r2, #27
 800cf9a:	bf44      	itt	mi
 800cf9c:	2320      	movmi	r3, #32
 800cf9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfa2:	0713      	lsls	r3, r2, #28
 800cfa4:	bf44      	itt	mi
 800cfa6:	232b      	movmi	r3, #43	@ 0x2b
 800cfa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfac:	f89a 3000 	ldrb.w	r3, [sl]
 800cfb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfb2:	d015      	beq.n	800cfe0 <_vfiprintf_r+0x120>
 800cfb4:	9a07      	ldr	r2, [sp, #28]
 800cfb6:	4654      	mov	r4, sl
 800cfb8:	2000      	movs	r0, #0
 800cfba:	f04f 0c0a 	mov.w	ip, #10
 800cfbe:	4621      	mov	r1, r4
 800cfc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfc4:	3b30      	subs	r3, #48	@ 0x30
 800cfc6:	2b09      	cmp	r3, #9
 800cfc8:	d94b      	bls.n	800d062 <_vfiprintf_r+0x1a2>
 800cfca:	b1b0      	cbz	r0, 800cffa <_vfiprintf_r+0x13a>
 800cfcc:	9207      	str	r2, [sp, #28]
 800cfce:	e014      	b.n	800cffa <_vfiprintf_r+0x13a>
 800cfd0:	eba0 0308 	sub.w	r3, r0, r8
 800cfd4:	fa09 f303 	lsl.w	r3, r9, r3
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	9304      	str	r3, [sp, #16]
 800cfdc:	46a2      	mov	sl, r4
 800cfde:	e7d2      	b.n	800cf86 <_vfiprintf_r+0xc6>
 800cfe0:	9b03      	ldr	r3, [sp, #12]
 800cfe2:	1d19      	adds	r1, r3, #4
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	9103      	str	r1, [sp, #12]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	bfbb      	ittet	lt
 800cfec:	425b      	neglt	r3, r3
 800cfee:	f042 0202 	orrlt.w	r2, r2, #2
 800cff2:	9307      	strge	r3, [sp, #28]
 800cff4:	9307      	strlt	r3, [sp, #28]
 800cff6:	bfb8      	it	lt
 800cff8:	9204      	strlt	r2, [sp, #16]
 800cffa:	7823      	ldrb	r3, [r4, #0]
 800cffc:	2b2e      	cmp	r3, #46	@ 0x2e
 800cffe:	d10a      	bne.n	800d016 <_vfiprintf_r+0x156>
 800d000:	7863      	ldrb	r3, [r4, #1]
 800d002:	2b2a      	cmp	r3, #42	@ 0x2a
 800d004:	d132      	bne.n	800d06c <_vfiprintf_r+0x1ac>
 800d006:	9b03      	ldr	r3, [sp, #12]
 800d008:	1d1a      	adds	r2, r3, #4
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	9203      	str	r2, [sp, #12]
 800d00e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d012:	3402      	adds	r4, #2
 800d014:	9305      	str	r3, [sp, #20]
 800d016:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d0ec <_vfiprintf_r+0x22c>
 800d01a:	7821      	ldrb	r1, [r4, #0]
 800d01c:	2203      	movs	r2, #3
 800d01e:	4650      	mov	r0, sl
 800d020:	f7f3 f8de 	bl	80001e0 <memchr>
 800d024:	b138      	cbz	r0, 800d036 <_vfiprintf_r+0x176>
 800d026:	9b04      	ldr	r3, [sp, #16]
 800d028:	eba0 000a 	sub.w	r0, r0, sl
 800d02c:	2240      	movs	r2, #64	@ 0x40
 800d02e:	4082      	lsls	r2, r0
 800d030:	4313      	orrs	r3, r2
 800d032:	3401      	adds	r4, #1
 800d034:	9304      	str	r3, [sp, #16]
 800d036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d03a:	4829      	ldr	r0, [pc, #164]	@ (800d0e0 <_vfiprintf_r+0x220>)
 800d03c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d040:	2206      	movs	r2, #6
 800d042:	f7f3 f8cd 	bl	80001e0 <memchr>
 800d046:	2800      	cmp	r0, #0
 800d048:	d03f      	beq.n	800d0ca <_vfiprintf_r+0x20a>
 800d04a:	4b26      	ldr	r3, [pc, #152]	@ (800d0e4 <_vfiprintf_r+0x224>)
 800d04c:	bb1b      	cbnz	r3, 800d096 <_vfiprintf_r+0x1d6>
 800d04e:	9b03      	ldr	r3, [sp, #12]
 800d050:	3307      	adds	r3, #7
 800d052:	f023 0307 	bic.w	r3, r3, #7
 800d056:	3308      	adds	r3, #8
 800d058:	9303      	str	r3, [sp, #12]
 800d05a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d05c:	443b      	add	r3, r7
 800d05e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d060:	e76a      	b.n	800cf38 <_vfiprintf_r+0x78>
 800d062:	fb0c 3202 	mla	r2, ip, r2, r3
 800d066:	460c      	mov	r4, r1
 800d068:	2001      	movs	r0, #1
 800d06a:	e7a8      	b.n	800cfbe <_vfiprintf_r+0xfe>
 800d06c:	2300      	movs	r3, #0
 800d06e:	3401      	adds	r4, #1
 800d070:	9305      	str	r3, [sp, #20]
 800d072:	4619      	mov	r1, r3
 800d074:	f04f 0c0a 	mov.w	ip, #10
 800d078:	4620      	mov	r0, r4
 800d07a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d07e:	3a30      	subs	r2, #48	@ 0x30
 800d080:	2a09      	cmp	r2, #9
 800d082:	d903      	bls.n	800d08c <_vfiprintf_r+0x1cc>
 800d084:	2b00      	cmp	r3, #0
 800d086:	d0c6      	beq.n	800d016 <_vfiprintf_r+0x156>
 800d088:	9105      	str	r1, [sp, #20]
 800d08a:	e7c4      	b.n	800d016 <_vfiprintf_r+0x156>
 800d08c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d090:	4604      	mov	r4, r0
 800d092:	2301      	movs	r3, #1
 800d094:	e7f0      	b.n	800d078 <_vfiprintf_r+0x1b8>
 800d096:	ab03      	add	r3, sp, #12
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	462a      	mov	r2, r5
 800d09c:	4b12      	ldr	r3, [pc, #72]	@ (800d0e8 <_vfiprintf_r+0x228>)
 800d09e:	a904      	add	r1, sp, #16
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	f7fd fbaf 	bl	800a804 <_printf_float>
 800d0a6:	4607      	mov	r7, r0
 800d0a8:	1c78      	adds	r0, r7, #1
 800d0aa:	d1d6      	bne.n	800d05a <_vfiprintf_r+0x19a>
 800d0ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0ae:	07d9      	lsls	r1, r3, #31
 800d0b0:	d405      	bmi.n	800d0be <_vfiprintf_r+0x1fe>
 800d0b2:	89ab      	ldrh	r3, [r5, #12]
 800d0b4:	059a      	lsls	r2, r3, #22
 800d0b6:	d402      	bmi.n	800d0be <_vfiprintf_r+0x1fe>
 800d0b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0ba:	f7fe f929 	bl	800b310 <__retarget_lock_release_recursive>
 800d0be:	89ab      	ldrh	r3, [r5, #12]
 800d0c0:	065b      	lsls	r3, r3, #25
 800d0c2:	f53f af1f 	bmi.w	800cf04 <_vfiprintf_r+0x44>
 800d0c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0c8:	e71e      	b.n	800cf08 <_vfiprintf_r+0x48>
 800d0ca:	ab03      	add	r3, sp, #12
 800d0cc:	9300      	str	r3, [sp, #0]
 800d0ce:	462a      	mov	r2, r5
 800d0d0:	4b05      	ldr	r3, [pc, #20]	@ (800d0e8 <_vfiprintf_r+0x228>)
 800d0d2:	a904      	add	r1, sp, #16
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	f7fd fe2d 	bl	800ad34 <_printf_i>
 800d0da:	e7e4      	b.n	800d0a6 <_vfiprintf_r+0x1e6>
 800d0dc:	0800d980 	.word	0x0800d980
 800d0e0:	0800d98a 	.word	0x0800d98a
 800d0e4:	0800a805 	.word	0x0800a805
 800d0e8:	0800ce9d 	.word	0x0800ce9d
 800d0ec:	0800d986 	.word	0x0800d986

0800d0f0 <__swbuf_r>:
 800d0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f2:	460e      	mov	r6, r1
 800d0f4:	4614      	mov	r4, r2
 800d0f6:	4605      	mov	r5, r0
 800d0f8:	b118      	cbz	r0, 800d102 <__swbuf_r+0x12>
 800d0fa:	6a03      	ldr	r3, [r0, #32]
 800d0fc:	b90b      	cbnz	r3, 800d102 <__swbuf_r+0x12>
 800d0fe:	f7fd ffc5 	bl	800b08c <__sinit>
 800d102:	69a3      	ldr	r3, [r4, #24]
 800d104:	60a3      	str	r3, [r4, #8]
 800d106:	89a3      	ldrh	r3, [r4, #12]
 800d108:	071a      	lsls	r2, r3, #28
 800d10a:	d501      	bpl.n	800d110 <__swbuf_r+0x20>
 800d10c:	6923      	ldr	r3, [r4, #16]
 800d10e:	b943      	cbnz	r3, 800d122 <__swbuf_r+0x32>
 800d110:	4621      	mov	r1, r4
 800d112:	4628      	mov	r0, r5
 800d114:	f000 f82a 	bl	800d16c <__swsetup_r>
 800d118:	b118      	cbz	r0, 800d122 <__swbuf_r+0x32>
 800d11a:	f04f 37ff 	mov.w	r7, #4294967295
 800d11e:	4638      	mov	r0, r7
 800d120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	6922      	ldr	r2, [r4, #16]
 800d126:	1a98      	subs	r0, r3, r2
 800d128:	6963      	ldr	r3, [r4, #20]
 800d12a:	b2f6      	uxtb	r6, r6
 800d12c:	4283      	cmp	r3, r0
 800d12e:	4637      	mov	r7, r6
 800d130:	dc05      	bgt.n	800d13e <__swbuf_r+0x4e>
 800d132:	4621      	mov	r1, r4
 800d134:	4628      	mov	r0, r5
 800d136:	f7ff fd99 	bl	800cc6c <_fflush_r>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d1ed      	bne.n	800d11a <__swbuf_r+0x2a>
 800d13e:	68a3      	ldr	r3, [r4, #8]
 800d140:	3b01      	subs	r3, #1
 800d142:	60a3      	str	r3, [r4, #8]
 800d144:	6823      	ldr	r3, [r4, #0]
 800d146:	1c5a      	adds	r2, r3, #1
 800d148:	6022      	str	r2, [r4, #0]
 800d14a:	701e      	strb	r6, [r3, #0]
 800d14c:	6962      	ldr	r2, [r4, #20]
 800d14e:	1c43      	adds	r3, r0, #1
 800d150:	429a      	cmp	r2, r3
 800d152:	d004      	beq.n	800d15e <__swbuf_r+0x6e>
 800d154:	89a3      	ldrh	r3, [r4, #12]
 800d156:	07db      	lsls	r3, r3, #31
 800d158:	d5e1      	bpl.n	800d11e <__swbuf_r+0x2e>
 800d15a:	2e0a      	cmp	r6, #10
 800d15c:	d1df      	bne.n	800d11e <__swbuf_r+0x2e>
 800d15e:	4621      	mov	r1, r4
 800d160:	4628      	mov	r0, r5
 800d162:	f7ff fd83 	bl	800cc6c <_fflush_r>
 800d166:	2800      	cmp	r0, #0
 800d168:	d0d9      	beq.n	800d11e <__swbuf_r+0x2e>
 800d16a:	e7d6      	b.n	800d11a <__swbuf_r+0x2a>

0800d16c <__swsetup_r>:
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	4b29      	ldr	r3, [pc, #164]	@ (800d214 <__swsetup_r+0xa8>)
 800d170:	4605      	mov	r5, r0
 800d172:	6818      	ldr	r0, [r3, #0]
 800d174:	460c      	mov	r4, r1
 800d176:	b118      	cbz	r0, 800d180 <__swsetup_r+0x14>
 800d178:	6a03      	ldr	r3, [r0, #32]
 800d17a:	b90b      	cbnz	r3, 800d180 <__swsetup_r+0x14>
 800d17c:	f7fd ff86 	bl	800b08c <__sinit>
 800d180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d184:	0719      	lsls	r1, r3, #28
 800d186:	d422      	bmi.n	800d1ce <__swsetup_r+0x62>
 800d188:	06da      	lsls	r2, r3, #27
 800d18a:	d407      	bmi.n	800d19c <__swsetup_r+0x30>
 800d18c:	2209      	movs	r2, #9
 800d18e:	602a      	str	r2, [r5, #0]
 800d190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d194:	81a3      	strh	r3, [r4, #12]
 800d196:	f04f 30ff 	mov.w	r0, #4294967295
 800d19a:	e033      	b.n	800d204 <__swsetup_r+0x98>
 800d19c:	0758      	lsls	r0, r3, #29
 800d19e:	d512      	bpl.n	800d1c6 <__swsetup_r+0x5a>
 800d1a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1a2:	b141      	cbz	r1, 800d1b6 <__swsetup_r+0x4a>
 800d1a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1a8:	4299      	cmp	r1, r3
 800d1aa:	d002      	beq.n	800d1b2 <__swsetup_r+0x46>
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	f7fe feff 	bl	800bfb0 <_free_r>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1b6:	89a3      	ldrh	r3, [r4, #12]
 800d1b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d1bc:	81a3      	strh	r3, [r4, #12]
 800d1be:	2300      	movs	r3, #0
 800d1c0:	6063      	str	r3, [r4, #4]
 800d1c2:	6923      	ldr	r3, [r4, #16]
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	89a3      	ldrh	r3, [r4, #12]
 800d1c8:	f043 0308 	orr.w	r3, r3, #8
 800d1cc:	81a3      	strh	r3, [r4, #12]
 800d1ce:	6923      	ldr	r3, [r4, #16]
 800d1d0:	b94b      	cbnz	r3, 800d1e6 <__swsetup_r+0x7a>
 800d1d2:	89a3      	ldrh	r3, [r4, #12]
 800d1d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d1d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1dc:	d003      	beq.n	800d1e6 <__swsetup_r+0x7a>
 800d1de:	4621      	mov	r1, r4
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	f000 f883 	bl	800d2ec <__smakebuf_r>
 800d1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ea:	f013 0201 	ands.w	r2, r3, #1
 800d1ee:	d00a      	beq.n	800d206 <__swsetup_r+0x9a>
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	60a2      	str	r2, [r4, #8]
 800d1f4:	6962      	ldr	r2, [r4, #20]
 800d1f6:	4252      	negs	r2, r2
 800d1f8:	61a2      	str	r2, [r4, #24]
 800d1fa:	6922      	ldr	r2, [r4, #16]
 800d1fc:	b942      	cbnz	r2, 800d210 <__swsetup_r+0xa4>
 800d1fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d202:	d1c5      	bne.n	800d190 <__swsetup_r+0x24>
 800d204:	bd38      	pop	{r3, r4, r5, pc}
 800d206:	0799      	lsls	r1, r3, #30
 800d208:	bf58      	it	pl
 800d20a:	6962      	ldrpl	r2, [r4, #20]
 800d20c:	60a2      	str	r2, [r4, #8]
 800d20e:	e7f4      	b.n	800d1fa <__swsetup_r+0x8e>
 800d210:	2000      	movs	r0, #0
 800d212:	e7f7      	b.n	800d204 <__swsetup_r+0x98>
 800d214:	20000108 	.word	0x20000108

0800d218 <_raise_r>:
 800d218:	291f      	cmp	r1, #31
 800d21a:	b538      	push	{r3, r4, r5, lr}
 800d21c:	4605      	mov	r5, r0
 800d21e:	460c      	mov	r4, r1
 800d220:	d904      	bls.n	800d22c <_raise_r+0x14>
 800d222:	2316      	movs	r3, #22
 800d224:	6003      	str	r3, [r0, #0]
 800d226:	f04f 30ff 	mov.w	r0, #4294967295
 800d22a:	bd38      	pop	{r3, r4, r5, pc}
 800d22c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d22e:	b112      	cbz	r2, 800d236 <_raise_r+0x1e>
 800d230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d234:	b94b      	cbnz	r3, 800d24a <_raise_r+0x32>
 800d236:	4628      	mov	r0, r5
 800d238:	f000 f830 	bl	800d29c <_getpid_r>
 800d23c:	4622      	mov	r2, r4
 800d23e:	4601      	mov	r1, r0
 800d240:	4628      	mov	r0, r5
 800d242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d246:	f000 b817 	b.w	800d278 <_kill_r>
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d00a      	beq.n	800d264 <_raise_r+0x4c>
 800d24e:	1c59      	adds	r1, r3, #1
 800d250:	d103      	bne.n	800d25a <_raise_r+0x42>
 800d252:	2316      	movs	r3, #22
 800d254:	6003      	str	r3, [r0, #0]
 800d256:	2001      	movs	r0, #1
 800d258:	e7e7      	b.n	800d22a <_raise_r+0x12>
 800d25a:	2100      	movs	r1, #0
 800d25c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d260:	4620      	mov	r0, r4
 800d262:	4798      	blx	r3
 800d264:	2000      	movs	r0, #0
 800d266:	e7e0      	b.n	800d22a <_raise_r+0x12>

0800d268 <raise>:
 800d268:	4b02      	ldr	r3, [pc, #8]	@ (800d274 <raise+0xc>)
 800d26a:	4601      	mov	r1, r0
 800d26c:	6818      	ldr	r0, [r3, #0]
 800d26e:	f7ff bfd3 	b.w	800d218 <_raise_r>
 800d272:	bf00      	nop
 800d274:	20000108 	.word	0x20000108

0800d278 <_kill_r>:
 800d278:	b538      	push	{r3, r4, r5, lr}
 800d27a:	4d07      	ldr	r5, [pc, #28]	@ (800d298 <_kill_r+0x20>)
 800d27c:	2300      	movs	r3, #0
 800d27e:	4604      	mov	r4, r0
 800d280:	4608      	mov	r0, r1
 800d282:	4611      	mov	r1, r2
 800d284:	602b      	str	r3, [r5, #0]
 800d286:	f7f4 fc67 	bl	8001b58 <_kill>
 800d28a:	1c43      	adds	r3, r0, #1
 800d28c:	d102      	bne.n	800d294 <_kill_r+0x1c>
 800d28e:	682b      	ldr	r3, [r5, #0]
 800d290:	b103      	cbz	r3, 800d294 <_kill_r+0x1c>
 800d292:	6023      	str	r3, [r4, #0]
 800d294:	bd38      	pop	{r3, r4, r5, pc}
 800d296:	bf00      	nop
 800d298:	20001a58 	.word	0x20001a58

0800d29c <_getpid_r>:
 800d29c:	f7f4 bc54 	b.w	8001b48 <_getpid>

0800d2a0 <__swhatbuf_r>:
 800d2a0:	b570      	push	{r4, r5, r6, lr}
 800d2a2:	460c      	mov	r4, r1
 800d2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2a8:	2900      	cmp	r1, #0
 800d2aa:	b096      	sub	sp, #88	@ 0x58
 800d2ac:	4615      	mov	r5, r2
 800d2ae:	461e      	mov	r6, r3
 800d2b0:	da0d      	bge.n	800d2ce <__swhatbuf_r+0x2e>
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d2b8:	f04f 0100 	mov.w	r1, #0
 800d2bc:	bf14      	ite	ne
 800d2be:	2340      	movne	r3, #64	@ 0x40
 800d2c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	6031      	str	r1, [r6, #0]
 800d2c8:	602b      	str	r3, [r5, #0]
 800d2ca:	b016      	add	sp, #88	@ 0x58
 800d2cc:	bd70      	pop	{r4, r5, r6, pc}
 800d2ce:	466a      	mov	r2, sp
 800d2d0:	f000 f848 	bl	800d364 <_fstat_r>
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	dbec      	blt.n	800d2b2 <__swhatbuf_r+0x12>
 800d2d8:	9901      	ldr	r1, [sp, #4]
 800d2da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2e2:	4259      	negs	r1, r3
 800d2e4:	4159      	adcs	r1, r3
 800d2e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2ea:	e7eb      	b.n	800d2c4 <__swhatbuf_r+0x24>

0800d2ec <__smakebuf_r>:
 800d2ec:	898b      	ldrh	r3, [r1, #12]
 800d2ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2f0:	079d      	lsls	r5, r3, #30
 800d2f2:	4606      	mov	r6, r0
 800d2f4:	460c      	mov	r4, r1
 800d2f6:	d507      	bpl.n	800d308 <__smakebuf_r+0x1c>
 800d2f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d2fc:	6023      	str	r3, [r4, #0]
 800d2fe:	6123      	str	r3, [r4, #16]
 800d300:	2301      	movs	r3, #1
 800d302:	6163      	str	r3, [r4, #20]
 800d304:	b003      	add	sp, #12
 800d306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d308:	ab01      	add	r3, sp, #4
 800d30a:	466a      	mov	r2, sp
 800d30c:	f7ff ffc8 	bl	800d2a0 <__swhatbuf_r>
 800d310:	9f00      	ldr	r7, [sp, #0]
 800d312:	4605      	mov	r5, r0
 800d314:	4639      	mov	r1, r7
 800d316:	4630      	mov	r0, r6
 800d318:	f7fe febe 	bl	800c098 <_malloc_r>
 800d31c:	b948      	cbnz	r0, 800d332 <__smakebuf_r+0x46>
 800d31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d322:	059a      	lsls	r2, r3, #22
 800d324:	d4ee      	bmi.n	800d304 <__smakebuf_r+0x18>
 800d326:	f023 0303 	bic.w	r3, r3, #3
 800d32a:	f043 0302 	orr.w	r3, r3, #2
 800d32e:	81a3      	strh	r3, [r4, #12]
 800d330:	e7e2      	b.n	800d2f8 <__smakebuf_r+0xc>
 800d332:	89a3      	ldrh	r3, [r4, #12]
 800d334:	6020      	str	r0, [r4, #0]
 800d336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d33a:	81a3      	strh	r3, [r4, #12]
 800d33c:	9b01      	ldr	r3, [sp, #4]
 800d33e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d342:	b15b      	cbz	r3, 800d35c <__smakebuf_r+0x70>
 800d344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d348:	4630      	mov	r0, r6
 800d34a:	f000 f81d 	bl	800d388 <_isatty_r>
 800d34e:	b128      	cbz	r0, 800d35c <__smakebuf_r+0x70>
 800d350:	89a3      	ldrh	r3, [r4, #12]
 800d352:	f023 0303 	bic.w	r3, r3, #3
 800d356:	f043 0301 	orr.w	r3, r3, #1
 800d35a:	81a3      	strh	r3, [r4, #12]
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	431d      	orrs	r5, r3
 800d360:	81a5      	strh	r5, [r4, #12]
 800d362:	e7cf      	b.n	800d304 <__smakebuf_r+0x18>

0800d364 <_fstat_r>:
 800d364:	b538      	push	{r3, r4, r5, lr}
 800d366:	4d07      	ldr	r5, [pc, #28]	@ (800d384 <_fstat_r+0x20>)
 800d368:	2300      	movs	r3, #0
 800d36a:	4604      	mov	r4, r0
 800d36c:	4608      	mov	r0, r1
 800d36e:	4611      	mov	r1, r2
 800d370:	602b      	str	r3, [r5, #0]
 800d372:	f7f4 fc51 	bl	8001c18 <_fstat>
 800d376:	1c43      	adds	r3, r0, #1
 800d378:	d102      	bne.n	800d380 <_fstat_r+0x1c>
 800d37a:	682b      	ldr	r3, [r5, #0]
 800d37c:	b103      	cbz	r3, 800d380 <_fstat_r+0x1c>
 800d37e:	6023      	str	r3, [r4, #0]
 800d380:	bd38      	pop	{r3, r4, r5, pc}
 800d382:	bf00      	nop
 800d384:	20001a58 	.word	0x20001a58

0800d388 <_isatty_r>:
 800d388:	b538      	push	{r3, r4, r5, lr}
 800d38a:	4d06      	ldr	r5, [pc, #24]	@ (800d3a4 <_isatty_r+0x1c>)
 800d38c:	2300      	movs	r3, #0
 800d38e:	4604      	mov	r4, r0
 800d390:	4608      	mov	r0, r1
 800d392:	602b      	str	r3, [r5, #0]
 800d394:	f7f4 fc50 	bl	8001c38 <_isatty>
 800d398:	1c43      	adds	r3, r0, #1
 800d39a:	d102      	bne.n	800d3a2 <_isatty_r+0x1a>
 800d39c:	682b      	ldr	r3, [r5, #0]
 800d39e:	b103      	cbz	r3, 800d3a2 <_isatty_r+0x1a>
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	bd38      	pop	{r3, r4, r5, pc}
 800d3a4:	20001a58 	.word	0x20001a58

0800d3a8 <_init>:
 800d3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3aa:	bf00      	nop
 800d3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ae:	bc08      	pop	{r3}
 800d3b0:	469e      	mov	lr, r3
 800d3b2:	4770      	bx	lr

0800d3b4 <_fini>:
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b6:	bf00      	nop
 800d3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ba:	bc08      	pop	{r3}
 800d3bc:	469e      	mov	lr, r3
 800d3be:	4770      	bx	lr
