
TrackerProj_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  08012698  08012698  00013698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013490  08013490  000152e0  2**0
                  CONTENTS
  4 .ARM          00000008  08013490  08013490  00014490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013498  08013498  000152e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013498  08013498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801349c  0801349c  0001449c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e0  20000000  080134a0  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b5c  200002e0  08013780  000152e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e3c  08013780  00015e3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000152e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001968e  00000000  00000000  00015310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004052  00000000  00000000  0002e99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  000329f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ed  00000000  00000000  00033fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab41  00000000  00000000  000350c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bac9  00000000  00000000  0004fc06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094b68  00000000  00000000  0006b6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100237  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074ec  00000000  00000000  0010027c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00107768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e0 	.word	0x200002e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012680 	.word	0x08012680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e4 	.word	0x200002e4
 80001dc:	08012680 	.word	0x08012680

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <gsm_init>:
extern uint32_t GPS_timer;
extern uint32_t messageTIM;
//****************************************


int gsm_init(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	//Can setup power pin to switch on the sim800
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2,(uint8_t*)RX_Buffer_GSM, RX_BUFFER_SIZE_GSM);
 8000ff8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ffc:	4934      	ldr	r1, [pc, #208]	@ (80010d0 <gsm_init+0xdc>)
 8000ffe:	4835      	ldr	r0, [pc, #212]	@ (80010d4 <gsm_init+0xe0>)
 8001000:	f006 fb5e 	bl	80076c0 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_Delay(100);
 8001004:	2064      	movs	r0, #100	@ 0x64
 8001006:	f003 f8e3 	bl	80041d0 <HAL_Delay>

	if((gsm_sendCommand(test, "OK\r\n"))==GsmError){ //This switches the sim800 ON if it is off (Also used as a reset)
 800100a:	4933      	ldr	r1, [pc, #204]	@ (80010d8 <gsm_init+0xe4>)
 800100c:	4833      	ldr	r0, [pc, #204]	@ (80010dc <gsm_init+0xe8>)
 800100e:	f000 f873 	bl	80010f8 <gsm_sendCommand>
 8001012:	4603      	mov	r3, r0
 8001014:	2b01      	cmp	r3, #1
 8001016:	d144      	bne.n	80010a2 <gsm_init+0xae>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800101e:	4830      	ldr	r0, [pc, #192]	@ (80010e0 <gsm_init+0xec>)
 8001020:	f003 ff92 	bl	8004f48 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8001024:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001028:	f003 f8d2 	bl	80041d0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001032:	482b      	ldr	r0, [pc, #172]	@ (80010e0 <gsm_init+0xec>)
 8001034:	f003 ff88 	bl	8004f48 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8001038:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800103c:	f003 f8c8 	bl	80041d0 <HAL_Delay>

	if(gsm_sendCommand(test, "OK\r\n")==GsmError){
 8001040:	4925      	ldr	r1, [pc, #148]	@ (80010d8 <gsm_init+0xe4>)
 8001042:	4826      	ldr	r0, [pc, #152]	@ (80010dc <gsm_init+0xe8>)
 8001044:	f000 f858 	bl	80010f8 <gsm_sendCommand>
 8001048:	4603      	mov	r3, r0
 800104a:	2b01      	cmp	r3, #1
 800104c:	d113      	bne.n	8001076 <gsm_init+0x82>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001054:	4822      	ldr	r0, [pc, #136]	@ (80010e0 <gsm_init+0xec>)
 8001056:	f003 ff77 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 800105a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800105e:	f003 f8b7 	bl	80041d0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001068:	481d      	ldr	r0, [pc, #116]	@ (80010e0 <gsm_init+0xec>)
 800106a:	f003 ff6d 	bl	8004f48 <HAL_GPIO_WritePin>
			HAL_Delay(2000);
 800106e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001072:	f003 f8ad 	bl	80041d0 <HAL_Delay>
	}
		//gsm_sendCommand("AT+CSCLK=0","OK");
		gsm_sendCommand(setBaudRate, "OK\r\n");
 8001076:	4918      	ldr	r1, [pc, #96]	@ (80010d8 <gsm_init+0xe4>)
 8001078:	481a      	ldr	r0, [pc, #104]	@ (80010e4 <gsm_init+0xf0>)
 800107a:	f000 f83d 	bl	80010f8 <gsm_sendCommand>
		gsm_sendCommand(EnableMessageNotification, "OK\r\n" ); //enable SMS message notifications
 800107e:	4916      	ldr	r1, [pc, #88]	@ (80010d8 <gsm_init+0xe4>)
 8001080:	4819      	ldr	r0, [pc, #100]	@ (80010e8 <gsm_init+0xf4>)
 8001082:	f000 f839 	bl	80010f8 <gsm_sendCommand>
		gsm_sendCommand(SmsAlphabet,"OK\r\n");
 8001086:	4914      	ldr	r1, [pc, #80]	@ (80010d8 <gsm_init+0xe4>)
 8001088:	4818      	ldr	r0, [pc, #96]	@ (80010ec <gsm_init+0xf8>)
 800108a:	f000 f835 	bl	80010f8 <gsm_sendCommand>
		gsm_sendCommand(keepSetting, "OK\r\n");
 800108e:	4912      	ldr	r1, [pc, #72]	@ (80010d8 <gsm_init+0xe4>)
 8001090:	4817      	ldr	r0, [pc, #92]	@ (80010f0 <gsm_init+0xfc>)
 8001092:	f000 f831 	bl	80010f8 <gsm_sendCommand>
		gsm_sendCommand(NetworkTest, "OK\r\n"); //check that messages can be sent an received on the network
 8001096:	4910      	ldr	r1, [pc, #64]	@ (80010d8 <gsm_init+0xe4>)
 8001098:	4816      	ldr	r0, [pc, #88]	@ (80010f4 <gsm_init+0x100>)
 800109a:	f000 f82d 	bl	80010f8 <gsm_sendCommand>
		return Gsmok;
 800109e:	2300      	movs	r3, #0
 80010a0:	e014      	b.n	80010cc <gsm_init+0xd8>
	}

	else{
	//gsm_sendCommand("AT+CSCLK=0","OK");
	gsm_sendCommand(setBaudRate, "OK\r\n");
 80010a2:	490d      	ldr	r1, [pc, #52]	@ (80010d8 <gsm_init+0xe4>)
 80010a4:	480f      	ldr	r0, [pc, #60]	@ (80010e4 <gsm_init+0xf0>)
 80010a6:	f000 f827 	bl	80010f8 <gsm_sendCommand>
	gsm_sendCommand(EnableMessageNotification, "OK\r\n" ); //enable SMS message notifications
 80010aa:	490b      	ldr	r1, [pc, #44]	@ (80010d8 <gsm_init+0xe4>)
 80010ac:	480e      	ldr	r0, [pc, #56]	@ (80010e8 <gsm_init+0xf4>)
 80010ae:	f000 f823 	bl	80010f8 <gsm_sendCommand>
	gsm_sendCommand(SmsAlphabet,"OK\r\n");
 80010b2:	4909      	ldr	r1, [pc, #36]	@ (80010d8 <gsm_init+0xe4>)
 80010b4:	480d      	ldr	r0, [pc, #52]	@ (80010ec <gsm_init+0xf8>)
 80010b6:	f000 f81f 	bl	80010f8 <gsm_sendCommand>
	gsm_sendCommand(keepSetting, "OK\r\n");
 80010ba:	4907      	ldr	r1, [pc, #28]	@ (80010d8 <gsm_init+0xe4>)
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <gsm_init+0xfc>)
 80010be:	f000 f81b 	bl	80010f8 <gsm_sendCommand>
	gsm_sendCommand(NetworkTest, "OK\r\n"); //check that messages can be sent an received on the network
 80010c2:	4905      	ldr	r1, [pc, #20]	@ (80010d8 <gsm_init+0xe4>)
 80010c4:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <gsm_init+0x100>)
 80010c6:	f000 f817 	bl	80010f8 <gsm_sendCommand>
	return Gsmok;
 80010ca:	2300      	movs	r3, #0
	}
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000304 	.word	0x20000304
 80010d4:	200005d0 	.word	0x200005d0
 80010d8:	08012698 	.word	0x08012698
 80010dc:	080126a0 	.word	0x080126a0
 80010e0:	40020400 	.word	0x40020400
 80010e4:	080126a8 	.word	0x080126a8
 80010e8:	080126b8 	.word	0x080126b8
 80010ec:	080126cc 	.word	0x080126cc
 80010f0:	080126dc 	.word	0x080126dc
 80010f4:	080126e4 	.word	0x080126e4

080010f8 <gsm_sendCommand>:


//borrowed and modified code: https://github.com/ENG-EDISON/STM32_Tracker/blob/main/Core/Src/SIM900.c#L58
int gsm_sendCommand(char *Command,char *response) //Sends command via UART and checks response
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	@ 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2,(uint8_t*)RX_Buffer_GSM, RX_BUFFER_SIZE_GSM);
 8001102:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001106:	4977      	ldr	r1, [pc, #476]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 8001108:	4877      	ldr	r0, [pc, #476]	@ (80012e8 <gsm_sendCommand+0x1f0>)
 800110a:	f006 fad9 	bl	80076c0 <HAL_UARTEx_ReceiveToIdle_DMA>

	char *P= NULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
	char *err= NULL;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
	char *GsmRead= NULL;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
	char *NewMsg= NULL;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
	char *Batt = NULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
	char *GPRS = NULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]

	HAL_UART_Transmit_DMA(&huart2,(uint8_t*)Command,strlen(Command)); //transmit command
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff f8aa 	bl	8000280 <strlen>
 800112c:	4603      	mov	r3, r0
 800112e:	b29b      	uxth	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	486c      	ldr	r0, [pc, #432]	@ (80012e8 <gsm_sendCommand+0x1f0>)
 8001136:	f006 fa53 	bl	80075e0 <HAL_UART_Transmit_DMA>

	timer2 = HAL_GetTick();
 800113a:	f003 f83d 	bl	80041b8 <HAL_GetTick>
 800113e:	4603      	mov	r3, r0
 8001140:	4a6a      	ldr	r2, [pc, #424]	@ (80012ec <gsm_sendCommand+0x1f4>)
 8001142:	6013      	str	r3, [r2, #0]
	uint16_t time_out = 7000;
 8001144:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8001148:	82fb      	strh	r3, [r7, #22]

	if(sendMessageFlag == 1){
 800114a:	4b69      	ldr	r3, [pc, #420]	@ (80012f0 <gsm_sendCommand+0x1f8>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d17e      	bne.n	8001250 <gsm_sendCommand+0x158>
		time_out = 10000;
 8001152:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001156:	82fb      	strh	r3, [r7, #22]
	}

	while(*P!=response[0])	//Waits 7 second for response therefor delays are not needed
 8001158:	e07a      	b.n	8001250 <gsm_sendCommand+0x158>
	{
		P=strstr(RX_Buffer_GSM,response); //What is the message returned type?
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	4861      	ldr	r0, [pc, #388]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 800115e:	f00d fa0b 	bl	800e578 <strstr>
 8001162:	6278      	str	r0, [r7, #36]	@ 0x24
		err=strstr(RX_Buffer_GSM,"ERROR\r\n");
 8001164:	4963      	ldr	r1, [pc, #396]	@ (80012f4 <gsm_sendCommand+0x1fc>)
 8001166:	485f      	ldr	r0, [pc, #380]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 8001168:	f00d fa06 	bl	800e578 <strstr>
 800116c:	6138      	str	r0, [r7, #16]
		NewMsg=strstr(RX_Buffer_GSM,"+CMGR:");
 800116e:	4962      	ldr	r1, [pc, #392]	@ (80012f8 <gsm_sendCommand+0x200>)
 8001170:	485c      	ldr	r0, [pc, #368]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 8001172:	f00d fa01 	bl	800e578 <strstr>
 8001176:	6238      	str	r0, [r7, #32]
		Batt=strstr(RX_Buffer_GSM,"+CBC:");
 8001178:	4960      	ldr	r1, [pc, #384]	@ (80012fc <gsm_sendCommand+0x204>)
 800117a:	485a      	ldr	r0, [pc, #360]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 800117c:	f00d f9fc 	bl	800e578 <strstr>
 8001180:	61f8      	str	r0, [r7, #28]
		GsmRead=strstr(RX_Buffer_GSM,"PSUTTZ");
 8001182:	495f      	ldr	r1, [pc, #380]	@ (8001300 <gsm_sendCommand+0x208>)
 8001184:	4857      	ldr	r0, [pc, #348]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 8001186:	f00d f9f7 	bl	800e578 <strstr>
 800118a:	60f8      	str	r0, [r7, #12]
		GPRS = strstr(RX_Buffer_GSM,"+CLBS:");
 800118c:	495d      	ldr	r1, [pc, #372]	@ (8001304 <gsm_sendCommand+0x20c>)
 800118e:	4855      	ldr	r0, [pc, #340]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 8001190:	f00d f9f2 	bl	800e578 <strstr>
 8001194:	61b8      	str	r0, [r7, #24]

		if(*err=='E'){ //SIM800 error
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b45      	cmp	r3, #69	@ 0x45
 800119c:	d118      	bne.n	80011d0 <gsm_sendCommand+0xd8>
			if(newMessageFlag == 0){
 800119e:	4b5a      	ldr	r3, [pc, #360]	@ (8001308 <gsm_sendCommand+0x210>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d108      	bne.n	80011b8 <gsm_sendCommand+0xc0>
				memset(RX_Buffer_GSM,'\0',strlen(RX_Buffer_GSM));
 80011a6:	484f      	ldr	r0, [pc, #316]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 80011a8:	f7ff f86a 	bl	8000280 <strlen>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	2100      	movs	r1, #0
 80011b2:	484c      	ldr	r0, [pc, #304]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 80011b4:	f00d f949 	bl	800e44a <memset>
			}
		    CDC_Transmit_FS((uint8_t *)"Error\r\n", 7); //debug terminal
 80011b8:	2107      	movs	r1, #7
 80011ba:	4854      	ldr	r0, [pc, #336]	@ (800130c <gsm_sendCommand+0x214>)
 80011bc:	f00a ff96 	bl	800c0ec <CDC_Transmit_FS>
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2,(uint8_t*)RX_Buffer_GSM, RX_BUFFER_SIZE_GSM);
 80011c0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80011c4:	4947      	ldr	r1, [pc, #284]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 80011c6:	4848      	ldr	r0, [pc, #288]	@ (80012e8 <gsm_sendCommand+0x1f0>)
 80011c8:	f006 fa7a 	bl	80076c0 <HAL_UARTEx_ReceiveToIdle_DMA>
			return GsmError;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e085      	b.n	80012dc <gsm_sendCommand+0x1e4>
		}

		if(HAL_GetTick() - timer2 > time_out){ //7s time-out error
 80011d0:	f002 fff2 	bl	80041b8 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4b45      	ldr	r3, [pc, #276]	@ (80012ec <gsm_sendCommand+0x1f4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	1ad2      	subs	r2, r2, r3
 80011dc:	8afb      	ldrh	r3, [r7, #22]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d92a      	bls.n	8001238 <gsm_sendCommand+0x140>
			if(newMessageFlag == 0){
 80011e2:	4b49      	ldr	r3, [pc, #292]	@ (8001308 <gsm_sendCommand+0x210>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d108      	bne.n	80011fc <gsm_sendCommand+0x104>
			memset(RX_Buffer_GSM,'\0',strlen(RX_Buffer_GSM));
 80011ea:	483e      	ldr	r0, [pc, #248]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 80011ec:	f7ff f848 	bl	8000280 <strlen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	483b      	ldr	r0, [pc, #236]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 80011f8:	f00d f927 	bl	800e44a <memset>
			}
			if(sendMessageFlag == 0){
 80011fc:	4b3c      	ldr	r3, [pc, #240]	@ (80012f0 <gsm_sendCommand+0x1f8>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d104      	bne.n	800120e <gsm_sendCommand+0x116>
			CDC_Transmit_FS((uint8_t *)"Time Out Error\r\n", 15); //debug terminal
 8001204:	210f      	movs	r1, #15
 8001206:	4842      	ldr	r0, [pc, #264]	@ (8001310 <gsm_sendCommand+0x218>)
 8001208:	f00a ff70 	bl	800c0ec <CDC_Transmit_FS>
 800120c:	e00c      	b.n	8001228 <gsm_sendCommand+0x130>
			}
			else if(sendMessageFlag != 0){
 800120e:	4b38      	ldr	r3, [pc, #224]	@ (80012f0 <gsm_sendCommand+0x1f8>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d008      	beq.n	8001228 <gsm_sendCommand+0x130>
			CDC_Transmit_FS((uint8_t *)response, strlen(response)); //debug terminal
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f7ff f832 	bl	8000280 <strlen>
 800121c:	4603      	mov	r3, r0
 800121e:	b29b      	uxth	r3, r3
 8001220:	4619      	mov	r1, r3
 8001222:	6838      	ldr	r0, [r7, #0]
 8001224:	f00a ff62 	bl	800c0ec <CDC_Transmit_FS>
			}
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2,(uint8_t*)RX_Buffer_GSM, RX_BUFFER_SIZE_GSM);
 8001228:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800122c:	492d      	ldr	r1, [pc, #180]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 800122e:	482e      	ldr	r0, [pc, #184]	@ (80012e8 <gsm_sendCommand+0x1f0>)
 8001230:	f006 fa46 	bl	80076c0 <HAL_UARTEx_ReceiveToIdle_DMA>
			return GsmError;
 8001234:	2301      	movs	r3, #1
 8001236:	e051      	b.n	80012dc <gsm_sendCommand+0x1e4>
		}

		if(*GsmRead=='P')
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b50      	cmp	r3, #80	@ 0x50
 800123e:	d107      	bne.n	8001250 <gsm_sendCommand+0x158>
				{
				HAL_UARTEx_ReceiveToIdle_DMA(&huart2,(uint8_t*)RX_Buffer_GSM, RX_BUFFER_SIZE_GSM);
 8001240:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001244:	4927      	ldr	r1, [pc, #156]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 8001246:	4828      	ldr	r0, [pc, #160]	@ (80012e8 <gsm_sendCommand+0x1f0>)
 8001248:	f006 fa3a 	bl	80076c0 <HAL_UARTEx_ReceiveToIdle_DMA>
				return GsmReady;
 800124c:	2302      	movs	r3, #2
 800124e:	e045      	b.n	80012dc <gsm_sendCommand+0x1e4>
	while(*P!=response[0])	//Waits 7 second for response therefor delays are not needed
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	f47f af7e 	bne.w	800115a <gsm_sendCommand+0x62>
				}
	}

	if((readMessageFlag == 1)&&(*NewMsg == '+')){
 800125e:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <gsm_sendCommand+0x21c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d108      	bne.n	8001278 <gsm_sendCommand+0x180>
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b2b      	cmp	r3, #43	@ 0x2b
 800126c:	d104      	bne.n	8001278 <gsm_sendCommand+0x180>
		readMessageFlag = 0;
 800126e:	4b29      	ldr	r3, [pc, #164]	@ (8001314 <gsm_sendCommand+0x21c>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
		return GsmMessage;
 8001274:	2303      	movs	r3, #3
 8001276:	e031      	b.n	80012dc <gsm_sendCommand+0x1e4>
	}

	else if(*Batt == '+'){
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b2b      	cmp	r3, #43	@ 0x2b
 800127e:	d10a      	bne.n	8001296 <gsm_sendCommand+0x19e>
		CDC_Transmit_FS((uint8_t *)RX_Buffer_GSM,  strlen(RX_Buffer_GSM));
 8001280:	4818      	ldr	r0, [pc, #96]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 8001282:	f7fe fffd 	bl	8000280 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29b      	uxth	r3, r3
 800128a:	4619      	mov	r1, r3
 800128c:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 800128e:	f00a ff2d 	bl	800c0ec <CDC_Transmit_FS>
		return Gsmok;
 8001292:	2300      	movs	r3, #0
 8001294:	e022      	b.n	80012dc <gsm_sendCommand+0x1e4>
	}

	else if(*GPRS == '+'){
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b2b      	cmp	r3, #43	@ 0x2b
 800129c:	d101      	bne.n	80012a2 <gsm_sendCommand+0x1aa>
		return Gsmok;
 800129e:	2300      	movs	r3, #0
 80012a0:	e01c      	b.n	80012dc <gsm_sendCommand+0x1e4>
	}

	else{
		CDC_Transmit_FS((uint8_t *)RX_Buffer_GSM,  strlen(RX_Buffer_GSM)); //debug terminal
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 80012a4:	f7fe ffec 	bl	8000280 <strlen>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4619      	mov	r1, r3
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 80012b0:	f00a ff1c 	bl	800c0ec <CDC_Transmit_FS>
		if(newMessageFlag == 0){
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <gsm_sendCommand+0x210>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d108      	bne.n	80012ce <gsm_sendCommand+0x1d6>
			memset(RX_Buffer_GSM,'\0',strlen(RX_Buffer_GSM));
 80012bc:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 80012be:	f7fe ffdf 	bl	8000280 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	2100      	movs	r1, #0
 80012c8:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 80012ca:	f00d f8be 	bl	800e44a <memset>
			} //clear buffer
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2,(uint8_t*)RX_Buffer_GSM, RX_BUFFER_SIZE_GSM);
 80012ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80012d2:	4904      	ldr	r1, [pc, #16]	@ (80012e4 <gsm_sendCommand+0x1ec>)
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <gsm_sendCommand+0x1f0>)
 80012d6:	f006 f9f3 	bl	80076c0 <HAL_UARTEx_ReceiveToIdle_DMA>
		return Gsmok;
 80012da:	2300      	movs	r3, #0
	}
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3728      	adds	r7, #40	@ 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000304 	.word	0x20000304
 80012e8:	200005d0 	.word	0x200005d0
 80012ec:	200002fc 	.word	0x200002fc
 80012f0:	20000301 	.word	0x20000301
 80012f4:	080126f0 	.word	0x080126f0
 80012f8:	080126f8 	.word	0x080126f8
 80012fc:	08012700 	.word	0x08012700
 8001300:	08012708 	.word	0x08012708
 8001304:	08012710 	.word	0x08012710
 8001308:	20000302 	.word	0x20000302
 800130c:	08012718 	.word	0x08012718
 8001310:	08012720 	.word	0x08012720
 8001314:	20000300 	.word	0x20000300

08001318 <gsm_sendSMS>:


int gsm_sendSMS(char *Message){ //Send an SMS to a chosen phone number
 8001318:	b580      	push	{r7, lr}
 800131a:	b0d2      	sub	sp, #328	@ 0x148
 800131c:	af02      	add	r7, sp, #8
 800131e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001322:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001326:	6018      	str	r0, [r3, #0]
    char SetPara[100] = {0};
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800132e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001332:	2260      	movs	r2, #96	@ 0x60
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f00d f887 	bl	800e44a <memset>
    char output[200] = {0};
 800133c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001340:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	3304      	adds	r3, #4
 800134a:	22c4      	movs	r2, #196	@ 0xc4
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f00d f87b 	bl	800e44a <memset>

    snprintf(SetPara, sizeof(SetPara), "AT+CMGS=\"%s\"\r\n", phone);
 8001354:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8001358:	4b34      	ldr	r3, [pc, #208]	@ (800142c <gsm_sendSMS+0x114>)
 800135a:	4a35      	ldr	r2, [pc, #212]	@ (8001430 <gsm_sendSMS+0x118>)
 800135c:	2164      	movs	r1, #100	@ 0x64
 800135e:	f00c ffdd 	bl	800e31c <sniprintf>
    gsm_sendCommand(SmsTextMode, "OK\r\n");
 8001362:	4934      	ldr	r1, [pc, #208]	@ (8001434 <gsm_sendSMS+0x11c>)
 8001364:	4834      	ldr	r0, [pc, #208]	@ (8001438 <gsm_sendSMS+0x120>)
 8001366:	f7ff fec7 	bl	80010f8 <gsm_sendCommand>
    sendMessageFlag = 1;
 800136a:	4b34      	ldr	r3, [pc, #208]	@ (800143c <gsm_sendSMS+0x124>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
    gsm_sendCommand(SetPara, ">");  // Start SMS sending
 8001370:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001374:	4932      	ldr	r1, [pc, #200]	@ (8001440 <gsm_sendSMS+0x128>)
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff febe 	bl	80010f8 <gsm_sendCommand>
    messageTIM = HAL_GetTick() - messageTIM;
 800137c:	f002 ff1c 	bl	80041b8 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <gsm_sendSMS+0x12c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	4a2e      	ldr	r2, [pc, #184]	@ (8001444 <gsm_sendSMS+0x12c>)
 800138a:	6013      	str	r3, [r2, #0]
    snprintf(output, strlen(Message) + 30,"%s, Response Time = %lu ms", Message, messageTIM);
 800138c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001390:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	f7fe ff73 	bl	8000280 <strlen>
 800139a:	4603      	mov	r3, r0
 800139c:	f103 011e 	add.w	r1, r3, #30
 80013a0:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <gsm_sendSMS+0x12c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013ac:	f107 0010 	add.w	r0, r7, #16
 80013b0:	9200      	str	r2, [sp, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a24      	ldr	r2, [pc, #144]	@ (8001448 <gsm_sendSMS+0x130>)
 80013b6:	f00c ffb1 	bl	800e31c <sniprintf>
    gsm_sendCommand(output, ">");  // Send the SMS message content
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4920      	ldr	r1, [pc, #128]	@ (8001440 <gsm_sendSMS+0x128>)
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fe99 	bl	80010f8 <gsm_sendCommand>

    char ch[1] = {0};
 80013c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013ca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
    int n = 26;
 80013d2:	231a      	movs	r3, #26
 80013d4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    ch[0] = n;
 80013d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013e6:	701a      	strb	r2, [r3, #0]
    ch[1] = '\r';
 80013e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013f0:	220d      	movs	r2, #13
 80013f2:	705a      	strb	r2, [r3, #1]

    gsm_sendCommand(ch, "OK\r\n"); // send <CTRL + Z>
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	490e      	ldr	r1, [pc, #56]	@ (8001434 <gsm_sendSMS+0x11c>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fe7c 	bl	80010f8 <gsm_sendCommand>
    sendMessageFlag = 0;
 8001400:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <gsm_sendSMS+0x124>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]

    CDC_Transmit_FS((uint8_t*)output, strlen(output));
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe ff38 	bl	8000280 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f00a fe66 	bl	800c0ec <CDC_Transmit_FS>
    return Gsmok;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000086c 	.word	0x2000086c
 8001430:	08012734 	.word	0x08012734
 8001434:	08012698 	.word	0x08012698
 8001438:	08012744 	.word	0x08012744
 800143c:	20000301 	.word	0x20000301
 8001440:	08012750 	.word	0x08012750
 8001444:	2000088c 	.word	0x2000088c
 8001448:	08012754 	.word	0x08012754

0800144c <gsm_getIndex>:


int gsm_getIndex() //get the index of the new stored sms message
	{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
	char *cmti = strstr(RX_Buffer_GSM, "+CMTI: \"SM\",");
 8001452:	491a      	ldr	r1, [pc, #104]	@ (80014bc <gsm_getIndex+0x70>)
 8001454:	481a      	ldr	r0, [pc, #104]	@ (80014c0 <gsm_getIndex+0x74>)
 8001456:	f00d f88f 	bl	800e578 <strstr>
 800145a:	6038      	str	r0, [r7, #0]
	int sms_index = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]

	if(cmti != NULL){ //SIM card memory
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d007      	beq.n	8001476 <gsm_getIndex+0x2a>
		cmti += strlen("+CMTI: \"SM\",");
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	330c      	adds	r3, #12
 800146a:	603b      	str	r3, [r7, #0]
		sms_index = atoi(cmti);
 800146c:	6838      	ldr	r0, [r7, #0]
 800146e:	f00b fa8f 	bl	800c990 <atoi>
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	e011      	b.n	800149a <gsm_getIndex+0x4e>
	}

	else if(cmti == NULL){ //phone book memory
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10e      	bne.n	800149a <gsm_getIndex+0x4e>
		cmti = strstr(RX_Buffer_GSM, "+CMTI: \"ME\",");
 800147c:	4911      	ldr	r1, [pc, #68]	@ (80014c4 <gsm_getIndex+0x78>)
 800147e:	4810      	ldr	r0, [pc, #64]	@ (80014c0 <gsm_getIndex+0x74>)
 8001480:	f00d f87a 	bl	800e578 <strstr>
 8001484:	6038      	str	r0, [r7, #0]
		if(cmti != NULL){
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d006      	beq.n	800149a <gsm_getIndex+0x4e>
			cmti += strlen("+CMTI: \"ME\",");
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	330c      	adds	r3, #12
 8001490:	603b      	str	r3, [r7, #0]
			sms_index = atoi(cmti);
 8001492:	6838      	ldr	r0, [r7, #0]
 8001494:	f00b fa7c 	bl	800c990 <atoi>
 8001498:	6078      	str	r0, [r7, #4]
		}
	}

	memset(RX_Buffer_GSM,'\0',strlen(RX_Buffer_GSM)); //clear buffer
 800149a:	4809      	ldr	r0, [pc, #36]	@ (80014c0 <gsm_getIndex+0x74>)
 800149c:	f7fe fef0 	bl	8000280 <strlen>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	2100      	movs	r1, #0
 80014a6:	4806      	ldr	r0, [pc, #24]	@ (80014c0 <gsm_getIndex+0x74>)
 80014a8:	f00c ffcf 	bl	800e44a <memset>
	readMessageFlag = 1;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <gsm_getIndex+0x7c>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
	return sms_index;
 80014b2:	687b      	ldr	r3, [r7, #4]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	08012770 	.word	0x08012770
 80014c0:	20000304 	.word	0x20000304
 80014c4:	08012780 	.word	0x08012780
 80014c8:	20000300 	.word	0x20000300

080014cc <gsm_readSMS>:


void gsm_readSMS() //extract and copy message into a buffer -> Categories message
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0a8      	sub	sp, #160	@ 0xa0
 80014d0:	af00      	add	r7, sp, #0
	char readCommand[20] = {0};
 80014d2:	2300      	movs	r3, #0
 80014d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80014d6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
	int smsIndex = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	smsIndex = gsm_getIndex(); //get the messages storage index
 80014ea:	f7ff ffaf 	bl	800144c <gsm_getIndex>
 80014ee:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

	HAL_UARTEx_ReceiveToIdle_DMA(&huart2,(uint8_t*)RX_Buffer_GSM, RX_BUFFER_SIZE_GSM);
 80014f2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80014f6:	4987      	ldr	r1, [pc, #540]	@ (8001714 <gsm_readSMS+0x248>)
 80014f8:	4887      	ldr	r0, [pc, #540]	@ (8001718 <gsm_readSMS+0x24c>)
 80014fa:	f006 f8e1 	bl	80076c0 <HAL_UARTEx_ReceiveToIdle_DMA>

	sprintf(readCommand, "AT+CMGR=%d\r\n", smsIndex); //read the message stored at the index
 80014fe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001502:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001506:	4985      	ldr	r1, [pc, #532]	@ (800171c <gsm_readSMS+0x250>)
 8001508:	4618      	mov	r0, r3
 800150a:	f00c ff3b 	bl	800e384 <siprintf>




	if(gsm_sendCommand(readCommand, "OK\r\n" ) == GsmMessage){			//Extract and copy message contents
 800150e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001512:	4983      	ldr	r1, [pc, #524]	@ (8001720 <gsm_readSMS+0x254>)
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fdef 	bl	80010f8 <gsm_sendCommand>
 800151a:	4603      	mov	r3, r0
 800151c:	2b03      	cmp	r3, #3
 800151e:	f040 80f4 	bne.w	800170a <gsm_readSMS+0x23e>

	char *messageCopy = NULL;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	char *messageStart = NULL;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	char *messageEnd = NULL;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	size_t length = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	messageStart = strchr(RX_Buffer_GSM, '$') + 1;
 800153a:	2124      	movs	r1, #36	@ 0x24
 800153c:	4875      	ldr	r0, [pc, #468]	@ (8001714 <gsm_readSMS+0x248>)
 800153e:	f00c ff8c 	bl	800e45a <strchr>
 8001542:	4603      	mov	r3, r0
 8001544:	3301      	adds	r3, #1
 8001546:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	if(messageStart != NULL){
 800154a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800154e:	2b00      	cmp	r3, #0
 8001550:	d02f      	beq.n	80015b2 <gsm_readSMS+0xe6>
		messageEnd = strchr(messageStart, '#');
 8001552:	2123      	movs	r1, #35	@ 0x23
 8001554:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001558:	f00c ff7f 	bl	800e45a <strchr>
 800155c:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

		if((messageEnd != NULL)&&(messageEnd > messageStart)){
 8001560:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001564:	2b00      	cmp	r3, #0
 8001566:	d024      	beq.n	80015b2 <gsm_readSMS+0xe6>
 8001568:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800156c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001570:	429a      	cmp	r2, r3
 8001572:	d91e      	bls.n	80015b2 <gsm_readSMS+0xe6>
			length = messageEnd - messageStart;
 8001574:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001578:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			messageCopy = (char *)malloc(length + 1);
 8001582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001586:	3301      	adds	r3, #1
 8001588:	4618      	mov	r0, r3
 800158a:	f00b fa05 	bl	800c998 <malloc>
 800158e:	4603      	mov	r3, r0
 8001590:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			strncpy(messageCopy, messageStart, length);
 8001594:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001598:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800159c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80015a0:	f00c ff7a 	bl	800e498 <strncpy>
			messageCopy[length] = '\0';
 80015a4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80015a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015ac:	4413      	add	r3, r2
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
		}
	}
	newMessageFlag = 0;
 80015b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001724 <gsm_readSMS+0x258>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]

	char output2[100] = {0};
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2260      	movs	r2, #96	@ 0x60
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f00c ff41 	bl	800e44a <memset>
	snprintf(output2, strlen(messageCopy)+ 2,"%s\n",messageCopy);
 80015c8:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80015cc:	f7fe fe58 	bl	8000280 <strlen>
 80015d0:	4603      	mov	r3, r0
 80015d2:	1c99      	adds	r1, r3, #2
 80015d4:	4638      	mov	r0, r7
 80015d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015da:	4a53      	ldr	r2, [pc, #332]	@ (8001728 <gsm_readSMS+0x25c>)
 80015dc:	f00c fe9e 	bl	800e31c <sniprintf>

	CDC_Transmit_FS((uint8_t*) output2, strlen(output2));
 80015e0:	463b      	mov	r3, r7
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe fe4c 	bl	8000280 <strlen>
 80015e8:	4603      	mov	r3, r0
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	463b      	mov	r3, r7
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f00a fd7b 	bl	800c0ec <CDC_Transmit_FS>

	char *mode = NULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	char *req = NULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	char *number = NULL;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	mode = strstr(messageCopy, "MD");
 8001608:	4948      	ldr	r1, [pc, #288]	@ (800172c <gsm_readSMS+0x260>)
 800160a:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800160e:	f00c ffb3 	bl	800e578 <strstr>
 8001612:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	req = strstr(messageCopy, "REQ");
 8001616:	4946      	ldr	r1, [pc, #280]	@ (8001730 <gsm_readSMS+0x264>)
 8001618:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800161c:	f00c ffac 	bl	800e578 <strstr>
 8001620:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	number = strstr(messageCopy, "NN");
 8001624:	4943      	ldr	r1, [pc, #268]	@ (8001734 <gsm_readSMS+0x268>)
 8001626:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800162a:	f00c ffa5 	bl	800e578 <strstr>
 800162e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80

	if(mode != NULL){
 8001632:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00d      	beq.n	8001656 <gsm_readSMS+0x18a>
		memset(RX_Buffer_GSM,'\0', strlen(RX_Buffer_GSM)); //clear buff
 800163a:	4836      	ldr	r0, [pc, #216]	@ (8001714 <gsm_readSMS+0x248>)
 800163c:	f7fe fe20 	bl	8000280 <strlen>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	2100      	movs	r1, #0
 8001646:	4833      	ldr	r0, [pc, #204]	@ (8001714 <gsm_readSMS+0x248>)
 8001648:	f00c feff 	bl	800e44a <memset>
		processMode(messageCopy);
 800164c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001650:	f000 f886 	bl	8001760 <processMode>
 8001654:	e055      	b.n	8001702 <gsm_readSMS+0x236>
	}

	else if(req != NULL){
 8001656:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00c      	beq.n	8001678 <gsm_readSMS+0x1ac>
		 memset(RX_Buffer_GSM,'\0', strlen(RX_Buffer_GSM)); //clear buff
 800165e:	482d      	ldr	r0, [pc, #180]	@ (8001714 <gsm_readSMS+0x248>)
 8001660:	f7fe fe0e 	bl	8000280 <strlen>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	2100      	movs	r1, #0
 800166a:	482a      	ldr	r0, [pc, #168]	@ (8001714 <gsm_readSMS+0x248>)
 800166c:	f00c feed 	bl	800e44a <memset>
		 sendCoordinateFlag = 1;
 8001670:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <gsm_readSMS+0x26c>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e044      	b.n	8001702 <gsm_readSMS+0x236>
	}

	else if(number != NULL){
 8001678:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800167c:	2b00      	cmp	r3, #0
 800167e:	d034      	beq.n	80016ea <gsm_readSMS+0x21e>
		char *code= NULL;
 8001680:	2300      	movs	r3, #0
 8001682:	67fb      	str	r3, [r7, #124]	@ 0x7c

		code = strstr(messageCopy, "1234");
 8001684:	492d      	ldr	r1, [pc, #180]	@ (800173c <gsm_readSMS+0x270>)
 8001686:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800168a:	f00c ff75 	bl	800e578 <strstr>
 800168e:	67f8      	str	r0, [r7, #124]	@ 0x7c

			if(code != NULL){ //Check for correct Code
 8001690:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001692:	2b00      	cmp	r3, #0
 8001694:	d035      	beq.n	8001702 <gsm_readSMS+0x236>
				char *token;
				token = strtok(RX_Buffer_GSM, ","); //function splits up the string.
 8001696:	492a      	ldr	r1, [pc, #168]	@ (8001740 <gsm_readSMS+0x274>)
 8001698:	481e      	ldr	r0, [pc, #120]	@ (8001714 <gsm_readSMS+0x248>)
 800169a:	f00c ff11 	bl	800e4c0 <strtok>
 800169e:	67b8      	str	r0, [r7, #120]	@ 0x78
				token = strtok(NULL, "+");
 80016a0:	4928      	ldr	r1, [pc, #160]	@ (8001744 <gsm_readSMS+0x278>)
 80016a2:	2000      	movs	r0, #0
 80016a4:	f00c ff0c 	bl	800e4c0 <strtok>
 80016a8:	67b8      	str	r0, [r7, #120]	@ 0x78
				token = strtok(NULL, "\"");
 80016aa:	4927      	ldr	r1, [pc, #156]	@ (8001748 <gsm_readSMS+0x27c>)
 80016ac:	2000      	movs	r0, #0
 80016ae:	f00c ff07 	bl	800e4c0 <strtok>
 80016b2:	67b8      	str	r0, [r7, #120]	@ 0x78

				snprintf(phone,strlen(token)+2,"+%s",token);
 80016b4:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80016b6:	f7fe fde3 	bl	8000280 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	1c99      	adds	r1, r3, #2
 80016be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016c0:	4a22      	ldr	r2, [pc, #136]	@ (800174c <gsm_readSMS+0x280>)
 80016c2:	4823      	ldr	r0, [pc, #140]	@ (8001750 <gsm_readSMS+0x284>)
 80016c4:	f00c fe2a 	bl	800e31c <sniprintf>
				memset(RX_Buffer_GSM,'\0', strlen(RX_Buffer_GSM)); //clear buff
 80016c8:	4812      	ldr	r0, [pc, #72]	@ (8001714 <gsm_readSMS+0x248>)
 80016ca:	f7fe fdd9 	bl	8000280 <strlen>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	2100      	movs	r1, #0
 80016d4:	480f      	ldr	r0, [pc, #60]	@ (8001714 <gsm_readSMS+0x248>)
 80016d6:	f00c feb8 	bl	800e44a <memset>
				gsm_sendSMS("Phone number updated"); //Send an SMS to a chosen phone number
 80016da:	481e      	ldr	r0, [pc, #120]	@ (8001754 <gsm_readSMS+0x288>)
 80016dc:	f7ff fe1c 	bl	8001318 <gsm_sendSMS>
				CDC_Transmit_FS((uint8_t *)Num_UPDATE, 17);
 80016e0:	2111      	movs	r1, #17
 80016e2:	481d      	ldr	r0, [pc, #116]	@ (8001758 <gsm_readSMS+0x28c>)
 80016e4:	f00a fd02 	bl	800c0ec <CDC_Transmit_FS>
 80016e8:	e00b      	b.n	8001702 <gsm_readSMS+0x236>
			}
	}
	else{
		memset(RX_Buffer_GSM,'\0', strlen(RX_Buffer_GSM)); //clear buff
 80016ea:	480a      	ldr	r0, [pc, #40]	@ (8001714 <gsm_readSMS+0x248>)
 80016ec:	f7fe fdc8 	bl	8000280 <strlen>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	2100      	movs	r1, #0
 80016f6:	4807      	ldr	r0, [pc, #28]	@ (8001714 <gsm_readSMS+0x248>)
 80016f8:	f00c fea7 	bl	800e44a <memset>
		gsm_sendSMS("Command not recognized!");
 80016fc:	4817      	ldr	r0, [pc, #92]	@ (800175c <gsm_readSMS+0x290>)
 80016fe:	f7ff fe0b 	bl	8001318 <gsm_sendSMS>
	}


	free(messageCopy);
 8001702:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001706:	f00b f94f 	bl	800c9a8 <free>
		}
}
 800170a:	bf00      	nop
 800170c:	37a0      	adds	r7, #160	@ 0xa0
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000304 	.word	0x20000304
 8001718:	200005d0 	.word	0x200005d0
 800171c:	08012790 	.word	0x08012790
 8001720:	08012698 	.word	0x08012698
 8001724:	20000302 	.word	0x20000302
 8001728:	080127a0 	.word	0x080127a0
 800172c:	080127a4 	.word	0x080127a4
 8001730:	080127a8 	.word	0x080127a8
 8001734:	080127ac 	.word	0x080127ac
 8001738:	20000882 	.word	0x20000882
 800173c:	080127b0 	.word	0x080127b0
 8001740:	080127b8 	.word	0x080127b8
 8001744:	080127bc 	.word	0x080127bc
 8001748:	080127c0 	.word	0x080127c0
 800174c:	080127c4 	.word	0x080127c4
 8001750:	2000086c 	.word	0x2000086c
 8001754:	080127c8 	.word	0x080127c8
 8001758:	080127e0 	.word	0x080127e0
 800175c:	080127f4 	.word	0x080127f4

08001760 <processMode>:

void processMode(char *messageContents){
 8001760:	b580      	push	{r7, lr}
 8001762:	b094      	sub	sp, #80	@ 0x50
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	char *modeSet = NULL;
 8001768:	2300      	movs	r3, #0
 800176a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint8_t term = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

	char *gsmParam1 = NULL;
 8001772:	2300      	movs	r3, #0
 8001774:	647b      	str	r3, [r7, #68]	@ 0x44
	char *gsmParam2 = NULL;
 8001776:	2300      	movs	r3, #0
 8001778:	643b      	str	r3, [r7, #64]	@ 0x40
	char *gsmParam3 = NULL;
 800177a:	2300      	movs	r3, #0
 800177c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	float gsmParam1_int;
	float gsmParam2_int;
	float gsmParam3_int;

	uint8_t newModeState = 3;
 800177e:	2303      	movs	r3, #3
 8001780:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	char *token;

	token = strtok(messageContents, ","); //function splits up the string.
 8001784:	497a      	ldr	r1, [pc, #488]	@ (8001970 <processMode+0x210>)
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f00c fe9a 	bl	800e4c0 <strtok>
 800178c:	6338      	str	r0, [r7, #48]	@ 0x30
	token = strtok(NULL, ",");
 800178e:	4978      	ldr	r1, [pc, #480]	@ (8001970 <processMode+0x210>)
 8001790:	2000      	movs	r0, #0
 8001792:	f00c fe95 	bl	800e4c0 <strtok>
 8001796:	6338      	str	r0, [r7, #48]	@ 0x30

	while(token != NULL){
 8001798:	e033      	b.n	8001802 <processMode+0xa2>

		if(term == 0){
 800179a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d107      	bne.n	80017b2 <processMode+0x52>
			modeSet = token;
 80017a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
			term++;
 80017a6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80017aa:	3301      	adds	r3, #1
 80017ac:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80017b0:	e022      	b.n	80017f8 <processMode+0x98>
		}

		else if(term == 1){
 80017b2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <processMode+0x6a>
				gsmParam1 = token;
 80017ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017bc:	647b      	str	r3, [r7, #68]	@ 0x44
				term++;
 80017be:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80017c2:	3301      	adds	r3, #1
 80017c4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80017c8:	e016      	b.n	80017f8 <processMode+0x98>
		}

		else if(term == 2){
 80017ca:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d107      	bne.n	80017e2 <processMode+0x82>
				gsmParam2 = token;
 80017d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017d4:	643b      	str	r3, [r7, #64]	@ 0x40
				term++;
 80017d6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80017da:	3301      	adds	r3, #1
 80017dc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80017e0:	e00a      	b.n	80017f8 <processMode+0x98>
		}

		else if(term == 3){
 80017e2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d106      	bne.n	80017f8 <processMode+0x98>
				gsmParam3 = token;
 80017ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
				term++;
 80017ee:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80017f2:	3301      	adds	r3, #1
 80017f4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		}
		token = strtok(NULL, ",");
 80017f8:	495d      	ldr	r1, [pc, #372]	@ (8001970 <processMode+0x210>)
 80017fa:	2000      	movs	r0, #0
 80017fc:	f00c fe60 	bl	800e4c0 <strtok>
 8001800:	6338      	str	r0, [r7, #48]	@ 0x30
	while(token != NULL){
 8001802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1c8      	bne.n	800179a <processMode+0x3a>
	}


	newModeState = modeSet[0] - '0';
 8001808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	3b30      	subs	r3, #48	@ 0x30
 800180e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	char modeChange[20];
	snprintf(modeChange, 20 ,"Mode %d set\r\n", newModeState);
 8001812:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001816:	f107 0010 	add.w	r0, r7, #16
 800181a:	4a56      	ldr	r2, [pc, #344]	@ (8001974 <processMode+0x214>)
 800181c:	2114      	movs	r1, #20
 800181e:	f00c fd7d 	bl	800e31c <sniprintf>
	CDC_Transmit_FS((uint8_t *) modeChange, strlen(modeChange));
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fd2a 	bl	8000280 <strlen>
 800182c:	4603      	mov	r3, r0
 800182e:	b29a      	uxth	r2, r3
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f00a fc58 	bl	800c0ec <CDC_Transmit_FS>
					//read and update variables for different mode states.

	if(newModeState == 1){//Geo-fence Mode
 800183c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001840:	2b01      	cmp	r3, #1
 8001842:	d15d      	bne.n	8001900 <processMode+0x1a0>
		newModeState = Mode1;
 8001844:	2301      	movs	r3, #1
 8001846:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		char *coordSetting = {0};
 800184a:	2300      	movs	r3, #0
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		coordSetting = strstr(gsmParam1, "HERE");
 800184e:	494a      	ldr	r1, [pc, #296]	@ (8001978 <processMode+0x218>)
 8001850:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001852:	f00c fe91 	bl	800e578 <strstr>
 8001856:	62f8      	str	r0, [r7, #44]	@ 0x2c

		if(coordSetting != NULL){ //Check for device set co-ordinates.
 8001858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d014      	beq.n	8001888 <processMode+0x128>
			unsigned long fixAgeGPS;

			gps_f_get_position(&gsmParam1_int,&gsmParam2_int,&fixAgeGPS);
 800185e:	f107 020c 	add.w	r2, r7, #12
 8001862:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001866:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800186a:	4618      	mov	r0, r3
 800186c:	f002 fbc8 	bl	8004000 <gps_f_get_position>
			gsmParam3_int = strtol(gsmParam2, NULL, 10);//radius
 8001870:	220a      	movs	r2, #10
 8001872:	2100      	movs	r1, #0
 8001874:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001876:	f00c f82d 	bl	800d8d4 <strtol>
 800187a:	ee07 0a90 	vmov	s15, r0
 800187e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001882:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8001886:	e05f      	b.n	8001948 <processMode+0x1e8>
		}

		else{//Manually set coordinates

			if((strlen(gsmParam1) >= 8)&&(strlen(gsmParam1) <= 11)){
 8001888:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800188a:	f7fe fcf9 	bl	8000280 <strlen>
 800188e:	4603      	mov	r3, r0
 8001890:	2b07      	cmp	r3, #7
 8001892:	d90e      	bls.n	80018b2 <processMode+0x152>
 8001894:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001896:	f7fe fcf3 	bl	8000280 <strlen>
 800189a:	4603      	mov	r3, r0
 800189c:	2b0b      	cmp	r3, #11
 800189e:	d808      	bhi.n	80018b2 <processMode+0x152>
				gsmParam1_int = strtof(gsmParam1, NULL);//latitude
 80018a0:	2100      	movs	r1, #0
 80018a2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80018a4:	f00b ff38 	bl	800d718 <strtof>
 80018a8:	eef0 7a40 	vmov.f32	s15, s0
 80018ac:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 80018b0:	e002      	b.n	80018b8 <processMode+0x158>
			}
			else{
				gsmParam1_int = 0;
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	62bb      	str	r3, [r7, #40]	@ 0x28
			}

			if((strlen(gsmParam2)>=8)&&(strlen(gsmParam2) < 11)){
 80018b8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80018ba:	f7fe fce1 	bl	8000280 <strlen>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b07      	cmp	r3, #7
 80018c2:	d90e      	bls.n	80018e2 <processMode+0x182>
 80018c4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80018c6:	f7fe fcdb 	bl	8000280 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b0a      	cmp	r3, #10
 80018ce:	d808      	bhi.n	80018e2 <processMode+0x182>
				gsmParam2_int = strtof(gsmParam2, NULL);//longitude
 80018d0:	2100      	movs	r1, #0
 80018d2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80018d4:	f00b ff20 	bl	800d718 <strtof>
 80018d8:	eef0 7a40 	vmov.f32	s15, s0
 80018dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80018e0:	e002      	b.n	80018e8 <processMode+0x188>
			}
			else{
				gsmParam2_int = 0;
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
			}
			gsmParam3_int = strtol(gsmParam3, NULL, 10);//radius
 80018e8:	220a      	movs	r2, #10
 80018ea:	2100      	movs	r1, #0
 80018ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80018ee:	f00b fff1 	bl	800d8d4 <strtol>
 80018f2:	ee07 0a90 	vmov	s15, r0
 80018f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fa:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 80018fe:	e023      	b.n	8001948 <processMode+0x1e8>
		}
	}

	else if(newModeState == 2){//Period update Mode
 8001900:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001904:	2b02      	cmp	r3, #2
 8001906:	d114      	bne.n	8001932 <processMode+0x1d2>
			newModeState = Mode2;
 8001908:	2302      	movs	r3, #2
 800190a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			gsmParam1_int = strtol(gsmParam1, NULL, 10);//Time Period
 800190e:	220a      	movs	r2, #10
 8001910:	2100      	movs	r1, #0
 8001912:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001914:	f00b ffde 	bl	800d8d4 <strtol>
 8001918:	ee07 0a90 	vmov	s15, r0
 800191c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001920:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			gsmParam2_int = 0;
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
			gsmParam3_int = 0;
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001930:	e00a      	b.n	8001948 <processMode+0x1e8>
	}

	else if(newModeState == 4){//Sleep mode
 8001932:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001936:	2b04      	cmp	r3, #4
 8001938:	d103      	bne.n	8001942 <processMode+0x1e2>
			newModeState = Mode4;
 800193a:	2304      	movs	r3, #4
 800193c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001940:	e002      	b.n	8001948 <processMode+0x1e8>

	}

	else {//Full power mode
		newModeState = Mode3;
 8001942:	2303      	movs	r3, #3
 8001944:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	}

		mode_update(newModeState,gsmParam1_int,gsmParam2_int,gsmParam3_int);
 8001948:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800194c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001950:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001954:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8001958:	eef0 0a47 	vmov.f32	s1, s14
 800195c:	eeb0 0a67 	vmov.f32	s0, s15
 8001960:	4618      	mov	r0, r3
 8001962:	f001 faa1 	bl	8002ea8 <mode_update>
}
 8001966:	bf00      	nop
 8001968:	3750      	adds	r7, #80	@ 0x50
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	080127b8 	.word	0x080127b8
 8001974:	0801280c 	.word	0x0801280c
 8001978:	0801281c 	.word	0x0801281c

0800197c <gsm_sendLocation>:


void gsm_sendLocation(float lat, float longa){
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b0a4      	sub	sp, #144	@ 0x90
 8001980:	af04      	add	r7, sp, #16
 8001982:	ed87 0a01 	vstr	s0, [r7, #4]
 8001986:	edc7 0a00 	vstr	s1, [r7]
	char url[100];
	if((lat==0 || longa == 0)||(HAL_GetTick() - GPS_timer) > 180000) { //only if lat or long not corrcet or more than 30 min passed without good gps data
 800198a:	edd7 7a01 	vldr	s15, [r7, #4]
 800198e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	d00f      	beq.n	80019b8 <gsm_sendLocation+0x3c>
 8001998:	edd7 7a00 	vldr	s15, [r7]
 800199c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	d008      	beq.n	80019b8 <gsm_sendLocation+0x3c>
 80019a6:	f002 fc07 	bl	80041b8 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	4b4e      	ldr	r3, [pc, #312]	@ (8001ae8 <gsm_sendLocation+0x16c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	4a4e      	ldr	r2, [pc, #312]	@ (8001aec <gsm_sendLocation+0x170>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d97a      	bls.n	8001aae <gsm_sendLocation+0x132>

		char *token1 = NULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
		char *token2 = NULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	67bb      	str	r3, [r7, #120]	@ 0x78

		gsm_sendSMS("Bad GPS fix!");
 80019c0:	484b      	ldr	r0, [pc, #300]	@ (8001af0 <gsm_sendLocation+0x174>)
 80019c2:	f7ff fca9 	bl	8001318 <gsm_sendSMS>
		gsm_sendCommand("AT+SAPBR=3,1,\"Contype\",\"GPRS\"\r\n","OK\r\n");
 80019c6:	494b      	ldr	r1, [pc, #300]	@ (8001af4 <gsm_sendLocation+0x178>)
 80019c8:	484b      	ldr	r0, [pc, #300]	@ (8001af8 <gsm_sendLocation+0x17c>)
 80019ca:	f7ff fb95 	bl	80010f8 <gsm_sendCommand>
		gsm_sendCommand("AT+SAPBR=3,1,\"APN\",\"internet\"\r\n","OK\r\n");
 80019ce:	4949      	ldr	r1, [pc, #292]	@ (8001af4 <gsm_sendLocation+0x178>)
 80019d0:	484a      	ldr	r0, [pc, #296]	@ (8001afc <gsm_sendLocation+0x180>)
 80019d2:	f7ff fb91 	bl	80010f8 <gsm_sendCommand>
		gsm_sendCommand("AT+SAPBR=1,1\r\n","OK\r\n");
 80019d6:	4947      	ldr	r1, [pc, #284]	@ (8001af4 <gsm_sendLocation+0x178>)
 80019d8:	4849      	ldr	r0, [pc, #292]	@ (8001b00 <gsm_sendLocation+0x184>)
 80019da:	f7ff fb8d 	bl	80010f8 <gsm_sendCommand>
		if (gsm_sendCommand("AT+SAPBR=2,1\r\n","OK\r\n") == Gsmok){ //Network connection secured?
 80019de:	4945      	ldr	r1, [pc, #276]	@ (8001af4 <gsm_sendLocation+0x178>)
 80019e0:	4848      	ldr	r0, [pc, #288]	@ (8001b04 <gsm_sendLocation+0x188>)
 80019e2:	f7ff fb89 	bl	80010f8 <gsm_sendCommand>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d158      	bne.n	8001a9e <gsm_sendLocation+0x122>
		gsm_sendCommand("AT+CLBSCFG=0,1\r\n","OK\r\n");
 80019ec:	4941      	ldr	r1, [pc, #260]	@ (8001af4 <gsm_sendLocation+0x178>)
 80019ee:	4846      	ldr	r0, [pc, #280]	@ (8001b08 <gsm_sendLocation+0x18c>)
 80019f0:	f7ff fb82 	bl	80010f8 <gsm_sendCommand>
		gsm_sendCommand("AT+CLBSCFG=0,2\r\n","OK\r\n");
 80019f4:	493f      	ldr	r1, [pc, #252]	@ (8001af4 <gsm_sendLocation+0x178>)
 80019f6:	4845      	ldr	r0, [pc, #276]	@ (8001b0c <gsm_sendLocation+0x190>)
 80019f8:	f7ff fb7e 	bl	80010f8 <gsm_sendCommand>
		gsm_sendCommand("AT+CLBSCFG=1,3,\"lbs-simcom.com:3002\"\r\n","OK\r\n");
 80019fc:	493d      	ldr	r1, [pc, #244]	@ (8001af4 <gsm_sendLocation+0x178>)
 80019fe:	4844      	ldr	r0, [pc, #272]	@ (8001b10 <gsm_sendLocation+0x194>)
 8001a00:	f7ff fb7a 	bl	80010f8 <gsm_sendCommand>
		HAL_Delay(100);
 8001a04:	2064      	movs	r0, #100	@ 0x64
 8001a06:	f002 fbe3 	bl	80041d0 <HAL_Delay>

		if (gsm_sendCommand("AT+CLBS=1,1\r\n","OK\r\n") == Gsmok){ //Location returned?
 8001a0a:	493a      	ldr	r1, [pc, #232]	@ (8001af4 <gsm_sendLocation+0x178>)
 8001a0c:	4841      	ldr	r0, [pc, #260]	@ (8001b14 <gsm_sendLocation+0x198>)
 8001a0e:	f7ff fb73 	bl	80010f8 <gsm_sendCommand>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d136      	bne.n	8001a86 <gsm_sendLocation+0x10a>
		//char *token = NULL;
			char *messageCopy = NULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	677b      	str	r3, [r7, #116]	@ 0x74
			size_t length = strlen(RX_Buffer_GSM);
 8001a1c:	483e      	ldr	r0, [pc, #248]	@ (8001b18 <gsm_sendLocation+0x19c>)
 8001a1e:	f7fe fc2f 	bl	8000280 <strlen>
 8001a22:	6738      	str	r0, [r7, #112]	@ 0x70
			messageCopy = (char *)malloc(length);
 8001a24:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001a26:	f00a ffb7 	bl	800c998 <malloc>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	677b      	str	r3, [r7, #116]	@ 0x74
			strncpy(messageCopy, RX_Buffer_GSM, length);
 8001a2e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001a30:	4939      	ldr	r1, [pc, #228]	@ (8001b18 <gsm_sendLocation+0x19c>)
 8001a32:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001a34:	f00c fd30 	bl	800e498 <strncpy>
			messageCopy[length + 1 ] = '\0';
 8001a38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001a3e:	4413      	add	r3, r2
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
			memset(RX_Buffer_GSM,'\0', length); //clear
 8001a44:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001a46:	2100      	movs	r1, #0
 8001a48:	4833      	ldr	r0, [pc, #204]	@ (8001b18 <gsm_sendLocation+0x19c>)
 8001a4a:	f00c fcfe 	bl	800e44a <memset>
			token1 = strtok(messageCopy, ","); //function splits up the string.
 8001a4e:	4933      	ldr	r1, [pc, #204]	@ (8001b1c <gsm_sendLocation+0x1a0>)
 8001a50:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001a52:	f00c fd35 	bl	800e4c0 <strtok>
 8001a56:	67f8      	str	r0, [r7, #124]	@ 0x7c
			token1 = strtok(NULL, ","); //longitude
 8001a58:	4930      	ldr	r1, [pc, #192]	@ (8001b1c <gsm_sendLocation+0x1a0>)
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f00c fd30 	bl	800e4c0 <strtok>
 8001a60:	67f8      	str	r0, [r7, #124]	@ 0x7c
			token2 = strtok(NULL, ","); //latitude
 8001a62:	492e      	ldr	r1, [pc, #184]	@ (8001b1c <gsm_sendLocation+0x1a0>)
 8001a64:	2000      	movs	r0, #0
 8001a66:	f00c fd2b 	bl	800e4c0 <strtok>
 8001a6a:	67b8      	str	r0, [r7, #120]	@ 0x78
			free(messageCopy);
 8001a6c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001a6e:	f00a ff9b 	bl	800c9a8 <free>
			snprintf(url, sizeof(url),"LBS Location: https://www.google.com/maps?q=%s,%s\r\n",token2,token1);
 8001a72:	f107 000c 	add.w	r0, r7, #12
 8001a76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a7c:	4a28      	ldr	r2, [pc, #160]	@ (8001b20 <gsm_sendLocation+0x1a4>)
 8001a7e:	2164      	movs	r1, #100	@ 0x64
 8001a80:	f00c fc4c 	bl	800e31c <sniprintf>
 8001a84:	e006      	b.n	8001a94 <gsm_sendLocation+0x118>
		}

		else{
			snprintf(url, sizeof(url),"No Location Available"); //Send if Network location fails
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4a26      	ldr	r2, [pc, #152]	@ (8001b24 <gsm_sendLocation+0x1a8>)
 8001a8c:	2164      	movs	r1, #100	@ 0x64
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f00c fc44 	bl	800e31c <sniprintf>
			}
		gsm_sendCommand("AT+SAPBR=0,1\r\n","OK\r\n");
 8001a94:	4917      	ldr	r1, [pc, #92]	@ (8001af4 <gsm_sendLocation+0x178>)
 8001a96:	4824      	ldr	r0, [pc, #144]	@ (8001b28 <gsm_sendLocation+0x1ac>)
 8001a98:	f7ff fb2e 	bl	80010f8 <gsm_sendCommand>
	if((lat==0 || longa == 0)||(HAL_GetTick() - GPS_timer) > 180000) { //only if lat or long not corrcet or more than 30 min passed without good gps data
 8001a9c:	e01b      	b.n	8001ad6 <gsm_sendLocation+0x15a>
	}

	else{
		snprintf(url, sizeof(url),"No Location Available"); //Send if Network location fails
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4a20      	ldr	r2, [pc, #128]	@ (8001b24 <gsm_sendLocation+0x1a8>)
 8001aa4:	2164      	movs	r1, #100	@ 0x64
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f00c fc38 	bl	800e31c <sniprintf>
	if((lat==0 || longa == 0)||(HAL_GetTick() - GPS_timer) > 180000) { //only if lat or long not corrcet or more than 30 min passed without good gps data
 8001aac:	e013      	b.n	8001ad6 <gsm_sendLocation+0x15a>
		}
	}

	else{
	snprintf(url, sizeof(url),"https://www.google.com/maps?q=%f,%f\r\n",lat,longa);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7fe fd52 	bl	8000558 <__aeabi_f2d>
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	460d      	mov	r5, r1
 8001ab8:	6838      	ldr	r0, [r7, #0]
 8001aba:	f7fe fd4d 	bl	8000558 <__aeabi_f2d>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	f107 000c 	add.w	r0, r7, #12
 8001ac6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001aca:	e9cd 4500 	strd	r4, r5, [sp]
 8001ace:	4a17      	ldr	r2, [pc, #92]	@ (8001b2c <gsm_sendLocation+0x1b0>)
 8001ad0:	2164      	movs	r1, #100	@ 0x64
 8001ad2:	f00c fc23 	bl	800e31c <sniprintf>
	}

	gsm_sendSMS(url);
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fc1c 	bl	8001318 <gsm_sendSMS>
}
 8001ae0:	bf00      	nop
 8001ae2:	3780      	adds	r7, #128	@ 0x80
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae8:	20000864 	.word	0x20000864
 8001aec:	0002bf20 	.word	0x0002bf20
 8001af0:	08012824 	.word	0x08012824
 8001af4:	08012698 	.word	0x08012698
 8001af8:	08012834 	.word	0x08012834
 8001afc:	08012854 	.word	0x08012854
 8001b00:	08012874 	.word	0x08012874
 8001b04:	08012884 	.word	0x08012884
 8001b08:	08012894 	.word	0x08012894
 8001b0c:	080128a8 	.word	0x080128a8
 8001b10:	080128bc 	.word	0x080128bc
 8001b14:	080128e4 	.word	0x080128e4
 8001b18:	20000304 	.word	0x20000304
 8001b1c:	080127b8 	.word	0x080127b8
 8001b20:	080128f4 	.word	0x080128f4
 8001b24:	08012928 	.word	0x08012928
 8001b28:	08012940 	.word	0x08012940
 8001b2c:	08012950 	.word	0x08012950

08001b30 <gsm_batteryCheck>:




int gsm_batteryCheck(){//check battery level (return = 0 if the battery is critically low)
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
	uint16_t batVoltage = 4000;
 8001b36:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001b3a:	81fb      	strh	r3, [r7, #14]

	if(gsm_sendCommand("AT+CBC\r\n", "OK\r\n") == Gsmok){ //return current voltage and battery life level
 8001b3c:	493d      	ldr	r1, [pc, #244]	@ (8001c34 <gsm_batteryCheck+0x104>)
 8001b3e:	483e      	ldr	r0, [pc, #248]	@ (8001c38 <gsm_batteryCheck+0x108>)
 8001b40:	f7ff fada 	bl	80010f8 <gsm_sendCommand>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d16f      	bne.n	8001c2a <gsm_batteryCheck+0xfa>
		char *messageCopy = NULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
		size_t length = strlen(RX_Buffer_GSM);
 8001b4e:	483b      	ldr	r0, [pc, #236]	@ (8001c3c <gsm_batteryCheck+0x10c>)
 8001b50:	f7fe fb96 	bl	8000280 <strlen>
 8001b54:	6078      	str	r0, [r7, #4]

		messageCopy = (char *)malloc(length);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f00a ff1e 	bl	800c998 <malloc>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60bb      	str	r3, [r7, #8]
		strncpy(messageCopy, RX_Buffer_GSM, length);
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4936      	ldr	r1, [pc, #216]	@ (8001c3c <gsm_batteryCheck+0x10c>)
 8001b64:	68b8      	ldr	r0, [r7, #8]
 8001b66:	f00c fc97 	bl	800e498 <strncpy>
		messageCopy[length + 1 ] = '\0';
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	4413      	add	r3, r2
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
		memset(RX_Buffer_GSM,'\0', length); //clear buffer
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4830      	ldr	r0, [pc, #192]	@ (8001c3c <gsm_batteryCheck+0x10c>)
 8001b7c:	f00c fc65 	bl	800e44a <memset>

		char* token = NULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	603b      	str	r3, [r7, #0]

		token = strtok(messageCopy, ","); //function splits up the string.
 8001b84:	492e      	ldr	r1, [pc, #184]	@ (8001c40 <gsm_batteryCheck+0x110>)
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	f00c fc9a 	bl	800e4c0 <strtok>
 8001b8c:	6038      	str	r0, [r7, #0]
		token = strtok(NULL, ",");
 8001b8e:	492c      	ldr	r1, [pc, #176]	@ (8001c40 <gsm_batteryCheck+0x110>)
 8001b90:	2000      	movs	r0, #0
 8001b92:	f00c fc95 	bl	800e4c0 <strtok>
 8001b96:	6038      	str	r0, [r7, #0]
		token = strtok(NULL, ",");
 8001b98:	4929      	ldr	r1, [pc, #164]	@ (8001c40 <gsm_batteryCheck+0x110>)
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f00c fc90 	bl	800e4c0 <strtok>
 8001ba0:	6038      	str	r0, [r7, #0]
		token[4] = '\0';
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
		batVoltage = (token[0] - '0')*1000 + (token[1] - '0')*100 + (token[2] - '0')*10 + (token[3] - '0');
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	3b30      	subs	r3, #48	@ 0x30
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	0152      	lsls	r2, r2, #5
 8001bb6:	1ad2      	subs	r2, r2, r3
 8001bb8:	0092      	lsls	r2, r2, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	3b30      	subs	r3, #48	@ 0x30
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4619      	mov	r1, r3
 8001bcc:	0089      	lsls	r1, r1, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	0088      	lsls	r0, r1, #2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	440b      	add	r3, r1
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	3302      	adds	r3, #2
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	3b30      	subs	r3, #48	@ 0x30
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	4619      	mov	r1, r3
 8001bee:	0089      	lsls	r1, r1, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	3203      	adds	r2, #3
 8001bfe:	7812      	ldrb	r2, [r2, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b30      	subs	r3, #48	@ 0x30
 8001c06:	81fb      	strh	r3, [r7, #14]

		free(messageCopy);
 8001c08:	68b8      	ldr	r0, [r7, #8]
 8001c0a:	f00a fecd 	bl	800c9a8 <free>

		if(batVoltage >= 3500 ){
 8001c0e:	89fb      	ldrh	r3, [r7, #14]
 8001c10:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <gsm_batteryCheck+0xec>
			return 1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e007      	b.n	8001c2c <gsm_batteryCheck+0xfc>
		}
		else if(batVoltage < 3500){
 8001c1c:	89fb      	ldrh	r3, [r7, #14]
 8001c1e:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d801      	bhi.n	8001c2a <gsm_batteryCheck+0xfa>
			return 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <gsm_batteryCheck+0xfc>
		}
	}
	return 1;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	08012698 	.word	0x08012698
 8001c38:	08012978 	.word	0x08012978
 8001c3c:	20000304 	.word	0x20000304
 8001c40:	080127b8 	.word	0x080127b8

08001c44 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]

	if(huart->Instance == USART1){
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a2e      	ldr	r2, [pc, #184]	@ (8001d10 <HAL_UARTEx_RxEventCallback+0xcc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d139      	bne.n	8001cce <HAL_UARTEx_RxEventCallback+0x8a>
		//char output[40];
		char* result = {0};
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
		char* coordinate = {0};
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
		result = strstr((char *)RX_BufferGPS,"PMTK");
 8001c62:	492c      	ldr	r1, [pc, #176]	@ (8001d14 <HAL_UARTEx_RxEventCallback+0xd0>)
 8001c64:	482c      	ldr	r0, [pc, #176]	@ (8001d18 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001c66:	f00c fc87 	bl	800e578 <strstr>
 8001c6a:	6138      	str	r0, [r7, #16]
		coordinate = strstr((char *)RX_BufferGPS,"RMC");
 8001c6c:	492b      	ldr	r1, [pc, #172]	@ (8001d1c <HAL_UARTEx_RxEventCallback+0xd8>)
 8001c6e:	482a      	ldr	r0, [pc, #168]	@ (8001d18 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001c70:	f00c fc82 	bl	800e578 <strstr>
 8001c74:	60f8      	str	r0, [r7, #12]
		if(((result == NULL)&&(coordinate != NULL))||(GPS_StartUP != 1)){ //Prevents command responses from being NMEA processed
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d102      	bne.n	8001c82 <HAL_UARTEx_RxEventCallback+0x3e>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d103      	bne.n	8001c8a <HAL_UARTEx_RxEventCallback+0x46>
 8001c82:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d01c      	beq.n	8001cc4 <HAL_UARTEx_RxEventCallback+0x80>
			for(int i = 0; i < Size; i++ ){
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e015      	b.n	8001cbc <HAL_UARTEx_RxEventCallback+0x78>
				if(RX_BufferGPS[i] == '\n'){
 8001c90:	4a21      	ldr	r2, [pc, #132]	@ (8001d18 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b0a      	cmp	r3, #10
 8001c9a:	d10c      	bne.n	8001cb6 <HAL_UARTEx_RxEventCallback+0x72>
					//TTFF = TTFF/1000;
					//snprintf(output,40,"Time=%u\r\n",(uint16_t)TTFF);
					//snprintf(output, i+2 ,"%s\r\n",RX_BufferGPS);//print gps incoming message
					//CDC_Transmit_FS((uint8_t*) output, strlen(output));
					//}
					gps_processNMEA(RX_BufferGPS, i+1);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	481c      	ldr	r0, [pc, #112]	@ (8001d18 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001ca8:	f000 ff14 	bl	8002ad4 <gps_processNMEA>
					memset(RX_BufferGPS,0,RX_BUFFER_SIZE_GPS);
 8001cac:	22c8      	movs	r2, #200	@ 0xc8
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4819      	ldr	r0, [pc, #100]	@ (8001d18 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001cb2:	f00c fbca 	bl	800e44a <memset>
			for(int i = 0; i < Size; i++ ){
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbe5      	blt.n	8001c90 <HAL_UARTEx_RxEventCallback+0x4c>
				}
			}
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 8001cc4:	22c8      	movs	r2, #200	@ 0xc8
 8001cc6:	4914      	ldr	r1, [pc, #80]	@ (8001d18 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001cc8:	4816      	ldr	r0, [pc, #88]	@ (8001d24 <HAL_UARTEx_RxEventCallback+0xe0>)
 8001cca:	f005 fcf9 	bl	80076c0 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

	if(huart->Instance == USART2){
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a15      	ldr	r2, [pc, #84]	@ (8001d28 <HAL_UARTEx_RxEventCallback+0xe4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d117      	bne.n	8001d08 <HAL_UARTEx_RxEventCallback+0xc4>

			char *result = {0};
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
			result =strstr(RX_Buffer_GSM,"+CMTI:"); //strstr function searches for 1st occurrence of the substring in the main string
 8001cdc:	4913      	ldr	r1, [pc, #76]	@ (8001d2c <HAL_UARTEx_RxEventCallback+0xe8>)
 8001cde:	4814      	ldr	r0, [pc, #80]	@ (8001d30 <HAL_UARTEx_RxEventCallback+0xec>)
 8001ce0:	f00c fc4a 	bl	800e578 <strstr>
 8001ce4:	60b8      	str	r0, [r7, #8]

			if(result != NULL){ //check for a new message notification
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <HAL_UARTEx_RxEventCallback+0xb8>
			 newMessageFlag = 1;
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_UARTEx_RxEventCallback+0xf0>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
			 messageTIM = HAL_GetTick();
 8001cf2:	f002 fa61 	bl	80041b8 <HAL_GetTick>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8001d38 <HAL_UARTEx_RxEventCallback+0xf4>)
 8001cfa:	6013      	str	r3, [r2, #0]
			}
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2,(uint8_t*)RX_Buffer_GSM, RX_BUFFER_SIZE_GSM);
 8001cfc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d00:	490b      	ldr	r1, [pc, #44]	@ (8001d30 <HAL_UARTEx_RxEventCallback+0xec>)
 8001d02:	480e      	ldr	r0, [pc, #56]	@ (8001d3c <HAL_UARTEx_RxEventCallback+0xf8>)
 8001d04:	f005 fcdc 	bl	80076c0 <HAL_UARTEx_ReceiveToIdle_DMA>
		}
}
 8001d08:	bf00      	nop
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40011000 	.word	0x40011000
 8001d14:	08012984 	.word	0x08012984
 8001d18:	20000798 	.word	0x20000798
 8001d1c:	0801298c 	.word	0x0801298c
 8001d20:	20000868 	.word	0x20000868
 8001d24:	20000588 	.word	0x20000588
 8001d28:	40004400 	.word	0x40004400
 8001d2c:	08012990 	.word	0x08012990
 8001d30:	20000304 	.word	0x20000304
 8001d34:	20000302 	.word	0x20000302
 8001d38:	2000088c 	.word	0x2000088c
 8001d3c:	200005d0 	.word	0x200005d0

08001d40 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //GPS 10 minute status check
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b08c      	sub	sp, #48	@ 0x30
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]


	if(newMessageFlag == 0){
 8001d48:	4b4f      	ldr	r3, [pc, #316]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f040 8097 	bne.w	8001e80 <HAL_TIM_PeriodElapsedCallback+0x140>

	if(htim->Instance == TIM2){//GPS maintenance
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d5a:	d13b      	bne.n	8001dd4 <HAL_TIM_PeriodElapsedCallback+0x94>
		char output[] = "GPS Status Check:\r\n";
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001d5e:	f107 041c 	add.w	r4, r7, #28
 8001d62:	461d      	mov	r5, r3
 8001d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	6023      	str	r3, [r4, #0]
		CDC_Transmit_FS((uint8_t *)output, strlen(output));
 8001d6c:	f107 031c 	add.w	r3, r7, #28
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fa85 	bl	8000280 <strlen>
 8001d76:	4603      	mov	r3, r0
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00a f9b3 	bl	800c0ec <CDC_Transmit_FS>
			  if(gps_sleepFlag == 1 ){
 8001d86:	4b42      	ldr	r3, [pc, #264]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d107      	bne.n	8001d9e <HAL_TIM_PeriodElapsedCallback+0x5e>
				  gps_updateMode(1,0,0); //Message wakes up the gps module
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	2001      	movs	r0, #1
 8001d94:	f000 ffb6 	bl	8002d04 <gps_updateMode>
				  HAL_Delay(50);
 8001d98:	2032      	movs	r0, #50	@ 0x32
 8001d9a:	f002 fa19 	bl	80041d0 <HAL_Delay>
			  }

			  if (gps_command((uint8_t *)gps_Test, "PMTK001,0,3") == GpsError){//Double error check
 8001d9e:	493d      	ldr	r1, [pc, #244]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001da0:	483d      	ldr	r0, [pc, #244]	@ (8001e98 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001da2:	f000 ff23 	bl	8002bec <gps_command>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d108      	bne.n	8001dbe <HAL_TIM_PeriodElapsedCallback+0x7e>
				  if(gps_command((uint8_t *)gps_Test,"PMTK001,0,3") != Gpsok){
 8001dac:	4939      	ldr	r1, [pc, #228]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001dae:	483a      	ldr	r0, [pc, #232]	@ (8001e98 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001db0:	f000 ff1c 	bl	8002bec <gps_command>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_TIM_PeriodElapsedCallback+0x7e>
				  				  gps_init(); //reset and initialize
 8001dba:	f000 feaf 	bl	8002b1c <gps_init>
				  			  }
			  }

			  if(gps_sleepFlag == 1){ //return to sleep mode
 8001dbe:	4b34      	ldr	r3, [pc, #208]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d106      	bne.n	8001dd4 <HAL_TIM_PeriodElapsedCallback+0x94>
				  gps_updateMode(3,10000,30000);
 8001dc6:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001dca:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f000 ff98 	bl	8002d04 <gps_updateMode>
			  }
	}

	if(htim->Instance == TIM3){//GSM maintenance
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a30      	ldr	r2, [pc, #192]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d150      	bne.n	8001e80 <HAL_TIM_PeriodElapsedCallback+0x140>

		if(gsm_TimerCounter == 4){ //Set to be called every 2.5 minutes
 8001dde:	4b30      	ldr	r3, [pc, #192]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d146      	bne.n	8001e74 <HAL_TIM_PeriodElapsedCallback+0x134>
			gsm_TimerCounter = 0;
 8001de6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
		char output[] = "GSM Status Check:\r\n";
 8001dec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001dee:	f107 0408 	add.w	r4, r7, #8
 8001df2:	461d      	mov	r5, r3
 8001df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	6023      	str	r3, [r4, #0]
		CDC_Transmit_FS((uint8_t *)output, strlen(output));
 8001dfc:	f107 0308 	add.w	r3, r7, #8
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fa3d 	bl	8000280 <strlen>
 8001e06:	4603      	mov	r3, r0
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	f107 0308 	add.w	r3, r7, #8
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f00a f96b 	bl	800c0ec <CDC_Transmit_FS>

			if(gsm_sleepFlag == 1){
 8001e16:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10d      	bne.n	8001e3a <HAL_TIM_PeriodElapsedCallback+0xfa>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);//Wake up SIM800C
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2110      	movs	r1, #16
 8001e22:	4822      	ldr	r0, [pc, #136]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001e24:	f003 f890 	bl	8004f48 <HAL_GPIO_WritePin>
				gsm_sleepFlag = 0;
 8001e28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
				gsm_sleepReturnFlag = 1;
 8001e2e:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
				HAL_Delay(250);
 8001e34:	20fa      	movs	r0, #250	@ 0xfa
 8001e36:	f002 f9cb 	bl	80041d0 <HAL_Delay>
			}

			if(gsm_init() == GsmError){//Check if startup failed then therefore device is off (Evaluates proper running and if not resets device)
 8001e3a:	f7ff f8db 	bl	8000ff4 <gsm_init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x108>
				gsm_init(); //turn the device back on
 8001e44:	f7ff f8d6 	bl	8000ff4 <gsm_init>
			}

			if(gsm_batteryCheck() == 0){
 8001e48:	f7ff fe72 	bl	8001b30 <gsm_batteryCheck>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d102      	bne.n	8001e58 <HAL_TIM_PeriodElapsedCallback+0x118>
				//gsm_sendSMS("Battery Low");
				//mode_update(Mode4,0,0,0);
				LowBatFlag = 1; // Sets system to mode 4
 8001e52:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
			}

			if((gsm_sleepFlag == 0)&&(gsm_sleepReturnFlag == 1)){
 8001e58:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10f      	bne.n	8001e80 <HAL_TIM_PeriodElapsedCallback+0x140>
 8001e60:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d10b      	bne.n	8001e80 <HAL_TIM_PeriodElapsedCallback+0x140>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);//Sleep GSM
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2110      	movs	r1, #16
 8001e6c:	480f      	ldr	r0, [pc, #60]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001e6e:	f003 f86b 	bl	8004f48 <HAL_GPIO_WritePin>
		}

	}
	}

}
 8001e72:	e005      	b.n	8001e80 <HAL_TIM_PeriodElapsedCallback+0x140>
			gsm_TimerCounter++;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001e7e:	701a      	strb	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	3730      	adds	r7, #48	@ 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bdb0      	pop	{r4, r5, r7, pc}
 8001e88:	20000302 	.word	0x20000302
 8001e8c:	080129b4 	.word	0x080129b4
 8001e90:	20000860 	.word	0x20000860
 8001e94:	08012998 	.word	0x08012998
 8001e98:	080129a4 	.word	0x080129a4
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	20000880 	.word	0x20000880
 8001ea4:	080129c8 	.word	0x080129c8
 8001ea8:	20000869 	.word	0x20000869
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	2000086a 	.word	0x2000086a
 8001eb4:	20000881 	.word	0x20000881

08001eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b0ad      	sub	sp, #180	@ 0xb4
 8001ebc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ebe:	f002 f915 	bl	80040ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec2:	f000 fbc7 	bl	8002654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec6:	f000 fd65 	bl	8002994 <MX_GPIO_Init>
  MX_DMA_Init();
 8001eca:	f000 fd1d 	bl	8002908 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001ece:	f000 fcc7 	bl	8002860 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001ed2:	f00a f84d 	bl	800bf70 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001ed6:	f000 fc27 	bl	8002728 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001eda:	f000 fceb 	bl	80028b4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001ede:	f000 fc71 	bl	80027c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8001ee2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ee6:	f002 f973 	bl	80041d0 <HAL_Delay>

  gsm_init();
 8001eea:	f7ff f883 	bl	8000ff4 <gsm_init>
  HAL_TIM_Base_Start_IT(&htim3); //GSM check tim
 8001eee:	48c0      	ldr	r0, [pc, #768]	@ (80021f0 <main+0x338>)
 8001ef0:	f004 ff3c 	bl	8006d6c <HAL_TIM_Base_Start_IT>


  HAL_Delay(500);
 8001ef4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ef8:	f002 f96a 	bl	80041d0 <HAL_Delay>

  GPS_StartUP = 1;
 8001efc:	4bbd      	ldr	r3, [pc, #756]	@ (80021f4 <main+0x33c>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
  gps_init();
 8001f02:	f000 fe0b 	bl	8002b1c <gps_init>
  HAL_TIM_Base_Start_IT(&htim2);//GPS check timer
 8001f06:	48bc      	ldr	r0, [pc, #752]	@ (80021f8 <main+0x340>)
 8001f08:	f004 ff30 	bl	8006d6c <HAL_TIM_Base_Start_IT>
  GPS_StartUP = 0;
 8001f0c:	4bb9      	ldr	r3, [pc, #740]	@ (80021f4 <main+0x33c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]

  HAL_Delay(500);
 8001f12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f16:	f002 f95b 	bl	80041d0 <HAL_Delay>

  GPS_timer= HAL_GetTick();
 8001f1a:	f002 f94d 	bl	80041b8 <HAL_GetTick>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4ab6      	ldr	r2, [pc, #728]	@ (80021fc <main+0x344>)
 8001f22:	6013      	str	r3, [r2, #0]

  //gsm_sendSMS("Hello World");
  snprintf(phone,strlen(MY_PHONE)+1,"%s",MY_PHONE);
 8001f24:	4bb6      	ldr	r3, [pc, #728]	@ (8002200 <main+0x348>)
 8001f26:	4ab7      	ldr	r2, [pc, #732]	@ (8002204 <main+0x34c>)
 8001f28:	210d      	movs	r1, #13
 8001f2a:	48b7      	ldr	r0, [pc, #732]	@ (8002208 <main+0x350>)
 8001f2c:	f00c f9f6 	bl	800e31c <sniprintf>

  float latitude = 0;
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  float longitude = 0;
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  unsigned long fixAgeGPS = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  uint32_t mode2Timer = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //GPS Data code//****************************************************************
		  if(GPS_encode == 1){
 8001f4c:	4baf      	ldr	r3, [pc, #700]	@ (800220c <main+0x354>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d118      	bne.n	8001f86 <main+0xce>
			  if(_is_gps_data_good){ // update current coordinates if data is good
 8001f54:	4bae      	ldr	r3, [pc, #696]	@ (8002210 <main+0x358>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d011      	beq.n	8001f80 <main+0xc8>
			  	  gps_f_get_position(&latitude, &longitude,&fixAgeGPS );
 8001f5c:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8001f60:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8001f64:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 f849 	bl	8004000 <gps_f_get_position>
			  	  //char output[50];
			  	  //snprintf(output, sizeof(output),"Latitude: %.6f, Longitude: %.6f \r\n",latitude,longitude);
		 		  //CDC_Transmit_FS((uint8_t *)output, strlen(output));
			  	  GPS_timer= HAL_GetTick();
 8001f6e:	f002 f923 	bl	80041b8 <HAL_GetTick>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4aa1      	ldr	r2, [pc, #644]	@ (80021fc <main+0x344>)
 8001f76:	6013      	str	r3, [r2, #0]
		 		  GPS_encode = 0;
 8001f78:	4ba4      	ldr	r3, [pc, #656]	@ (800220c <main+0x354>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
 8001f7e:	e002      	b.n	8001f86 <main+0xce>
		 	  }
		  else{
			  //char output[25];
			  //snprintf(output, sizeof(output),"GPS data is not good\r\n");
			  //CDC_Transmit_FS((uint8_t *)output, strlen(output));
			  GPS_encode = 0;
 8001f80:	4ba2      	ldr	r3, [pc, #648]	@ (800220c <main+0x354>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]

		  }
		  //**************************************************************************

		  //MISC//********************************************************************
		  if(newMessageFlag == 1){ //Handle new message received
 8001f86:	4ba3      	ldr	r3, [pc, #652]	@ (8002214 <main+0x35c>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d129      	bne.n	8001fe2 <main+0x12a>
			  if(gsm_sleepFlag == 1){//Ensure module is awake
 8001f8e:	4ba2      	ldr	r3, [pc, #648]	@ (8002218 <main+0x360>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d10d      	bne.n	8001fb2 <main+0xfa>
			  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);//Wake up SIM800C
 8001f96:	2200      	movs	r2, #0
 8001f98:	2110      	movs	r1, #16
 8001f9a:	48a0      	ldr	r0, [pc, #640]	@ (800221c <main+0x364>)
 8001f9c:	f002 ffd4 	bl	8004f48 <HAL_GPIO_WritePin>
			  		HAL_Delay(250);
 8001fa0:	20fa      	movs	r0, #250	@ 0xfa
 8001fa2:	f002 f915 	bl	80041d0 <HAL_Delay>
			  		gsm_sleepFlag = 0;
 8001fa6:	4b9c      	ldr	r3, [pc, #624]	@ (8002218 <main+0x360>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
			  		gsm_sleepReturnFlag = 1;
 8001fac:	4b9c      	ldr	r3, [pc, #624]	@ (8002220 <main+0x368>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
			  		}

			  gsm_readSMS();
 8001fb2:	f7ff fa8b 	bl	80014cc <gsm_readSMS>
			  gsm_sendCommand(ClearMemory,"OK\r\n");
 8001fb6:	499b      	ldr	r1, [pc, #620]	@ (8002224 <main+0x36c>)
 8001fb8:	489b      	ldr	r0, [pc, #620]	@ (8002228 <main+0x370>)
 8001fba:	f7ff f89d 	bl	80010f8 <gsm_sendCommand>

			  if(gsm_sleepReturnFlag == 1){
 8001fbe:	4b98      	ldr	r3, [pc, #608]	@ (8002220 <main+0x368>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10a      	bne.n	8001fdc <main+0x124>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);//SIm800C Sleep
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2110      	movs	r1, #16
 8001fca:	4894      	ldr	r0, [pc, #592]	@ (800221c <main+0x364>)
 8001fcc:	f002 ffbc 	bl	8004f48 <HAL_GPIO_WritePin>
				  gsm_sleepFlag = 1;
 8001fd0:	4b91      	ldr	r3, [pc, #580]	@ (8002218 <main+0x360>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
				  gsm_sleepReturnFlag = 0;
 8001fd6:	4b92      	ldr	r3, [pc, #584]	@ (8002220 <main+0x368>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
			  }

			  newMessageFlag = 0;
 8001fdc:	4b8d      	ldr	r3, [pc, #564]	@ (8002214 <main+0x35c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
		  }

		  if(sendCoordinateFlag == 1){ //Send location pin to user (uses most recent 'good' location data.
 8001fe2:	4b92      	ldr	r3, [pc, #584]	@ (800222c <main+0x374>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d110      	bne.n	800200c <main+0x154>
			  	  gsm_sendLocation(latitude, longitude);
 8001fea:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001fee:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8001ff2:	eef0 0a47 	vmov.f32	s1, s14
 8001ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffa:	f7ff fcbf 	bl	800197c <gsm_sendLocation>
			  	  CDC_Transmit_FS((uint8_t *)Location_Sent,strlen(Location_Sent) );
 8001ffe:	2117      	movs	r1, #23
 8002000:	488b      	ldr	r0, [pc, #556]	@ (8002230 <main+0x378>)
 8002002:	f00a f873 	bl	800c0ec <CDC_Transmit_FS>
		  		  sendCoordinateFlag = 0;
 8002006:	4b89      	ldr	r3, [pc, #548]	@ (800222c <main+0x374>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
		  	  }

		  if(LowBatFlag == 1){
 800200c:	4b89      	ldr	r3, [pc, #548]	@ (8002234 <main+0x37c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <main+0x168>
			  currentModeState = Mode4;
 8002014:	4b88      	ldr	r3, [pc, #544]	@ (8002238 <main+0x380>)
 8002016:	2204      	movs	r2, #4
 8002018:	701a      	strb	r2, [r3, #0]
			  newModeFlag = 1;
 800201a:	4b88      	ldr	r3, [pc, #544]	@ (800223c <main+0x384>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
		  }
		  //**************************************************************************


		  //State Machine code//******************************************************
		   switch(currentModeState){
 8002020:	4b85      	ldr	r3, [pc, #532]	@ (8002238 <main+0x380>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	3b01      	subs	r3, #1
 8002026:	2b03      	cmp	r3, #3
 8002028:	f200 817a 	bhi.w	8002320 <main+0x468>
 800202c:	a201      	add	r2, pc, #4	@ (adr r2, 8002034 <main+0x17c>)
 800202e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002032:	bf00      	nop
 8002034:	08002045 	.word	0x08002045
 8002038:	08002131 	.word	0x08002131
 800203c:	0800226d 	.word	0x0800226d
 8002040:	080022c3 	.word	0x080022c3

		   	   case(Mode1):

				 if(newModeFlag == 1){//Set new mode parameters
 8002044:	4b7d      	ldr	r3, [pc, #500]	@ (800223c <main+0x384>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d11f      	bne.n	800208c <main+0x1d4>
					 gsm_sendSMS("Mode 1 Set");
 800204c:	487c      	ldr	r0, [pc, #496]	@ (8002240 <main+0x388>)
 800204e:	f7ff f963 	bl	8001318 <gsm_sendSMS>
				   	 gsm_sendCommand("AT+CSCLK=1\r\n","OK\r\n");
 8002052:	4974      	ldr	r1, [pc, #464]	@ (8002224 <main+0x36c>)
 8002054:	487b      	ldr	r0, [pc, #492]	@ (8002244 <main+0x38c>)
 8002056:	f7ff f84f 	bl	80010f8 <gsm_sendCommand>
				   	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);//set sleep mode
 800205a:	2201      	movs	r2, #1
 800205c:	2110      	movs	r1, #16
 800205e:	486f      	ldr	r0, [pc, #444]	@ (800221c <main+0x364>)
 8002060:	f002 ff72 	bl	8004f48 <HAL_GPIO_WritePin>
				   	 gps_updateMode(3,1000,3000); //Period
 8002064:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002068:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800206c:	2003      	movs	r0, #3
 800206e:	f000 fe49 	bl	8002d04 <gps_updateMode>
					 CDC_Transmit_FS((uint8_t*)"GPS IDLE & GSM SLEEP SET\r\n",26);
 8002072:	211a      	movs	r1, #26
 8002074:	4874      	ldr	r0, [pc, #464]	@ (8002248 <main+0x390>)
 8002076:	f00a f839 	bl	800c0ec <CDC_Transmit_FS>
				   	 gsm_sleepFlag = 1;
 800207a:	4b67      	ldr	r3, [pc, #412]	@ (8002218 <main+0x360>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
				   	 gps_sleepFlag = 1;
 8002080:	4b72      	ldr	r3, [pc, #456]	@ (800224c <main+0x394>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
				   	 newModeFlag = 0;
 8002086:	4b6d      	ldr	r3, [pc, #436]	@ (800223c <main+0x384>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
				 }

				if(((gps_distance_between(latitude, longitude, geoFenceLat, geoFenceLong) - geoFenceSize) > 0) && ((longitude != 0) || (latitude != 0))){
 800208c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8002090:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8002094:	4b6e      	ldr	r3, [pc, #440]	@ (8002250 <main+0x398>)
 8002096:	edd3 6a00 	vldr	s13, [r3]
 800209a:	4b6e      	ldr	r3, [pc, #440]	@ (8002254 <main+0x39c>)
 800209c:	ed93 6a00 	vldr	s12, [r3]
 80020a0:	eef0 1a46 	vmov.f32	s3, s12
 80020a4:	eeb0 1a66 	vmov.f32	s2, s13
 80020a8:	eef0 0a47 	vmov.f32	s1, s14
 80020ac:	eeb0 0a67 	vmov.f32	s0, s15
 80020b0:	f001 fe70 	bl	8003d94 <gps_distance_between>
 80020b4:	eeb0 7a40 	vmov.f32	s14, s0
 80020b8:	4b67      	ldr	r3, [pc, #412]	@ (8002258 <main+0x3a0>)
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ca:	dc00      	bgt.n	80020ce <main+0x216>
					 gsm_sendLocation(latitude, longitude);
					 mode_update(Mode2,5,0,0);
				 }
		   	   	   //currentModeState = Mode1;

		   	   	 break;
 80020cc:	e123      	b.n	8002316 <main+0x45e>
				if(((gps_distance_between(latitude, longitude, geoFenceLat, geoFenceLong) - geoFenceSize) > 0) && ((longitude != 0) || (latitude != 0))){
 80020ce:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80020d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	d107      	bne.n	80020ec <main+0x234>
 80020dc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80020e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	f000 8115 	beq.w	8002316 <main+0x45e>
					 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);//Wake up SIM800C
 80020ec:	2200      	movs	r2, #0
 80020ee:	2110      	movs	r1, #16
 80020f0:	484a      	ldr	r0, [pc, #296]	@ (800221c <main+0x364>)
 80020f2:	f002 ff29 	bl	8004f48 <HAL_GPIO_WritePin>
					 HAL_Delay(250);
 80020f6:	20fa      	movs	r0, #250	@ 0xfa
 80020f8:	f002 f86a 	bl	80041d0 <HAL_Delay>
					 gsm_sleepFlag = 0;
 80020fc:	4b46      	ldr	r3, [pc, #280]	@ (8002218 <main+0x360>)
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
					 gsm_sendSMS("GEO-Fence breached!\r\n");
 8002102:	4856      	ldr	r0, [pc, #344]	@ (800225c <main+0x3a4>)
 8002104:	f7ff f908 	bl	8001318 <gsm_sendSMS>
					 gsm_sendLocation(latitude, longitude);
 8002108:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800210c:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8002110:	eef0 0a47 	vmov.f32	s1, s14
 8002114:	eeb0 0a67 	vmov.f32	s0, s15
 8002118:	f7ff fc30 	bl	800197c <gsm_sendLocation>
					 mode_update(Mode2,5,0,0);
 800211c:	ed9f 1a50 	vldr	s2, [pc, #320]	@ 8002260 <main+0x3a8>
 8002120:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 8002260 <main+0x3a8>
 8002124:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8002128:	2002      	movs	r0, #2
 800212a:	f000 febd 	bl	8002ea8 <mode_update>
		   	   	 break;
 800212e:	e0f2      	b.n	8002316 <main+0x45e>

		   	   case(Mode2):
					if((HAL_GetTick() - mode2Timer) > updatePeriod){
 8002130:	f002 f842 	bl	80041b8 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800213a:	1ad2      	subs	r2, r2, r3
 800213c:	4b49      	ldr	r3, [pc, #292]	@ (8002264 <main+0x3ac>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d92e      	bls.n	80021a2 <main+0x2ea>
						if(gsm_sleepFlag == 1){
 8002144:	4b34      	ldr	r3, [pc, #208]	@ (8002218 <main+0x360>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d10d      	bne.n	8002168 <main+0x2b0>
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);//Wake up SIM800C
 800214c:	2200      	movs	r2, #0
 800214e:	2110      	movs	r1, #16
 8002150:	4832      	ldr	r0, [pc, #200]	@ (800221c <main+0x364>)
 8002152:	f002 fef9 	bl	8004f48 <HAL_GPIO_WritePin>
							gsm_sleepFlag = 0;
 8002156:	4b30      	ldr	r3, [pc, #192]	@ (8002218 <main+0x360>)
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
							gsm_sleepReturnFlag = 1;
 800215c:	4b30      	ldr	r3, [pc, #192]	@ (8002220 <main+0x368>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
							HAL_Delay(100);
 8002162:	2064      	movs	r0, #100	@ 0x64
 8002164:	f002 f834 	bl	80041d0 <HAL_Delay>
						}

						gsm_sendLocation(latitude, longitude);
 8002168:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800216c:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8002170:	eef0 0a47 	vmov.f32	s1, s14
 8002174:	eeb0 0a67 	vmov.f32	s0, s15
 8002178:	f7ff fc00 	bl	800197c <gsm_sendLocation>
						mode2Timer = HAL_GetTick();
 800217c:	f002 f81c 	bl	80041b8 <HAL_GetTick>
 8002180:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

			    if(gsm_sleepReturnFlag == 1){
 8002184:	4b26      	ldr	r3, [pc, #152]	@ (8002220 <main+0x368>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d10a      	bne.n	80021a2 <main+0x2ea>
			    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);//set sleep SIM800C
 800218c:	2201      	movs	r2, #1
 800218e:	2110      	movs	r1, #16
 8002190:	4822      	ldr	r0, [pc, #136]	@ (800221c <main+0x364>)
 8002192:	f002 fed9 	bl	8004f48 <HAL_GPIO_WritePin>
			    	gsm_sleepFlag = 1;
 8002196:	4b20      	ldr	r3, [pc, #128]	@ (8002218 <main+0x360>)
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
					gsm_sleepReturnFlag = 1;
 800219c:	4b20      	ldr	r3, [pc, #128]	@ (8002220 <main+0x368>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
			    	}
					}

		   	   if(newModeFlag == 1){//Set new mode parameters
 80021a2:	4b26      	ldr	r3, [pc, #152]	@ (800223c <main+0x384>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	f040 80b7 	bne.w	800231a <main+0x462>
		   		   gsm_sendSMS("Mode 2 Set");
 80021ac:	482e      	ldr	r0, [pc, #184]	@ (8002268 <main+0x3b0>)
 80021ae:	f7ff f8b3 	bl	8001318 <gsm_sendSMS>
		   		   gsm_sendCommand("AT+CSCLK=1\r\n","OK\r\n");
 80021b2:	491c      	ldr	r1, [pc, #112]	@ (8002224 <main+0x36c>)
 80021b4:	4823      	ldr	r0, [pc, #140]	@ (8002244 <main+0x38c>)
 80021b6:	f7fe ff9f 	bl	80010f8 <gsm_sendCommand>
		   		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);//set sleep mode
 80021ba:	2201      	movs	r2, #1
 80021bc:	2110      	movs	r1, #16
 80021be:	4817      	ldr	r0, [pc, #92]	@ (800221c <main+0x364>)
 80021c0:	f002 fec2 	bl	8004f48 <HAL_GPIO_WritePin>
		   		   gps_updateMode(3,1000,3000); //Period
 80021c4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80021c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 fd99 	bl	8002d04 <gps_updateMode>
		   		   CDC_Transmit_FS((uint8_t*)"GPS IDLE & GSM SLEEP SET\r\n",26);
 80021d2:	211a      	movs	r1, #26
 80021d4:	481c      	ldr	r0, [pc, #112]	@ (8002248 <main+0x390>)
 80021d6:	f009 ff89 	bl	800c0ec <CDC_Transmit_FS>
		   		   gsm_sleepFlag = 1;
 80021da:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <main+0x360>)
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
		   		   gps_sleepFlag = 1;
 80021e0:	4b1a      	ldr	r3, [pc, #104]	@ (800224c <main+0x394>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
		   		   newModeFlag = 0;
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <main+0x384>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
		   	   }
		   	   //currentModeState = Mode2;

		   	   break;
 80021ec:	e095      	b.n	800231a <main+0x462>
 80021ee:	bf00      	nop
 80021f0:	20000540 	.word	0x20000540
 80021f4:	20000868 	.word	0x20000868
 80021f8:	200004f8 	.word	0x200004f8
 80021fc:	20000864 	.word	0x20000864
 8002200:	080129dc 	.word	0x080129dc
 8002204:	080129ec 	.word	0x080129ec
 8002208:	2000086c 	.word	0x2000086c
 800220c:	20000861 	.word	0x20000861
 8002210:	200008fe 	.word	0x200008fe
 8002214:	20000302 	.word	0x20000302
 8002218:	20000869 	.word	0x20000869
 800221c:	40020000 	.word	0x40020000
 8002220:	2000086a 	.word	0x2000086a
 8002224:	080129f0 	.word	0x080129f0
 8002228:	080129f8 	.word	0x080129f8
 800222c:	20000882 	.word	0x20000882
 8002230:	08012a08 	.word	0x08012a08
 8002234:	20000881 	.word	0x20000881
 8002238:	20000000 	.word	0x20000000
 800223c:	20000883 	.word	0x20000883
 8002240:	08012a20 	.word	0x08012a20
 8002244:	08012a2c 	.word	0x08012a2c
 8002248:	08012a3c 	.word	0x08012a3c
 800224c:	20000860 	.word	0x20000860
 8002250:	20000884 	.word	0x20000884
 8002254:	20000888 	.word	0x20000888
 8002258:	20000004 	.word	0x20000004
 800225c:	08012a58 	.word	0x08012a58
 8002260:	00000000 	.word	0x00000000
 8002264:	20000008 	.word	0x20000008
 8002268:	08012a70 	.word	0x08012a70

		   	   case(Mode3):
	  			  currentModeState = Mode3;
 800226c:	4bbf      	ldr	r3, [pc, #764]	@ (800256c <main+0x6b4>)
 800226e:	2203      	movs	r2, #3
 8002270:	701a      	strb	r2, [r3, #0]

		   	   if(newModeFlag == 1){
 8002272:	4bbf      	ldr	r3, [pc, #764]	@ (8002570 <main+0x6b8>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d151      	bne.n	800231e <main+0x466>
		   		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);//turn off sleep mode
 800227a:	2200      	movs	r2, #0
 800227c:	2110      	movs	r1, #16
 800227e:	48bd      	ldr	r0, [pc, #756]	@ (8002574 <main+0x6bc>)
 8002280:	f002 fe62 	bl	8004f48 <HAL_GPIO_WritePin>
		   		   HAL_Delay(250);
 8002284:	20fa      	movs	r0, #250	@ 0xfa
 8002286:	f001 ffa3 	bl	80041d0 <HAL_Delay>
		   		   gsm_sendCommand("AT+CSCLK=0","OK");
 800228a:	49bb      	ldr	r1, [pc, #748]	@ (8002578 <main+0x6c0>)
 800228c:	48bb      	ldr	r0, [pc, #748]	@ (800257c <main+0x6c4>)
 800228e:	f7fe ff33 	bl	80010f8 <gsm_sendCommand>
		   		   HAL_Delay(100);
 8002292:	2064      	movs	r0, #100	@ 0x64
 8002294:	f001 ff9c 	bl	80041d0 <HAL_Delay>
		   		   gsm_sendSMS("Mode 3 Set");
 8002298:	48b9      	ldr	r0, [pc, #740]	@ (8002580 <main+0x6c8>)
 800229a:	f7ff f83d 	bl	8001318 <gsm_sendSMS>
		   		   gps_updateMode(1,0,0); //Period
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	2001      	movs	r0, #1
 80022a4:	f000 fd2e 	bl	8002d04 <gps_updateMode>
		   		   HAL_Delay(100);
 80022a8:	2064      	movs	r0, #100	@ 0x64
 80022aa:	f001 ff91 	bl	80041d0 <HAL_Delay>
		   		   newModeFlag = 0;
 80022ae:	4bb0      	ldr	r3, [pc, #704]	@ (8002570 <main+0x6b8>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
		   		   gsm_sleepFlag = 0;
 80022b4:	4bb3      	ldr	r3, [pc, #716]	@ (8002584 <main+0x6cc>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
		   		   gps_sleepFlag = 0;
 80022ba:	4bb3      	ldr	r3, [pc, #716]	@ (8002588 <main+0x6d0>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
		   	   }

		   	   break;
 80022c0:	e02d      	b.n	800231e <main+0x466>

		   	   case(Mode4)://Low power mode GPS remains in standby and GSM stays in sleep unless message is received
					currentModeState = Mode4;
 80022c2:	4baa      	ldr	r3, [pc, #680]	@ (800256c <main+0x6b4>)
 80022c4:	2204      	movs	r2, #4
 80022c6:	701a      	strb	r2, [r3, #0]

		   	   if(newModeFlag == 1){
 80022c8:	4ba9      	ldr	r3, [pc, #676]	@ (8002570 <main+0x6b8>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d127      	bne.n	8002320 <main+0x468>
		   		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);//Wake up SIM800C
 80022d0:	2200      	movs	r2, #0
 80022d2:	2110      	movs	r1, #16
 80022d4:	48a7      	ldr	r0, [pc, #668]	@ (8002574 <main+0x6bc>)
 80022d6:	f002 fe37 	bl	8004f48 <HAL_GPIO_WritePin>
		   		   HAL_Delay(250);
 80022da:	20fa      	movs	r0, #250	@ 0xfa
 80022dc:	f001 ff78 	bl	80041d0 <HAL_Delay>
		   		   gsm_sendSMS("Mode 4 Set");
 80022e0:	48aa      	ldr	r0, [pc, #680]	@ (800258c <main+0x6d4>)
 80022e2:	f7ff f819 	bl	8001318 <gsm_sendSMS>
		   		   gps_updateMode(2,0,0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2002      	movs	r0, #2
 80022ec:	f000 fd0a 	bl	8002d04 <gps_updateMode>
		   		   gsm_sendCommand("AT+CSCLK=1\r\n","OK\r\n");
 80022f0:	49a7      	ldr	r1, [pc, #668]	@ (8002590 <main+0x6d8>)
 80022f2:	48a8      	ldr	r0, [pc, #672]	@ (8002594 <main+0x6dc>)
 80022f4:	f7fe ff00 	bl	80010f8 <gsm_sendCommand>
		   		   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);//turn on sleep mode
 80022f8:	2201      	movs	r2, #1
 80022fa:	2110      	movs	r1, #16
 80022fc:	489d      	ldr	r0, [pc, #628]	@ (8002574 <main+0x6bc>)
 80022fe:	f002 fe23 	bl	8004f48 <HAL_GPIO_WritePin>
		   		   newModeFlag = 0;
 8002302:	4b9b      	ldr	r3, [pc, #620]	@ (8002570 <main+0x6b8>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
		   		   gsm_sleepFlag = 1;
 8002308:	4b9e      	ldr	r3, [pc, #632]	@ (8002584 <main+0x6cc>)
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
		   		   gps_sleepFlag = 1;
 800230e:	4b9e      	ldr	r3, [pc, #632]	@ (8002588 <main+0x6d0>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e004      	b.n	8002320 <main+0x468>
		   	   	 break;
 8002316:	bf00      	nop
 8002318:	e002      	b.n	8002320 <main+0x468>
		   	   break;
 800231a:	bf00      	nop
 800231c:	e000      	b.n	8002320 <main+0x468>
		   	   break;
 800231e:	bf00      	nop

		   }

		  //**************************************************************************

		      if(UserRxBufferFS[0] == '1'){
 8002320:	4b9d      	ldr	r3, [pc, #628]	@ (8002598 <main+0x6e0>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b31      	cmp	r3, #49	@ 0x31
 8002326:	d110      	bne.n	800234a <main+0x492>
		    	  gps_command((uint8_t *) gps_Test, "PMTK001,0,3");
 8002328:	499c      	ldr	r1, [pc, #624]	@ (800259c <main+0x6e4>)
 800232a:	489d      	ldr	r0, [pc, #628]	@ (80025a0 <main+0x6e8>)
 800232c:	f000 fc5e 	bl	8002bec <gps_command>
		    	  gps_sleepFlag = 0;
 8002330:	4b95      	ldr	r3, [pc, #596]	@ (8002588 <main+0x6d0>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
		 		  memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 8002336:	4898      	ldr	r0, [pc, #608]	@ (8002598 <main+0x6e0>)
 8002338:	f7fd ffa2 	bl	8000280 <strlen>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	2100      	movs	r1, #0
 8002342:	4895      	ldr	r0, [pc, #596]	@ (8002598 <main+0x6e0>)
 8002344:	f00c f881 	bl	800e44a <memset>
 8002348:	e600      	b.n	8001f4c <main+0x94>
		 	  }

		 	  else if(UserRxBufferFS[0] == '2'){
 800234a:	4b93      	ldr	r3, [pc, #588]	@ (8002598 <main+0x6e0>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b32      	cmp	r3, #50	@ 0x32
 8002350:	d113      	bne.n	800237a <main+0x4c2>
		 		 gps_updateMode(3,10000,30000);
 8002352:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002356:	f242 7110 	movw	r1, #10000	@ 0x2710
 800235a:	2003      	movs	r0, #3
 800235c:	f000 fcd2 	bl	8002d04 <gps_updateMode>
		 		 gps_sleepFlag = 1;
 8002360:	4b89      	ldr	r3, [pc, #548]	@ (8002588 <main+0x6d0>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
		 		  memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 8002366:	488c      	ldr	r0, [pc, #560]	@ (8002598 <main+0x6e0>)
 8002368:	f7fd ff8a 	bl	8000280 <strlen>
 800236c:	4603      	mov	r3, r0
 800236e:	461a      	mov	r2, r3
 8002370:	2100      	movs	r1, #0
 8002372:	4889      	ldr	r0, [pc, #548]	@ (8002598 <main+0x6e0>)
 8002374:	f00c f869 	bl	800e44a <memset>
 8002378:	e5e8      	b.n	8001f4c <main+0x94>
		 	  }

		 	  else if(UserRxBufferFS[0] == '3'){
 800237a:	4b87      	ldr	r3, [pc, #540]	@ (8002598 <main+0x6e0>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b33      	cmp	r3, #51	@ 0x33
 8002380:	d11d      	bne.n	80023be <main+0x506>
		 		  uint8_t TEST[] = "$PMTK000*32\r\n"; //Message wakes up the gps module
 8002382:	4b87      	ldr	r3, [pc, #540]	@ (80025a0 <main+0x6e8>)
 8002384:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8002388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800238a:	c407      	stmia	r4!, {r0, r1, r2}
 800238c:	8023      	strh	r3, [r4, #0]
		 		   gps_command(TEST,"PMTK001,0,3");
 800238e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002392:	4982      	ldr	r1, [pc, #520]	@ (800259c <main+0x6e4>)
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fc29 	bl	8002bec <gps_command>
		 		   HAL_Delay(5000);
 800239a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800239e:	f001 ff17 	bl	80041d0 <HAL_Delay>
		 		  gps_command((uint8_t *) LOW_UPDATE_RATE, "PMTK001,220,3");
 80023a2:	4980      	ldr	r1, [pc, #512]	@ (80025a4 <main+0x6ec>)
 80023a4:	4880      	ldr	r0, [pc, #512]	@ (80025a8 <main+0x6f0>)
 80023a6:	f000 fc21 	bl	8002bec <gps_command>
		 		   memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 80023aa:	487b      	ldr	r0, [pc, #492]	@ (8002598 <main+0x6e0>)
 80023ac:	f7fd ff68 	bl	8000280 <strlen>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	2100      	movs	r1, #0
 80023b6:	4878      	ldr	r0, [pc, #480]	@ (8002598 <main+0x6e0>)
 80023b8:	f00c f847 	bl	800e44a <memset>
 80023bc:	e5c6      	b.n	8001f4c <main+0x94>
		 	  }

		 	  else if(UserRxBufferFS[0] == '4'){
 80023be:	4b76      	ldr	r3, [pc, #472]	@ (8002598 <main+0x6e0>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b34      	cmp	r3, #52	@ 0x34
 80023c4:	d118      	bne.n	80023f8 <main+0x540>
		 		  uint8_t rmcCommand[] = "$PMTK161,0*28\r\n"; //enable sleep mode only
 80023c6:	4b79      	ldr	r3, [pc, #484]	@ (80025ac <main+0x6f4>)
 80023c8:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 80023cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 		  	gps_command(rmcCommand, "PMTK001,161,3");
 80023d2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80023d6:	4976      	ldr	r1, [pc, #472]	@ (80025b0 <main+0x6f8>)
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fc07 	bl	8002bec <gps_command>
		 		  	gps_sleepFlag = 1;
 80023de:	4b6a      	ldr	r3, [pc, #424]	@ (8002588 <main+0x6d0>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
		 		  memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 80023e4:	486c      	ldr	r0, [pc, #432]	@ (8002598 <main+0x6e0>)
 80023e6:	f7fd ff4b 	bl	8000280 <strlen>
 80023ea:	4603      	mov	r3, r0
 80023ec:	461a      	mov	r2, r3
 80023ee:	2100      	movs	r1, #0
 80023f0:	4869      	ldr	r0, [pc, #420]	@ (8002598 <main+0x6e0>)
 80023f2:	f00c f82a 	bl	800e44a <memset>
 80023f6:	e5a9      	b.n	8001f4c <main+0x94>
		 	  }

		 	 else if(UserRxBufferFS[0] == '5'){
 80023f8:	4b67      	ldr	r3, [pc, #412]	@ (8002598 <main+0x6e0>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b35      	cmp	r3, #53	@ 0x35
 80023fe:	d110      	bne.n	8002422 <main+0x56a>
		 		 	 gps_updateMode(3,15000,30000);
 8002400:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002404:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8002408:	2003      	movs	r0, #3
 800240a:	f000 fc7b 	bl	8002d04 <gps_updateMode>
		 			 memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 800240e:	4862      	ldr	r0, [pc, #392]	@ (8002598 <main+0x6e0>)
 8002410:	f7fd ff36 	bl	8000280 <strlen>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	2100      	movs	r1, #0
 800241a:	485f      	ldr	r0, [pc, #380]	@ (8002598 <main+0x6e0>)
 800241c:	f00c f815 	bl	800e44a <memset>
 8002420:	e594      	b.n	8001f4c <main+0x94>
		 			 }

		 	else if(UserRxBufferFS[0] == '6'){
 8002422:	4b5d      	ldr	r3, [pc, #372]	@ (8002598 <main+0x6e0>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b36      	cmp	r3, #54	@ 0x36
 8002428:	f040 808d 	bne.w	8002546 <main+0x68e>
		 		char url[100];
		 				gsm_sendCommand("AT+SAPBR=3,1,\"Contype\",\"GPRS\"\r\n","OK\r\n");
 800242c:	4958      	ldr	r1, [pc, #352]	@ (8002590 <main+0x6d8>)
 800242e:	4861      	ldr	r0, [pc, #388]	@ (80025b4 <main+0x6fc>)
 8002430:	f7fe fe62 	bl	80010f8 <gsm_sendCommand>
		 				gsm_sendCommand("AT+SAPBR=3,1,\"APN\",\"CMNET\"\r\n","OK\r\n");
 8002434:	4956      	ldr	r1, [pc, #344]	@ (8002590 <main+0x6d8>)
 8002436:	4860      	ldr	r0, [pc, #384]	@ (80025b8 <main+0x700>)
 8002438:	f7fe fe5e 	bl	80010f8 <gsm_sendCommand>
		 				gsm_sendCommand("AT+SAPBR=1,1\r\n","OK\r\n");
 800243c:	4954      	ldr	r1, [pc, #336]	@ (8002590 <main+0x6d8>)
 800243e:	485f      	ldr	r0, [pc, #380]	@ (80025bc <main+0x704>)
 8002440:	f7fe fe5a 	bl	80010f8 <gsm_sendCommand>
		 				if (gsm_sendCommand("AT+SAPBR=2,1\r\n","OK\r\n") == Gsmok){ //Network connection secured?
 8002444:	4952      	ldr	r1, [pc, #328]	@ (8002590 <main+0x6d8>)
 8002446:	485e      	ldr	r0, [pc, #376]	@ (80025c0 <main+0x708>)
 8002448:	f7fe fe56 	bl	80010f8 <gsm_sendCommand>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d16b      	bne.n	800252a <main+0x672>
		 				gsm_sendCommand("AT+CLBSCFG=0,1\r\n","OK\r\n");
 8002452:	494f      	ldr	r1, [pc, #316]	@ (8002590 <main+0x6d8>)
 8002454:	485b      	ldr	r0, [pc, #364]	@ (80025c4 <main+0x70c>)
 8002456:	f7fe fe4f 	bl	80010f8 <gsm_sendCommand>
		 				gsm_sendCommand("AT+CLBSCFG=0,2\r\n","OK\r\n");
 800245a:	494d      	ldr	r1, [pc, #308]	@ (8002590 <main+0x6d8>)
 800245c:	485a      	ldr	r0, [pc, #360]	@ (80025c8 <main+0x710>)
 800245e:	f7fe fe4b 	bl	80010f8 <gsm_sendCommand>
		 				gsm_sendCommand("AT+CLBSCFG=1,3,\"lbs-simcom.com:3002\"\r\n","OK\r\n");
 8002462:	494b      	ldr	r1, [pc, #300]	@ (8002590 <main+0x6d8>)
 8002464:	4859      	ldr	r0, [pc, #356]	@ (80025cc <main+0x714>)
 8002466:	f7fe fe47 	bl	80010f8 <gsm_sendCommand>
		 				HAL_Delay(100);
 800246a:	2064      	movs	r0, #100	@ 0x64
 800246c:	f001 feb0 	bl	80041d0 <HAL_Delay>

		 				if (gsm_sendCommand("AT+CLBS=1,1\r\n","OK\r\n") == Gsmok){ //Location returned?
 8002470:	4947      	ldr	r1, [pc, #284]	@ (8002590 <main+0x6d8>)
 8002472:	4857      	ldr	r0, [pc, #348]	@ (80025d0 <main+0x718>)
 8002474:	f7fe fe40 	bl	80010f8 <gsm_sendCommand>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d155      	bne.n	800252a <main+0x672>
		 				//char *token = NULL;
		 					char *messageCopy = NULL;
 800247e:	2300      	movs	r3, #0
 8002480:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		 					size_t length = strlen(RX_Buffer_GSM);
 8002484:	4853      	ldr	r0, [pc, #332]	@ (80025d4 <main+0x71c>)
 8002486:	f7fd fefb 	bl	8000280 <strlen>
 800248a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		 					char *token1 = NULL;
 800248e:	2300      	movs	r3, #0
 8002490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		 					char *token2 = NULL;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94


		 					messageCopy = (char *)malloc(length);
 800249a:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800249e:	f00a fa7b 	bl	800c998 <malloc>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		 					strncpy(messageCopy, RX_Buffer_GSM, length);
 80024a8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80024ac:	4949      	ldr	r1, [pc, #292]	@ (80025d4 <main+0x71c>)
 80024ae:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80024b2:	f00b fff1 	bl	800e498 <strncpy>
		 					messageCopy[length + 1 ] = '\0';
 80024b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024ba:	3301      	adds	r3, #1
 80024bc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80024c0:	4413      	add	r3, r2
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
		 					memset(RX_Buffer_GSM,'\0', length); //clear
 80024c6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80024ca:	2100      	movs	r1, #0
 80024cc:	4841      	ldr	r0, [pc, #260]	@ (80025d4 <main+0x71c>)
 80024ce:	f00b ffbc 	bl	800e44a <memset>
		 					token1 = strtok(messageCopy, ","); //function splits up the string.
 80024d2:	4941      	ldr	r1, [pc, #260]	@ (80025d8 <main+0x720>)
 80024d4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80024d8:	f00b fff2 	bl	800e4c0 <strtok>
 80024dc:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
		 					token1 = strtok(NULL, ","); //longitude
 80024e0:	493d      	ldr	r1, [pc, #244]	@ (80025d8 <main+0x720>)
 80024e2:	2000      	movs	r0, #0
 80024e4:	f00b ffec 	bl	800e4c0 <strtok>
 80024e8:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
		 					token2 = strtok(NULL, ","); //latitude
 80024ec:	493a      	ldr	r1, [pc, #232]	@ (80025d8 <main+0x720>)
 80024ee:	2000      	movs	r0, #0
 80024f0:	f00b ffe6 	bl	800e4c0 <strtok>
 80024f4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		 					free(messageCopy);
 80024f8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80024fc:	f00a fa54 	bl	800c9a8 <free>
		 					snprintf(url, sizeof(url),"LBS: Latitude:%s, Longitude:%s",token2,token1);
 8002500:	1d38      	adds	r0, r7, #4
 8002502:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800250c:	4a33      	ldr	r2, [pc, #204]	@ (80025dc <main+0x724>)
 800250e:	2164      	movs	r1, #100	@ 0x64
 8002510:	f00b ff04 	bl	800e31c <sniprintf>
		 					CDC_Transmit_FS((uint8_t*) url, strlen(url));
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd feb2 	bl	8000280 <strlen>
 800251c:	4603      	mov	r3, r0
 800251e:	b29a      	uxth	r2, r3
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f009 fde1 	bl	800c0ec <CDC_Transmit_FS>
		 					//snprintf(url, sizeof(url),"No Location Available"); //Send if Network location fails

		 					}
		 				//gsm_sendSMS(url);
		 			}
		 				gsm_sendCommand("AT+SAPBR=0,1\r\n","OK\r\n");
 800252a:	4919      	ldr	r1, [pc, #100]	@ (8002590 <main+0x6d8>)
 800252c:	482c      	ldr	r0, [pc, #176]	@ (80025e0 <main+0x728>)
 800252e:	f7fe fde3 	bl	80010f8 <gsm_sendCommand>

		 			 	memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 8002532:	4819      	ldr	r0, [pc, #100]	@ (8002598 <main+0x6e0>)
 8002534:	f7fd fea4 	bl	8000280 <strlen>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	2100      	movs	r1, #0
 800253e:	4816      	ldr	r0, [pc, #88]	@ (8002598 <main+0x6e0>)
 8002540:	f00b ff83 	bl	800e44a <memset>
 8002544:	e502      	b.n	8001f4c <main+0x94>
		 			 }
		 	else if(UserRxBufferFS[0] == '7'){
 8002546:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <main+0x6e0>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b37      	cmp	r3, #55	@ 0x37
 800254c:	d14c      	bne.n	80025e8 <main+0x730>
		 		 	 gsm_sendCommand(test,"OK\r\n");
 800254e:	4910      	ldr	r1, [pc, #64]	@ (8002590 <main+0x6d8>)
 8002550:	4824      	ldr	r0, [pc, #144]	@ (80025e4 <main+0x72c>)
 8002552:	f7fe fdd1 	bl	80010f8 <gsm_sendCommand>
		 		 	 memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 8002556:	4810      	ldr	r0, [pc, #64]	@ (8002598 <main+0x6e0>)
 8002558:	f7fd fe92 	bl	8000280 <strlen>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	2100      	movs	r1, #0
 8002562:	480d      	ldr	r0, [pc, #52]	@ (8002598 <main+0x6e0>)
 8002564:	f00b ff71 	bl	800e44a <memset>
 8002568:	e4f0      	b.n	8001f4c <main+0x94>
 800256a:	bf00      	nop
 800256c:	20000000 	.word	0x20000000
 8002570:	20000883 	.word	0x20000883
 8002574:	40020000 	.word	0x40020000
 8002578:	08012a7c 	.word	0x08012a7c
 800257c:	08012a80 	.word	0x08012a80
 8002580:	08012a8c 	.word	0x08012a8c
 8002584:	20000869 	.word	0x20000869
 8002588:	20000860 	.word	0x20000860
 800258c:	08012a98 	.word	0x08012a98
 8002590:	080129f0 	.word	0x080129f0
 8002594:	08012a2c 	.word	0x08012a2c
 8002598:	20000bec 	.word	0x20000bec
 800259c:	08012998 	.word	0x08012998
 80025a0:	080129a4 	.word	0x080129a4
 80025a4:	08012aa4 	.word	0x08012aa4
 80025a8:	08012ab4 	.word	0x08012ab4
 80025ac:	08012be0 	.word	0x08012be0
 80025b0:	08012ac8 	.word	0x08012ac8
 80025b4:	08012ad8 	.word	0x08012ad8
 80025b8:	08012af8 	.word	0x08012af8
 80025bc:	08012b18 	.word	0x08012b18
 80025c0:	08012b28 	.word	0x08012b28
 80025c4:	08012b38 	.word	0x08012b38
 80025c8:	08012b4c 	.word	0x08012b4c
 80025cc:	08012b60 	.word	0x08012b60
 80025d0:	08012b88 	.word	0x08012b88
 80025d4:	20000304 	.word	0x20000304
 80025d8:	08012b98 	.word	0x08012b98
 80025dc:	08012b9c 	.word	0x08012b9c
 80025e0:	08012bbc 	.word	0x08012bbc
 80025e4:	08012bcc 	.word	0x08012bcc
		 	}

		 	else if(UserRxBufferFS[0] == '8'){
 80025e8:	4b17      	ldr	r3, [pc, #92]	@ (8002648 <main+0x790>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b38      	cmp	r3, #56	@ 0x38
 80025ee:	d10c      	bne.n	800260a <main+0x752>
		 			gsm_sendSMS("Hello World");
 80025f0:	4816      	ldr	r0, [pc, #88]	@ (800264c <main+0x794>)
 80025f2:	f7fe fe91 	bl	8001318 <gsm_sendSMS>
		 			memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 80025f6:	4814      	ldr	r0, [pc, #80]	@ (8002648 <main+0x790>)
 80025f8:	f7fd fe42 	bl	8000280 <strlen>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	2100      	movs	r1, #0
 8002602:	4811      	ldr	r0, [pc, #68]	@ (8002648 <main+0x790>)
 8002604:	f00b ff21 	bl	800e44a <memset>
 8002608:	e4a0      	b.n	8001f4c <main+0x94>
		 	}

		 	else if(UserRxBufferFS[0] == '9'){
 800260a:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <main+0x790>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b39      	cmp	r3, #57	@ 0x39
 8002610:	f47f ac9c 	bne.w	8001f4c <main+0x94>
		 			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800261a:	480d      	ldr	r0, [pc, #52]	@ (8002650 <main+0x798>)
 800261c:	f002 fc94 	bl	8004f48 <HAL_GPIO_WritePin>
		 			HAL_Delay(2000);
 8002620:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002624:	f001 fdd4 	bl	80041d0 <HAL_Delay>
		 			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8002628:	2201      	movs	r2, #1
 800262a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800262e:	4808      	ldr	r0, [pc, #32]	@ (8002650 <main+0x798>)
 8002630:	f002 fc8a 	bl	8004f48 <HAL_GPIO_WritePin>
		 			memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 8002634:	4804      	ldr	r0, [pc, #16]	@ (8002648 <main+0x790>)
 8002636:	f7fd fe23 	bl	8000280 <strlen>
 800263a:	4603      	mov	r3, r0
 800263c:	461a      	mov	r2, r3
 800263e:	2100      	movs	r1, #0
 8002640:	4801      	ldr	r0, [pc, #4]	@ (8002648 <main+0x790>)
 8002642:	f00b ff02 	bl	800e44a <memset>
		  if(GPS_encode == 1){
 8002646:	e481      	b.n	8001f4c <main+0x94>
 8002648:	20000bec 	.word	0x20000bec
 800264c:	08012bd4 	.word	0x08012bd4
 8002650:	40020400 	.word	0x40020400

08002654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b094      	sub	sp, #80	@ 0x50
 8002658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800265a:	f107 0320 	add.w	r3, r7, #32
 800265e:	2230      	movs	r2, #48	@ 0x30
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f00b fef1 	bl	800e44a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	4b28      	ldr	r3, [pc, #160]	@ (8002720 <SystemClock_Config+0xcc>)
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	4a27      	ldr	r2, [pc, #156]	@ (8002720 <SystemClock_Config+0xcc>)
 8002682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002686:	6413      	str	r3, [r2, #64]	@ 0x40
 8002688:	4b25      	ldr	r3, [pc, #148]	@ (8002720 <SystemClock_Config+0xcc>)
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002694:	2300      	movs	r3, #0
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	4b22      	ldr	r3, [pc, #136]	@ (8002724 <SystemClock_Config+0xd0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80026a0:	4a20      	ldr	r2, [pc, #128]	@ (8002724 <SystemClock_Config+0xd0>)
 80026a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <SystemClock_Config+0xd0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026b4:	2301      	movs	r3, #1
 80026b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026be:	2302      	movs	r3, #2
 80026c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80026c8:	230f      	movs	r3, #15
 80026ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80026cc:	2390      	movs	r3, #144	@ 0x90
 80026ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026d0:	2302      	movs	r3, #2
 80026d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80026d4:	2305      	movs	r3, #5
 80026d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026d8:	f107 0320 	add.w	r3, r7, #32
 80026dc:	4618      	mov	r0, r3
 80026de:	f003 fe9d 	bl	800641c <HAL_RCC_OscConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80026e8:	f000 fc52 	bl	8002f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ec:	230f      	movs	r3, #15
 80026ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80026f0:	2301      	movs	r3, #1
 80026f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f004 f900 	bl	800690c <HAL_RCC_ClockConfig>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002712:	f000 fc3d 	bl	8002f90 <Error_Handler>
  }
}
 8002716:	bf00      	nop
 8002718:	3750      	adds	r7, #80	@ 0x50
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	40007000 	.word	0x40007000

08002728 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273c:	463b      	mov	r3, r7
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002744:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <MX_TIM2_Init+0x94>)
 8002746:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800274a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 249;
 800274c:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <MX_TIM2_Init+0x94>)
 800274e:	22f9      	movs	r2, #249	@ 0xf9
 8002750:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002752:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <MX_TIM2_Init+0x94>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000000;
 8002758:	4b18      	ldr	r3, [pc, #96]	@ (80027bc <MX_TIM2_Init+0x94>)
 800275a:	4a19      	ldr	r2, [pc, #100]	@ (80027c0 <MX_TIM2_Init+0x98>)
 800275c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275e:	4b17      	ldr	r3, [pc, #92]	@ (80027bc <MX_TIM2_Init+0x94>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002764:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <MX_TIM2_Init+0x94>)
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800276a:	4814      	ldr	r0, [pc, #80]	@ (80027bc <MX_TIM2_Init+0x94>)
 800276c:	f004 faae 	bl	8006ccc <HAL_TIM_Base_Init>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002776:	f000 fc0b 	bl	8002f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800277a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800277e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002780:	f107 0308 	add.w	r3, r7, #8
 8002784:	4619      	mov	r1, r3
 8002786:	480d      	ldr	r0, [pc, #52]	@ (80027bc <MX_TIM2_Init+0x94>)
 8002788:	f004 fc42 	bl	8007010 <HAL_TIM_ConfigClockSource>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002792:	f000 fbfd 	bl	8002f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800279e:	463b      	mov	r3, r7
 80027a0:	4619      	mov	r1, r3
 80027a2:	4806      	ldr	r0, [pc, #24]	@ (80027bc <MX_TIM2_Init+0x94>)
 80027a4:	f004 fe4a 	bl	800743c <HAL_TIMEx_MasterConfigSynchronization>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80027ae:	f000 fbef 	bl	8002f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200004f8 	.word	0x200004f8
 80027c0:	03938700 	.word	0x03938700

080027c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ca:	f107 0308 	add.w	r3, r7, #8
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d8:	463b      	mov	r3, r7
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002858 <MX_TIM3_Init+0x94>)
 80027e2:	4a1e      	ldr	r2, [pc, #120]	@ (800285c <MX_TIM3_Init+0x98>)
 80027e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60000;
 80027e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002858 <MX_TIM3_Init+0x94>)
 80027e8:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80027ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <MX_TIM3_Init+0x94>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62500;
 80027f4:	4b18      	ldr	r3, [pc, #96]	@ (8002858 <MX_TIM3_Init+0x94>)
 80027f6:	f24f 4224 	movw	r2, #62500	@ 0xf424
 80027fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fc:	4b16      	ldr	r3, [pc, #88]	@ (8002858 <MX_TIM3_Init+0x94>)
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002802:	4b15      	ldr	r3, [pc, #84]	@ (8002858 <MX_TIM3_Init+0x94>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002808:	4813      	ldr	r0, [pc, #76]	@ (8002858 <MX_TIM3_Init+0x94>)
 800280a:	f004 fa5f 	bl	8006ccc <HAL_TIM_Base_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002814:	f000 fbbc 	bl	8002f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800281c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800281e:	f107 0308 	add.w	r3, r7, #8
 8002822:	4619      	mov	r1, r3
 8002824:	480c      	ldr	r0, [pc, #48]	@ (8002858 <MX_TIM3_Init+0x94>)
 8002826:	f004 fbf3 	bl	8007010 <HAL_TIM_ConfigClockSource>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002830:	f000 fbae 	bl	8002f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002834:	2300      	movs	r3, #0
 8002836:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800283c:	463b      	mov	r3, r7
 800283e:	4619      	mov	r1, r3
 8002840:	4805      	ldr	r0, [pc, #20]	@ (8002858 <MX_TIM3_Init+0x94>)
 8002842:	f004 fdfb 	bl	800743c <HAL_TIMEx_MasterConfigSynchronization>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800284c:	f000 fba0 	bl	8002f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002850:	bf00      	nop
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000540 	.word	0x20000540
 800285c:	40000400 	.word	0x40000400

08002860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002864:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <MX_USART1_UART_Init+0x4c>)
 8002866:	4a12      	ldr	r2, [pc, #72]	@ (80028b0 <MX_USART1_UART_Init+0x50>)
 8002868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <MX_USART1_UART_Init+0x4c>)
 800286c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002872:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <MX_USART1_UART_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002878:	4b0c      	ldr	r3, [pc, #48]	@ (80028ac <MX_USART1_UART_Init+0x4c>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800287e:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <MX_USART1_UART_Init+0x4c>)
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <MX_USART1_UART_Init+0x4c>)
 8002886:	220c      	movs	r2, #12
 8002888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800288a:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <MX_USART1_UART_Init+0x4c>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <MX_USART1_UART_Init+0x4c>)
 8002892:	2200      	movs	r2, #0
 8002894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002896:	4805      	ldr	r0, [pc, #20]	@ (80028ac <MX_USART1_UART_Init+0x4c>)
 8002898:	f004 fe52 	bl	8007540 <HAL_UART_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028a2:	f000 fb75 	bl	8002f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000588 	.word	0x20000588
 80028b0:	40011000 	.word	0x40011000

080028b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <MX_USART2_UART_Init+0x4c>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	@ (8002904 <MX_USART2_UART_Init+0x50>)
 80028bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <MX_USART2_UART_Init+0x4c>)
 80028c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <MX_USART2_UART_Init+0x4c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <MX_USART2_UART_Init+0x4c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <MX_USART2_UART_Init+0x4c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028d8:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <MX_USART2_UART_Init+0x4c>)
 80028da:	220c      	movs	r2, #12
 80028dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028de:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <MX_USART2_UART_Init+0x4c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e4:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <MX_USART2_UART_Init+0x4c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028ea:	4805      	ldr	r0, [pc, #20]	@ (8002900 <MX_USART2_UART_Init+0x4c>)
 80028ec:	f004 fe28 	bl	8007540 <HAL_UART_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028f6:	f000 fb4b 	bl	8002f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	200005d0 	.word	0x200005d0
 8002904:	40004400 	.word	0x40004400

08002908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
 8002912:	4b1f      	ldr	r3, [pc, #124]	@ (8002990 <MX_DMA_Init+0x88>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	4a1e      	ldr	r2, [pc, #120]	@ (8002990 <MX_DMA_Init+0x88>)
 8002918:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800291c:	6313      	str	r3, [r2, #48]	@ 0x30
 800291e:	4b1c      	ldr	r3, [pc, #112]	@ (8002990 <MX_DMA_Init+0x88>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4b18      	ldr	r3, [pc, #96]	@ (8002990 <MX_DMA_Init+0x88>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	4a17      	ldr	r2, [pc, #92]	@ (8002990 <MX_DMA_Init+0x88>)
 8002934:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002938:	6313      	str	r3, [r2, #48]	@ 0x30
 800293a:	4b15      	ldr	r3, [pc, #84]	@ (8002990 <MX_DMA_Init+0x88>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2100      	movs	r1, #0
 800294a:	2010      	movs	r0, #16
 800294c:	f001 fd3f 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002950:	2010      	movs	r0, #16
 8002952:	f001 fd58 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	2011      	movs	r0, #17
 800295c:	f001 fd37 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002960:	2011      	movs	r0, #17
 8002962:	f001 fd50 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	203a      	movs	r0, #58	@ 0x3a
 800296c:	f001 fd2f 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002970:	203a      	movs	r0, #58	@ 0x3a
 8002972:	f001 fd48 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2100      	movs	r1, #0
 800297a:	2046      	movs	r0, #70	@ 0x46
 800297c:	f001 fd27 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002980:	2046      	movs	r0, #70	@ 0x46
 8002982:	f001 fd40 	bl	8004406 <HAL_NVIC_EnableIRQ>

}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	@ 0x28
 8002998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	4b45      	ldr	r3, [pc, #276]	@ (8002ac4 <MX_GPIO_Init+0x130>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	4a44      	ldr	r2, [pc, #272]	@ (8002ac4 <MX_GPIO_Init+0x130>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ba:	4b42      	ldr	r3, [pc, #264]	@ (8002ac4 <MX_GPIO_Init+0x130>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b3e      	ldr	r3, [pc, #248]	@ (8002ac4 <MX_GPIO_Init+0x130>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	4a3d      	ldr	r2, [pc, #244]	@ (8002ac4 <MX_GPIO_Init+0x130>)
 80029d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac4 <MX_GPIO_Init+0x130>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b37      	ldr	r3, [pc, #220]	@ (8002ac4 <MX_GPIO_Init+0x130>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	4a36      	ldr	r2, [pc, #216]	@ (8002ac4 <MX_GPIO_Init+0x130>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f2:	4b34      	ldr	r3, [pc, #208]	@ (8002ac4 <MX_GPIO_Init+0x130>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	4b30      	ldr	r3, [pc, #192]	@ (8002ac4 <MX_GPIO_Init+0x130>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	4a2f      	ldr	r2, [pc, #188]	@ (8002ac4 <MX_GPIO_Init+0x130>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac4 <MX_GPIO_Init+0x130>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a20:	4829      	ldr	r0, [pc, #164]	@ (8002ac8 <MX_GPIO_Init+0x134>)
 8002a22:	f002 fa91 	bl	8004f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2110      	movs	r1, #16
 8002a2a:	4828      	ldr	r0, [pc, #160]	@ (8002acc <MX_GPIO_Init+0x138>)
 8002a2c:	f002 fa8c 	bl	8004f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8002a30:	2201      	movs	r2, #1
 8002a32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a36:	4825      	ldr	r0, [pc, #148]	@ (8002acc <MX_GPIO_Init+0x138>)
 8002a38:	f002 fa86 	bl	8004f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_PWX_GPIO_Port, GSM_PWX_Pin, GPIO_PIN_SET);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a42:	4823      	ldr	r0, [pc, #140]	@ (8002ad0 <MX_GPIO_Init+0x13c>)
 8002a44:	f002 fa80 	bl	8004f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4819      	ldr	r0, [pc, #100]	@ (8002ac8 <MX_GPIO_Init+0x134>)
 8002a62:	f002 f8ed 	bl	8004c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button___KEY_Pin */
  GPIO_InitStruct.Pin = User_Button___KEY_Pin;
 8002a66:	2301      	movs	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Button___KEY_GPIO_Port, &GPIO_InitStruct);
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	4619      	mov	r1, r3
 8002a78:	4814      	ldr	r0, [pc, #80]	@ (8002acc <MX_GPIO_Init+0x138>)
 8002a7a:	f002 f8e1 	bl	8004c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : DTR_Pin GPS_RST_Pin */
  GPIO_InitStruct.Pin = DTR_Pin|GPS_RST_Pin;
 8002a7e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a84:	2301      	movs	r3, #1
 8002a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	480d      	ldr	r0, [pc, #52]	@ (8002acc <MX_GPIO_Init+0x138>)
 8002a98:	f002 f8d2 	bl	8004c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_PWX_Pin */
  GPIO_InitStruct.Pin = GSM_PWX_Pin;
 8002a9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GSM_PWX_GPIO_Port, &GPIO_InitStruct);
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4806      	ldr	r0, [pc, #24]	@ (8002ad0 <MX_GPIO_Init+0x13c>)
 8002ab6:	f002 f8c3 	bl	8004c40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002aba:	bf00      	nop
 8002abc:	3728      	adds	r7, #40	@ 0x28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40020800 	.word	0x40020800
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	40020400 	.word	0x40020400

08002ad4 <gps_processNMEA>:

/* USER CODE BEGIN 4 */
void gps_processNMEA(char *buffer,uint16_t length){ //parse full message to gps encode
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]

	for(int j = 0; j<(length); j++){
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e00f      	b.n	8002b06 <gps_processNMEA+0x32>
		if (gps_encode(buffer[j])){
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fdd2 	bl	8003698 <gps_encode>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <gps_processNMEA+0x2c>
			GPS_encode = 1;  //Get GPS information
 8002afa:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <gps_processNMEA+0x44>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j<(length); j++){
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3301      	adds	r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	dbeb      	blt.n	8002ae6 <gps_processNMEA+0x12>
		}
		}
	}
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000861 	.word	0x20000861

08002b1c <gps_init>:

void gps_init(){
 8002b1c:	b5b0      	push	{r4, r5, r7, lr}
 8002b1e:	b094      	sub	sp, #80	@ 0x50
 8002b20:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 8002b22:	22c8      	movs	r2, #200	@ 0xc8
 8002b24:	4926      	ldr	r1, [pc, #152]	@ (8002bc0 <gps_init+0xa4>)
 8002b26:	4827      	ldr	r0, [pc, #156]	@ (8002bc4 <gps_init+0xa8>)
 8002b28:	f004 fdca 	bl	80076c0 <HAL_UARTEx_ReceiveToIdle_DMA>

	if(gps_command((uint8_t *) gps_Test, "PMTK001,0,3") != Gpsok){ //hard reset
 8002b2c:	4926      	ldr	r1, [pc, #152]	@ (8002bc8 <gps_init+0xac>)
 8002b2e:	4827      	ldr	r0, [pc, #156]	@ (8002bcc <gps_init+0xb0>)
 8002b30:	f000 f85c 	bl	8002bec <gps_command>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00f      	beq.n	8002b5a <gps_init+0x3e>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b40:	4823      	ldr	r0, [pc, #140]	@ (8002bd0 <gps_init+0xb4>)
 8002b42:	f002 fa01 	bl	8004f48 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8002b46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b4a:	f001 fb41 	bl	80041d0 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b54:	481e      	ldr	r0, [pc, #120]	@ (8002bd0 <gps_init+0xb4>)
 8002b56:	f002 f9f7 	bl	8004f48 <HAL_GPIO_WritePin>
			}
	//TTFF = HAL_GetTick();

	//gps_command((uint8_t *) gps_FullPower, "PMTK001,225,0,3");//Returns a different message

	HAL_Delay(200);
 8002b5a:	20c8      	movs	r0, #200	@ 0xc8
 8002b5c:	f001 fb38 	bl	80041d0 <HAL_Delay>

	uint8_t baudRateGPS[] = "$PMTK251,115200*1F\r\n"; //set UART baud rate to 9600
 8002b60:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd4 <gps_init+0xb8>)
 8002b62:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002b66:	461d      	mov	r5, r3
 8002b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b70:	6020      	str	r0, [r4, #0]
 8002b72:	3404      	adds	r4, #4
 8002b74:	7021      	strb	r1, [r4, #0]
	gps_command(baudRateGPS,"PMTK001,251,3");
 8002b76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b7a:	4917      	ldr	r1, [pc, #92]	@ (8002bd8 <gps_init+0xbc>)
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 f835 	bl	8002bec <gps_command>

	HAL_Delay(200);
 8002b82:	20c8      	movs	r0, #200	@ 0xc8
 8002b84:	f001 fb24 	bl	80041d0 <HAL_Delay>

	//set update position report to every 10 seconds (works)
	gps_command((uint8_t *) LOW_UPDATE_RATE, "PMTK001,220,3");
 8002b88:	4914      	ldr	r1, [pc, #80]	@ (8002bdc <gps_init+0xc0>)
 8002b8a:	4815      	ldr	r0, [pc, #84]	@ (8002be0 <gps_init+0xc4>)
 8002b8c:	f000 f82e 	bl	8002bec <gps_command>

	HAL_Delay(200);
 8002b90:	20c8      	movs	r0, #200	@ 0xc8
 8002b92:	f001 fb1d 	bl	80041d0 <HAL_Delay>

	uint8_t rmcCommand[] = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n"; //enable RMC mode only
 8002b96:	4b13      	ldr	r3, [pc, #76]	@ (8002be4 <gps_init+0xc8>)
 8002b98:	1d3c      	adds	r4, r7, #4
 8002b9a:	461d      	mov	r5, r3
 8002b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ba8:	682b      	ldr	r3, [r5, #0]
 8002baa:	6023      	str	r3, [r4, #0]
	gps_command(rmcCommand, "PMTK001,314,3");
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	490e      	ldr	r1, [pc, #56]	@ (8002be8 <gps_init+0xcc>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f81b 	bl	8002bec <gps_command>

}
 8002bb6:	bf00      	nop
 8002bb8:	3750      	adds	r7, #80	@ 0x50
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000798 	.word	0x20000798
 8002bc4:	20000588 	.word	0x20000588
 8002bc8:	08012998 	.word	0x08012998
 8002bcc:	080129a4 	.word	0x080129a4
 8002bd0:	40020000 	.word	0x40020000
 8002bd4:	08012c10 	.word	0x08012c10
 8002bd8:	08012bf0 	.word	0x08012bf0
 8002bdc:	08012aa4 	.word	0x08012aa4
 8002be0:	08012ab4 	.word	0x08012ab4
 8002be4:	08012c28 	.word	0x08012c28
 8002be8:	08012c00 	.word	0x08012c00

08002bec <gps_command>:


int gps_command(uint8_t *cmd, char *response) //Send Commands to GPS and check response
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_DMA(&huart1, (uint8_t *) cmd, strlen((char *)cmd));
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fd fb42 	bl	8000280 <strlen>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4838      	ldr	r0, [pc, #224]	@ (8002ce8 <gps_command+0xfc>)
 8002c06:	f004 fceb 	bl	80075e0 <HAL_UART_Transmit_DMA>

    CDC_Transmit_FS((uint8_t *)cmd,  strlen((char *)cmd));
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fd fb38 	bl	8000280 <strlen>
 8002c10:	4603      	mov	r3, r0
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4619      	mov	r1, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f009 fa68 	bl	800c0ec <CDC_Transmit_FS>

    char *P = NULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
    char *Failed = NULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]
    uint32_t GPS_timer2 = HAL_GetTick();
 8002c24:	f001 fac8 	bl	80041b8 <HAL_GetTick>
 8002c28:	60f8      	str	r0, [r7, #12]

    while(*P != response[0]){
 8002c2a:	e03e      	b.n	8002caa <gps_command+0xbe>
    	P = strstr(RX_BufferGPS, response);
 8002c2c:	6839      	ldr	r1, [r7, #0]
 8002c2e:	482f      	ldr	r0, [pc, #188]	@ (8002cec <gps_command+0x100>)
 8002c30:	f00b fca2 	bl	800e578 <strstr>
 8002c34:	6178      	str	r0, [r7, #20]
    	Failed = strstr(RX_BufferGPS, ",2*");
 8002c36:	492e      	ldr	r1, [pc, #184]	@ (8002cf0 <gps_command+0x104>)
 8002c38:	482c      	ldr	r0, [pc, #176]	@ (8002cec <gps_command+0x100>)
 8002c3a:	f00b fc9d 	bl	800e578 <strstr>
 8002c3e:	6138      	str	r0, [r7, #16]
    	Failed = strstr(RX_BufferGPS, ",1*");
 8002c40:	492c      	ldr	r1, [pc, #176]	@ (8002cf4 <gps_command+0x108>)
 8002c42:	482a      	ldr	r0, [pc, #168]	@ (8002cec <gps_command+0x100>)
 8002c44:	f00b fc98 	bl	800e578 <strstr>
 8002c48:	6138      	str	r0, [r7, #16]
    	Failed = strstr(RX_BufferGPS, ",0*");
 8002c4a:	492b      	ldr	r1, [pc, #172]	@ (8002cf8 <gps_command+0x10c>)
 8002c4c:	4827      	ldr	r0, [pc, #156]	@ (8002cec <gps_command+0x100>)
 8002c4e:	f00b fc93 	bl	800e578 <strstr>
 8002c52:	6138      	str	r0, [r7, #16]


    	if((HAL_GetTick() - GPS_timer2) > 2000){ //2s time-out error
 8002c54:	f001 fab0 	bl	80041b8 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002c62:	d90f      	bls.n	8002c84 <gps_command+0x98>
    		memset(RX_BufferGPS, 0, RX_BUFFER_SIZE_GPS);
 8002c64:	22c8      	movs	r2, #200	@ 0xc8
 8002c66:	2100      	movs	r1, #0
 8002c68:	4820      	ldr	r0, [pc, #128]	@ (8002cec <gps_command+0x100>)
 8002c6a:	f00b fbee 	bl	800e44a <memset>
    		CDC_Transmit_FS((uint8_t *)"Time Out Error\r\n", 15); //debug terminal
 8002c6e:	210f      	movs	r1, #15
 8002c70:	4822      	ldr	r0, [pc, #136]	@ (8002cfc <gps_command+0x110>)
 8002c72:	f009 fa3b 	bl	800c0ec <CDC_Transmit_FS>
    		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 8002c76:	22c8      	movs	r2, #200	@ 0xc8
 8002c78:	491c      	ldr	r1, [pc, #112]	@ (8002cec <gps_command+0x100>)
 8002c7a:	481b      	ldr	r0, [pc, #108]	@ (8002ce8 <gps_command+0xfc>)
 8002c7c:	f004 fd20 	bl	80076c0 <HAL_UARTEx_ReceiveToIdle_DMA>
    		return GpsError;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e02c      	b.n	8002cde <gps_command+0xf2>
    	}

    	if(Failed != NULL){
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00f      	beq.n	8002caa <gps_command+0xbe>
    		memset(RX_BufferGPS, 0, RX_BUFFER_SIZE_GPS);
 8002c8a:	22c8      	movs	r2, #200	@ 0xc8
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4817      	ldr	r0, [pc, #92]	@ (8002cec <gps_command+0x100>)
 8002c90:	f00b fbdb 	bl	800e44a <memset>
    		CDC_Transmit_FS((uint8_t *)"Failed\r\n", 15); //debug terminal
 8002c94:	210f      	movs	r1, #15
 8002c96:	481a      	ldr	r0, [pc, #104]	@ (8002d00 <gps_command+0x114>)
 8002c98:	f009 fa28 	bl	800c0ec <CDC_Transmit_FS>
    		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 8002c9c:	22c8      	movs	r2, #200	@ 0xc8
 8002c9e:	4913      	ldr	r1, [pc, #76]	@ (8002cec <gps_command+0x100>)
 8002ca0:	4811      	ldr	r0, [pc, #68]	@ (8002ce8 <gps_command+0xfc>)
 8002ca2:	f004 fd0d 	bl	80076c0 <HAL_UARTEx_ReceiveToIdle_DMA>
    		return GpsError;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e019      	b.n	8002cde <gps_command+0xf2>
    while(*P != response[0]){
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d1ba      	bne.n	8002c2c <gps_command+0x40>
    	}

    }

    memset(RX_BufferGPS, 0, RX_BUFFER_SIZE_GPS);
 8002cb6:	22c8      	movs	r2, #200	@ 0xc8
 8002cb8:	2100      	movs	r1, #0
 8002cba:	480c      	ldr	r0, [pc, #48]	@ (8002cec <gps_command+0x100>)
 8002cbc:	f00b fbc5 	bl	800e44a <memset>
    CDC_Transmit_FS((uint8_t *)response,  strlen(response));
 8002cc0:	6838      	ldr	r0, [r7, #0]
 8002cc2:	f7fd fadd 	bl	8000280 <strlen>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6838      	ldr	r0, [r7, #0]
 8002cce:	f009 fa0d 	bl	800c0ec <CDC_Transmit_FS>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 8002cd2:	22c8      	movs	r2, #200	@ 0xc8
 8002cd4:	4905      	ldr	r1, [pc, #20]	@ (8002cec <gps_command+0x100>)
 8002cd6:	4804      	ldr	r0, [pc, #16]	@ (8002ce8 <gps_command+0xfc>)
 8002cd8:	f004 fcf2 	bl	80076c0 <HAL_UARTEx_ReceiveToIdle_DMA>
	return Gpsok;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000588 	.word	0x20000588
 8002cec:	20000798 	.word	0x20000798
 8002cf0:	08012c5c 	.word	0x08012c5c
 8002cf4:	08012c60 	.word	0x08012c60
 8002cf8:	08012c64 	.word	0x08012c64
 8002cfc:	08012c68 	.word	0x08012c68
 8002d00:	08012c7c 	.word	0x08012c7c

08002d04 <gps_updateMode>:


void gps_updateMode(uint8_t mode,uint16_t on, uint16_t off){ // implement mode changes from messages or timing
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b0b1      	sub	sp, #196	@ 0xc4
 8002d08:	af04      	add	r7, sp, #16
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	80bb      	strh	r3, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	807b      	strh	r3, [r7, #2]
	switch(mode){
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d877      	bhi.n	8002e0e <gps_updateMode+0x10a>
 8002d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d24 <gps_updateMode+0x20>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d39 	.word	0x08002d39
 8002d28:	08002d5b 	.word	0x08002d5b
 8002d2c:	08002d75 	.word	0x08002d75
 8002d30:	08002e0d 	.word	0x08002e0d
 8002d34:	08002df3 	.word	0x08002df3
	case(1): //Full power continuous mode
	        gps_command((uint8_t *)gps_Test,"PMTK001,0,3");
 8002d38:	4937      	ldr	r1, [pc, #220]	@ (8002e18 <gps_updateMode+0x114>)
 8002d3a:	4838      	ldr	r0, [pc, #224]	@ (8002e1c <gps_updateMode+0x118>)
 8002d3c:	f7ff ff56 	bl	8002bec <gps_command>
			gps_command((uint8_t *)gps_FullPower, "PMTK001,220,3");
 8002d40:	4937      	ldr	r1, [pc, #220]	@ (8002e20 <gps_updateMode+0x11c>)
 8002d42:	4838      	ldr	r0, [pc, #224]	@ (8002e24 <gps_updateMode+0x120>)
 8002d44:	f7ff ff52 	bl	8002bec <gps_command>
	        HAL_Delay(1000);
 8002d48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d4c:	f001 fa40 	bl	80041d0 <HAL_Delay>
			gps_command((uint8_t *)LOW_UPDATE_RATE, "PMTK001,220,3");
 8002d50:	4933      	ldr	r1, [pc, #204]	@ (8002e20 <gps_updateMode+0x11c>)
 8002d52:	4835      	ldr	r0, [pc, #212]	@ (8002e28 <gps_updateMode+0x124>)
 8002d54:	f7ff ff4a 	bl	8002bec <gps_command>
			break;
 8002d58:	e059      	b.n	8002e0e <gps_updateMode+0x10a>
	case(2): //Standby low power mode
			uint8_t cmd2[] = "$PMTK161,0*28";
 8002d5a:	4b34      	ldr	r3, [pc, #208]	@ (8002e2c <gps_updateMode+0x128>)
 8002d5c:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8002d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d62:	c407      	stmia	r4!, {r0, r1, r2}
 8002d64:	8023      	strh	r3, [r4, #0]
			gps_command(cmd2,"PMTK001,161,3");
 8002d66:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002d6a:	4931      	ldr	r1, [pc, #196]	@ (8002e30 <gps_updateMode+0x12c>)
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff3d 	bl	8002bec <gps_command>
			break;
 8002d72:	e04c      	b.n	8002e0e <gps_updateMode+0x10a>
	case(3): //Periodic on/off mode -> need to implement a function that handles timing length changes (maybe use presets)
			if((on < 65536) && (off < 65536)){//check under max limit
			char cmd3[60] = {0};
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	f107 0310 	add.w	r3, r7, #16
 8002d7c:	2238      	movs	r2, #56	@ 0x38
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f00b fb62 	bl	800e44a <memset>
			snprintf(cmd3,sizeof(cmd3) ,"$PMTK225,2,%u,%u,%u,%d*", on, off, on, off);
 8002d86:	88bc      	ldrh	r4, [r7, #4]
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	88ba      	ldrh	r2, [r7, #4]
 8002d8c:	8879      	ldrh	r1, [r7, #2]
 8002d8e:	f107 000c 	add.w	r0, r7, #12
 8002d92:	9102      	str	r1, [sp, #8]
 8002d94:	9201      	str	r2, [sp, #4]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	4623      	mov	r3, r4
 8002d9a:	4a26      	ldr	r2, [pc, #152]	@ (8002e34 <gps_updateMode+0x130>)
 8002d9c:	213c      	movs	r1, #60	@ 0x3c
 8002d9e:	f00b fabd 	bl	800e31c <sniprintf>
			uint8_t checksum = get_checksum(cmd3);
 8002da2:	f107 030c 	add.w	r3, r7, #12
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f850 	bl	8002e4c <get_checksum>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
			char finalcmd3[70] = {0};
 8002db2:	2300      	movs	r3, #0
 8002db4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002db6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002dba:	2242      	movs	r2, #66	@ 0x42
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f00b fb43 	bl	800e44a <memset>
			snprintf(finalcmd3, sizeof(finalcmd3),"%s%X\r\n",cmd3,checksum);
 8002dc4:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002dc8:	f107 020c 	add.w	r2, r7, #12
 8002dcc:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	4a18      	ldr	r2, [pc, #96]	@ (8002e38 <gps_updateMode+0x134>)
 8002dd6:	2146      	movs	r1, #70	@ 0x46
 8002dd8:	f00b faa0 	bl	800e31c <sniprintf>
			gps_command((uint8_t *)HIGH_UPDATE_RATE,"PMTK001,220,3");
 8002ddc:	4910      	ldr	r1, [pc, #64]	@ (8002e20 <gps_updateMode+0x11c>)
 8002dde:	4817      	ldr	r0, [pc, #92]	@ (8002e3c <gps_updateMode+0x138>)
 8002de0:	f7ff ff04 	bl	8002bec <gps_command>
			gps_command((uint8_t *)finalcmd3,"PMTK001,225,3");
 8002de4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002de8:	4915      	ldr	r1, [pc, #84]	@ (8002e40 <gps_updateMode+0x13c>)
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fefe 	bl	8002bec <gps_command>
			}
			break;
 8002df0:	e00d      	b.n	8002e0e <gps_updateMode+0x10a>
	case(4): //Standby mode -> deep power saving need to implement wake up pin

			break;
	case(5): //Always locate mode: advanced adaptive power periodic mode
			uint8_t cmd5[] = "$PMKT225,8*23";//Always locate standby
 8002df2:	4b14      	ldr	r3, [pc, #80]	@ (8002e44 <gps_updateMode+0x140>)
 8002df4:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8002df8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dfa:	c407      	stmia	r4!, {r0, r1, r2}
 8002dfc:	8023      	strh	r3, [r4, #0]
			gps_command(cmd5,"$PMKT001,225,3");
 8002dfe:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002e02:	4911      	ldr	r1, [pc, #68]	@ (8002e48 <gps_updateMode+0x144>)
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fef1 	bl	8002bec <gps_command>
			break;
 8002e0a:	e000      	b.n	8002e0e <gps_updateMode+0x10a>
			break;
 8002e0c:	bf00      	nop
	}

}
 8002e0e:	bf00      	nop
 8002e10:	37b4      	adds	r7, #180	@ 0xb4
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd90      	pop	{r4, r7, pc}
 8002e16:	bf00      	nop
 8002e18:	08012998 	.word	0x08012998
 8002e1c:	080129a4 	.word	0x080129a4
 8002e20:	08012aa4 	.word	0x08012aa4
 8002e24:	08012c88 	.word	0x08012c88
 8002e28:	08012ab4 	.word	0x08012ab4
 8002e2c:	08012cec 	.word	0x08012cec
 8002e30:	08012ac8 	.word	0x08012ac8
 8002e34:	08012c98 	.word	0x08012c98
 8002e38:	08012cb0 	.word	0x08012cb0
 8002e3c:	08012cb8 	.word	0x08012cb8
 8002e40:	08012ccc 	.word	0x08012ccc
 8002e44:	08012cfc 	.word	0x08012cfc
 8002e48:	08012cdc 	.word	0x08012cdc

08002e4c <get_checksum>:

uint8_t get_checksum(char *cmd){ // determines checksum of command and returns .
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	uint8_t checksum = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
	for(int j = 0; j < strlen((char *)cmd)+1; j++){
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	e017      	b.n	8002e8e <get_checksum+0x42>
		if(cmd[j] == '*' ){
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e68:	d101      	bne.n	8002e6e <get_checksum+0x22>
			return(checksum);
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	e018      	b.n	8002ea0 <get_checksum+0x54>
		}
		else if(cmd[j]!= '$'){
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b24      	cmp	r3, #36	@ 0x24
 8002e78:	d006      	beq.n	8002e88 <get_checksum+0x3c>
			checksum ^= cmd[j];
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	4053      	eors	r3, r2
 8002e86:	73fb      	strb	r3, [r7, #15]
	for(int j = 0; j < strlen((char *)cmd)+1; j++){
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd f9f6 	bl	8000280 <strlen>
 8002e94:	4603      	mov	r3, r0
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d8df      	bhi.n	8002e5e <get_checksum+0x12>
		}
	}
	return(0);
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <mode_update>:


void mode_update(uint8_t newMode, float param1, float param2, float param3){
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002eb4:	edc7 0a01 	vstr	s1, [r7, #4]
 8002eb8:	ed87 1a00 	vstr	s2, [r7]
 8002ebc:	73fb      	strb	r3, [r7, #15]

	if(newMode == Mode1){ //update Mode parameters
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d118      	bne.n	8002ef6 <mode_update+0x4e>
		geoFenceLat = param1;
 8002ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8002f78 <mode_update+0xd0>)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	6013      	str	r3, [r2, #0]
		geoFenceLong = param2;
 8002eca:	4a2c      	ldr	r2, [pc, #176]	@ (8002f7c <mode_update+0xd4>)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6013      	str	r3, [r2, #0]
		geoFenceSize = param3 + 10; //added tolerance in m
 8002ed0:	edd7 7a00 	vldr	s15, [r7]
 8002ed4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002ed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002edc:	4b28      	ldr	r3, [pc, #160]	@ (8002f80 <mode_update+0xd8>)
 8002ede:	edc3 7a00 	vstr	s15, [r3]

		if(currentModeState != Mode1){//If not currently in mode switch to new mode.
 8002ee2:	4b28      	ldr	r3, [pc, #160]	@ (8002f84 <mode_update+0xdc>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d005      	beq.n	8002ef6 <mode_update+0x4e>
			currentModeState = Mode1;
 8002eea:	4b26      	ldr	r3, [pc, #152]	@ (8002f84 <mode_update+0xdc>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
			newModeFlag = 1;
 8002ef0:	4b25      	ldr	r3, [pc, #148]	@ (8002f88 <mode_update+0xe0>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(newMode == Mode2){
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d11c      	bne.n	8002f36 <mode_update+0x8e>
		updatePeriod = (uint32_t)param1*60*1000;//Set to minutes
 8002efc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f04:	ee17 2a90 	vmov	r2, s15
 8002f08:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002f0c:	fb02 f303 	mul.w	r3, r2, r3
 8002f10:	4a1e      	ldr	r2, [pc, #120]	@ (8002f8c <mode_update+0xe4>)
 8002f12:	6013      	str	r3, [r2, #0]
		if(updatePeriod == 0){
 8002f14:	4b1d      	ldr	r3, [pc, #116]	@ (8002f8c <mode_update+0xe4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <mode_update+0x7a>
			updatePeriod = 10;
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f8c <mode_update+0xe4>)
 8002f1e:	220a      	movs	r2, #10
 8002f20:	601a      	str	r2, [r3, #0]
		}

		if(currentModeState != Mode2){
 8002f22:	4b18      	ldr	r3, [pc, #96]	@ (8002f84 <mode_update+0xdc>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d005      	beq.n	8002f36 <mode_update+0x8e>
			currentModeState = Mode2;
 8002f2a:	4b16      	ldr	r3, [pc, #88]	@ (8002f84 <mode_update+0xdc>)
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	701a      	strb	r2, [r3, #0]
			newModeFlag = 1;
 8002f30:	4b15      	ldr	r3, [pc, #84]	@ (8002f88 <mode_update+0xe0>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
		}
	}

	if(newMode == Mode3){
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d109      	bne.n	8002f50 <mode_update+0xa8>

		if(currentModeState != Mode3){
 8002f3c:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <mode_update+0xdc>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d005      	beq.n	8002f50 <mode_update+0xa8>
			currentModeState = Mode3;
 8002f44:	4b0f      	ldr	r3, [pc, #60]	@ (8002f84 <mode_update+0xdc>)
 8002f46:	2203      	movs	r2, #3
 8002f48:	701a      	strb	r2, [r3, #0]
			newModeFlag = 1;
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f88 <mode_update+0xe0>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
		}

	}

	if(newMode == Mode4){
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d109      	bne.n	8002f6a <mode_update+0xc2>
		if(currentModeState != Mode4){
 8002f56:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <mode_update+0xdc>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d005      	beq.n	8002f6a <mode_update+0xc2>
			currentModeState = Mode4;
 8002f5e:	4b09      	ldr	r3, [pc, #36]	@ (8002f84 <mode_update+0xdc>)
 8002f60:	2204      	movs	r2, #4
 8002f62:	701a      	strb	r2, [r3, #0]
			newModeFlag = 1;
 8002f64:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <mode_update+0xe0>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
			}
	}
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000884 	.word	0x20000884
 8002f7c:	20000888 	.word	0x20000888
 8002f80:	20000004 	.word	0x20000004
 8002f84:	20000000 	.word	0x20000000
 8002f88:	20000883 	.word	0x20000883
 8002f8c:	20000008 	.word	0x20000008

08002f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f94:	b672      	cpsid	i
}
 8002f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <Error_Handler+0x8>

08002f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <HAL_MspInit+0x4c>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <HAL_MspInit+0x4c>)
 8002fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <HAL_MspInit+0x4c>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fba:	607b      	str	r3, [r7, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	4b09      	ldr	r3, [pc, #36]	@ (8002fe8 <HAL_MspInit+0x4c>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	4a08      	ldr	r2, [pc, #32]	@ (8002fe8 <HAL_MspInit+0x4c>)
 8002fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fce:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <HAL_MspInit+0x4c>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800

08002fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffc:	d116      	bne.n	800302c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	4b1a      	ldr	r3, [pc, #104]	@ (800306c <HAL_TIM_Base_MspInit+0x80>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	4a19      	ldr	r2, [pc, #100]	@ (800306c <HAL_TIM_Base_MspInit+0x80>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6413      	str	r3, [r2, #64]	@ 0x40
 800300e:	4b17      	ldr	r3, [pc, #92]	@ (800306c <HAL_TIM_Base_MspInit+0x80>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 14, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	210e      	movs	r1, #14
 800301e:	201c      	movs	r0, #28
 8003020:	f001 f9d5 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003024:	201c      	movs	r0, #28
 8003026:	f001 f9ee 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800302a:	e01a      	b.n	8003062 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0f      	ldr	r2, [pc, #60]	@ (8003070 <HAL_TIM_Base_MspInit+0x84>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d115      	bne.n	8003062 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <HAL_TIM_Base_MspInit+0x80>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	4a0b      	ldr	r2, [pc, #44]	@ (800306c <HAL_TIM_Base_MspInit+0x80>)
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	6413      	str	r3, [r2, #64]	@ 0x40
 8003046:	4b09      	ldr	r3, [pc, #36]	@ (800306c <HAL_TIM_Base_MspInit+0x80>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 14, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	210e      	movs	r1, #14
 8003056:	201d      	movs	r0, #29
 8003058:	f001 f9b9 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800305c:	201d      	movs	r0, #29
 800305e:	f001 f9d2 	bl	8004406 <HAL_NVIC_EnableIRQ>
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	40000400 	.word	0x40000400

08003074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08c      	sub	sp, #48	@ 0x30
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a97      	ldr	r2, [pc, #604]	@ (80032f0 <HAL_UART_MspInit+0x27c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	f040 8092 	bne.w	80031bc <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	4b95      	ldr	r3, [pc, #596]	@ (80032f4 <HAL_UART_MspInit+0x280>)
 800309e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a0:	4a94      	ldr	r2, [pc, #592]	@ (80032f4 <HAL_UART_MspInit+0x280>)
 80030a2:	f043 0310 	orr.w	r3, r3, #16
 80030a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80030a8:	4b92      	ldr	r3, [pc, #584]	@ (80032f4 <HAL_UART_MspInit+0x280>)
 80030aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	4b8e      	ldr	r3, [pc, #568]	@ (80032f4 <HAL_UART_MspInit+0x280>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030bc:	4a8d      	ldr	r2, [pc, #564]	@ (80032f4 <HAL_UART_MspInit+0x280>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c4:	4b8b      	ldr	r3, [pc, #556]	@ (80032f4 <HAL_UART_MspInit+0x280>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030d0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80030d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030de:	2303      	movs	r3, #3
 80030e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030e2:	2307      	movs	r3, #7
 80030e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e6:	f107 031c 	add.w	r3, r7, #28
 80030ea:	4619      	mov	r1, r3
 80030ec:	4882      	ldr	r0, [pc, #520]	@ (80032f8 <HAL_UART_MspInit+0x284>)
 80030ee:	f001 fda7 	bl	8004c40 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80030f2:	4b82      	ldr	r3, [pc, #520]	@ (80032fc <HAL_UART_MspInit+0x288>)
 80030f4:	4a82      	ldr	r2, [pc, #520]	@ (8003300 <HAL_UART_MspInit+0x28c>)
 80030f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80030f8:	4b80      	ldr	r3, [pc, #512]	@ (80032fc <HAL_UART_MspInit+0x288>)
 80030fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80030fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003100:	4b7e      	ldr	r3, [pc, #504]	@ (80032fc <HAL_UART_MspInit+0x288>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003106:	4b7d      	ldr	r3, [pc, #500]	@ (80032fc <HAL_UART_MspInit+0x288>)
 8003108:	2200      	movs	r2, #0
 800310a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800310c:	4b7b      	ldr	r3, [pc, #492]	@ (80032fc <HAL_UART_MspInit+0x288>)
 800310e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003112:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003114:	4b79      	ldr	r3, [pc, #484]	@ (80032fc <HAL_UART_MspInit+0x288>)
 8003116:	2200      	movs	r2, #0
 8003118:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800311a:	4b78      	ldr	r3, [pc, #480]	@ (80032fc <HAL_UART_MspInit+0x288>)
 800311c:	2200      	movs	r2, #0
 800311e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003120:	4b76      	ldr	r3, [pc, #472]	@ (80032fc <HAL_UART_MspInit+0x288>)
 8003122:	2200      	movs	r2, #0
 8003124:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003126:	4b75      	ldr	r3, [pc, #468]	@ (80032fc <HAL_UART_MspInit+0x288>)
 8003128:	2200      	movs	r2, #0
 800312a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800312c:	4b73      	ldr	r3, [pc, #460]	@ (80032fc <HAL_UART_MspInit+0x288>)
 800312e:	2200      	movs	r2, #0
 8003130:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003132:	4872      	ldr	r0, [pc, #456]	@ (80032fc <HAL_UART_MspInit+0x288>)
 8003134:	f001 f982 	bl	800443c <HAL_DMA_Init>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800313e:	f7ff ff27 	bl	8002f90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a6d      	ldr	r2, [pc, #436]	@ (80032fc <HAL_UART_MspInit+0x288>)
 8003146:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003148:	4a6c      	ldr	r2, [pc, #432]	@ (80032fc <HAL_UART_MspInit+0x288>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800314e:	4b6d      	ldr	r3, [pc, #436]	@ (8003304 <HAL_UART_MspInit+0x290>)
 8003150:	4a6d      	ldr	r2, [pc, #436]	@ (8003308 <HAL_UART_MspInit+0x294>)
 8003152:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003154:	4b6b      	ldr	r3, [pc, #428]	@ (8003304 <HAL_UART_MspInit+0x290>)
 8003156:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800315a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800315c:	4b69      	ldr	r3, [pc, #420]	@ (8003304 <HAL_UART_MspInit+0x290>)
 800315e:	2240      	movs	r2, #64	@ 0x40
 8003160:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003162:	4b68      	ldr	r3, [pc, #416]	@ (8003304 <HAL_UART_MspInit+0x290>)
 8003164:	2200      	movs	r2, #0
 8003166:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003168:	4b66      	ldr	r3, [pc, #408]	@ (8003304 <HAL_UART_MspInit+0x290>)
 800316a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800316e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003170:	4b64      	ldr	r3, [pc, #400]	@ (8003304 <HAL_UART_MspInit+0x290>)
 8003172:	2200      	movs	r2, #0
 8003174:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003176:	4b63      	ldr	r3, [pc, #396]	@ (8003304 <HAL_UART_MspInit+0x290>)
 8003178:	2200      	movs	r2, #0
 800317a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800317c:	4b61      	ldr	r3, [pc, #388]	@ (8003304 <HAL_UART_MspInit+0x290>)
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003182:	4b60      	ldr	r3, [pc, #384]	@ (8003304 <HAL_UART_MspInit+0x290>)
 8003184:	2200      	movs	r2, #0
 8003186:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003188:	4b5e      	ldr	r3, [pc, #376]	@ (8003304 <HAL_UART_MspInit+0x290>)
 800318a:	2200      	movs	r2, #0
 800318c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800318e:	485d      	ldr	r0, [pc, #372]	@ (8003304 <HAL_UART_MspInit+0x290>)
 8003190:	f001 f954 	bl	800443c <HAL_DMA_Init>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800319a:	f7ff fef9 	bl	8002f90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a58      	ldr	r2, [pc, #352]	@ (8003304 <HAL_UART_MspInit+0x290>)
 80031a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80031a4:	4a57      	ldr	r2, [pc, #348]	@ (8003304 <HAL_UART_MspInit+0x290>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2100      	movs	r1, #0
 80031ae:	2025      	movs	r0, #37	@ 0x25
 80031b0:	f001 f90d 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031b4:	2025      	movs	r0, #37	@ 0x25
 80031b6:	f001 f926 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031ba:	e095      	b.n	80032e8 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a52      	ldr	r2, [pc, #328]	@ (800330c <HAL_UART_MspInit+0x298>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	f040 8090 	bne.w	80032e8 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031c8:	2300      	movs	r3, #0
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	4b49      	ldr	r3, [pc, #292]	@ (80032f4 <HAL_UART_MspInit+0x280>)
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	4a48      	ldr	r2, [pc, #288]	@ (80032f4 <HAL_UART_MspInit+0x280>)
 80031d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80031d8:	4b46      	ldr	r3, [pc, #280]	@ (80032f4 <HAL_UART_MspInit+0x280>)
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	4b42      	ldr	r3, [pc, #264]	@ (80032f4 <HAL_UART_MspInit+0x280>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ec:	4a41      	ldr	r2, [pc, #260]	@ (80032f4 <HAL_UART_MspInit+0x280>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f4:	4b3f      	ldr	r3, [pc, #252]	@ (80032f4 <HAL_UART_MspInit+0x280>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003200:	230c      	movs	r3, #12
 8003202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320c:	2303      	movs	r3, #3
 800320e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003210:	2307      	movs	r3, #7
 8003212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003214:	f107 031c 	add.w	r3, r7, #28
 8003218:	4619      	mov	r1, r3
 800321a:	4837      	ldr	r0, [pc, #220]	@ (80032f8 <HAL_UART_MspInit+0x284>)
 800321c:	f001 fd10 	bl	8004c40 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003220:	4b3b      	ldr	r3, [pc, #236]	@ (8003310 <HAL_UART_MspInit+0x29c>)
 8003222:	4a3c      	ldr	r2, [pc, #240]	@ (8003314 <HAL_UART_MspInit+0x2a0>)
 8003224:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003226:	4b3a      	ldr	r3, [pc, #232]	@ (8003310 <HAL_UART_MspInit+0x29c>)
 8003228:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800322c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800322e:	4b38      	ldr	r3, [pc, #224]	@ (8003310 <HAL_UART_MspInit+0x29c>)
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003234:	4b36      	ldr	r3, [pc, #216]	@ (8003310 <HAL_UART_MspInit+0x29c>)
 8003236:	2200      	movs	r2, #0
 8003238:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800323a:	4b35      	ldr	r3, [pc, #212]	@ (8003310 <HAL_UART_MspInit+0x29c>)
 800323c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003240:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003242:	4b33      	ldr	r3, [pc, #204]	@ (8003310 <HAL_UART_MspInit+0x29c>)
 8003244:	2200      	movs	r2, #0
 8003246:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003248:	4b31      	ldr	r3, [pc, #196]	@ (8003310 <HAL_UART_MspInit+0x29c>)
 800324a:	2200      	movs	r2, #0
 800324c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800324e:	4b30      	ldr	r3, [pc, #192]	@ (8003310 <HAL_UART_MspInit+0x29c>)
 8003250:	2200      	movs	r2, #0
 8003252:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003254:	4b2e      	ldr	r3, [pc, #184]	@ (8003310 <HAL_UART_MspInit+0x29c>)
 8003256:	2200      	movs	r2, #0
 8003258:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800325a:	4b2d      	ldr	r3, [pc, #180]	@ (8003310 <HAL_UART_MspInit+0x29c>)
 800325c:	2200      	movs	r2, #0
 800325e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003260:	482b      	ldr	r0, [pc, #172]	@ (8003310 <HAL_UART_MspInit+0x29c>)
 8003262:	f001 f8eb 	bl	800443c <HAL_DMA_Init>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 800326c:	f7ff fe90 	bl	8002f90 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a27      	ldr	r2, [pc, #156]	@ (8003310 <HAL_UART_MspInit+0x29c>)
 8003274:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003276:	4a26      	ldr	r2, [pc, #152]	@ (8003310 <HAL_UART_MspInit+0x29c>)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800327c:	4b26      	ldr	r3, [pc, #152]	@ (8003318 <HAL_UART_MspInit+0x2a4>)
 800327e:	4a27      	ldr	r2, [pc, #156]	@ (800331c <HAL_UART_MspInit+0x2a8>)
 8003280:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003282:	4b25      	ldr	r3, [pc, #148]	@ (8003318 <HAL_UART_MspInit+0x2a4>)
 8003284:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003288:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800328a:	4b23      	ldr	r3, [pc, #140]	@ (8003318 <HAL_UART_MspInit+0x2a4>)
 800328c:	2240      	movs	r2, #64	@ 0x40
 800328e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003290:	4b21      	ldr	r3, [pc, #132]	@ (8003318 <HAL_UART_MspInit+0x2a4>)
 8003292:	2200      	movs	r2, #0
 8003294:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003296:	4b20      	ldr	r3, [pc, #128]	@ (8003318 <HAL_UART_MspInit+0x2a4>)
 8003298:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800329c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800329e:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <HAL_UART_MspInit+0x2a4>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003318 <HAL_UART_MspInit+0x2a4>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80032aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <HAL_UART_MspInit+0x2a4>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032b0:	4b19      	ldr	r3, [pc, #100]	@ (8003318 <HAL_UART_MspInit+0x2a4>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032b6:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <HAL_UART_MspInit+0x2a4>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80032bc:	4816      	ldr	r0, [pc, #88]	@ (8003318 <HAL_UART_MspInit+0x2a4>)
 80032be:	f001 f8bd 	bl	800443c <HAL_DMA_Init>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_UART_MspInit+0x258>
      Error_Handler();
 80032c8:	f7ff fe62 	bl	8002f90 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a12      	ldr	r2, [pc, #72]	@ (8003318 <HAL_UART_MspInit+0x2a4>)
 80032d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80032d2:	4a11      	ldr	r2, [pc, #68]	@ (8003318 <HAL_UART_MspInit+0x2a4>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032d8:	2200      	movs	r2, #0
 80032da:	2100      	movs	r1, #0
 80032dc:	2026      	movs	r0, #38	@ 0x26
 80032de:	f001 f876 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032e2:	2026      	movs	r0, #38	@ 0x26
 80032e4:	f001 f88f 	bl	8004406 <HAL_NVIC_EnableIRQ>
}
 80032e8:	bf00      	nop
 80032ea:	3730      	adds	r7, #48	@ 0x30
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40011000 	.word	0x40011000
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40020000 	.word	0x40020000
 80032fc:	20000618 	.word	0x20000618
 8003300:	40026440 	.word	0x40026440
 8003304:	20000678 	.word	0x20000678
 8003308:	400264b8 	.word	0x400264b8
 800330c:	40004400 	.word	0x40004400
 8003310:	200006d8 	.word	0x200006d8
 8003314:	40026088 	.word	0x40026088
 8003318:	20000738 	.word	0x20000738
 800331c:	400260a0 	.word	0x400260a0

08003320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003324:	bf00      	nop
 8003326:	e7fd      	b.n	8003324 <NMI_Handler+0x4>

08003328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800332c:	bf00      	nop
 800332e:	e7fd      	b.n	800332c <HardFault_Handler+0x4>

08003330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <MemManage_Handler+0x4>

08003338 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <BusFault_Handler+0x4>

08003340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <UsageFault_Handler+0x4>

08003348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003376:	f000 ff0b 	bl	8004190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003384:	4802      	ldr	r0, [pc, #8]	@ (8003390 <DMA1_Stream5_IRQHandler+0x10>)
 8003386:	f001 f9f1 	bl	800476c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200006d8 	.word	0x200006d8

08003394 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003398:	4802      	ldr	r0, [pc, #8]	@ (80033a4 <DMA1_Stream6_IRQHandler+0x10>)
 800339a:	f001 f9e7 	bl	800476c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000738 	.word	0x20000738

080033a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033ac:	4802      	ldr	r0, [pc, #8]	@ (80033b8 <TIM2_IRQHandler+0x10>)
 80033ae:	f003 fd3f 	bl	8006e30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //HAL_TIM_PeriodElapsedCallback(&htim2);
  /* USER CODE END TIM2_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200004f8 	.word	0x200004f8

080033bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033c0:	4802      	ldr	r0, [pc, #8]	@ (80033cc <TIM3_IRQHandler+0x10>)
 80033c2:	f003 fd35 	bl	8006e30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000540 	.word	0x20000540

080033d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033d4:	4802      	ldr	r0, [pc, #8]	@ (80033e0 <USART1_IRQHandler+0x10>)
 80033d6:	f004 f9d1 	bl	800777c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000588 	.word	0x20000588

080033e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033e8:	4802      	ldr	r0, [pc, #8]	@ (80033f4 <USART2_IRQHandler+0x10>)
 80033ea:	f004 f9c7 	bl	800777c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200005d0 	.word	0x200005d0

080033f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80033fe:	480d      	ldr	r0, [pc, #52]	@ (8003434 <DMA2_Stream2_IRQHandler+0x3c>)
 8003400:	f001 f9b4 	bl	800476c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)){ //get message size as return to call back function
 8003404:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <DMA2_Stream2_IRQHandler+0x40>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b10      	cmp	r3, #16
 8003410:	d10b      	bne.n	800342a <DMA2_Stream2_IRQHandler+0x32>
     	  uint16_t size = RX_BUFFER_SIZE_GPS - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx); //#bytes in Buffer - #Bytes not received
 8003412:	4b08      	ldr	r3, [pc, #32]	@ (8003434 <DMA2_Stream2_IRQHandler+0x3c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	b29b      	uxth	r3, r3
 800341a:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800341e:	80fb      	strh	r3, [r7, #6]
     	  HAL_UARTEx_RxEventCallback(&huart1, size);
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	4619      	mov	r1, r3
 8003424:	4804      	ldr	r0, [pc, #16]	@ (8003438 <DMA2_Stream2_IRQHandler+0x40>)
 8003426:	f7fe fc0d 	bl	8001c44 <HAL_UARTEx_RxEventCallback>

       }

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000618 	.word	0x20000618
 8003438:	20000588 	.word	0x20000588

0800343c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003440:	4802      	ldr	r0, [pc, #8]	@ (800344c <OTG_FS_IRQHandler+0x10>)
 8003442:	f001 fede 	bl	8005202 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	200015ec 	.word	0x200015ec

08003450 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003454:	4802      	ldr	r0, [pc, #8]	@ (8003460 <DMA2_Stream7_IRQHandler+0x10>)
 8003456:	f001 f989 	bl	800476c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000678 	.word	0x20000678

08003464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return 1;
 8003468:	2301      	movs	r3, #1
}
 800346a:	4618      	mov	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <_kill>:

int _kill(int pid, int sig)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800347e:	f00b f8eb 	bl	800e658 <__errno>
 8003482:	4603      	mov	r3, r0
 8003484:	2216      	movs	r2, #22
 8003486:	601a      	str	r2, [r3, #0]
  return -1;
 8003488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <_exit>:

void _exit (int status)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800349c:	f04f 31ff 	mov.w	r1, #4294967295
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ffe7 	bl	8003474 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034a6:	bf00      	nop
 80034a8:	e7fd      	b.n	80034a6 <_exit+0x12>

080034aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	e00a      	b.n	80034d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034bc:	f3af 8000 	nop.w
 80034c0:	4601      	mov	r1, r0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	60ba      	str	r2, [r7, #8]
 80034c8:	b2ca      	uxtb	r2, r1
 80034ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3301      	adds	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	dbf0      	blt.n	80034bc <_read+0x12>
  }

  return len;
 80034da:	687b      	ldr	r3, [r7, #4]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	e009      	b.n	800350a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	60ba      	str	r2, [r7, #8]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	3301      	adds	r3, #1
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	429a      	cmp	r2, r3
 8003510:	dbf1      	blt.n	80034f6 <_write+0x12>
  }
  return len;
 8003512:	687b      	ldr	r3, [r7, #4]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <_close>:

int _close(int file)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003544:	605a      	str	r2, [r3, #4]
  return 0;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <_isatty>:

int _isatty(int file)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800355c:	2301      	movs	r3, #1
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800358c:	4a14      	ldr	r2, [pc, #80]	@ (80035e0 <_sbrk+0x5c>)
 800358e:	4b15      	ldr	r3, [pc, #84]	@ (80035e4 <_sbrk+0x60>)
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003598:	4b13      	ldr	r3, [pc, #76]	@ (80035e8 <_sbrk+0x64>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035a0:	4b11      	ldr	r3, [pc, #68]	@ (80035e8 <_sbrk+0x64>)
 80035a2:	4a12      	ldr	r2, [pc, #72]	@ (80035ec <_sbrk+0x68>)
 80035a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035a6:	4b10      	ldr	r3, [pc, #64]	@ (80035e8 <_sbrk+0x64>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d207      	bcs.n	80035c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035b4:	f00b f850 	bl	800e658 <__errno>
 80035b8:	4603      	mov	r3, r0
 80035ba:	220c      	movs	r2, #12
 80035bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	e009      	b.n	80035d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035c4:	4b08      	ldr	r3, [pc, #32]	@ (80035e8 <_sbrk+0x64>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ca:	4b07      	ldr	r3, [pc, #28]	@ (80035e8 <_sbrk+0x64>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	4a05      	ldr	r2, [pc, #20]	@ (80035e8 <_sbrk+0x64>)
 80035d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035d6:	68fb      	ldr	r3, [r7, #12]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20010000 	.word	0x20010000
 80035e4:	00000400 	.word	0x00000400
 80035e8:	20000890 	.word	0x20000890
 80035ec:	20001e40 	.word	0x20001e40

080035f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035f4:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <SystemInit+0x20>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fa:	4a05      	ldr	r2, [pc, #20]	@ (8003610 <SystemInit+0x20>)
 80035fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000ed00 	.word	0xe000ed00

08003614 <gpsisdigit>:
//
// public methods
//

// verify is character is a digit
bool gpsisdigit(char c) { return c >= '0' && c <= '9'; }
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	71fb      	strb	r3, [r7, #7]
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	2b2f      	cmp	r3, #47	@ 0x2f
 8003622:	d904      	bls.n	800362e <gpsisdigit+0x1a>
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	2b39      	cmp	r3, #57	@ 0x39
 8003628:	d801      	bhi.n	800362e <gpsisdigit+0x1a>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <gpsisdigit+0x1c>
 800362e:	2300      	movs	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	4618      	mov	r0, r3
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <uptime>:
// horizontal dilution of precision in 100ths
inline unsigned long gps_hdop() { return _hdop; }


clock_t uptime()
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
	unsigned long d = HAL_GetTick();
 8003644:	f000 fdb8 	bl	80041b8 <HAL_GetTick>
 8003648:	6078      	str	r0, [r7, #4]
	return d;
 800364a:	687b      	ldr	r3, [r7, #4]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	0000      	movs	r0, r0
	...

08003658 <radians>:

float radians(float deg)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	ed87 0a01 	vstr	s0, [r7, #4]
	return deg * (PI/180);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fc ff78 	bl	8000558 <__aeabi_f2d>
 8003668:	a309      	add	r3, pc, #36	@ (adr r3, 8003690 <radians+0x38>)
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	f7fc ffcb 	bl	8000608 <__aeabi_dmul>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	f7fd fabd 	bl	8000bf8 <__aeabi_d2f>
 800367e:	4603      	mov	r3, r0
 8003680:	ee07 3a90 	vmov	s15, r3
}
 8003684:	eeb0 0a67 	vmov.f32	s0, s15
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	a1fae712 	.word	0xa1fae712
 8003694:	3f91df46 	.word	0x3f91df46

08003698 <gps_encode>:
{
	return rad * (180/PI);
}

bool gps_encode(char c)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	71fb      	strb	r3, [r7, #7]
  bool valid_sentence = true;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]

#ifndef GPS_NO_STATS
  _encoded_characters++;
 80036a6:	4b57      	ldr	r3, [pc, #348]	@ (8003804 <gps_encode+0x16c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	4a55      	ldr	r2, [pc, #340]	@ (8003804 <gps_encode+0x16c>)
 80036ae:	6013      	str	r3, [r2, #0]
#endif
  switch(c)
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	3b0a      	subs	r3, #10
 80036b4:	2b22      	cmp	r3, #34	@ 0x22
 80036b6:	f200 8086 	bhi.w	80037c6 <gps_encode+0x12e>
 80036ba:	a201      	add	r2, pc, #4	@ (adr r2, 80036c0 <gps_encode+0x28>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	0800375b 	.word	0x0800375b
 80036c4:	080037c7 	.word	0x080037c7
 80036c8:	080037c7 	.word	0x080037c7
 80036cc:	0800375b 	.word	0x0800375b
 80036d0:	080037c7 	.word	0x080037c7
 80036d4:	080037c7 	.word	0x080037c7
 80036d8:	080037c7 	.word	0x080037c7
 80036dc:	080037c7 	.word	0x080037c7
 80036e0:	080037c7 	.word	0x080037c7
 80036e4:	080037c7 	.word	0x080037c7
 80036e8:	080037c7 	.word	0x080037c7
 80036ec:	080037c7 	.word	0x080037c7
 80036f0:	080037c7 	.word	0x080037c7
 80036f4:	080037c7 	.word	0x080037c7
 80036f8:	080037c7 	.word	0x080037c7
 80036fc:	080037c7 	.word	0x080037c7
 8003700:	080037c7 	.word	0x080037c7
 8003704:	080037c7 	.word	0x080037c7
 8003708:	080037c7 	.word	0x080037c7
 800370c:	080037c7 	.word	0x080037c7
 8003710:	080037c7 	.word	0x080037c7
 8003714:	080037c7 	.word	0x080037c7
 8003718:	080037c7 	.word	0x080037c7
 800371c:	080037c7 	.word	0x080037c7
 8003720:	080037c7 	.word	0x080037c7
 8003724:	080037c7 	.word	0x080037c7
 8003728:	0800379f 	.word	0x0800379f
 800372c:	080037c7 	.word	0x080037c7
 8003730:	080037c7 	.word	0x080037c7
 8003734:	080037c7 	.word	0x080037c7
 8003738:	080037c7 	.word	0x080037c7
 800373c:	080037c7 	.word	0x080037c7
 8003740:	0800375b 	.word	0x0800375b
 8003744:	080037c7 	.word	0x080037c7
 8003748:	0800374d 	.word	0x0800374d
  {
  case ',': // term terminators
    _parity ^= c;
 800374c:	4b2e      	ldr	r3, [pc, #184]	@ (8003808 <gps_encode+0x170>)
 800374e:	781a      	ldrb	r2, [r3, #0]
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	4053      	eors	r3, r2
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4b2c      	ldr	r3, [pc, #176]	@ (8003808 <gps_encode+0x170>)
 8003758:	701a      	strb	r2, [r3, #0]
  case '\r':
  case '\n':
  case '*':
    if (_term_offset < sizeof(_term))
 800375a:	4b2c      	ldr	r3, [pc, #176]	@ (800380c <gps_encode+0x174>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b0e      	cmp	r3, #14
 8003760:	d809      	bhi.n	8003776 <gps_encode+0xde>
    {
      _term[_term_offset] = 0;
 8003762:	4b2a      	ldr	r3, [pc, #168]	@ (800380c <gps_encode+0x174>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	4b29      	ldr	r3, [pc, #164]	@ (8003810 <gps_encode+0x178>)
 800376a:	2100      	movs	r1, #0
 800376c:	5499      	strb	r1, [r3, r2]
      valid_sentence = gps_term_complete(); // process the term
 800376e:	f000 f93d 	bl	80039ec <gps_term_complete>
 8003772:	4603      	mov	r3, r0
 8003774:	73fb      	strb	r3, [r7, #15]
    }
    ++_term_number; // move to next term
 8003776:	4b27      	ldr	r3, [pc, #156]	@ (8003814 <gps_encode+0x17c>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	3301      	adds	r3, #1
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4b25      	ldr	r3, [pc, #148]	@ (8003814 <gps_encode+0x17c>)
 8003780:	701a      	strb	r2, [r3, #0]
    _term_offset = 0;  // reset the term buffer for next term
 8003782:	4b22      	ldr	r3, [pc, #136]	@ (800380c <gps_encode+0x174>)
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
    _is_checksum_term = c == '*'; //If asterisk then the next term is a check sum
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	2b2a      	cmp	r3, #42	@ 0x2a
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	4b20      	ldr	r3, [pc, #128]	@ (8003818 <gps_encode+0x180>)
 8003798:	701a      	strb	r2, [r3, #0]
    return valid_sentence;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	e02d      	b.n	80037fa <gps_encode+0x162>

  case '$': // sentence begin
    _term_number = 0;
 800379e:	4b1d      	ldr	r3, [pc, #116]	@ (8003814 <gps_encode+0x17c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
    _term_offset = 0;
 80037a4:	4b19      	ldr	r3, [pc, #100]	@ (800380c <gps_encode+0x174>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]
    _parity = 0;
 80037aa:	4b17      	ldr	r3, [pc, #92]	@ (8003808 <gps_encode+0x170>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
    _sentence_type = GPS_SENTENCE_OTHER;
 80037b0:	4b1a      	ldr	r3, [pc, #104]	@ (800381c <gps_encode+0x184>)
 80037b2:	2202      	movs	r2, #2
 80037b4:	701a      	strb	r2, [r3, #0]
    _is_checksum_term = false;
 80037b6:	4b18      	ldr	r3, [pc, #96]	@ (8003818 <gps_encode+0x180>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
    _is_gps_data_good = false;
 80037bc:	4b18      	ldr	r3, [pc, #96]	@ (8003820 <gps_encode+0x188>)
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
    return valid_sentence;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	e019      	b.n	80037fa <gps_encode+0x162>
  }

  // ordinary characters
  if (_term_offset < sizeof(_term) - 1)
 80037c6:	4b11      	ldr	r3, [pc, #68]	@ (800380c <gps_encode+0x174>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b0d      	cmp	r3, #13
 80037cc:	d809      	bhi.n	80037e2 <gps_encode+0x14a>
    _term[_term_offset++] = c; //add character to current term buffer
 80037ce:	4b0f      	ldr	r3, [pc, #60]	@ (800380c <gps_encode+0x174>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	b2d1      	uxtb	r1, r2
 80037d6:	4a0d      	ldr	r2, [pc, #52]	@ (800380c <gps_encode+0x174>)
 80037d8:	7011      	strb	r1, [r2, #0]
 80037da:	4619      	mov	r1, r3
 80037dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003810 <gps_encode+0x178>)
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	5453      	strb	r3, [r2, r1]
  if (!_is_checksum_term)
 80037e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003818 <gps_encode+0x180>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <gps_encode+0x160>
    _parity ^= c; // update the checksum
 80037ea:	4b07      	ldr	r3, [pc, #28]	@ (8003808 <gps_encode+0x170>)
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	4053      	eors	r3, r2
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <gps_encode+0x170>)
 80037f6:	701a      	strb	r2, [r3, #0]

  return valid_sentence;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000900 	.word	0x20000900
 8003808:	200008e8 	.word	0x200008e8
 800380c:	200008fd 	.word	0x200008fd
 8003810:	200008ec 	.word	0x200008ec
 8003814:	200008fc 	.word	0x200008fc
 8003818:	200008e9 	.word	0x200008e9
 800381c:	200008fb 	.word	0x200008fb
 8003820:	200008fe 	.word	0x200008fe

08003824 <from_hex>:
/*
 * internal utilities
*/

int from_hex(char a)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  if (a >= 'A' && a <= 'F')
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	2b40      	cmp	r3, #64	@ 0x40
 8003832:	d905      	bls.n	8003840 <from_hex+0x1c>
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	2b46      	cmp	r3, #70	@ 0x46
 8003838:	d802      	bhi.n	8003840 <from_hex+0x1c>
    return a - 'A' + 10;
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	3b37      	subs	r3, #55	@ 0x37
 800383e:	e00a      	b.n	8003856 <from_hex+0x32>
  else if (a >= 'a' && a <= 'f')
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	2b60      	cmp	r3, #96	@ 0x60
 8003844:	d905      	bls.n	8003852 <from_hex+0x2e>
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	2b66      	cmp	r3, #102	@ 0x66
 800384a:	d802      	bhi.n	8003852 <from_hex+0x2e>
    return a - 'a' + 10;
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	3b57      	subs	r3, #87	@ 0x57
 8003850:	e001      	b.n	8003856 <from_hex+0x32>
  else
    return a - '0';
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	3b30      	subs	r3, #48	@ 0x30
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <gps_parse_decimal>:

unsigned long gps_parse_decimal()
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
  char *p;
  bool isneg;
  unsigned long ret;

  p = _term;
 800386a:	4b2d      	ldr	r3, [pc, #180]	@ (8003920 <gps_parse_decimal+0xbc>)
 800386c:	60fb      	str	r3, [r7, #12]
  isneg = (*p == '-');
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b2d      	cmp	r3, #45	@ 0x2d
 8003874:	bf0c      	ite	eq
 8003876:	2301      	moveq	r3, #1
 8003878:	2300      	movne	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	71fb      	strb	r3, [r7, #7]
  if (isneg)
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <gps_parse_decimal+0x26>
	++p;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3301      	adds	r3, #1
 8003888:	60fb      	str	r3, [r7, #12]

  ret = 100UL * gpsatol(p);
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fa42 	bl	8003d14 <gpsatol>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	2364      	movs	r3, #100	@ 0x64
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	60bb      	str	r3, [r7, #8]

  while (gpsisdigit(*p))
 800389c:	e002      	b.n	80038a4 <gps_parse_decimal+0x40>
	++p;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
  while (gpsisdigit(*p))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff feb3 	bl	8003614 <gpsisdigit>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f4      	bne.n	800389e <gps_parse_decimal+0x3a>

  if (*p == '.')
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80038ba:	d126      	bne.n	800390a <gps_parse_decimal+0xa6>
  {
    if (gpsisdigit(p[1]))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3301      	adds	r3, #1
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff fea6 	bl	8003614 <gpsisdigit>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01d      	beq.n	800390a <gps_parse_decimal+0xa6>
    {
      ret += 10 * (p[1] - '0');
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	3301      	adds	r3, #1
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	461a      	mov	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4413      	add	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
      if (gpsisdigit(p[2]))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3302      	adds	r3, #2
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fe90 	bl	8003614 <gpsisdigit>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <gps_parse_decimal+0xa6>
        ret += p[2] - '0';
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3302      	adds	r3, #2
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4413      	add	r3, r2
 8003906:	3b30      	subs	r3, #48	@ 0x30
 8003908:	60bb      	str	r3, [r7, #8]
    }
  }
  return isneg ? -ret : ret;
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <gps_parse_decimal+0xb2>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	425b      	negs	r3, r3
 8003914:	e000      	b.n	8003918 <gps_parse_decimal+0xb4>
 8003916:	68bb      	ldr	r3, [r7, #8]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200008ec 	.word	0x200008ec

08003924 <gps_parse_degrees>:

unsigned long gps_parse_degrees() //Get Decimal degrees from DMM
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
  char *p;
  unsigned long left;
  unsigned long tenk_minutes;

  left = gpsatol(_term);
 800392a:	482b      	ldr	r0, [pc, #172]	@ (80039d8 <gps_parse_degrees+0xb4>)
 800392c:	f000 f9f2 	bl	8003d14 <gpsatol>
 8003930:	4603      	mov	r3, r0
 8003932:	603b      	str	r3, [r7, #0]
  tenk_minutes = (left % 100UL) * 10000UL;
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	4b29      	ldr	r3, [pc, #164]	@ (80039dc <gps_parse_degrees+0xb8>)
 8003938:	fba3 1302 	umull	r1, r3, r3, r2
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	2164      	movs	r1, #100	@ 0x64
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f242 7210 	movw	r2, #10000	@ 0x2710
 800394a:	fb02 f303 	mul.w	r3, r2, r3
 800394e:	60bb      	str	r3, [r7, #8]

  for (p=_term; gpsisdigit(*p); ++p);
 8003950:	4b21      	ldr	r3, [pc, #132]	@ (80039d8 <gps_parse_degrees+0xb4>)
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e002      	b.n	800395c <gps_parse_degrees+0x38>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3301      	adds	r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fe57 	bl	8003614 <gpsisdigit>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f4      	bne.n	8003956 <gps_parse_degrees+0x32>

  if (*p == '.')
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b2e      	cmp	r3, #46	@ 0x2e
 8003972:	d11e      	bne.n	80039b2 <gps_parse_degrees+0x8e>
  {
    unsigned long mult = 1000;
 8003974:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003978:	607b      	str	r3, [r7, #4]
    while (gpsisdigit(*++p))
 800397a:	e00f      	b.n	800399c <gps_parse_degrees+0x78>
    {
      tenk_minutes += mult * (*p - '0');
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	3b30      	subs	r3, #48	@ 0x30
 8003982:	461a      	mov	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	4413      	add	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
      mult /= 10;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a13      	ldr	r2, [pc, #76]	@ (80039e0 <gps_parse_degrees+0xbc>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	08db      	lsrs	r3, r3, #3
 800399a:	607b      	str	r3, [r7, #4]
    while (gpsisdigit(*++p))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3301      	adds	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff fe34 	bl	8003614 <gpsisdigit>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e4      	bne.n	800397c <gps_parse_degrees+0x58>
    }
  }
  return (left / 100) * 100000 + tenk_minutes / 6;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	4a09      	ldr	r2, [pc, #36]	@ (80039dc <gps_parse_degrees+0xb8>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	4a09      	ldr	r2, [pc, #36]	@ (80039e4 <gps_parse_degrees+0xc0>)
 80039be:	fb03 f202 	mul.w	r2, r3, r2
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4908      	ldr	r1, [pc, #32]	@ (80039e8 <gps_parse_degrees+0xc4>)
 80039c6:	fba1 1303 	umull	r1, r3, r1, r3
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	4413      	add	r3, r2
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200008ec 	.word	0x200008ec
 80039dc:	51eb851f 	.word	0x51eb851f
 80039e0:	cccccccd 	.word	0xcccccccd
 80039e4:	000186a0 	.word	0x000186a0
 80039e8:	aaaaaaab 	.word	0xaaaaaaab

080039ec <gps_term_complete>:

/* Processes a just-completed term
 * Returns true if new sentence has just passed checksum test and is validated
 */
bool gps_term_complete()
{
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
  if (_is_checksum_term)
 80039f2:	4b9c      	ldr	r3, [pc, #624]	@ (8003c64 <gps_term_complete+0x278>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d06b      	beq.n	8003ad2 <gps_term_complete+0xe6>
  {
    uint8_t checksum;
    checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
 80039fa:	4b9b      	ldr	r3, [pc, #620]	@ (8003c68 <gps_term_complete+0x27c>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff ff10 	bl	8003824 <from_hex>
 8003a04:	4603      	mov	r3, r0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	b2dc      	uxtb	r4, r3
 8003a0c:	4b96      	ldr	r3, [pc, #600]	@ (8003c68 <gps_term_complete+0x27c>)
 8003a0e:	785b      	ldrb	r3, [r3, #1]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff07 	bl	8003824 <from_hex>
 8003a16:	4603      	mov	r3, r0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	4423      	add	r3, r4
 8003a1c:	71fb      	strb	r3, [r7, #7]
    if (checksum == _parity)
 8003a1e:	4b93      	ldr	r3, [pc, #588]	@ (8003c6c <gps_term_complete+0x280>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	79fa      	ldrb	r2, [r7, #7]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d14c      	bne.n	8003ac2 <gps_term_complete+0xd6>
    {
      if (_is_gps_data_good)
 8003a28:	4b91      	ldr	r3, [pc, #580]	@ (8003c70 <gps_term_complete+0x284>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d04d      	beq.n	8003ace <gps_term_complete+0xe2>
      {
#ifndef GPS_NO_STATS
        ++_good_sentences;
 8003a32:	4b90      	ldr	r3, [pc, #576]	@ (8003c74 <gps_term_complete+0x288>)
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	3301      	adds	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	4b8e      	ldr	r3, [pc, #568]	@ (8003c74 <gps_term_complete+0x288>)
 8003a3c:	801a      	strh	r2, [r3, #0]
#endif
        _last_time_fix = _new_time_fix;
 8003a3e:	4b8e      	ldr	r3, [pc, #568]	@ (8003c78 <gps_term_complete+0x28c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a8e      	ldr	r2, [pc, #568]	@ (8003c7c <gps_term_complete+0x290>)
 8003a44:	6013      	str	r3, [r2, #0]
        _last_position_fix = _new_position_fix;
 8003a46:	4b8e      	ldr	r3, [pc, #568]	@ (8003c80 <gps_term_complete+0x294>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a8e      	ldr	r2, [pc, #568]	@ (8003c84 <gps_term_complete+0x298>)
 8003a4c:	6013      	str	r3, [r2, #0]

        switch(_sentence_type)
 8003a4e:	4b8e      	ldr	r3, [pc, #568]	@ (8003c88 <gps_term_complete+0x29c>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01a      	beq.n	8003a8c <gps_term_complete+0xa0>
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d131      	bne.n	8003abe <gps_term_complete+0xd2>
        {
        case GPS_SENTENCE_GNRMC:
          _time      = _new_time;
 8003a5a:	4b8c      	ldr	r3, [pc, #560]	@ (8003c8c <gps_term_complete+0x2a0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a8c      	ldr	r2, [pc, #560]	@ (8003c90 <gps_term_complete+0x2a4>)
 8003a60:	6013      	str	r3, [r2, #0]
          _date      = _new_date;
 8003a62:	4b8c      	ldr	r3, [pc, #560]	@ (8003c94 <gps_term_complete+0x2a8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a8c      	ldr	r2, [pc, #560]	@ (8003c98 <gps_term_complete+0x2ac>)
 8003a68:	6013      	str	r3, [r2, #0]
          _latitude  = _new_latitude;
 8003a6a:	4b8c      	ldr	r3, [pc, #560]	@ (8003c9c <gps_term_complete+0x2b0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a8c      	ldr	r2, [pc, #560]	@ (8003ca0 <gps_term_complete+0x2b4>)
 8003a70:	6013      	str	r3, [r2, #0]
          _longitude = _new_longitude;
 8003a72:	4b8c      	ldr	r3, [pc, #560]	@ (8003ca4 <gps_term_complete+0x2b8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a8c      	ldr	r2, [pc, #560]	@ (8003ca8 <gps_term_complete+0x2bc>)
 8003a78:	6013      	str	r3, [r2, #0]
          _speed     = _new_speed;
 8003a7a:	4b8c      	ldr	r3, [pc, #560]	@ (8003cac <gps_term_complete+0x2c0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a8c      	ldr	r2, [pc, #560]	@ (8003cb0 <gps_term_complete+0x2c4>)
 8003a80:	6013      	str	r3, [r2, #0]
          _course    = _new_course;
 8003a82:	4b8c      	ldr	r3, [pc, #560]	@ (8003cb4 <gps_term_complete+0x2c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a8c      	ldr	r2, [pc, #560]	@ (8003cb8 <gps_term_complete+0x2cc>)
 8003a88:	6013      	str	r3, [r2, #0]
          break;
 8003a8a:	e018      	b.n	8003abe <gps_term_complete+0xd2>
        case GPS_SENTENCE_GNGGA:
          _altitude  = _new_altitude;
 8003a8c:	4b8b      	ldr	r3, [pc, #556]	@ (8003cbc <gps_term_complete+0x2d0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a8b      	ldr	r2, [pc, #556]	@ (8003cc0 <gps_term_complete+0x2d4>)
 8003a92:	6013      	str	r3, [r2, #0]
          _time      = _new_time;
 8003a94:	4b7d      	ldr	r3, [pc, #500]	@ (8003c8c <gps_term_complete+0x2a0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a7d      	ldr	r2, [pc, #500]	@ (8003c90 <gps_term_complete+0x2a4>)
 8003a9a:	6013      	str	r3, [r2, #0]
          _latitude  = _new_latitude;
 8003a9c:	4b7f      	ldr	r3, [pc, #508]	@ (8003c9c <gps_term_complete+0x2b0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a7f      	ldr	r2, [pc, #508]	@ (8003ca0 <gps_term_complete+0x2b4>)
 8003aa2:	6013      	str	r3, [r2, #0]
          _longitude = _new_longitude;
 8003aa4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ca4 <gps_term_complete+0x2b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a7f      	ldr	r2, [pc, #508]	@ (8003ca8 <gps_term_complete+0x2bc>)
 8003aaa:	6013      	str	r3, [r2, #0]
          _numsats   = _new_numsats;
 8003aac:	4b85      	ldr	r3, [pc, #532]	@ (8003cc4 <gps_term_complete+0x2d8>)
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	4b85      	ldr	r3, [pc, #532]	@ (8003cc8 <gps_term_complete+0x2dc>)
 8003ab2:	801a      	strh	r2, [r3, #0]
          _hdop      = _new_hdop;
 8003ab4:	4b85      	ldr	r3, [pc, #532]	@ (8003ccc <gps_term_complete+0x2e0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a85      	ldr	r2, [pc, #532]	@ (8003cd0 <gps_term_complete+0x2e4>)
 8003aba:	6013      	str	r3, [r2, #0]
          break;
 8003abc:	bf00      	nop
        }

        return true;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e120      	b.n	8003d04 <gps_term_complete+0x318>
      }
    }

#ifndef GPS_NO_STATS
    else
      ++_failed_checksum;
 8003ac2:	4b84      	ldr	r3, [pc, #528]	@ (8003cd4 <gps_term_complete+0x2e8>)
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	4b82      	ldr	r3, [pc, #520]	@ (8003cd4 <gps_term_complete+0x2e8>)
 8003acc:	801a      	strh	r2, [r3, #0]
#endif
    return false;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e118      	b.n	8003d04 <gps_term_complete+0x318>
  }

  // the first term determines the sentence type
  if (_term_number == 0)
 8003ad2:	4b81      	ldr	r3, [pc, #516]	@ (8003cd8 <gps_term_complete+0x2ec>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11a      	bne.n	8003b10 <gps_term_complete+0x124>
  {
    if (!gpsstrcmp(_term, GNRMC_TERM))
 8003ada:	4980      	ldr	r1, [pc, #512]	@ (8003cdc <gps_term_complete+0x2f0>)
 8003adc:	4862      	ldr	r0, [pc, #392]	@ (8003c68 <gps_term_complete+0x27c>)
 8003ade:	f000 f93a 	bl	8003d56 <gpsstrcmp>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <gps_term_complete+0x104>
      _sentence_type = GPS_SENTENCE_GNRMC;
 8003ae8:	4b67      	ldr	r3, [pc, #412]	@ (8003c88 <gps_term_complete+0x29c>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	e00d      	b.n	8003b0c <gps_term_complete+0x120>
    else if (!gpsstrcmp(_term, GNGGA_TERM))
 8003af0:	497b      	ldr	r1, [pc, #492]	@ (8003ce0 <gps_term_complete+0x2f4>)
 8003af2:	485d      	ldr	r0, [pc, #372]	@ (8003c68 <gps_term_complete+0x27c>)
 8003af4:	f000 f92f 	bl	8003d56 <gpsstrcmp>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d103      	bne.n	8003b06 <gps_term_complete+0x11a>
      _sentence_type = GPS_SENTENCE_GNGGA;
 8003afe:	4b62      	ldr	r3, [pc, #392]	@ (8003c88 <gps_term_complete+0x29c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	e002      	b.n	8003b0c <gps_term_complete+0x120>
    else
      _sentence_type = GPS_SENTENCE_OTHER;
 8003b06:	4b60      	ldr	r3, [pc, #384]	@ (8003c88 <gps_term_complete+0x29c>)
 8003b08:	2202      	movs	r2, #2
 8003b0a:	701a      	strb	r2, [r3, #0]
    return false;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e0f9      	b.n	8003d04 <gps_term_complete+0x318>
  }

  else if (_sentence_type != (GPS_SENTENCE_OTHER)){
 8003b10:	4b5d      	ldr	r3, [pc, #372]	@ (8003c88 <gps_term_complete+0x29c>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	f000 80f4 	beq.w	8003d02 <gps_term_complete+0x316>
    switch(COMBINE(_sentence_type, _term_number))
 8003b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003c88 <gps_term_complete+0x29c>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	4a6d      	ldr	r2, [pc, #436]	@ (8003cd8 <gps_term_complete+0x2ec>)
 8003b22:	7812      	ldrb	r2, [r2, #0]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	3b01      	subs	r3, #1
 8003b28:	2b18      	cmp	r3, #24
 8003b2a:	f200 80ea 	bhi.w	8003d02 <gps_term_complete+0x316>
 8003b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b34 <gps_term_complete+0x148>)
 8003b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b34:	08003b99 	.word	0x08003b99
 8003b38:	08003bc5 	.word	0x08003bc5
 8003b3c:	08003bdd 	.word	0x08003bdd
 8003b40:	08003bf3 	.word	0x08003bf3
 8003b44:	08003c01 	.word	0x08003c01
 8003b48:	08003c3d 	.word	0x08003c3d
 8003b4c:	08003c53 	.word	0x08003c53
 8003b50:	08003ce5 	.word	0x08003ce5
 8003b54:	08003cef 	.word	0x08003cef
 8003b58:	08003d03 	.word	0x08003d03
 8003b5c:	08003d03 	.word	0x08003d03
 8003b60:	08003d03 	.word	0x08003d03
 8003b64:	08003d03 	.word	0x08003d03
 8003b68:	08003d03 	.word	0x08003d03
 8003b6c:	08003d03 	.word	0x08003d03
 8003b70:	08003d03 	.word	0x08003d03
 8003b74:	08003b99 	.word	0x08003b99
 8003b78:	08003baf 	.word	0x08003baf
 8003b7c:	08003bc5 	.word	0x08003bc5
 8003b80:	08003bdd 	.word	0x08003bdd
 8003b84:	08003bf3 	.word	0x08003bf3
 8003b88:	08003c01 	.word	0x08003c01
 8003b8c:	08003c15 	.word	0x08003c15
 8003b90:	08003c21 	.word	0x08003c21
 8003b94:	08003c2d 	.word	0x08003c2d
  {
    case COMBINE(GPS_SENTENCE_GNRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GNGGA, 1):
      _new_time = gps_parse_decimal();
 8003b98:	f7ff fe64 	bl	8003864 <gps_parse_decimal>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c8c <gps_term_complete+0x2a0>)
 8003ba0:	6013      	str	r3, [r2, #0]
      _new_time_fix = uptime();
 8003ba2:	f7ff fd4c 	bl	800363e <uptime>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4a33      	ldr	r2, [pc, #204]	@ (8003c78 <gps_term_complete+0x28c>)
 8003baa:	6013      	str	r3, [r2, #0]
      break;
 8003bac:	e0a9      	b.n	8003d02 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 2): // GNRMC validity
      _is_gps_data_good = (_term[0] == 'A');
 8003bae:	4b2e      	ldr	r3, [pc, #184]	@ (8003c68 <gps_term_complete+0x27c>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b41      	cmp	r3, #65	@ 0x41
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8003c70 <gps_term_complete+0x284>)
 8003bc0:	701a      	strb	r2, [r3, #0]
      break;
 8003bc2:	e09e      	b.n	8003d02 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 3): // Latitude
    case COMBINE(GPS_SENTENCE_GNGGA, 2):
      _new_latitude = gps_parse_degrees();
 8003bc4:	f7ff feae 	bl	8003924 <gps_parse_degrees>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4b33      	ldr	r3, [pc, #204]	@ (8003c9c <gps_term_complete+0x2b0>)
 8003bce:	601a      	str	r2, [r3, #0]
      _new_position_fix = uptime();
 8003bd0:	f7ff fd35 	bl	800363e <uptime>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c80 <gps_term_complete+0x294>)
 8003bd8:	6013      	str	r3, [r2, #0]
      break;
 8003bda:	e092      	b.n	8003d02 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GNGGA, 3):
      if (_term[0] == 'S')
 8003bdc:	4b22      	ldr	r3, [pc, #136]	@ (8003c68 <gps_term_complete+0x27c>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b53      	cmp	r3, #83	@ 0x53
 8003be2:	f040 808b 	bne.w	8003cfc <gps_term_complete+0x310>
        _new_latitude = -_new_latitude;
 8003be6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c9c <gps_term_complete+0x2b0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	425b      	negs	r3, r3
 8003bec:	4a2b      	ldr	r2, [pc, #172]	@ (8003c9c <gps_term_complete+0x2b0>)
 8003bee:	6013      	str	r3, [r2, #0]
      break;
 8003bf0:	e084      	b.n	8003cfc <gps_term_complete+0x310>
    case COMBINE(GPS_SENTENCE_GNRMC, 5): // Longitude
    case COMBINE(GPS_SENTENCE_GNGGA, 4):
      _new_longitude = gps_parse_degrees();
 8003bf2:	f7ff fe97 	bl	8003924 <gps_parse_degrees>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca4 <gps_term_complete+0x2b8>)
 8003bfc:	601a      	str	r2, [r3, #0]
      break;
 8003bfe:	e080      	b.n	8003d02 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GNGGA, 5):
      if (_term[0] == 'W')
 8003c00:	4b19      	ldr	r3, [pc, #100]	@ (8003c68 <gps_term_complete+0x27c>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b57      	cmp	r3, #87	@ 0x57
 8003c06:	d17b      	bne.n	8003d00 <gps_term_complete+0x314>
        _new_longitude = -_new_longitude;
 8003c08:	4b26      	ldr	r3, [pc, #152]	@ (8003ca4 <gps_term_complete+0x2b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	425b      	negs	r3, r3
 8003c0e:	4a25      	ldr	r2, [pc, #148]	@ (8003ca4 <gps_term_complete+0x2b8>)
 8003c10:	6013      	str	r3, [r2, #0]
      break;
 8003c12:	e075      	b.n	8003d00 <gps_term_complete+0x314>
    case COMBINE(GPS_SENTENCE_GNRMC, 7): // Speed (GNRMC)
      _new_speed = gps_parse_decimal();
 8003c14:	f7ff fe26 	bl	8003864 <gps_parse_decimal>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4a24      	ldr	r2, [pc, #144]	@ (8003cac <gps_term_complete+0x2c0>)
 8003c1c:	6013      	str	r3, [r2, #0]
      break;
 8003c1e:	e070      	b.n	8003d02 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 8): // Course (GNRMC)
      _new_course = gps_parse_decimal();
 8003c20:	f7ff fe20 	bl	8003864 <gps_parse_decimal>
 8003c24:	4603      	mov	r3, r0
 8003c26:	4a23      	ldr	r2, [pc, #140]	@ (8003cb4 <gps_term_complete+0x2c8>)
 8003c28:	6013      	str	r3, [r2, #0]
      break;
 8003c2a:	e06a      	b.n	8003d02 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 9): // Date (GNRMC)
      _new_date = gpsatol(_term);
 8003c2c:	480e      	ldr	r0, [pc, #56]	@ (8003c68 <gps_term_complete+0x27c>)
 8003c2e:	f000 f871 	bl	8003d14 <gpsatol>
 8003c32:	4603      	mov	r3, r0
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b17      	ldr	r3, [pc, #92]	@ (8003c94 <gps_term_complete+0x2a8>)
 8003c38:	601a      	str	r2, [r3, #0]
      break;
 8003c3a:	e062      	b.n	8003d02 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNGGA, 6): // Fix data (GPGGA)
      _is_gps_data_good = (_term[0] > '0');
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <gps_term_complete+0x27c>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b30      	cmp	r3, #48	@ 0x30
 8003c42:	bf8c      	ite	hi
 8003c44:	2301      	movhi	r3, #1
 8003c46:	2300      	movls	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4b08      	ldr	r3, [pc, #32]	@ (8003c70 <gps_term_complete+0x284>)
 8003c4e:	701a      	strb	r2, [r3, #0]
      break;
 8003c50:	e057      	b.n	8003d02 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNGGA, 7): // Satellites used (GPGGA)
      _new_numsats = (unsigned char)atoi(_term);
 8003c52:	4805      	ldr	r0, [pc, #20]	@ (8003c68 <gps_term_complete+0x27c>)
 8003c54:	f008 fe9c 	bl	800c990 <atoi>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4b19      	ldr	r3, [pc, #100]	@ (8003cc4 <gps_term_complete+0x2d8>)
 8003c60:	801a      	strh	r2, [r3, #0]
      break;
 8003c62:	e04e      	b.n	8003d02 <gps_term_complete+0x316>
 8003c64:	200008e9 	.word	0x200008e9
 8003c68:	200008ec 	.word	0x200008ec
 8003c6c:	200008e8 	.word	0x200008e8
 8003c70:	200008fe 	.word	0x200008fe
 8003c74:	20000904 	.word	0x20000904
 8003c78:	200008dc 	.word	0x200008dc
 8003c7c:	200008d8 	.word	0x200008d8
 8003c80:	200008e4 	.word	0x200008e4
 8003c84:	200008e0 	.word	0x200008e0
 8003c88:	200008fb 	.word	0x200008fb
 8003c8c:	20000898 	.word	0x20000898
 8003c90:	20000894 	.word	0x20000894
 8003c94:	200008a0 	.word	0x200008a0
 8003c98:	2000089c 	.word	0x2000089c
 8003c9c:	200008a8 	.word	0x200008a8
 8003ca0:	200008a4 	.word	0x200008a4
 8003ca4:	200008b0 	.word	0x200008b0
 8003ca8:	200008ac 	.word	0x200008ac
 8003cac:	200008c0 	.word	0x200008c0
 8003cb0:	200008bc 	.word	0x200008bc
 8003cb4:	200008c8 	.word	0x200008c8
 8003cb8:	200008c4 	.word	0x200008c4
 8003cbc:	200008b8 	.word	0x200008b8
 8003cc0:	200008b4 	.word	0x200008b4
 8003cc4:	200008d6 	.word	0x200008d6
 8003cc8:	200008d4 	.word	0x200008d4
 8003ccc:	200008d0 	.word	0x200008d0
 8003cd0:	200008cc 	.word	0x200008cc
 8003cd4:	20000906 	.word	0x20000906
 8003cd8:	200008fc 	.word	0x200008fc
 8003cdc:	08012d0c 	.word	0x08012d0c
 8003ce0:	08012d14 	.word	0x08012d14
    case COMBINE(GPS_SENTENCE_GNGGA, 8): // HDOP
      _new_hdop = gps_parse_decimal();
 8003ce4:	f7ff fdbe 	bl	8003864 <gps_parse_decimal>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4a08      	ldr	r2, [pc, #32]	@ (8003d0c <gps_term_complete+0x320>)
 8003cec:	6013      	str	r3, [r2, #0]
//      break;
    case COMBINE(GPS_SENTENCE_GNGGA, 9): // Altitude (GPGGA)
      _new_altitude = gps_parse_decimal();
 8003cee:	f7ff fdb9 	bl	8003864 <gps_parse_decimal>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <gps_term_complete+0x324>)
 8003cf8:	601a      	str	r2, [r3, #0]
      break;
 8003cfa:	e002      	b.n	8003d02 <gps_term_complete+0x316>
      break;
 8003cfc:	bf00      	nop
 8003cfe:	e000      	b.n	8003d02 <gps_term_complete+0x316>
      break;
 8003d00:	bf00      	nop
  }
  }
  return false;
 8003d02:	2300      	movs	r3, #0

}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd90      	pop	{r4, r7, pc}
 8003d0c:	200008d0 	.word	0x200008d0
 8003d10:	200008b8 	.word	0x200008b8

08003d14 <gpsatol>:

long gpsatol(const char *str)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  long ret = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]
  while (gpsisdigit(*str))
 8003d20:	e00c      	b.n	8003d3c <gpsatol+0x28>
    ret = 10 * ret + *str++ - '0';
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	440b      	add	r3, r1
 8003d38:	3b30      	subs	r3, #48	@ 0x30
 8003d3a:	60fb      	str	r3, [r7, #12]
  while (gpsisdigit(*str))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fc67 	bl	8003614 <gpsisdigit>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1ea      	bne.n	8003d22 <gpsatol+0xe>
  return ret;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <gpsstrcmp>:

int gpsstrcmp(const char *str1, const char *str2)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
  while (*str1 && *str1 == *str2)
 8003d60:	e005      	b.n	8003d6e <gpsstrcmp+0x18>
    ++str1, ++str2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3301      	adds	r3, #1
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	603b      	str	r3, [r7, #0]
  while (*str1 && *str1 == *str2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <gpsstrcmp+0x2c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	781a      	ldrb	r2, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d0ef      	beq.n	8003d62 <gpsstrcmp+0xc>
  return *str1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	781b      	ldrb	r3, [r3, #0]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <gps_distance_between>:

/* static */
float gps_distance_between (float lat1, float long1, float lat2, float long2)
{
 8003d94:	b5b0      	push	{r4, r5, r7, lr}
 8003d96:	b08c      	sub	sp, #48	@ 0x30
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d9e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003da2:	ed87 1a01 	vstr	s2, [r7, #4]
 8003da6:	edc7 1a00 	vstr	s3, [r7]
  // returns distance in meters between two positions, both specified
  // as signed decimal-degrees latitude and longitude. Uses great-circle
  // distance computation for hypothetical sphere of radius 6372795 meters.
  // Because Earth is no exact sphere, rounding errors may be up to 0.5%.
  // Courtesy of Maarten Lamers
  float delta = radians(long1-long2);
 8003daa:	ed97 7a02 	vldr	s14, [r7, #8]
 8003dae:	edd7 7a00 	vldr	s15, [r7]
 8003db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003db6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dba:	f7ff fc4d 	bl	8003658 <radians>
 8003dbe:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
  float sdlong = (float)sin(delta);
 8003dc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dc4:	f7fc fbc8 	bl	8000558 <__aeabi_f2d>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	ec43 2b10 	vmov	d0, r2, r3
 8003dd0:	f00d f8ea 	bl	8010fa8 <sin>
 8003dd4:	ec53 2b10 	vmov	r2, r3, d0
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f7fc ff0c 	bl	8000bf8 <__aeabi_d2f>
 8003de0:	4603      	mov	r3, r0
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  float cdlong = (float)cos(delta);
 8003de4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003de6:	f7fc fbb7 	bl	8000558 <__aeabi_f2d>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	ec43 2b10 	vmov	d0, r2, r3
 8003df2:	f00d f885 	bl	8010f00 <cos>
 8003df6:	ec53 2b10 	vmov	r2, r3, d0
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f7fc fefb 	bl	8000bf8 <__aeabi_d2f>
 8003e02:	4603      	mov	r3, r0
 8003e04:	627b      	str	r3, [r7, #36]	@ 0x24
  lat1 = radians(lat1);
 8003e06:	ed97 0a03 	vldr	s0, [r7, #12]
 8003e0a:	f7ff fc25 	bl	8003658 <radians>
 8003e0e:	ed87 0a03 	vstr	s0, [r7, #12]
  lat2 = radians(lat2);
 8003e12:	ed97 0a01 	vldr	s0, [r7, #4]
 8003e16:	f7ff fc1f 	bl	8003658 <radians>
 8003e1a:	ed87 0a01 	vstr	s0, [r7, #4]
  float slat1 = sin(lat1);
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f7fc fb9a 	bl	8000558 <__aeabi_f2d>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	ec43 2b10 	vmov	d0, r2, r3
 8003e2c:	f00d f8bc 	bl	8010fa8 <sin>
 8003e30:	ec53 2b10 	vmov	r2, r3, d0
 8003e34:	4610      	mov	r0, r2
 8003e36:	4619      	mov	r1, r3
 8003e38:	f7fc fede 	bl	8000bf8 <__aeabi_d2f>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	623b      	str	r3, [r7, #32]
  float clat1 = cos(lat1);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f7fc fb89 	bl	8000558 <__aeabi_f2d>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	ec43 2b10 	vmov	d0, r2, r3
 8003e4e:	f00d f857 	bl	8010f00 <cos>
 8003e52:	ec53 2b10 	vmov	r2, r3, d0
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f7fc fecd 	bl	8000bf8 <__aeabi_d2f>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	61fb      	str	r3, [r7, #28]
  float slat2 = sin(lat2);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fc fb78 	bl	8000558 <__aeabi_f2d>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	ec43 2b10 	vmov	d0, r2, r3
 8003e70:	f00d f89a 	bl	8010fa8 <sin>
 8003e74:	ec53 2b10 	vmov	r2, r3, d0
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f7fc febc 	bl	8000bf8 <__aeabi_d2f>
 8003e80:	4603      	mov	r3, r0
 8003e82:	61bb      	str	r3, [r7, #24]
  float clat2 = cos(lat2);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fc fb67 	bl	8000558 <__aeabi_f2d>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	ec43 2b10 	vmov	d0, r2, r3
 8003e92:	f00d f835 	bl	8010f00 <cos>
 8003e96:	ec53 2b10 	vmov	r2, r3, d0
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f7fc feab 	bl	8000bf8 <__aeabi_d2f>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	617b      	str	r3, [r7, #20]
  delta = (clat1 * slat2) - (slat1 * clat2 * cdlong);
 8003ea6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003eaa:	edd7 7a06 	vldr	s15, [r7, #24]
 8003eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eb2:	edd7 6a08 	vldr	s13, [r7, #32]
 8003eb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003eba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ebe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eca:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  delta = sq(delta);
 8003ece:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003ed2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003ed6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  delta += sq(clat2 * sdlong);
 8003eda:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ede:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003ee2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ee6:	edd7 6a05 	vldr	s13, [r7, #20]
 8003eea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003efe:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  delta = sqrt(delta);
 8003f02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f04:	f7fc fb28 	bl	8000558 <__aeabi_f2d>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	ec43 2b10 	vmov	d0, r2, r3
 8003f10:	f00c ffca 	bl	8010ea8 <sqrt>
 8003f14:	ec53 2b10 	vmov	r2, r3, d0
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	f7fc fe6c 	bl	8000bf8 <__aeabi_d2f>
 8003f20:	4603      	mov	r3, r0
 8003f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float denom = (slat1 * slat2) + (clat1 * clat2 * cdlong);
 8003f24:	ed97 7a08 	vldr	s14, [r7, #32]
 8003f28:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f3c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f48:	edc7 7a04 	vstr	s15, [r7, #16]
  delta = atan2(delta, denom);
 8003f4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f4e:	f7fc fb03 	bl	8000558 <__aeabi_f2d>
 8003f52:	4604      	mov	r4, r0
 8003f54:	460d      	mov	r5, r1
 8003f56:	6938      	ldr	r0, [r7, #16]
 8003f58:	f7fc fafe 	bl	8000558 <__aeabi_f2d>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	ec43 2b11 	vmov	d1, r2, r3
 8003f64:	ec45 4b10 	vmov	d0, r4, r5
 8003f68:	f00c ff9c 	bl	8010ea4 <atan2>
 8003f6c:	ec53 2b10 	vmov	r2, r3, d0
 8003f70:	4610      	mov	r0, r2
 8003f72:	4619      	mov	r1, r3
 8003f74:	f7fc fe40 	bl	8000bf8 <__aeabi_d2f>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return delta * 6372795;
 8003f7c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f80:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8003f94 <gps_distance_between+0x200>
 8003f84:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003f88:	eeb0 0a67 	vmov.f32	s0, s15
 8003f8c:	3730      	adds	r7, #48	@ 0x30
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bdb0      	pop	{r4, r5, r7, pc}
 8003f92:	bf00      	nop
 8003f94:	4ac27b76 	.word	0x4ac27b76

08003f98 <gps_get_position>:
  return directions[direction % 16];
}

// lat/long in hundred thousandths of a degree and age of fix in milliseconds
void gps_get_position(long *latitude, long *longitude, unsigned long *fix_age)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  if (latitude)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <gps_get_position+0x1a>
	*latitude = _latitude;
 8003faa:	4b11      	ldr	r3, [pc, #68]	@ (8003ff0 <gps_get_position+0x58>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	601a      	str	r2, [r3, #0]
  if (longitude)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <gps_get_position+0x28>
	*longitude = _longitude;
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff4 <gps_get_position+0x5c>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	601a      	str	r2, [r3, #0]
  if (fix_age)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00f      	beq.n	8003fe6 <gps_get_position+0x4e>
	*fix_age = (_last_position_fix == GPS_INVALID_FIX_TIME) ?
 8003fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff8 <gps_get_position+0x60>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
		GPS_INVALID_AGE : uptime() - _last_position_fix;
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fce:	d006      	beq.n	8003fde <gps_get_position+0x46>
 8003fd0:	f7ff fb35 	bl	800363e <uptime>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <gps_get_position+0x60>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	e001      	b.n	8003fe2 <gps_get_position+0x4a>
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295
	*fix_age = (_last_position_fix == GPS_INVALID_FIX_TIME) ?
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6013      	str	r3, [r2, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	200008a4 	.word	0x200008a4
 8003ff4:	200008ac 	.word	0x200008ac
 8003ff8:	200008e0 	.word	0x200008e0
 8003ffc:	00000000 	.word	0x00000000

08004000 <gps_f_get_position>:
	*age = _last_time_fix == GPS_INVALID_FIX_TIME ?
		GPS_INVALID_AGE : uptime() - _last_time_fix;
}

void gps_f_get_position(float *latitude, float *longitude, unsigned long *fix_age)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  long lat, lon;
  gps_get_position(&lat, &lon, fix_age);
 800400c:	f107 0110 	add.w	r1, r7, #16
 8004010:	f107 0314 	add.w	r3, r7, #20
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff ffbe 	bl	8003f98 <gps_get_position>
  *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 100000.0);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4a1c      	ldr	r2, [pc, #112]	@ (8004090 <gps_f_get_position+0x90>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d010      	beq.n	8004046 <gps_f_get_position+0x46>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fc fa84 	bl	8000534 <__aeabi_i2d>
 800402c:	a316      	add	r3, pc, #88	@ (adr r3, 8004088 <gps_f_get_position+0x88>)
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f7fc fc13 	bl	800085c <__aeabi_ddiv>
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	f7fc fddb 	bl	8000bf8 <__aeabi_d2f>
 8004042:	4603      	mov	r3, r0
 8004044:	e000      	b.n	8004048 <gps_f_get_position+0x48>
 8004046:	4b13      	ldr	r3, [pc, #76]	@ (8004094 <gps_f_get_position+0x94>)
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	6013      	str	r3, [r2, #0]
  *longitude = lon == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 100000.0);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4a10      	ldr	r2, [pc, #64]	@ (8004090 <gps_f_get_position+0x90>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d010      	beq.n	8004076 <gps_f_get_position+0x76>
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fc fa6c 	bl	8000534 <__aeabi_i2d>
 800405c:	a30a      	add	r3, pc, #40	@ (adr r3, 8004088 <gps_f_get_position+0x88>)
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	f7fc fbfb 	bl	800085c <__aeabi_ddiv>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	f7fc fdc3 	bl	8000bf8 <__aeabi_d2f>
 8004072:	4603      	mov	r3, r0
 8004074:	e000      	b.n	8004078 <gps_f_get_position+0x78>
 8004076:	4b07      	ldr	r3, [pc, #28]	@ (8004094 <gps_f_get_position+0x94>)
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	6013      	str	r3, [r2, #0]
}
 800407c:	bf00      	nop
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	f3af 8000 	nop.w
 8004088:	00000000 	.word	0x00000000
 800408c:	40f86a00 	.word	0x40f86a00
 8004090:	3b9ac9ff 	.word	0x3b9ac9ff
 8004094:	447a0000 	.word	0x447a0000

08004098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004098:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80040d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800409c:	f7ff faa8 	bl	80035f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040a0:	480c      	ldr	r0, [pc, #48]	@ (80040d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040a2:	490d      	ldr	r1, [pc, #52]	@ (80040d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040a4:	4a0d      	ldr	r2, [pc, #52]	@ (80040dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a8:	e002      	b.n	80040b0 <LoopCopyDataInit>

080040aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ae:	3304      	adds	r3, #4

080040b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b4:	d3f9      	bcc.n	80040aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b6:	4a0a      	ldr	r2, [pc, #40]	@ (80040e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040b8:	4c0a      	ldr	r4, [pc, #40]	@ (80040e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040bc:	e001      	b.n	80040c2 <LoopFillZerobss>

080040be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c0:	3204      	adds	r2, #4

080040c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c4:	d3fb      	bcc.n	80040be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040c6:	f00a facd 	bl	800e664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040ca:	f7fd fef5 	bl	8001eb8 <main>
  bx  lr    
 80040ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80040d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040d8:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 80040dc:	080134a0 	.word	0x080134a0
  ldr r2, =_sbss
 80040e0:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 80040e4:	20001e3c 	.word	0x20001e3c

080040e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040e8:	e7fe      	b.n	80040e8 <ADC_IRQHandler>
	...

080040ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040f0:	4b0e      	ldr	r3, [pc, #56]	@ (800412c <HAL_Init+0x40>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0d      	ldr	r2, [pc, #52]	@ (800412c <HAL_Init+0x40>)
 80040f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040fc:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <HAL_Init+0x40>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0a      	ldr	r2, [pc, #40]	@ (800412c <HAL_Init+0x40>)
 8004102:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004108:	4b08      	ldr	r3, [pc, #32]	@ (800412c <HAL_Init+0x40>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a07      	ldr	r2, [pc, #28]	@ (800412c <HAL_Init+0x40>)
 800410e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004114:	2003      	movs	r0, #3
 8004116:	f000 f94f 	bl	80043b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800411a:	200d      	movs	r0, #13
 800411c:	f000 f808 	bl	8004130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004120:	f7fe ff3c 	bl	8002f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40023c00 	.word	0x40023c00

08004130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004138:	4b12      	ldr	r3, [pc, #72]	@ (8004184 <HAL_InitTick+0x54>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b12      	ldr	r3, [pc, #72]	@ (8004188 <HAL_InitTick+0x58>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	4619      	mov	r1, r3
 8004142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004146:	fbb3 f3f1 	udiv	r3, r3, r1
 800414a:	fbb2 f3f3 	udiv	r3, r2, r3
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f967 	bl	8004422 <HAL_SYSTICK_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e00e      	b.n	800417c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b0f      	cmp	r3, #15
 8004162:	d80a      	bhi.n	800417a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004164:	2200      	movs	r2, #0
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	f04f 30ff 	mov.w	r0, #4294967295
 800416c:	f000 f92f 	bl	80043ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004170:	4a06      	ldr	r2, [pc, #24]	@ (800418c <HAL_InitTick+0x5c>)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	e000      	b.n	800417c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	2000000c 	.word	0x2000000c
 8004188:	20000014 	.word	0x20000014
 800418c:	20000010 	.word	0x20000010

08004190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004194:	4b06      	ldr	r3, [pc, #24]	@ (80041b0 <HAL_IncTick+0x20>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_IncTick+0x24>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4413      	add	r3, r2
 80041a0:	4a04      	ldr	r2, [pc, #16]	@ (80041b4 <HAL_IncTick+0x24>)
 80041a2:	6013      	str	r3, [r2, #0]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20000014 	.word	0x20000014
 80041b4:	20000908 	.word	0x20000908

080041b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return uwTick;
 80041bc:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <HAL_GetTick+0x14>)
 80041be:	681b      	ldr	r3, [r3, #0]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20000908 	.word	0x20000908

080041d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041d8:	f7ff ffee 	bl	80041b8 <HAL_GetTick>
 80041dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e8:	d005      	beq.n	80041f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004214 <HAL_Delay+0x44>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041f6:	bf00      	nop
 80041f8:	f7ff ffde 	bl	80041b8 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d8f7      	bhi.n	80041f8 <HAL_Delay+0x28>
  {
  }
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000014 	.word	0x20000014

08004218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004228:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <__NVIC_SetPriorityGrouping+0x44>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004234:	4013      	ands	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004240:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800424a:	4a04      	ldr	r2, [pc, #16]	@ (800425c <__NVIC_SetPriorityGrouping+0x44>)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	60d3      	str	r3, [r2, #12]
}
 8004250:	bf00      	nop
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004264:	4b04      	ldr	r3, [pc, #16]	@ (8004278 <__NVIC_GetPriorityGrouping+0x18>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	0a1b      	lsrs	r3, r3, #8
 800426a:	f003 0307 	and.w	r3, r3, #7
}
 800426e:	4618      	mov	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428a:	2b00      	cmp	r3, #0
 800428c:	db0b      	blt.n	80042a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	f003 021f 	and.w	r2, r3, #31
 8004294:	4907      	ldr	r1, [pc, #28]	@ (80042b4 <__NVIC_EnableIRQ+0x38>)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	2001      	movs	r0, #1
 800429e:	fa00 f202 	lsl.w	r2, r0, r2
 80042a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	e000e100 	.word	0xe000e100

080042b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	6039      	str	r1, [r7, #0]
 80042c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	db0a      	blt.n	80042e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	490c      	ldr	r1, [pc, #48]	@ (8004304 <__NVIC_SetPriority+0x4c>)
 80042d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d6:	0112      	lsls	r2, r2, #4
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	440b      	add	r3, r1
 80042dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042e0:	e00a      	b.n	80042f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	4908      	ldr	r1, [pc, #32]	@ (8004308 <__NVIC_SetPriority+0x50>)
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	3b04      	subs	r3, #4
 80042f0:	0112      	lsls	r2, r2, #4
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	440b      	add	r3, r1
 80042f6:	761a      	strb	r2, [r3, #24]
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	e000e100 	.word	0xe000e100
 8004308:	e000ed00 	.word	0xe000ed00

0800430c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800430c:	b480      	push	{r7}
 800430e:	b089      	sub	sp, #36	@ 0x24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f1c3 0307 	rsb	r3, r3, #7
 8004326:	2b04      	cmp	r3, #4
 8004328:	bf28      	it	cs
 800432a:	2304      	movcs	r3, #4
 800432c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	3304      	adds	r3, #4
 8004332:	2b06      	cmp	r3, #6
 8004334:	d902      	bls.n	800433c <NVIC_EncodePriority+0x30>
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	3b03      	subs	r3, #3
 800433a:	e000      	b.n	800433e <NVIC_EncodePriority+0x32>
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004340:	f04f 32ff 	mov.w	r2, #4294967295
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43da      	mvns	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	401a      	ands	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004354:	f04f 31ff 	mov.w	r1, #4294967295
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	fa01 f303 	lsl.w	r3, r1, r3
 800435e:	43d9      	mvns	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004364:	4313      	orrs	r3, r2
         );
}
 8004366:	4618      	mov	r0, r3
 8004368:	3724      	adds	r7, #36	@ 0x24
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3b01      	subs	r3, #1
 8004380:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004384:	d301      	bcc.n	800438a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004386:	2301      	movs	r3, #1
 8004388:	e00f      	b.n	80043aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800438a:	4a0a      	ldr	r2, [pc, #40]	@ (80043b4 <SysTick_Config+0x40>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3b01      	subs	r3, #1
 8004390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004392:	210f      	movs	r1, #15
 8004394:	f04f 30ff 	mov.w	r0, #4294967295
 8004398:	f7ff ff8e 	bl	80042b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800439c:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <SysTick_Config+0x40>)
 800439e:	2200      	movs	r2, #0
 80043a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043a2:	4b04      	ldr	r3, [pc, #16]	@ (80043b4 <SysTick_Config+0x40>)
 80043a4:	2207      	movs	r2, #7
 80043a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	e000e010 	.word	0xe000e010

080043b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ff29 	bl	8004218 <__NVIC_SetPriorityGrouping>
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b086      	sub	sp, #24
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	4603      	mov	r3, r0
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
 80043da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043e0:	f7ff ff3e 	bl	8004260 <__NVIC_GetPriorityGrouping>
 80043e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	6978      	ldr	r0, [r7, #20]
 80043ec:	f7ff ff8e 	bl	800430c <NVIC_EncodePriority>
 80043f0:	4602      	mov	r2, r0
 80043f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ff5d 	bl	80042b8 <__NVIC_SetPriority>
}
 80043fe:	bf00      	nop
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	4603      	mov	r3, r0
 800440e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff ff31 	bl	800427c <__NVIC_EnableIRQ>
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff ffa2 	bl	8004374 <SysTick_Config>
 8004430:	4603      	mov	r3, r0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004448:	f7ff feb6 	bl	80041b8 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e099      	b.n	800458c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004478:	e00f      	b.n	800449a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800447a:	f7ff fe9d 	bl	80041b8 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b05      	cmp	r3, #5
 8004486:	d908      	bls.n	800449a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2203      	movs	r2, #3
 8004492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e078      	b.n	800458c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e8      	bne.n	800447a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4b38      	ldr	r3, [pc, #224]	@ (8004594 <HAL_DMA_Init+0x158>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d107      	bne.n	8004504 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fc:	4313      	orrs	r3, r2
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0307 	bic.w	r3, r3, #7
 800451a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	2b04      	cmp	r3, #4
 800452c:	d117      	bne.n	800455e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00e      	beq.n	800455e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fb01 	bl	8004b48 <DMA_CheckFifoParam>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2240      	movs	r2, #64	@ 0x40
 8004550:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800455a:	2301      	movs	r3, #1
 800455c:	e016      	b.n	800458c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fab8 	bl	8004adc <DMA_CalcBaseAndBitshift>
 800456c:	4603      	mov	r3, r0
 800456e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004574:	223f      	movs	r2, #63	@ 0x3f
 8004576:	409a      	lsls	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	f010803f 	.word	0xf010803f

08004598 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_DMA_Start_IT+0x26>
 80045ba:	2302      	movs	r3, #2
 80045bc:	e040      	b.n	8004640 <HAL_DMA_Start_IT+0xa8>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d12f      	bne.n	8004632 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2202      	movs	r2, #2
 80045d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fa4a 	bl	8004a80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f0:	223f      	movs	r2, #63	@ 0x3f
 80045f2:	409a      	lsls	r2, r3
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0216 	orr.w	r2, r2, #22
 8004606:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d007      	beq.n	8004620 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0208 	orr.w	r2, r2, #8
 800461e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	e005      	b.n	800463e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800463a:	2302      	movs	r3, #2
 800463c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800463e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004654:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004656:	f7ff fdaf 	bl	80041b8 <HAL_GetTick>
 800465a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d008      	beq.n	800467a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2280      	movs	r2, #128	@ 0x80
 800466c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e052      	b.n	8004720 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0216 	bic.w	r2, r2, #22
 8004688:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004698:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d103      	bne.n	80046aa <HAL_DMA_Abort+0x62>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0208 	bic.w	r2, r2, #8
 80046b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0201 	bic.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046ca:	e013      	b.n	80046f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046cc:	f7ff fd74 	bl	80041b8 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d90c      	bls.n	80046f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2203      	movs	r2, #3
 80046e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e015      	b.n	8004720 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e4      	bne.n	80046cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004706:	223f      	movs	r2, #63	@ 0x3f
 8004708:	409a      	lsls	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d004      	beq.n	8004746 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2280      	movs	r2, #128	@ 0x80
 8004740:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e00c      	b.n	8004760 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2205      	movs	r2, #5
 800474a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004778:	4b8e      	ldr	r3, [pc, #568]	@ (80049b4 <HAL_DMA_IRQHandler+0x248>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a8e      	ldr	r2, [pc, #568]	@ (80049b8 <HAL_DMA_IRQHandler+0x24c>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	0a9b      	lsrs	r3, r3, #10
 8004784:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004796:	2208      	movs	r2, #8
 8004798:	409a      	lsls	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4013      	ands	r3, r2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d01a      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0204 	bic.w	r2, r2, #4
 80047be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c4:	2208      	movs	r2, #8
 80047c6:	409a      	lsls	r2, r3
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d0:	f043 0201 	orr.w	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047dc:	2201      	movs	r2, #1
 80047de:	409a      	lsls	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d012      	beq.n	800480e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fa:	2201      	movs	r2, #1
 80047fc:	409a      	lsls	r2, r3
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004806:	f043 0202 	orr.w	r2, r3, #2
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004812:	2204      	movs	r2, #4
 8004814:	409a      	lsls	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4013      	ands	r3, r2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d012      	beq.n	8004844 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00b      	beq.n	8004844 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004830:	2204      	movs	r2, #4
 8004832:	409a      	lsls	r2, r3
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483c:	f043 0204 	orr.w	r2, r3, #4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004848:	2210      	movs	r2, #16
 800484a:	409a      	lsls	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4013      	ands	r3, r2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d043      	beq.n	80048dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d03c      	beq.n	80048dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004866:	2210      	movs	r2, #16
 8004868:	409a      	lsls	r2, r3
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d018      	beq.n	80048ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d108      	bne.n	800489c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d024      	beq.n	80048dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
 800489a:	e01f      	b.n	80048dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01b      	beq.n	80048dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	4798      	blx	r3
 80048ac:	e016      	b.n	80048dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d107      	bne.n	80048cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0208 	bic.w	r2, r2, #8
 80048ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e0:	2220      	movs	r2, #32
 80048e2:	409a      	lsls	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 808f 	beq.w	8004a0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8087 	beq.w	8004a0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004902:	2220      	movs	r2, #32
 8004904:	409a      	lsls	r2, r3
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b05      	cmp	r3, #5
 8004914:	d136      	bne.n	8004984 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0216 	bic.w	r2, r2, #22
 8004924:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695a      	ldr	r2, [r3, #20]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004934:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d103      	bne.n	8004946 <HAL_DMA_IRQHandler+0x1da>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0208 	bic.w	r2, r2, #8
 8004954:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495a:	223f      	movs	r2, #63	@ 0x3f
 800495c:	409a      	lsls	r2, r3
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004976:	2b00      	cmp	r3, #0
 8004978:	d07e      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	4798      	blx	r3
        }
        return;
 8004982:	e079      	b.n	8004a78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01d      	beq.n	80049ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10d      	bne.n	80049bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d031      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	4798      	blx	r3
 80049b0:	e02c      	b.n	8004a0c <HAL_DMA_IRQHandler+0x2a0>
 80049b2:	bf00      	nop
 80049b4:	2000000c 	.word	0x2000000c
 80049b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d023      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
 80049cc:	e01e      	b.n	8004a0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10f      	bne.n	80049fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0210 	bic.w	r2, r2, #16
 80049ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d032      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d022      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2205      	movs	r2, #5
 8004a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0201 	bic.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d307      	bcc.n	8004a54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f2      	bne.n	8004a38 <HAL_DMA_IRQHandler+0x2cc>
 8004a52:	e000      	b.n	8004a56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	4798      	blx	r3
 8004a76:	e000      	b.n	8004a7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a78:	bf00      	nop
    }
  }
}
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b40      	cmp	r3, #64	@ 0x40
 8004aac:	d108      	bne.n	8004ac0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004abe:	e007      	b.n	8004ad0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	60da      	str	r2, [r3, #12]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	3b10      	subs	r3, #16
 8004aec:	4a14      	ldr	r2, [pc, #80]	@ (8004b40 <DMA_CalcBaseAndBitshift+0x64>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004af6:	4a13      	ldr	r2, [pc, #76]	@ (8004b44 <DMA_CalcBaseAndBitshift+0x68>)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d909      	bls.n	8004b1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b12:	f023 0303 	bic.w	r3, r3, #3
 8004b16:	1d1a      	adds	r2, r3, #4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b1c:	e007      	b.n	8004b2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b26:	f023 0303 	bic.w	r3, r3, #3
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	aaaaaaab 	.word	0xaaaaaaab
 8004b44:	08012dbc 	.word	0x08012dbc

08004b48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d11f      	bne.n	8004ba2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d856      	bhi.n	8004c16 <DMA_CheckFifoParam+0xce>
 8004b68:	a201      	add	r2, pc, #4	@ (adr r2, 8004b70 <DMA_CheckFifoParam+0x28>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004b81 	.word	0x08004b81
 8004b74:	08004b93 	.word	0x08004b93
 8004b78:	08004b81 	.word	0x08004b81
 8004b7c:	08004c17 	.word	0x08004c17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d046      	beq.n	8004c1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b90:	e043      	b.n	8004c1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b96:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b9a:	d140      	bne.n	8004c1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ba0:	e03d      	b.n	8004c1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004baa:	d121      	bne.n	8004bf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d837      	bhi.n	8004c22 <DMA_CheckFifoParam+0xda>
 8004bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb8 <DMA_CheckFifoParam+0x70>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004bc9 	.word	0x08004bc9
 8004bbc:	08004bcf 	.word	0x08004bcf
 8004bc0:	08004bc9 	.word	0x08004bc9
 8004bc4:	08004be1 	.word	0x08004be1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
      break;
 8004bcc:	e030      	b.n	8004c30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d025      	beq.n	8004c26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bde:	e022      	b.n	8004c26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004be8:	d11f      	bne.n	8004c2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bee:	e01c      	b.n	8004c2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d903      	bls.n	8004bfe <DMA_CheckFifoParam+0xb6>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d003      	beq.n	8004c04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bfc:	e018      	b.n	8004c30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
      break;
 8004c02:	e015      	b.n	8004c30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00e      	beq.n	8004c2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      break;
 8004c14:	e00b      	b.n	8004c2e <DMA_CheckFifoParam+0xe6>
      break;
 8004c16:	bf00      	nop
 8004c18:	e00a      	b.n	8004c30 <DMA_CheckFifoParam+0xe8>
      break;
 8004c1a:	bf00      	nop
 8004c1c:	e008      	b.n	8004c30 <DMA_CheckFifoParam+0xe8>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e006      	b.n	8004c30 <DMA_CheckFifoParam+0xe8>
      break;
 8004c22:	bf00      	nop
 8004c24:	e004      	b.n	8004c30 <DMA_CheckFifoParam+0xe8>
      break;
 8004c26:	bf00      	nop
 8004c28:	e002      	b.n	8004c30 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c2a:	bf00      	nop
 8004c2c:	e000      	b.n	8004c30 <DMA_CheckFifoParam+0xe8>
      break;
 8004c2e:	bf00      	nop
    }
  } 
  
  return status; 
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop

08004c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b089      	sub	sp, #36	@ 0x24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	e159      	b.n	8004f10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	f040 8148 	bne.w	8004f0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d005      	beq.n	8004c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d130      	bne.n	8004cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cc8:	2201      	movs	r2, #1
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 0201 	and.w	r2, r3, #1
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d017      	beq.n	8004d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	43db      	mvns	r3, r3
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4013      	ands	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d123      	bne.n	8004d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	08da      	lsrs	r2, r3, #3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3208      	adds	r2, #8
 8004d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	220f      	movs	r2, #15
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	08da      	lsrs	r2, r3, #3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3208      	adds	r2, #8
 8004d7e:	69b9      	ldr	r1, [r7, #24]
 8004d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	2203      	movs	r2, #3
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f003 0203 	and.w	r2, r3, #3
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80a2 	beq.w	8004f0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	4b57      	ldr	r3, [pc, #348]	@ (8004f28 <HAL_GPIO_Init+0x2e8>)
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dce:	4a56      	ldr	r2, [pc, #344]	@ (8004f28 <HAL_GPIO_Init+0x2e8>)
 8004dd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dd6:	4b54      	ldr	r3, [pc, #336]	@ (8004f28 <HAL_GPIO_Init+0x2e8>)
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004de2:	4a52      	ldr	r2, [pc, #328]	@ (8004f2c <HAL_GPIO_Init+0x2ec>)
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	089b      	lsrs	r3, r3, #2
 8004de8:	3302      	adds	r3, #2
 8004dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	220f      	movs	r2, #15
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4013      	ands	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a49      	ldr	r2, [pc, #292]	@ (8004f30 <HAL_GPIO_Init+0x2f0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d019      	beq.n	8004e42 <HAL_GPIO_Init+0x202>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a48      	ldr	r2, [pc, #288]	@ (8004f34 <HAL_GPIO_Init+0x2f4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_GPIO_Init+0x1fe>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a47      	ldr	r2, [pc, #284]	@ (8004f38 <HAL_GPIO_Init+0x2f8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00d      	beq.n	8004e3a <HAL_GPIO_Init+0x1fa>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a46      	ldr	r2, [pc, #280]	@ (8004f3c <HAL_GPIO_Init+0x2fc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d007      	beq.n	8004e36 <HAL_GPIO_Init+0x1f6>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a45      	ldr	r2, [pc, #276]	@ (8004f40 <HAL_GPIO_Init+0x300>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d101      	bne.n	8004e32 <HAL_GPIO_Init+0x1f2>
 8004e2e:	2304      	movs	r3, #4
 8004e30:	e008      	b.n	8004e44 <HAL_GPIO_Init+0x204>
 8004e32:	2307      	movs	r3, #7
 8004e34:	e006      	b.n	8004e44 <HAL_GPIO_Init+0x204>
 8004e36:	2303      	movs	r3, #3
 8004e38:	e004      	b.n	8004e44 <HAL_GPIO_Init+0x204>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e002      	b.n	8004e44 <HAL_GPIO_Init+0x204>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_GPIO_Init+0x204>
 8004e42:	2300      	movs	r3, #0
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	f002 0203 	and.w	r2, r2, #3
 8004e4a:	0092      	lsls	r2, r2, #2
 8004e4c:	4093      	lsls	r3, r2
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e54:	4935      	ldr	r1, [pc, #212]	@ (8004f2c <HAL_GPIO_Init+0x2ec>)
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	089b      	lsrs	r3, r3, #2
 8004e5a:	3302      	adds	r3, #2
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e62:	4b38      	ldr	r3, [pc, #224]	@ (8004f44 <HAL_GPIO_Init+0x304>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e86:	4a2f      	ldr	r2, [pc, #188]	@ (8004f44 <HAL_GPIO_Init+0x304>)
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f44 <HAL_GPIO_Init+0x304>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004eb0:	4a24      	ldr	r2, [pc, #144]	@ (8004f44 <HAL_GPIO_Init+0x304>)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004eb6:	4b23      	ldr	r3, [pc, #140]	@ (8004f44 <HAL_GPIO_Init+0x304>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004eda:	4a1a      	ldr	r2, [pc, #104]	@ (8004f44 <HAL_GPIO_Init+0x304>)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ee0:	4b18      	ldr	r3, [pc, #96]	@ (8004f44 <HAL_GPIO_Init+0x304>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4013      	ands	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f04:	4a0f      	ldr	r2, [pc, #60]	@ (8004f44 <HAL_GPIO_Init+0x304>)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b0f      	cmp	r3, #15
 8004f14:	f67f aea2 	bls.w	8004c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	3724      	adds	r7, #36	@ 0x24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	40013800 	.word	0x40013800
 8004f30:	40020000 	.word	0x40020000
 8004f34:	40020400 	.word	0x40020400
 8004f38:	40020800 	.word	0x40020800
 8004f3c:	40020c00 	.word	0x40020c00
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40013c00 	.word	0x40013c00

08004f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	807b      	strh	r3, [r7, #2]
 8004f54:	4613      	mov	r3, r2
 8004f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f58:	787b      	ldrb	r3, [r7, #1]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f5e:	887a      	ldrh	r2, [r7, #2]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f64:	e003      	b.n	8004f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f66:	887b      	ldrh	r3, [r7, #2]
 8004f68:	041a      	lsls	r2, r3, #16
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	619a      	str	r2, [r3, #24]
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b086      	sub	sp, #24
 8004f7e:	af02      	add	r7, sp, #8
 8004f80:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e101      	b.n	8005190 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f007 f9e8 	bl	800c37c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2203      	movs	r2, #3
 8004fb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fba:	d102      	bne.n	8004fc2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f003 fde1 	bl	8008b8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	7c1a      	ldrb	r2, [r3, #16]
 8004fd4:	f88d 2000 	strb.w	r2, [sp]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fdc:	f003 fcc0 	bl	8008960 <USB_CoreInit>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e0ce      	b.n	8005190 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f003 fdd9 	bl	8008bb0 <USB_SetCurrentMode>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0bf      	b.n	8005190 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
 8005014:	e04a      	b.n	80050ac <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005016:	7bfa      	ldrb	r2, [r7, #15]
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	3315      	adds	r3, #21
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800502a:	7bfa      	ldrb	r2, [r7, #15]
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	3314      	adds	r3, #20
 800503a:	7bfa      	ldrb	r2, [r7, #15]
 800503c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800503e:	7bfa      	ldrb	r2, [r7, #15]
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	b298      	uxth	r0, r3
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	332e      	adds	r3, #46	@ 0x2e
 8005052:	4602      	mov	r2, r0
 8005054:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005056:	7bfa      	ldrb	r2, [r7, #15]
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	3318      	adds	r3, #24
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800506a:	7bfa      	ldrb	r2, [r7, #15]
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	331c      	adds	r3, #28
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800507e:	7bfa      	ldrb	r2, [r7, #15]
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	3320      	adds	r3, #32
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005092:	7bfa      	ldrb	r2, [r7, #15]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	3324      	adds	r3, #36	@ 0x24
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	3301      	adds	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	791b      	ldrb	r3, [r3, #4]
 80050b0:	7bfa      	ldrb	r2, [r7, #15]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d3af      	bcc.n	8005016 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050b6:	2300      	movs	r3, #0
 80050b8:	73fb      	strb	r3, [r7, #15]
 80050ba:	e044      	b.n	8005146 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050bc:	7bfa      	ldrb	r2, [r7, #15]
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050d2:	7bfa      	ldrb	r2, [r7, #15]
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80050e4:	7bfa      	ldrb	r2, [r7, #15]
 80050e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050e8:	7bfa      	ldrb	r2, [r7, #15]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80050fa:	2200      	movs	r2, #0
 80050fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050fe:	7bfa      	ldrb	r2, [r7, #15]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005114:	7bfa      	ldrb	r2, [r7, #15]
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800512a:	7bfa      	ldrb	r2, [r7, #15]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	3301      	adds	r3, #1
 8005144:	73fb      	strb	r3, [r7, #15]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	791b      	ldrb	r3, [r3, #4]
 800514a:	7bfa      	ldrb	r2, [r7, #15]
 800514c:	429a      	cmp	r2, r3
 800514e:	d3b5      	bcc.n	80050bc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	7c1a      	ldrb	r2, [r3, #16]
 8005158:	f88d 2000 	strb.w	r2, [sp]
 800515c:	3304      	adds	r3, #4
 800515e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005160:	f003 fd72 	bl	8008c48 <USB_DevInit>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e00c      	b.n	8005190 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f004 fdb6 	bl	8009cfa <USB_DevDisconnect>

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_PCD_Start+0x1c>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e022      	b.n	80051fa <HAL_PCD_Start+0x62>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d009      	beq.n	80051dc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d105      	bne.n	80051dc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f003 fcc3 	bl	8008b6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f004 fd64 	bl	8009cb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005202:	b590      	push	{r4, r7, lr}
 8005204:	b08d      	sub	sp, #52	@ 0x34
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f004 fe22 	bl	8009e62 <USB_GetMode>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 848c 	bne.w	8005b3e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f004 fd86 	bl	8009d3c <USB_ReadInterrupts>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 8482 	beq.w	8005b3c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	0a1b      	lsrs	r3, r3, #8
 8005242:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f004 fd73 	bl	8009d3c <USB_ReadInterrupts>
 8005256:	4603      	mov	r3, r0
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b02      	cmp	r3, #2
 800525e:	d107      	bne.n	8005270 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f002 0202 	and.w	r2, r2, #2
 800526e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f004 fd61 	bl	8009d3c <USB_ReadInterrupts>
 800527a:	4603      	mov	r3, r0
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b10      	cmp	r3, #16
 8005282:	d161      	bne.n	8005348 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0210 	bic.w	r2, r2, #16
 8005292:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f003 020f 	and.w	r2, r3, #15
 80052a0:	4613      	mov	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	4413      	add	r3, r2
 80052b0:	3304      	adds	r3, #4
 80052b2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	0c5b      	lsrs	r3, r3, #17
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d124      	bne.n	800530a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80052c6:	4013      	ands	r3, r2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d035      	beq.n	8005338 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	091b      	lsrs	r3, r3, #4
 80052d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052da:	b29b      	uxth	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	6a38      	ldr	r0, [r7, #32]
 80052e0:	f004 fb98 	bl	8009a14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	091b      	lsrs	r3, r3, #4
 80052ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052f0:	441a      	add	r2, r3
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	091b      	lsrs	r3, r3, #4
 80052fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005302:	441a      	add	r2, r3
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	615a      	str	r2, [r3, #20]
 8005308:	e016      	b.n	8005338 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	0c5b      	lsrs	r3, r3, #17
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	2b06      	cmp	r3, #6
 8005314:	d110      	bne.n	8005338 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800531c:	2208      	movs	r2, #8
 800531e:	4619      	mov	r1, r3
 8005320:	6a38      	ldr	r0, [r7, #32]
 8005322:	f004 fb77 	bl	8009a14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	695a      	ldr	r2, [r3, #20]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005332:	441a      	add	r2, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0210 	orr.w	r2, r2, #16
 8005346:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f004 fcf5 	bl	8009d3c <USB_ReadInterrupts>
 8005352:	4603      	mov	r3, r0
 8005354:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005358:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800535c:	f040 80a7 	bne.w	80054ae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f004 fcfa 	bl	8009d62 <USB_ReadDevAllOutEpInterrupt>
 800536e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005370:	e099      	b.n	80054a6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 808e 	beq.w	800549a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	4611      	mov	r1, r2
 8005388:	4618      	mov	r0, r3
 800538a:	f004 fd1e 	bl	8009dca <USB_ReadDevOutEPInterrupt>
 800538e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a6:	461a      	mov	r2, r3
 80053a8:	2301      	movs	r3, #1
 80053aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80053ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fea2 	bl	80060f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ca:	461a      	mov	r2, r3
 80053cc:	2308      	movs	r3, #8
 80053ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80053d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 ff78 	bl	80062c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ee:	461a      	mov	r2, r3
 80053f0:	2310      	movs	r3, #16
 80053f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d030      	beq.n	8005460 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005406:	2b80      	cmp	r3, #128	@ 0x80
 8005408:	d109      	bne.n	800541e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005418:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800541c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800541e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005420:	4613      	mov	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	4413      	add	r3, r2
 8005430:	3304      	adds	r3, #4
 8005432:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	78db      	ldrb	r3, [r3, #3]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d108      	bne.n	800544e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2200      	movs	r2, #0
 8005440:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	b2db      	uxtb	r3, r3
 8005446:	4619      	mov	r1, r3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f007 f893 	bl	800c574 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800545a:	461a      	mov	r2, r3
 800545c:	2302      	movs	r3, #2
 800545e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d008      	beq.n	800547c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005476:	461a      	mov	r2, r3
 8005478:	2320      	movs	r3, #32
 800547a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005492:	461a      	mov	r2, r3
 8005494:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005498:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	3301      	adds	r3, #1
 800549e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80054a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a2:	085b      	lsrs	r3, r3, #1
 80054a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f47f af62 	bne.w	8005372 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f004 fc42 	bl	8009d3c <USB_ReadInterrupts>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054c2:	f040 80db 	bne.w	800567c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f004 fc63 	bl	8009d96 <USB_ReadDevAllInEpInterrupt>
 80054d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80054d6:	e0cd      	b.n	8005674 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 80c2 	beq.w	8005668 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	4611      	mov	r1, r2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f004 fc89 	bl	8009e06 <USB_ReadDevInEPInterrupt>
 80054f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d057      	beq.n	80055b0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	2201      	movs	r2, #1
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	43db      	mvns	r3, r3
 800551a:	69f9      	ldr	r1, [r7, #28]
 800551c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005520:	4013      	ands	r3, r2
 8005522:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005530:	461a      	mov	r2, r3
 8005532:	2301      	movs	r3, #1
 8005534:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	799b      	ldrb	r3, [r3, #6]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d132      	bne.n	80055a4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005542:	4613      	mov	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	4413      	add	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	3320      	adds	r3, #32
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005554:	4613      	mov	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4403      	add	r3, r0
 800555e:	331c      	adds	r3, #28
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4419      	add	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005568:	4613      	mov	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4403      	add	r3, r0
 8005572:	3320      	adds	r3, #32
 8005574:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	d113      	bne.n	80055a4 <HAL_PCD_IRQHandler+0x3a2>
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005580:	4613      	mov	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	3324      	adds	r3, #36	@ 0x24
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d108      	bne.n	80055a4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800559c:	461a      	mov	r2, r3
 800559e:	2101      	movs	r1, #1
 80055a0:	f004 fc90 	bl	8009ec4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	4619      	mov	r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f006 ff67 	bl	800c47e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d008      	beq.n	80055cc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c6:	461a      	mov	r2, r3
 80055c8:	2308      	movs	r3, #8
 80055ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e2:	461a      	mov	r2, r3
 80055e4:	2310      	movs	r3, #16
 80055e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d008      	beq.n	8005604 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80055f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055fe:	461a      	mov	r2, r3
 8005600:	2340      	movs	r3, #64	@ 0x40
 8005602:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d023      	beq.n	8005656 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800560e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005610:	6a38      	ldr	r0, [r7, #32]
 8005612:	f003 fc7d 	bl	8008f10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	3310      	adds	r3, #16
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4413      	add	r3, r2
 8005626:	3304      	adds	r3, #4
 8005628:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	78db      	ldrb	r3, [r3, #3]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d108      	bne.n	8005644 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2200      	movs	r2, #0
 8005636:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	b2db      	uxtb	r3, r3
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f006 ffaa 	bl	800c598 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005650:	461a      	mov	r2, r3
 8005652:	2302      	movs	r3, #2
 8005654:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005660:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fcbb 	bl	8005fde <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566a:	3301      	adds	r3, #1
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800566e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005670:	085b      	lsrs	r3, r3, #1
 8005672:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005676:	2b00      	cmp	r3, #0
 8005678:	f47f af2e 	bne.w	80054d8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f004 fb5b 	bl	8009d3c <USB_ReadInterrupts>
 8005686:	4603      	mov	r3, r0
 8005688:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800568c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005690:	d122      	bne.n	80056d8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056a0:	f023 0301 	bic.w	r3, r3, #1
 80056a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d108      	bne.n	80056c2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80056b8:	2100      	movs	r1, #0
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fea2 	bl	8006404 <HAL_PCDEx_LPM_Callback>
 80056c0:	e002      	b.n	80056c8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f006 ff48 	bl	800c558 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80056d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f004 fb2d 	bl	8009d3c <USB_ReadInterrupts>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ec:	d112      	bne.n	8005714 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d102      	bne.n	8005704 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f006 ff04 	bl	800c50c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695a      	ldr	r2, [r3, #20]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005712:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4618      	mov	r0, r3
 800571a:	f004 fb0f 	bl	8009d3c <USB_ReadInterrupts>
 800571e:	4603      	mov	r3, r0
 8005720:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005728:	f040 80b7 	bne.w	800589a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800573a:	f023 0301 	bic.w	r3, r3, #1
 800573e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2110      	movs	r1, #16
 8005746:	4618      	mov	r0, r3
 8005748:	f003 fbe2 	bl	8008f10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800574c:	2300      	movs	r3, #0
 800574e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005750:	e046      	b.n	80057e0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575e:	461a      	mov	r2, r3
 8005760:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005764:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	440a      	add	r2, r1
 800577c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005780:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005784:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005792:	461a      	mov	r2, r3
 8005794:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005798:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800579a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057dc:	3301      	adds	r3, #1
 80057de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	791b      	ldrb	r3, [r3, #4]
 80057e4:	461a      	mov	r2, r3
 80057e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d3b2      	bcc.n	8005752 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057fa:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80057fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	7bdb      	ldrb	r3, [r3, #15]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d016      	beq.n	8005836 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800580e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005818:	f043 030b 	orr.w	r3, r3, #11
 800581c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800582e:	f043 030b 	orr.w	r3, r3, #11
 8005832:	6453      	str	r3, [r2, #68]	@ 0x44
 8005834:	e015      	b.n	8005862 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005844:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005848:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800584c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800585c:	f043 030b 	orr.w	r3, r3, #11
 8005860:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005870:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005874:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005884:	461a      	mov	r2, r3
 8005886:	f004 fb1d 	bl	8009ec4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695a      	ldr	r2, [r3, #20]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f004 fa4c 	bl	8009d3c <USB_ReadInterrupts>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ae:	d123      	bne.n	80058f8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f004 fae2 	bl	8009e7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f003 fb9f 	bl	8009002 <USB_GetDevSpeed>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681c      	ldr	r4, [r3, #0]
 80058d0:	f001 f9c8 	bl	8006c64 <HAL_RCC_GetHCLKFreq>
 80058d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058da:	461a      	mov	r2, r3
 80058dc:	4620      	mov	r0, r4
 80058de:	f003 f8a3 	bl	8008a28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f006 fdf3 	bl	800c4ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695a      	ldr	r2, [r3, #20]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80058f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f004 fa1d 	bl	8009d3c <USB_ReadInterrupts>
 8005902:	4603      	mov	r3, r0
 8005904:	f003 0308 	and.w	r3, r3, #8
 8005908:	2b08      	cmp	r3, #8
 800590a:	d10a      	bne.n	8005922 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f006 fdd0 	bl	800c4b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695a      	ldr	r2, [r3, #20]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f002 0208 	and.w	r2, r2, #8
 8005920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f004 fa08 	bl	8009d3c <USB_ReadInterrupts>
 800592c:	4603      	mov	r3, r0
 800592e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005932:	2b80      	cmp	r3, #128	@ 0x80
 8005934:	d123      	bne.n	800597e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005942:	2301      	movs	r3, #1
 8005944:	627b      	str	r3, [r7, #36]	@ 0x24
 8005946:	e014      	b.n	8005972 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800594c:	4613      	mov	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d105      	bne.n	800596c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	b2db      	uxtb	r3, r3
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fb08 	bl	8005f7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800596c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596e:	3301      	adds	r3, #1
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	791b      	ldrb	r3, [r3, #4]
 8005976:	461a      	mov	r2, r3
 8005978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597a:	4293      	cmp	r3, r2
 800597c:	d3e4      	bcc.n	8005948 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f004 f9da 	bl	8009d3c <USB_ReadInterrupts>
 8005988:	4603      	mov	r3, r0
 800598a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800598e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005992:	d13c      	bne.n	8005a0e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005994:	2301      	movs	r3, #1
 8005996:	627b      	str	r3, [r7, #36]	@ 0x24
 8005998:	e02b      	b.n	80059f2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ae:	4613      	mov	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	3318      	adds	r3, #24
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d115      	bne.n	80059ec <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80059c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	da12      	bge.n	80059ec <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ca:	4613      	mov	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	440b      	add	r3, r1
 80059d4:	3317      	adds	r3, #23
 80059d6:	2201      	movs	r2, #1
 80059d8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fac8 	bl	8005f7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	3301      	adds	r3, #1
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	791b      	ldrb	r3, [r3, #4]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d3cd      	bcc.n	800599a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695a      	ldr	r2, [r3, #20]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f004 f992 	bl	8009d3c <USB_ReadInterrupts>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a22:	d156      	bne.n	8005ad2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a24:	2301      	movs	r3, #1
 8005a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a28:	e045      	b.n	8005ab6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a3e:	4613      	mov	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d12e      	bne.n	8005ab0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a52:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	da2b      	bge.n	8005ab0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005a64:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d121      	bne.n	8005ab0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005a7e:	2201      	movs	r2, #1
 8005a80:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aa8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005aac:	6053      	str	r3, [r2, #4]
            break;
 8005aae:	e008      	b.n	8005ac2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	791b      	ldrb	r3, [r3, #4]
 8005aba:	461a      	mov	r2, r3
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d3b3      	bcc.n	8005a2a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695a      	ldr	r2, [r3, #20]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f004 f930 	bl	8009d3c <USB_ReadInterrupts>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae6:	d10a      	bne.n	8005afe <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f006 fd67 	bl	800c5bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695a      	ldr	r2, [r3, #20]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f004 f91a 	bl	8009d3c <USB_ReadInterrupts>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d115      	bne.n	8005b3e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f006 fd57 	bl	800c5d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6859      	ldr	r1, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
 8005b3a:	e000      	b.n	8005b3e <HAL_PCD_IRQHandler+0x93c>
      return;
 8005b3c:	bf00      	nop
    }
  }
}
 8005b3e:	3734      	adds	r7, #52	@ 0x34
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd90      	pop	{r4, r7, pc}

08005b44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_PCD_SetAddress+0x1a>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e012      	b.n	8005b84 <HAL_PCD_SetAddress+0x40>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	78fa      	ldrb	r2, [r7, #3]
 8005b6a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	78fa      	ldrb	r2, [r7, #3]
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f004 f879 	bl	8009c6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	4608      	mov	r0, r1
 8005b96:	4611      	mov	r1, r2
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	70fb      	strb	r3, [r7, #3]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	803b      	strh	r3, [r7, #0]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005baa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	da0f      	bge.n	8005bd2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	f003 020f 	and.w	r2, r3, #15
 8005bb8:	4613      	mov	r3, r2
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	3310      	adds	r3, #16
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	705a      	strb	r2, [r3, #1]
 8005bd0:	e00f      	b.n	8005bf2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	f003 020f 	and.w	r2, r3, #15
 8005bd8:	4613      	mov	r3, r2
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4413      	add	r3, r2
 8005be8:	3304      	adds	r3, #4
 8005bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005bfe:	883a      	ldrh	r2, [r7, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	78ba      	ldrb	r2, [r7, #2]
 8005c08:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	785b      	ldrb	r3, [r3, #1]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d004      	beq.n	8005c1c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005c1c:	78bb      	ldrb	r3, [r7, #2]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d102      	bne.n	8005c28 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_PCD_EP_Open+0xaa>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e00e      	b.n	8005c54 <HAL_PCD_EP_Open+0xc8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68f9      	ldr	r1, [r7, #12]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f003 fa01 	bl	800904c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005c52:	7afb      	ldrb	r3, [r7, #11]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	da0f      	bge.n	8005c90 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	f003 020f 	and.w	r2, r3, #15
 8005c76:	4613      	mov	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	3310      	adds	r3, #16
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	4413      	add	r3, r2
 8005c84:	3304      	adds	r3, #4
 8005c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	705a      	strb	r2, [r3, #1]
 8005c8e:	e00f      	b.n	8005cb0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	f003 020f 	and.w	r2, r3, #15
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_PCD_EP_Close+0x6e>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e00e      	b.n	8005ce8 <HAL_PCD_EP_Close+0x8c>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68f9      	ldr	r1, [r7, #12]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f003 fa3f 	bl	800915c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	607a      	str	r2, [r7, #4]
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d00:	7afb      	ldrb	r3, [r7, #11]
 8005d02:	f003 020f 	and.w	r2, r3, #15
 8005d06:	4613      	mov	r3, r2
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4413      	add	r3, r2
 8005d16:	3304      	adds	r3, #4
 8005d18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d32:	7afb      	ldrb	r3, [r7, #11]
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	799b      	ldrb	r3, [r3, #6]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d102      	bne.n	8005d4c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	799b      	ldrb	r3, [r3, #6]
 8005d54:	461a      	mov	r2, r3
 8005d56:	6979      	ldr	r1, [r7, #20]
 8005d58:	f003 fadc 	bl	8009314 <USB_EPStartXfer>

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005d88:	681b      	ldr	r3, [r3, #0]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b086      	sub	sp, #24
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
 8005da2:	460b      	mov	r3, r1
 8005da4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005da6:	7afb      	ldrb	r3, [r7, #11]
 8005da8:	f003 020f 	and.w	r2, r3, #15
 8005dac:	4613      	mov	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	3310      	adds	r3, #16
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	3304      	adds	r3, #4
 8005dbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dd6:	7afb      	ldrb	r3, [r7, #11]
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	799b      	ldrb	r3, [r3, #6]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d102      	bne.n	8005df0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	799b      	ldrb	r3, [r3, #6]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6979      	ldr	r1, [r7, #20]
 8005dfc:	f003 fa8a 	bl	8009314 <USB_EPStartXfer>

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	460b      	mov	r3, r1
 8005e14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	7912      	ldrb	r2, [r2, #4]
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d901      	bls.n	8005e28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e04f      	b.n	8005ec8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	da0f      	bge.n	8005e50 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	f003 020f 	and.w	r2, r3, #15
 8005e36:	4613      	mov	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	3310      	adds	r3, #16
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	4413      	add	r3, r2
 8005e44:	3304      	adds	r3, #4
 8005e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	705a      	strb	r2, [r3, #1]
 8005e4e:	e00d      	b.n	8005e6c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e50:	78fa      	ldrb	r2, [r7, #3]
 8005e52:	4613      	mov	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	4413      	add	r3, r2
 8005e62:	3304      	adds	r3, #4
 8005e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_PCD_EP_SetStall+0x82>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e01d      	b.n	8005ec8 <HAL_PCD_EP_SetStall+0xbe>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68f9      	ldr	r1, [r7, #12]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f003 fe12 	bl	8009ac4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	7999      	ldrb	r1, [r3, #6]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f004 f803 	bl	8009ec4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	7912      	ldrb	r2, [r2, #4]
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e042      	b.n	8005f74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005eee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	da0f      	bge.n	8005f16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ef6:	78fb      	ldrb	r3, [r7, #3]
 8005ef8:	f003 020f 	and.w	r2, r3, #15
 8005efc:	4613      	mov	r3, r2
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	3310      	adds	r3, #16
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4413      	add	r3, r2
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	705a      	strb	r2, [r3, #1]
 8005f14:	e00f      	b.n	8005f36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	f003 020f 	and.w	r2, r3, #15
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_PCD_EP_ClrStall+0x86>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e00e      	b.n	8005f74 <HAL_PCD_EP_ClrStall+0xa4>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68f9      	ldr	r1, [r7, #12]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f003 fe1b 	bl	8009ba0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	da0c      	bge.n	8005faa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	f003 020f 	and.w	r2, r3, #15
 8005f96:	4613      	mov	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	3310      	adds	r3, #16
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	e00c      	b.n	8005fc4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	f003 020f 	and.w	r2, r3, #15
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68f9      	ldr	r1, [r7, #12]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f003 fc3a 	bl	8009844 <USB_EPStopXfer>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005fd4:	7afb      	ldrb	r3, [r7, #11]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b08a      	sub	sp, #40	@ 0x28
 8005fe2:	af02      	add	r7, sp, #8
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	3310      	adds	r3, #16
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	4413      	add	r3, r2
 8006002:	3304      	adds	r3, #4
 8006004:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	695a      	ldr	r2, [r3, #20]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	429a      	cmp	r2, r3
 8006010:	d901      	bls.n	8006016 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e06b      	b.n	80060ee <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	429a      	cmp	r2, r3
 800602a:	d902      	bls.n	8006032 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3303      	adds	r3, #3
 8006036:	089b      	lsrs	r3, r3, #2
 8006038:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800603a:	e02a      	b.n	8006092 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	429a      	cmp	r2, r3
 8006050:	d902      	bls.n	8006058 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	3303      	adds	r3, #3
 800605c:	089b      	lsrs	r3, r3, #2
 800605e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68d9      	ldr	r1, [r3, #12]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	b2da      	uxtb	r2, r3
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	4603      	mov	r3, r0
 8006074:	6978      	ldr	r0, [r7, #20]
 8006076:	f003 fc8f 	bl	8009998 <USB_WritePacket>

    ep->xfer_buff  += len;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	441a      	add	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	695a      	ldr	r2, [r3, #20]
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	441a      	add	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d809      	bhi.n	80060bc <PCD_WriteEmptyTxFifo+0xde>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	695a      	ldr	r2, [r3, #20]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d203      	bcs.n	80060bc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1bf      	bne.n	800603c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d811      	bhi.n	80060ec <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	2201      	movs	r2, #1
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	43db      	mvns	r3, r3
 80060e2:	6939      	ldr	r1, [r7, #16]
 80060e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060e8:	4013      	ands	r3, r2
 80060ea:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	333c      	adds	r3, #60	@ 0x3c
 8006110:	3304      	adds	r3, #4
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	799b      	ldrb	r3, [r3, #6]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d17b      	bne.n	8006226 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d015      	beq.n	8006164 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	4a61      	ldr	r2, [pc, #388]	@ (80062c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	f240 80b9 	bls.w	80062b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 80b3 	beq.w	80062b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615a:	461a      	mov	r2, r3
 800615c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006160:	6093      	str	r3, [r2, #8]
 8006162:	e0a7      	b.n	80062b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800617a:	461a      	mov	r2, r3
 800617c:	2320      	movs	r3, #32
 800617e:	6093      	str	r3, [r2, #8]
 8006180:	e098      	b.n	80062b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006188:	2b00      	cmp	r3, #0
 800618a:	f040 8093 	bne.w	80062b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4a4b      	ldr	r2, [pc, #300]	@ (80062c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d90f      	bls.n	80061b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ac:	461a      	mov	r2, r3
 80061ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061b2:	6093      	str	r3, [r2, #8]
 80061b4:	e07e      	b.n	80062b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	4613      	mov	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	4413      	add	r3, r2
 80061c8:	3304      	adds	r3, #4
 80061ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a1a      	ldr	r2, [r3, #32]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	0159      	lsls	r1, r3, #5
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	440b      	add	r3, r1
 80061d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d114      	bne.n	8006218 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d109      	bne.n	800620a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006200:	461a      	mov	r2, r3
 8006202:	2101      	movs	r1, #1
 8006204:	f003 fe5e 	bl	8009ec4 <USB_EP0_OutStart>
 8006208:	e006      	b.n	8006218 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	441a      	add	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f006 f912 	bl	800c448 <HAL_PCD_DataOutStageCallback>
 8006224:	e046      	b.n	80062b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	4a26      	ldr	r2, [pc, #152]	@ (80062c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d124      	bne.n	8006278 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006244:	461a      	mov	r2, r3
 8006246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800624a:	6093      	str	r3, [r2, #8]
 800624c:	e032      	b.n	80062b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006264:	461a      	mov	r2, r3
 8006266:	2320      	movs	r3, #32
 8006268:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f006 f8e9 	bl	800c448 <HAL_PCD_DataOutStageCallback>
 8006276:	e01d      	b.n	80062b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d114      	bne.n	80062a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	4613      	mov	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d108      	bne.n	80062a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062a0:	461a      	mov	r2, r3
 80062a2:	2100      	movs	r1, #0
 80062a4:	f003 fe0e 	bl	8009ec4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f006 f8ca 	bl	800c448 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	4f54300a 	.word	0x4f54300a
 80062c4:	4f54310a 	.word	0x4f54310a

080062c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	333c      	adds	r3, #60	@ 0x3c
 80062e0:	3304      	adds	r3, #4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4a15      	ldr	r2, [pc, #84]	@ (8006350 <PCD_EP_OutSetupPacket_int+0x88>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d90e      	bls.n	800631c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006304:	2b00      	cmp	r3, #0
 8006306:	d009      	beq.n	800631c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006314:	461a      	mov	r2, r3
 8006316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800631a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f006 f881 	bl	800c424 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4a0a      	ldr	r2, [pc, #40]	@ (8006350 <PCD_EP_OutSetupPacket_int+0x88>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d90c      	bls.n	8006344 <PCD_EP_OutSetupPacket_int+0x7c>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	799b      	ldrb	r3, [r3, #6]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d108      	bne.n	8006344 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800633c:	461a      	mov	r2, r3
 800633e:	2101      	movs	r1, #1
 8006340:	f003 fdc0 	bl	8009ec4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	4f54300a 	.word	0x4f54300a

08006354 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
 8006360:	4613      	mov	r3, r2
 8006362:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d107      	bne.n	8006382 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006372:	883b      	ldrh	r3, [r7, #0]
 8006374:	0419      	lsls	r1, r3, #16
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	430a      	orrs	r2, r1
 800637e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006380:	e028      	b.n	80063d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006388:	0c1b      	lsrs	r3, r3, #16
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	4413      	add	r3, r2
 800638e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006390:	2300      	movs	r3, #0
 8006392:	73fb      	strb	r3, [r7, #15]
 8006394:	e00d      	b.n	80063b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	3340      	adds	r3, #64	@ 0x40
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	0c1b      	lsrs	r3, r3, #16
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4413      	add	r3, r2
 80063aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	3301      	adds	r3, #1
 80063b0:	73fb      	strb	r3, [r7, #15]
 80063b2:	7bfa      	ldrb	r2, [r7, #15]
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d3ec      	bcc.n	8006396 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80063bc:	883b      	ldrh	r3, [r7, #0]
 80063be:	0418      	lsls	r0, r3, #16
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6819      	ldr	r1, [r3, #0]
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	4302      	orrs	r2, r0
 80063cc:	3340      	adds	r3, #64	@ 0x40
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	460b      	mov	r3, r1
 80063ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	887a      	ldrh	r2, [r7, #2]
 80063f4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e267      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d075      	beq.n	8006526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800643a:	4b88      	ldr	r3, [pc, #544]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 030c 	and.w	r3, r3, #12
 8006442:	2b04      	cmp	r3, #4
 8006444:	d00c      	beq.n	8006460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006446:	4b85      	ldr	r3, [pc, #532]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800644e:	2b08      	cmp	r3, #8
 8006450:	d112      	bne.n	8006478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006452:	4b82      	ldr	r3, [pc, #520]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800645a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800645e:	d10b      	bne.n	8006478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006460:	4b7e      	ldr	r3, [pc, #504]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d05b      	beq.n	8006524 <HAL_RCC_OscConfig+0x108>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d157      	bne.n	8006524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e242      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006480:	d106      	bne.n	8006490 <HAL_RCC_OscConfig+0x74>
 8006482:	4b76      	ldr	r3, [pc, #472]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a75      	ldr	r2, [pc, #468]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 8006488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	e01d      	b.n	80064cc <HAL_RCC_OscConfig+0xb0>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006498:	d10c      	bne.n	80064b4 <HAL_RCC_OscConfig+0x98>
 800649a:	4b70      	ldr	r3, [pc, #448]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a6f      	ldr	r2, [pc, #444]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 80064a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	4b6d      	ldr	r3, [pc, #436]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a6c      	ldr	r2, [pc, #432]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 80064ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e00b      	b.n	80064cc <HAL_RCC_OscConfig+0xb0>
 80064b4:	4b69      	ldr	r3, [pc, #420]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a68      	ldr	r2, [pc, #416]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 80064ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	4b66      	ldr	r3, [pc, #408]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a65      	ldr	r2, [pc, #404]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 80064c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d013      	beq.n	80064fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d4:	f7fd fe70 	bl	80041b8 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064dc:	f7fd fe6c 	bl	80041b8 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b64      	cmp	r3, #100	@ 0x64
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e207      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ee:	4b5b      	ldr	r3, [pc, #364]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCC_OscConfig+0xc0>
 80064fa:	e014      	b.n	8006526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064fc:	f7fd fe5c 	bl	80041b8 <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006504:	f7fd fe58 	bl	80041b8 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b64      	cmp	r3, #100	@ 0x64
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e1f3      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006516:	4b51      	ldr	r3, [pc, #324]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f0      	bne.n	8006504 <HAL_RCC_OscConfig+0xe8>
 8006522:	e000      	b.n	8006526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d063      	beq.n	80065fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006532:	4b4a      	ldr	r3, [pc, #296]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 030c 	and.w	r3, r3, #12
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800653e:	4b47      	ldr	r3, [pc, #284]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006546:	2b08      	cmp	r3, #8
 8006548:	d11c      	bne.n	8006584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800654a:	4b44      	ldr	r3, [pc, #272]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d116      	bne.n	8006584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006556:	4b41      	ldr	r3, [pc, #260]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_RCC_OscConfig+0x152>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d001      	beq.n	800656e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e1c7      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800656e:	4b3b      	ldr	r3, [pc, #236]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	4937      	ldr	r1, [pc, #220]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 800657e:	4313      	orrs	r3, r2
 8006580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006582:	e03a      	b.n	80065fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d020      	beq.n	80065ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800658c:	4b34      	ldr	r3, [pc, #208]	@ (8006660 <HAL_RCC_OscConfig+0x244>)
 800658e:	2201      	movs	r2, #1
 8006590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006592:	f7fd fe11 	bl	80041b8 <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800659a:	f7fd fe0d 	bl	80041b8 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e1a8      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ac:	4b2b      	ldr	r3, [pc, #172]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0f0      	beq.n	800659a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b8:	4b28      	ldr	r3, [pc, #160]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	00db      	lsls	r3, r3, #3
 80065c6:	4925      	ldr	r1, [pc, #148]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	600b      	str	r3, [r1, #0]
 80065cc:	e015      	b.n	80065fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ce:	4b24      	ldr	r3, [pc, #144]	@ (8006660 <HAL_RCC_OscConfig+0x244>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d4:	f7fd fdf0 	bl	80041b8 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065dc:	f7fd fdec 	bl	80041b8 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e187      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ee:	4b1b      	ldr	r3, [pc, #108]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1f0      	bne.n	80065dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d036      	beq.n	8006674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d016      	beq.n	800663c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800660e:	4b15      	ldr	r3, [pc, #84]	@ (8006664 <HAL_RCC_OscConfig+0x248>)
 8006610:	2201      	movs	r2, #1
 8006612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006614:	f7fd fdd0 	bl	80041b8 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800661c:	f7fd fdcc 	bl	80041b8 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e167      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800662e:	4b0b      	ldr	r3, [pc, #44]	@ (800665c <HAL_RCC_OscConfig+0x240>)
 8006630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0f0      	beq.n	800661c <HAL_RCC_OscConfig+0x200>
 800663a:	e01b      	b.n	8006674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800663c:	4b09      	ldr	r3, [pc, #36]	@ (8006664 <HAL_RCC_OscConfig+0x248>)
 800663e:	2200      	movs	r2, #0
 8006640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006642:	f7fd fdb9 	bl	80041b8 <HAL_GetTick>
 8006646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006648:	e00e      	b.n	8006668 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800664a:	f7fd fdb5 	bl	80041b8 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d907      	bls.n	8006668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e150      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
 800665c:	40023800 	.word	0x40023800
 8006660:	42470000 	.word	0x42470000
 8006664:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006668:	4b88      	ldr	r3, [pc, #544]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 800666a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1ea      	bne.n	800664a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 8097 	beq.w	80067b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006682:	2300      	movs	r3, #0
 8006684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006686:	4b81      	ldr	r3, [pc, #516]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 8006688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10f      	bne.n	80066b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006692:	2300      	movs	r3, #0
 8006694:	60bb      	str	r3, [r7, #8]
 8006696:	4b7d      	ldr	r3, [pc, #500]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 8006698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669a:	4a7c      	ldr	r2, [pc, #496]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 800669c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80066a2:	4b7a      	ldr	r3, [pc, #488]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 80066a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066aa:	60bb      	str	r3, [r7, #8]
 80066ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066ae:	2301      	movs	r3, #1
 80066b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066b2:	4b77      	ldr	r3, [pc, #476]	@ (8006890 <HAL_RCC_OscConfig+0x474>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d118      	bne.n	80066f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066be:	4b74      	ldr	r3, [pc, #464]	@ (8006890 <HAL_RCC_OscConfig+0x474>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a73      	ldr	r2, [pc, #460]	@ (8006890 <HAL_RCC_OscConfig+0x474>)
 80066c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066ca:	f7fd fd75 	bl	80041b8 <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d0:	e008      	b.n	80066e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066d2:	f7fd fd71 	bl	80041b8 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e10c      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e4:	4b6a      	ldr	r3, [pc, #424]	@ (8006890 <HAL_RCC_OscConfig+0x474>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0f0      	beq.n	80066d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d106      	bne.n	8006706 <HAL_RCC_OscConfig+0x2ea>
 80066f8:	4b64      	ldr	r3, [pc, #400]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 80066fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fc:	4a63      	ldr	r2, [pc, #396]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	6713      	str	r3, [r2, #112]	@ 0x70
 8006704:	e01c      	b.n	8006740 <HAL_RCC_OscConfig+0x324>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2b05      	cmp	r3, #5
 800670c:	d10c      	bne.n	8006728 <HAL_RCC_OscConfig+0x30c>
 800670e:	4b5f      	ldr	r3, [pc, #380]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 8006710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006712:	4a5e      	ldr	r2, [pc, #376]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 8006714:	f043 0304 	orr.w	r3, r3, #4
 8006718:	6713      	str	r3, [r2, #112]	@ 0x70
 800671a:	4b5c      	ldr	r3, [pc, #368]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 800671c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671e:	4a5b      	ldr	r2, [pc, #364]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 8006720:	f043 0301 	orr.w	r3, r3, #1
 8006724:	6713      	str	r3, [r2, #112]	@ 0x70
 8006726:	e00b      	b.n	8006740 <HAL_RCC_OscConfig+0x324>
 8006728:	4b58      	ldr	r3, [pc, #352]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672c:	4a57      	ldr	r2, [pc, #348]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	6713      	str	r3, [r2, #112]	@ 0x70
 8006734:	4b55      	ldr	r3, [pc, #340]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 8006736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006738:	4a54      	ldr	r2, [pc, #336]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 800673a:	f023 0304 	bic.w	r3, r3, #4
 800673e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d015      	beq.n	8006774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006748:	f7fd fd36 	bl	80041b8 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800674e:	e00a      	b.n	8006766 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006750:	f7fd fd32 	bl	80041b8 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800675e:	4293      	cmp	r3, r2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e0cb      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006766:	4b49      	ldr	r3, [pc, #292]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 8006768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0ee      	beq.n	8006750 <HAL_RCC_OscConfig+0x334>
 8006772:	e014      	b.n	800679e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006774:	f7fd fd20 	bl	80041b8 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800677a:	e00a      	b.n	8006792 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800677c:	f7fd fd1c 	bl	80041b8 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e0b5      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006792:	4b3e      	ldr	r3, [pc, #248]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 8006794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1ee      	bne.n	800677c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d105      	bne.n	80067b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067a4:	4b39      	ldr	r3, [pc, #228]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 80067a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a8:	4a38      	ldr	r2, [pc, #224]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 80067aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80a1 	beq.w	80068fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067ba:	4b34      	ldr	r3, [pc, #208]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 030c 	and.w	r3, r3, #12
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d05c      	beq.n	8006880 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d141      	bne.n	8006852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ce:	4b31      	ldr	r3, [pc, #196]	@ (8006894 <HAL_RCC_OscConfig+0x478>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d4:	f7fd fcf0 	bl	80041b8 <HAL_GetTick>
 80067d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067da:	e008      	b.n	80067ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067dc:	f7fd fcec 	bl	80041b8 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e087      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ee:	4b27      	ldr	r3, [pc, #156]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1f0      	bne.n	80067dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69da      	ldr	r2, [r3, #28]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	019b      	lsls	r3, r3, #6
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006810:	085b      	lsrs	r3, r3, #1
 8006812:	3b01      	subs	r3, #1
 8006814:	041b      	lsls	r3, r3, #16
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681c:	061b      	lsls	r3, r3, #24
 800681e:	491b      	ldr	r1, [pc, #108]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 8006820:	4313      	orrs	r3, r2
 8006822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006824:	4b1b      	ldr	r3, [pc, #108]	@ (8006894 <HAL_RCC_OscConfig+0x478>)
 8006826:	2201      	movs	r2, #1
 8006828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682a:	f7fd fcc5 	bl	80041b8 <HAL_GetTick>
 800682e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006832:	f7fd fcc1 	bl	80041b8 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e05c      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006844:	4b11      	ldr	r3, [pc, #68]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0f0      	beq.n	8006832 <HAL_RCC_OscConfig+0x416>
 8006850:	e054      	b.n	80068fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006852:	4b10      	ldr	r3, [pc, #64]	@ (8006894 <HAL_RCC_OscConfig+0x478>)
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006858:	f7fd fcae 	bl	80041b8 <HAL_GetTick>
 800685c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006860:	f7fd fcaa 	bl	80041b8 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e045      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006872:	4b06      	ldr	r3, [pc, #24]	@ (800688c <HAL_RCC_OscConfig+0x470>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1f0      	bne.n	8006860 <HAL_RCC_OscConfig+0x444>
 800687e:	e03d      	b.n	80068fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d107      	bne.n	8006898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e038      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
 800688c:	40023800 	.word	0x40023800
 8006890:	40007000 	.word	0x40007000
 8006894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006898:	4b1b      	ldr	r3, [pc, #108]	@ (8006908 <HAL_RCC_OscConfig+0x4ec>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d028      	beq.n	80068f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d121      	bne.n	80068f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068be:	429a      	cmp	r2, r3
 80068c0:	d11a      	bne.n	80068f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80068c8:	4013      	ands	r3, r2
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80068ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d111      	bne.n	80068f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	3b01      	subs	r3, #1
 80068e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d107      	bne.n	80068f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d001      	beq.n	80068fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40023800 	.word	0x40023800

0800690c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e0cc      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006920:	4b68      	ldr	r3, [pc, #416]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d90c      	bls.n	8006948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692e:	4b65      	ldr	r3, [pc, #404]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006936:	4b63      	ldr	r3, [pc, #396]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d001      	beq.n	8006948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e0b8      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d020      	beq.n	8006996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006960:	4b59      	ldr	r3, [pc, #356]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	4a58      	ldr	r2, [pc, #352]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800696a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b00      	cmp	r3, #0
 8006976:	d005      	beq.n	8006984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006978:	4b53      	ldr	r3, [pc, #332]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	4a52      	ldr	r2, [pc, #328]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006984:	4b50      	ldr	r3, [pc, #320]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	494d      	ldr	r1, [pc, #308]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006992:	4313      	orrs	r3, r2
 8006994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d044      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d107      	bne.n	80069ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069aa:	4b47      	ldr	r3, [pc, #284]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d119      	bne.n	80069ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e07f      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d003      	beq.n	80069ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d107      	bne.n	80069da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ca:	4b3f      	ldr	r3, [pc, #252]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e06f      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069da:	4b3b      	ldr	r3, [pc, #236]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e067      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ea:	4b37      	ldr	r3, [pc, #220]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f023 0203 	bic.w	r2, r3, #3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	4934      	ldr	r1, [pc, #208]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069fc:	f7fd fbdc 	bl	80041b8 <HAL_GetTick>
 8006a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a02:	e00a      	b.n	8006a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a04:	f7fd fbd8 	bl	80041b8 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e04f      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 020c 	and.w	r2, r3, #12
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d1eb      	bne.n	8006a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a2c:	4b25      	ldr	r3, [pc, #148]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d20c      	bcs.n	8006a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3a:	4b22      	ldr	r3, [pc, #136]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a42:	4b20      	ldr	r3, [pc, #128]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d001      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e032      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d008      	beq.n	8006a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a60:	4b19      	ldr	r3, [pc, #100]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	4916      	ldr	r1, [pc, #88]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d009      	beq.n	8006a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a7e:	4b12      	ldr	r3, [pc, #72]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	490e      	ldr	r1, [pc, #56]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a92:	f000 f821 	bl	8006ad8 <HAL_RCC_GetSysClockFreq>
 8006a96:	4602      	mov	r2, r0
 8006a98:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	091b      	lsrs	r3, r3, #4
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	490a      	ldr	r1, [pc, #40]	@ (8006acc <HAL_RCC_ClockConfig+0x1c0>)
 8006aa4:	5ccb      	ldrb	r3, [r1, r3]
 8006aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aaa:	4a09      	ldr	r2, [pc, #36]	@ (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006aae:	4b09      	ldr	r3, [pc, #36]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fd fb3c 	bl	8004130 <HAL_InitTick>

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40023c00 	.word	0x40023c00
 8006ac8:	40023800 	.word	0x40023800
 8006acc:	08012da4 	.word	0x08012da4
 8006ad0:	2000000c 	.word	0x2000000c
 8006ad4:	20000010 	.word	0x20000010

08006ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006adc:	b090      	sub	sp, #64	@ 0x40
 8006ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ae8:	2300      	movs	r3, #0
 8006aea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006af0:	4b59      	ldr	r3, [pc, #356]	@ (8006c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 030c 	and.w	r3, r3, #12
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d00d      	beq.n	8006b18 <HAL_RCC_GetSysClockFreq+0x40>
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	f200 80a1 	bhi.w	8006c44 <HAL_RCC_GetSysClockFreq+0x16c>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <HAL_RCC_GetSysClockFreq+0x34>
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d003      	beq.n	8006b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b0a:	e09b      	b.n	8006c44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b0c:	4b53      	ldr	r3, [pc, #332]	@ (8006c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8006b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006b10:	e09b      	b.n	8006c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b12:	4b53      	ldr	r3, [pc, #332]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006b16:	e098      	b.n	8006c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b18:	4b4f      	ldr	r3, [pc, #316]	@ (8006c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b20:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b22:	4b4d      	ldr	r3, [pc, #308]	@ (8006c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d028      	beq.n	8006b80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8006c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	099b      	lsrs	r3, r3, #6
 8006b34:	2200      	movs	r2, #0
 8006b36:	623b      	str	r3, [r7, #32]
 8006b38:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006b40:	2100      	movs	r1, #0
 8006b42:	4b47      	ldr	r3, [pc, #284]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b44:	fb03 f201 	mul.w	r2, r3, r1
 8006b48:	2300      	movs	r3, #0
 8006b4a:	fb00 f303 	mul.w	r3, r0, r3
 8006b4e:	4413      	add	r3, r2
 8006b50:	4a43      	ldr	r2, [pc, #268]	@ (8006c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b52:	fba0 1202 	umull	r1, r2, r0, r2
 8006b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b58:	460a      	mov	r2, r1
 8006b5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b5e:	4413      	add	r3, r2
 8006b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b64:	2200      	movs	r2, #0
 8006b66:	61bb      	str	r3, [r7, #24]
 8006b68:	61fa      	str	r2, [r7, #28]
 8006b6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006b72:	f7fa f891 	bl	8000c98 <__aeabi_uldivmod>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b7e:	e053      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b80:	4b35      	ldr	r3, [pc, #212]	@ (8006c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	099b      	lsrs	r3, r3, #6
 8006b86:	2200      	movs	r2, #0
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	617a      	str	r2, [r7, #20]
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006b92:	f04f 0b00 	mov.w	fp, #0
 8006b96:	4652      	mov	r2, sl
 8006b98:	465b      	mov	r3, fp
 8006b9a:	f04f 0000 	mov.w	r0, #0
 8006b9e:	f04f 0100 	mov.w	r1, #0
 8006ba2:	0159      	lsls	r1, r3, #5
 8006ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ba8:	0150      	lsls	r0, r2, #5
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	ebb2 080a 	subs.w	r8, r2, sl
 8006bb2:	eb63 090b 	sbc.w	r9, r3, fp
 8006bb6:	f04f 0200 	mov.w	r2, #0
 8006bba:	f04f 0300 	mov.w	r3, #0
 8006bbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006bc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006bc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006bca:	ebb2 0408 	subs.w	r4, r2, r8
 8006bce:	eb63 0509 	sbc.w	r5, r3, r9
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	f04f 0300 	mov.w	r3, #0
 8006bda:	00eb      	lsls	r3, r5, #3
 8006bdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006be0:	00e2      	lsls	r2, r4, #3
 8006be2:	4614      	mov	r4, r2
 8006be4:	461d      	mov	r5, r3
 8006be6:	eb14 030a 	adds.w	r3, r4, sl
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	eb45 030b 	adc.w	r3, r5, fp
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	f04f 0200 	mov.w	r2, #0
 8006bf6:	f04f 0300 	mov.w	r3, #0
 8006bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bfe:	4629      	mov	r1, r5
 8006c00:	028b      	lsls	r3, r1, #10
 8006c02:	4621      	mov	r1, r4
 8006c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c08:	4621      	mov	r1, r4
 8006c0a:	028a      	lsls	r2, r1, #10
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c12:	2200      	movs	r2, #0
 8006c14:	60bb      	str	r3, [r7, #8]
 8006c16:	60fa      	str	r2, [r7, #12]
 8006c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c1c:	f7fa f83c 	bl	8000c98 <__aeabi_uldivmod>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4613      	mov	r3, r2
 8006c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c28:	4b0b      	ldr	r3, [pc, #44]	@ (8006c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	0c1b      	lsrs	r3, r3, #16
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	3301      	adds	r3, #1
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c42:	e002      	b.n	8006c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c44:	4b05      	ldr	r3, [pc, #20]	@ (8006c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8006c46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3740      	adds	r7, #64	@ 0x40
 8006c50:	46bd      	mov	sp, r7
 8006c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c56:	bf00      	nop
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	00f42400 	.word	0x00f42400
 8006c60:	017d7840 	.word	0x017d7840

08006c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c68:	4b03      	ldr	r3, [pc, #12]	@ (8006c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	2000000c 	.word	0x2000000c

08006c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c80:	f7ff fff0 	bl	8006c64 <HAL_RCC_GetHCLKFreq>
 8006c84:	4602      	mov	r2, r0
 8006c86:	4b05      	ldr	r3, [pc, #20]	@ (8006c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	0a9b      	lsrs	r3, r3, #10
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	4903      	ldr	r1, [pc, #12]	@ (8006ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c92:	5ccb      	ldrb	r3, [r1, r3]
 8006c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40023800 	.word	0x40023800
 8006ca0:	08012db4 	.word	0x08012db4

08006ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ca8:	f7ff ffdc 	bl	8006c64 <HAL_RCC_GetHCLKFreq>
 8006cac:	4602      	mov	r2, r0
 8006cae:	4b05      	ldr	r3, [pc, #20]	@ (8006cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	0b5b      	lsrs	r3, r3, #13
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	4903      	ldr	r1, [pc, #12]	@ (8006cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cba:	5ccb      	ldrb	r3, [r1, r3]
 8006cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	40023800 	.word	0x40023800
 8006cc8:	08012db4 	.word	0x08012db4

08006ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e041      	b.n	8006d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fc f97a 	bl	8002fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3304      	adds	r3, #4
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	f000 fa70 	bl	80071f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d001      	beq.n	8006d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e044      	b.n	8006e0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1e      	ldr	r2, [pc, #120]	@ (8006e1c <HAL_TIM_Base_Start_IT+0xb0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d018      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dae:	d013      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1a      	ldr	r2, [pc, #104]	@ (8006e20 <HAL_TIM_Base_Start_IT+0xb4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00e      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a19      	ldr	r2, [pc, #100]	@ (8006e24 <HAL_TIM_Base_Start_IT+0xb8>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d009      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a17      	ldr	r2, [pc, #92]	@ (8006e28 <HAL_TIM_Base_Start_IT+0xbc>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d004      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x6c>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a16      	ldr	r2, [pc, #88]	@ (8006e2c <HAL_TIM_Base_Start_IT+0xc0>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d111      	bne.n	8006dfc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b06      	cmp	r3, #6
 8006de8:	d010      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0201 	orr.w	r2, r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfa:	e007      	b.n	8006e0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0201 	orr.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40010000 	.word	0x40010000
 8006e20:	40000400 	.word	0x40000400
 8006e24:	40000800 	.word	0x40000800
 8006e28:	40000c00 	.word	0x40000c00
 8006e2c:	40014000 	.word	0x40014000

08006e30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d020      	beq.n	8006e94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01b      	beq.n	8006e94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0202 	mvn.w	r2, #2
 8006e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f999 	bl	80071b2 <HAL_TIM_IC_CaptureCallback>
 8006e80:	e005      	b.n	8006e8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f98b 	bl	800719e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f99c 	bl	80071c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f003 0304 	and.w	r3, r3, #4
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d020      	beq.n	8006ee0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01b      	beq.n	8006ee0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f06f 0204 	mvn.w	r2, #4
 8006eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f973 	bl	80071b2 <HAL_TIM_IC_CaptureCallback>
 8006ecc:	e005      	b.n	8006eda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f965 	bl	800719e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f976 	bl	80071c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d020      	beq.n	8006f2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d01b      	beq.n	8006f2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f06f 0208 	mvn.w	r2, #8
 8006efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2204      	movs	r2, #4
 8006f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f94d 	bl	80071b2 <HAL_TIM_IC_CaptureCallback>
 8006f18:	e005      	b.n	8006f26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f93f 	bl	800719e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f950 	bl	80071c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f003 0310 	and.w	r3, r3, #16
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d020      	beq.n	8006f78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f003 0310 	and.w	r3, r3, #16
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01b      	beq.n	8006f78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f06f 0210 	mvn.w	r2, #16
 8006f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2208      	movs	r2, #8
 8006f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f927 	bl	80071b2 <HAL_TIM_IC_CaptureCallback>
 8006f64:	e005      	b.n	8006f72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f919 	bl	800719e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f92a 	bl	80071c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00c      	beq.n	8006f9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d007      	beq.n	8006f9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f06f 0201 	mvn.w	r2, #1
 8006f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7fa fed2 	bl	8001d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00c      	beq.n	8006fc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fab6 	bl	800752c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00c      	beq.n	8006fe4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f8fb 	bl	80071da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00c      	beq.n	8007008 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d007      	beq.n	8007008 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f06f 0220 	mvn.w	r2, #32
 8007000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa88 	bl	8007518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_TIM_ConfigClockSource+0x1c>
 8007028:	2302      	movs	r3, #2
 800702a:	e0b4      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x186>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800704a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007052:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007064:	d03e      	beq.n	80070e4 <HAL_TIM_ConfigClockSource+0xd4>
 8007066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800706a:	f200 8087 	bhi.w	800717c <HAL_TIM_ConfigClockSource+0x16c>
 800706e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007072:	f000 8086 	beq.w	8007182 <HAL_TIM_ConfigClockSource+0x172>
 8007076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800707a:	d87f      	bhi.n	800717c <HAL_TIM_ConfigClockSource+0x16c>
 800707c:	2b70      	cmp	r3, #112	@ 0x70
 800707e:	d01a      	beq.n	80070b6 <HAL_TIM_ConfigClockSource+0xa6>
 8007080:	2b70      	cmp	r3, #112	@ 0x70
 8007082:	d87b      	bhi.n	800717c <HAL_TIM_ConfigClockSource+0x16c>
 8007084:	2b60      	cmp	r3, #96	@ 0x60
 8007086:	d050      	beq.n	800712a <HAL_TIM_ConfigClockSource+0x11a>
 8007088:	2b60      	cmp	r3, #96	@ 0x60
 800708a:	d877      	bhi.n	800717c <HAL_TIM_ConfigClockSource+0x16c>
 800708c:	2b50      	cmp	r3, #80	@ 0x50
 800708e:	d03c      	beq.n	800710a <HAL_TIM_ConfigClockSource+0xfa>
 8007090:	2b50      	cmp	r3, #80	@ 0x50
 8007092:	d873      	bhi.n	800717c <HAL_TIM_ConfigClockSource+0x16c>
 8007094:	2b40      	cmp	r3, #64	@ 0x40
 8007096:	d058      	beq.n	800714a <HAL_TIM_ConfigClockSource+0x13a>
 8007098:	2b40      	cmp	r3, #64	@ 0x40
 800709a:	d86f      	bhi.n	800717c <HAL_TIM_ConfigClockSource+0x16c>
 800709c:	2b30      	cmp	r3, #48	@ 0x30
 800709e:	d064      	beq.n	800716a <HAL_TIM_ConfigClockSource+0x15a>
 80070a0:	2b30      	cmp	r3, #48	@ 0x30
 80070a2:	d86b      	bhi.n	800717c <HAL_TIM_ConfigClockSource+0x16c>
 80070a4:	2b20      	cmp	r3, #32
 80070a6:	d060      	beq.n	800716a <HAL_TIM_ConfigClockSource+0x15a>
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d867      	bhi.n	800717c <HAL_TIM_ConfigClockSource+0x16c>
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d05c      	beq.n	800716a <HAL_TIM_ConfigClockSource+0x15a>
 80070b0:	2b10      	cmp	r3, #16
 80070b2:	d05a      	beq.n	800716a <HAL_TIM_ConfigClockSource+0x15a>
 80070b4:	e062      	b.n	800717c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070c6:	f000 f999 	bl	80073fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80070d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	609a      	str	r2, [r3, #8]
      break;
 80070e2:	e04f      	b.n	8007184 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070f4:	f000 f982 	bl	80073fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007106:	609a      	str	r2, [r3, #8]
      break;
 8007108:	e03c      	b.n	8007184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007116:	461a      	mov	r2, r3
 8007118:	f000 f8f6 	bl	8007308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2150      	movs	r1, #80	@ 0x50
 8007122:	4618      	mov	r0, r3
 8007124:	f000 f94f 	bl	80073c6 <TIM_ITRx_SetConfig>
      break;
 8007128:	e02c      	b.n	8007184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007136:	461a      	mov	r2, r3
 8007138:	f000 f915 	bl	8007366 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2160      	movs	r1, #96	@ 0x60
 8007142:	4618      	mov	r0, r3
 8007144:	f000 f93f 	bl	80073c6 <TIM_ITRx_SetConfig>
      break;
 8007148:	e01c      	b.n	8007184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007156:	461a      	mov	r2, r3
 8007158:	f000 f8d6 	bl	8007308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2140      	movs	r1, #64	@ 0x40
 8007162:	4618      	mov	r0, r3
 8007164:	f000 f92f 	bl	80073c6 <TIM_ITRx_SetConfig>
      break;
 8007168:	e00c      	b.n	8007184 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4619      	mov	r1, r3
 8007174:	4610      	mov	r0, r2
 8007176:	f000 f926 	bl	80073c6 <TIM_ITRx_SetConfig>
      break;
 800717a:	e003      	b.n	8007184 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	73fb      	strb	r3, [r7, #15]
      break;
 8007180:	e000      	b.n	8007184 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007182:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
	...

080071f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a3a      	ldr	r2, [pc, #232]	@ (80072ec <TIM_Base_SetConfig+0xfc>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d00f      	beq.n	8007228 <TIM_Base_SetConfig+0x38>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800720e:	d00b      	beq.n	8007228 <TIM_Base_SetConfig+0x38>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a37      	ldr	r2, [pc, #220]	@ (80072f0 <TIM_Base_SetConfig+0x100>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d007      	beq.n	8007228 <TIM_Base_SetConfig+0x38>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a36      	ldr	r2, [pc, #216]	@ (80072f4 <TIM_Base_SetConfig+0x104>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d003      	beq.n	8007228 <TIM_Base_SetConfig+0x38>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a35      	ldr	r2, [pc, #212]	@ (80072f8 <TIM_Base_SetConfig+0x108>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d108      	bne.n	800723a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800722e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a2b      	ldr	r2, [pc, #172]	@ (80072ec <TIM_Base_SetConfig+0xfc>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d01b      	beq.n	800727a <TIM_Base_SetConfig+0x8a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007248:	d017      	beq.n	800727a <TIM_Base_SetConfig+0x8a>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a28      	ldr	r2, [pc, #160]	@ (80072f0 <TIM_Base_SetConfig+0x100>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d013      	beq.n	800727a <TIM_Base_SetConfig+0x8a>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a27      	ldr	r2, [pc, #156]	@ (80072f4 <TIM_Base_SetConfig+0x104>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00f      	beq.n	800727a <TIM_Base_SetConfig+0x8a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a26      	ldr	r2, [pc, #152]	@ (80072f8 <TIM_Base_SetConfig+0x108>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00b      	beq.n	800727a <TIM_Base_SetConfig+0x8a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a25      	ldr	r2, [pc, #148]	@ (80072fc <TIM_Base_SetConfig+0x10c>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d007      	beq.n	800727a <TIM_Base_SetConfig+0x8a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a24      	ldr	r2, [pc, #144]	@ (8007300 <TIM_Base_SetConfig+0x110>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d003      	beq.n	800727a <TIM_Base_SetConfig+0x8a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a23      	ldr	r2, [pc, #140]	@ (8007304 <TIM_Base_SetConfig+0x114>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d108      	bne.n	800728c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a0e      	ldr	r2, [pc, #56]	@ (80072ec <TIM_Base_SetConfig+0xfc>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d103      	bne.n	80072c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d105      	bne.n	80072de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f023 0201 	bic.w	r2, r3, #1
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	611a      	str	r2, [r3, #16]
  }
}
 80072de:	bf00      	nop
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	40010000 	.word	0x40010000
 80072f0:	40000400 	.word	0x40000400
 80072f4:	40000800 	.word	0x40000800
 80072f8:	40000c00 	.word	0x40000c00
 80072fc:	40014000 	.word	0x40014000
 8007300:	40014400 	.word	0x40014400
 8007304:	40014800 	.word	0x40014800

08007308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	f023 0201 	bic.w	r2, r3, #1
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	4313      	orrs	r3, r2
 800733c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f023 030a 	bic.w	r3, r3, #10
 8007344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4313      	orrs	r3, r2
 800734c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	621a      	str	r2, [r3, #32]
}
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007366:	b480      	push	{r7}
 8007368:	b087      	sub	sp, #28
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	f023 0210 	bic.w	r2, r3, #16
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	031b      	lsls	r3, r3, #12
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80073a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b085      	sub	sp, #20
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	f043 0307 	orr.w	r3, r3, #7
 80073e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	609a      	str	r2, [r3, #8]
}
 80073f0:	bf00      	nop
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	021a      	lsls	r2, r3, #8
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	431a      	orrs	r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	4313      	orrs	r3, r2
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	609a      	str	r2, [r3, #8]
}
 8007430:	bf00      	nop
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800744c:	2b01      	cmp	r3, #1
 800744e:	d101      	bne.n	8007454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007450:	2302      	movs	r3, #2
 8007452:	e050      	b.n	80074f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800747a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a1c      	ldr	r2, [pc, #112]	@ (8007504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d018      	beq.n	80074ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074a0:	d013      	beq.n	80074ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a18      	ldr	r2, [pc, #96]	@ (8007508 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d00e      	beq.n	80074ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a16      	ldr	r2, [pc, #88]	@ (800750c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d009      	beq.n	80074ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a15      	ldr	r2, [pc, #84]	@ (8007510 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d004      	beq.n	80074ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a13      	ldr	r2, [pc, #76]	@ (8007514 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d10c      	bne.n	80074e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	4313      	orrs	r3, r2
 80074da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	40010000 	.word	0x40010000
 8007508:	40000400 	.word	0x40000400
 800750c:	40000800 	.word	0x40000800
 8007510:	40000c00 	.word	0x40000c00
 8007514:	40014000 	.word	0x40014000

08007518 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e042      	b.n	80075d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fb fd84 	bl	8003074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2224      	movs	r2, #36	@ 0x24
 8007570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007582:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 ff77 	bl	8008478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007598:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	695a      	ldr	r2, [r3, #20]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08c      	sub	sp, #48	@ 0x30
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	4613      	mov	r3, r2
 80075ec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d156      	bne.n	80076a8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <HAL_UART_Transmit_DMA+0x26>
 8007600:	88fb      	ldrh	r3, [r7, #6]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e04f      	b.n	80076aa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	88fa      	ldrh	r2, [r7, #6]
 8007614:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	88fa      	ldrh	r2, [r7, #6]
 800761a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2221      	movs	r2, #33	@ 0x21
 8007626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762e:	4a21      	ldr	r2, [pc, #132]	@ (80076b4 <HAL_UART_Transmit_DMA+0xd4>)
 8007630:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007636:	4a20      	ldr	r2, [pc, #128]	@ (80076b8 <HAL_UART_Transmit_DMA+0xd8>)
 8007638:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763e:	4a1f      	ldr	r2, [pc, #124]	@ (80076bc <HAL_UART_Transmit_DMA+0xdc>)
 8007640:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007646:	2200      	movs	r2, #0
 8007648:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800764a:	f107 0308 	add.w	r3, r7, #8
 800764e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007656:	6819      	ldr	r1, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3304      	adds	r3, #4
 800765e:	461a      	mov	r2, r3
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	f7fc ff99 	bl	8004598 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800766e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3314      	adds	r3, #20
 8007676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	617b      	str	r3, [r7, #20]
   return(result);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007686:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3314      	adds	r3, #20
 800768e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007690:	627a      	str	r2, [r7, #36]	@ 0x24
 8007692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6a39      	ldr	r1, [r7, #32]
 8007696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	61fb      	str	r3, [r7, #28]
   return(result);
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e5      	bne.n	8007670 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	e000      	b.n	80076aa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80076a8:	2302      	movs	r3, #2
  }
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3730      	adds	r7, #48	@ 0x30
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	08007d05 	.word	0x08007d05
 80076b8:	08007d9f 	.word	0x08007d9f
 80076bc:	08007f23 	.word	0x08007f23

080076c0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08c      	sub	sp, #48	@ 0x30
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	4613      	mov	r3, r2
 80076cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d14a      	bne.n	8007770 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80076e0:	88fb      	ldrh	r3, [r7, #6]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e043      	b.n	8007772 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80076f6:	88fb      	ldrh	r3, [r7, #6]
 80076f8:	461a      	mov	r2, r3
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fc5b 	bl	8007fb8 <UART_Start_Receive_DMA>
 8007702:	4603      	mov	r3, r0
 8007704:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007708:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800770c:	2b00      	cmp	r3, #0
 800770e:	d12c      	bne.n	800776a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007714:	2b01      	cmp	r3, #1
 8007716:	d125      	bne.n	8007764 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	613b      	str	r3, [r7, #16]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	613b      	str	r3, [r7, #16]
 800772c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	330c      	adds	r3, #12
 8007734:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	617b      	str	r3, [r7, #20]
   return(result);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f043 0310 	orr.w	r3, r3, #16
 8007744:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	330c      	adds	r3, #12
 800774c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800774e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6a39      	ldr	r1, [r7, #32]
 8007754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	61fb      	str	r3, [r7, #28]
   return(result);
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e5      	bne.n	800772e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8007762:	e002      	b.n	800776a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800776a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800776e:	e000      	b.n	8007772 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007770:	2302      	movs	r3, #2
  }
}
 8007772:	4618      	mov	r0, r3
 8007774:	3730      	adds	r7, #48	@ 0x30
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
	...

0800777c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b0ba      	sub	sp, #232	@ 0xe8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077b2:	f003 030f 	and.w	r3, r3, #15
 80077b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80077ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10f      	bne.n	80077e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <HAL_UART_IRQHandler+0x66>
 80077ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fd8d 	bl	80082fa <UART_Receive_IT>
      return;
 80077e0:	e25b      	b.n	8007c9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 80de 	beq.w	80079a8 <HAL_UART_IRQHandler+0x22c>
 80077ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d106      	bne.n	8007806 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 80d1 	beq.w	80079a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00b      	beq.n	800782a <HAL_UART_IRQHandler+0xae>
 8007812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800781a:	2b00      	cmp	r3, #0
 800781c:	d005      	beq.n	800782a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007822:	f043 0201 	orr.w	r2, r3, #1
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800782a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800782e:	f003 0304 	and.w	r3, r3, #4
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00b      	beq.n	800784e <HAL_UART_IRQHandler+0xd2>
 8007836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d005      	beq.n	800784e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007846:	f043 0202 	orr.w	r2, r3, #2
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800784e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00b      	beq.n	8007872 <HAL_UART_IRQHandler+0xf6>
 800785a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d005      	beq.n	8007872 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800786a:	f043 0204 	orr.w	r2, r3, #4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007876:	f003 0308 	and.w	r3, r3, #8
 800787a:	2b00      	cmp	r3, #0
 800787c:	d011      	beq.n	80078a2 <HAL_UART_IRQHandler+0x126>
 800787e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	d105      	bne.n	8007896 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800788a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800789a:	f043 0208 	orr.w	r2, r3, #8
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 81f2 	beq.w	8007c90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b0:	f003 0320 	and.w	r3, r3, #32
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d008      	beq.n	80078ca <HAL_UART_IRQHandler+0x14e>
 80078b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fd18 	bl	80082fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d4:	2b40      	cmp	r3, #64	@ 0x40
 80078d6:	bf0c      	ite	eq
 80078d8:	2301      	moveq	r3, #1
 80078da:	2300      	movne	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e6:	f003 0308 	and.w	r3, r3, #8
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d103      	bne.n	80078f6 <HAL_UART_IRQHandler+0x17a>
 80078ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d04f      	beq.n	8007996 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fc20 	bl	800813c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007906:	2b40      	cmp	r3, #64	@ 0x40
 8007908:	d141      	bne.n	800798e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3314      	adds	r3, #20
 8007910:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007920:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007928:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3314      	adds	r3, #20
 8007932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007936:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800793a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800794e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1d9      	bne.n	800790a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800795a:	2b00      	cmp	r3, #0
 800795c:	d013      	beq.n	8007986 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007962:	4a7e      	ldr	r2, [pc, #504]	@ (8007b5c <HAL_UART_IRQHandler+0x3e0>)
 8007964:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796a:	4618      	mov	r0, r3
 800796c:	f7fc fedc 	bl	8004728 <HAL_DMA_Abort_IT>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d016      	beq.n	80079a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800797a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007980:	4610      	mov	r0, r2
 8007982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007984:	e00e      	b.n	80079a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f9b2 	bl	8007cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798c:	e00a      	b.n	80079a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f9ae 	bl	8007cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007994:	e006      	b.n	80079a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f9aa 	bl	8007cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80079a2:	e175      	b.n	8007c90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a4:	bf00      	nop
    return;
 80079a6:	e173      	b.n	8007c90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	f040 814f 	bne.w	8007c50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b6:	f003 0310 	and.w	r3, r3, #16
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 8148 	beq.w	8007c50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80079c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079c4:	f003 0310 	and.w	r3, r3, #16
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 8141 	beq.w	8007c50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079ce:	2300      	movs	r3, #0
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	60bb      	str	r3, [r7, #8]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	60bb      	str	r3, [r7, #8]
 80079e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ee:	2b40      	cmp	r3, #64	@ 0x40
 80079f0:	f040 80b6 	bne.w	8007b60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 8145 	beq.w	8007c94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a12:	429a      	cmp	r2, r3
 8007a14:	f080 813e 	bcs.w	8007c94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a2a:	f000 8088 	beq.w	8007b3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	330c      	adds	r3, #12
 8007a34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	330c      	adds	r3, #12
 8007a56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007a5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1d9      	bne.n	8007a2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3314      	adds	r3, #20
 8007a80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a8c:	f023 0301 	bic.w	r3, r3, #1
 8007a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3314      	adds	r3, #20
 8007a9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007aa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ab0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1e1      	bne.n	8007a7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3314      	adds	r3, #20
 8007abc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3314      	adds	r3, #20
 8007ad6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ada:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007adc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ade:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ae0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ae8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e3      	bne.n	8007ab6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2220      	movs	r2, #32
 8007af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	330c      	adds	r3, #12
 8007b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b0e:	f023 0310 	bic.w	r3, r3, #16
 8007b12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	330c      	adds	r3, #12
 8007b1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007b20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007b22:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e3      	bne.n	8007afc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fc fd85 	bl	8004648 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2202      	movs	r2, #2
 8007b42:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7fa f875 	bl	8001c44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b5a:	e09b      	b.n	8007c94 <HAL_UART_IRQHandler+0x518>
 8007b5c:	08008203 	.word	0x08008203
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 808e 	beq.w	8007c98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 8089 	beq.w	8007c98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	330c      	adds	r3, #12
 8007b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	330c      	adds	r3, #12
 8007ba6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007baa:	647a      	str	r2, [r7, #68]	@ 0x44
 8007bac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e3      	bne.n	8007b86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3314      	adds	r3, #20
 8007bc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	f023 0301 	bic.w	r3, r3, #1
 8007bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3314      	adds	r3, #20
 8007bde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007be2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e3      	bne.n	8007bbe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	330c      	adds	r3, #12
 8007c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	e853 3f00 	ldrex	r3, [r3]
 8007c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f023 0310 	bic.w	r3, r3, #16
 8007c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	330c      	adds	r3, #12
 8007c24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007c28:	61fa      	str	r2, [r7, #28]
 8007c2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2c:	69b9      	ldr	r1, [r7, #24]
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	e841 2300 	strex	r3, r2, [r1]
 8007c34:	617b      	str	r3, [r7, #20]
   return(result);
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e3      	bne.n	8007c04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7f9 fffb 	bl	8001c44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c4e:	e023      	b.n	8007c98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d009      	beq.n	8007c70 <HAL_UART_IRQHandler+0x4f4>
 8007c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d003      	beq.n	8007c70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fade 	bl	800822a <UART_Transmit_IT>
    return;
 8007c6e:	e014      	b.n	8007c9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00e      	beq.n	8007c9a <HAL_UART_IRQHandler+0x51e>
 8007c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d008      	beq.n	8007c9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fb1e 	bl	80082ca <UART_EndTransmit_IT>
    return;
 8007c8e:	e004      	b.n	8007c9a <HAL_UART_IRQHandler+0x51e>
    return;
 8007c90:	bf00      	nop
 8007c92:	e002      	b.n	8007c9a <HAL_UART_IRQHandler+0x51e>
      return;
 8007c94:	bf00      	nop
 8007c96:	e000      	b.n	8007c9a <HAL_UART_IRQHandler+0x51e>
      return;
 8007c98:	bf00      	nop
  }
}
 8007c9a:	37e8      	adds	r7, #232	@ 0xe8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b090      	sub	sp, #64	@ 0x40
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d137      	bne.n	8007d90 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d22:	2200      	movs	r2, #0
 8007d24:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3314      	adds	r3, #20
 8007d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	623b      	str	r3, [r7, #32]
   return(result);
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3314      	adds	r3, #20
 8007d44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d46:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e5      	bne.n	8007d26 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	330c      	adds	r3, #12
 8007d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	330c      	adds	r3, #12
 8007d78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d7a:	61fa      	str	r2, [r7, #28]
 8007d7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	69b9      	ldr	r1, [r7, #24]
 8007d80:	69fa      	ldr	r2, [r7, #28]
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	617b      	str	r3, [r7, #20]
   return(result);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e5      	bne.n	8007d5a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d8e:	e002      	b.n	8007d96 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007d90:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007d92:	f7ff ff85 	bl	8007ca0 <HAL_UART_TxCpltCallback>
}
 8007d96:	bf00      	nop
 8007d98:	3740      	adds	r7, #64	@ 0x40
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007daa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff ff81 	bl	8007cb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007db2:	bf00      	nop
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b09c      	sub	sp, #112	@ 0x70
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d172      	bne.n	8007ebc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dd8:	2200      	movs	r2, #0
 8007dda:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	330c      	adds	r3, #12
 8007de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007de6:	e853 3f00 	ldrex	r3, [r3]
 8007dea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007dec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007df2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	330c      	adds	r3, #12
 8007dfa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007dfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007dfe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e5      	bne.n	8007ddc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3314      	adds	r3, #20
 8007e16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e22:	f023 0301 	bic.w	r3, r3, #1
 8007e26:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3314      	adds	r3, #20
 8007e2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007e30:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e32:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e38:	e841 2300 	strex	r3, r2, [r1]
 8007e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e5      	bne.n	8007e10 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3314      	adds	r3, #20
 8007e4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4e:	e853 3f00 	ldrex	r3, [r3]
 8007e52:	623b      	str	r3, [r7, #32]
   return(result);
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3314      	adds	r3, #20
 8007e62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007e64:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e6c:	e841 2300 	strex	r3, r2, [r1]
 8007e70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e5      	bne.n	8007e44 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d119      	bne.n	8007ebc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	330c      	adds	r3, #12
 8007e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	e853 3f00 	ldrex	r3, [r3]
 8007e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 0310 	bic.w	r3, r3, #16
 8007e9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	330c      	adds	r3, #12
 8007ea6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007ea8:	61fa      	str	r2, [r7, #28]
 8007eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	69b9      	ldr	r1, [r7, #24]
 8007eae:	69fa      	ldr	r2, [r7, #28]
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e5      	bne.n	8007e88 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d106      	bne.n	8007ed8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ecc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007ed2:	f7f9 feb7 	bl	8001c44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ed6:	e002      	b.n	8007ede <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007ed8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007eda:	f7ff fef5 	bl	8007cc8 <HAL_UART_RxCpltCallback>
}
 8007ede:	bf00      	nop
 8007ee0:	3770      	adds	r7, #112	@ 0x70
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d108      	bne.n	8007f14 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f06:	085b      	lsrs	r3, r3, #1
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7f9 fe99 	bl	8001c44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f12:	e002      	b.n	8007f1a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7ff fee1 	bl	8007cdc <HAL_UART_RxHalfCpltCallback>
}
 8007f1a:	bf00      	nop
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f32:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f3e:	2b80      	cmp	r3, #128	@ 0x80
 8007f40:	bf0c      	ite	eq
 8007f42:	2301      	moveq	r3, #1
 8007f44:	2300      	movne	r3, #0
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b21      	cmp	r3, #33	@ 0x21
 8007f54:	d108      	bne.n	8007f68 <UART_DMAError+0x46>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007f62:	68b8      	ldr	r0, [r7, #8]
 8007f64:	f000 f8c2 	bl	80080ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f72:	2b40      	cmp	r3, #64	@ 0x40
 8007f74:	bf0c      	ite	eq
 8007f76:	2301      	moveq	r3, #1
 8007f78:	2300      	movne	r3, #0
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b22      	cmp	r3, #34	@ 0x22
 8007f88:	d108      	bne.n	8007f9c <UART_DMAError+0x7a>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2200      	movs	r2, #0
 8007f94:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007f96:	68b8      	ldr	r0, [r7, #8]
 8007f98:	f000 f8d0 	bl	800813c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fa0:	f043 0210 	orr.w	r2, r3, #16
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fa8:	68b8      	ldr	r0, [r7, #8]
 8007faa:	f7ff fea1 	bl	8007cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fae:	bf00      	nop
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b098      	sub	sp, #96	@ 0x60
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	88fa      	ldrh	r2, [r7, #6]
 8007fd0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2222      	movs	r2, #34	@ 0x22
 8007fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe4:	4a3e      	ldr	r2, [pc, #248]	@ (80080e0 <UART_Start_Receive_DMA+0x128>)
 8007fe6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fec:	4a3d      	ldr	r2, [pc, #244]	@ (80080e4 <UART_Start_Receive_DMA+0x12c>)
 8007fee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff4:	4a3c      	ldr	r2, [pc, #240]	@ (80080e8 <UART_Start_Receive_DMA+0x130>)
 8007ff6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008000:	f107 0308 	add.w	r3, r7, #8
 8008004:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3304      	adds	r3, #4
 8008010:	4619      	mov	r1, r3
 8008012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	88fb      	ldrh	r3, [r7, #6]
 8008018:	f7fc fabe 	bl	8004598 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800801c:	2300      	movs	r3, #0
 800801e:	613b      	str	r3, [r7, #16]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	613b      	str	r3, [r7, #16]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	613b      	str	r3, [r7, #16]
 8008030:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d019      	beq.n	800806e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	330c      	adds	r3, #12
 8008040:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008044:	e853 3f00 	ldrex	r3, [r3]
 8008048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800804a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800804c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008050:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	330c      	adds	r3, #12
 8008058:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800805a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800805c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008060:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008062:	e841 2300 	strex	r3, r2, [r1]
 8008066:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1e5      	bne.n	800803a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3314      	adds	r3, #20
 8008074:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008078:	e853 3f00 	ldrex	r3, [r3]
 800807c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800807e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008080:	f043 0301 	orr.w	r3, r3, #1
 8008084:	657b      	str	r3, [r7, #84]	@ 0x54
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3314      	adds	r3, #20
 800808c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800808e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008090:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008092:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008094:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800809c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e5      	bne.n	800806e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3314      	adds	r3, #20
 80080a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	e853 3f00 	ldrex	r3, [r3]
 80080b0:	617b      	str	r3, [r7, #20]
   return(result);
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3314      	adds	r3, #20
 80080c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80080c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80080c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c6:	6a39      	ldr	r1, [r7, #32]
 80080c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080ca:	e841 2300 	strex	r3, r2, [r1]
 80080ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1e5      	bne.n	80080a2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3760      	adds	r7, #96	@ 0x60
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	08007dbb 	.word	0x08007dbb
 80080e4:	08007ee7 	.word	0x08007ee7
 80080e8:	08007f23 	.word	0x08007f23

080080ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b089      	sub	sp, #36	@ 0x24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	330c      	adds	r3, #12
 80080fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	60bb      	str	r3, [r7, #8]
   return(result);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800810a:	61fb      	str	r3, [r7, #28]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	330c      	adds	r3, #12
 8008112:	69fa      	ldr	r2, [r7, #28]
 8008114:	61ba      	str	r2, [r7, #24]
 8008116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	6979      	ldr	r1, [r7, #20]
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	613b      	str	r3, [r7, #16]
   return(result);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e5      	bne.n	80080f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2220      	movs	r2, #32
 800812c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008130:	bf00      	nop
 8008132:	3724      	adds	r7, #36	@ 0x24
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800813c:	b480      	push	{r7}
 800813e:	b095      	sub	sp, #84	@ 0x54
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	330c      	adds	r3, #12
 800814a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800814e:	e853 3f00 	ldrex	r3, [r3]
 8008152:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008156:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800815a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	330c      	adds	r3, #12
 8008162:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008164:	643a      	str	r2, [r7, #64]	@ 0x40
 8008166:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008168:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800816a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800816c:	e841 2300 	strex	r3, r2, [r1]
 8008170:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1e5      	bne.n	8008144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3314      	adds	r3, #20
 800817e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	e853 3f00 	ldrex	r3, [r3]
 8008186:	61fb      	str	r3, [r7, #28]
   return(result);
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	f023 0301 	bic.w	r3, r3, #1
 800818e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3314      	adds	r3, #20
 8008196:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008198:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800819a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800819e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e5      	bne.n	8008178 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d119      	bne.n	80081e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	330c      	adds	r3, #12
 80081ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f023 0310 	bic.w	r3, r3, #16
 80081ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	330c      	adds	r3, #12
 80081d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081d4:	61ba      	str	r2, [r7, #24]
 80081d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d8:	6979      	ldr	r1, [r7, #20]
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	e841 2300 	strex	r3, r2, [r1]
 80081e0:	613b      	str	r3, [r7, #16]
   return(result);
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e5      	bne.n	80081b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2220      	movs	r2, #32
 80081ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80081f6:	bf00      	nop
 80081f8:	3754      	adds	r7, #84	@ 0x54
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800820e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f7ff fd67 	bl	8007cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008222:	bf00      	nop
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800822a:	b480      	push	{r7}
 800822c:	b085      	sub	sp, #20
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b21      	cmp	r3, #33	@ 0x21
 800823c:	d13e      	bne.n	80082bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008246:	d114      	bne.n	8008272 <UART_Transmit_IT+0x48>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d110      	bne.n	8008272 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	881b      	ldrh	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008264:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	1c9a      	adds	r2, r3, #2
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	621a      	str	r2, [r3, #32]
 8008270:	e008      	b.n	8008284 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	1c59      	adds	r1, r3, #1
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6211      	str	r1, [r2, #32]
 800827c:	781a      	ldrb	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008288:	b29b      	uxth	r3, r3
 800828a:	3b01      	subs	r3, #1
 800828c:	b29b      	uxth	r3, r3
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	4619      	mov	r1, r3
 8008292:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10f      	bne.n	80082b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68da      	ldr	r2, [r3, #12]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	e000      	b.n	80082be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082bc:	2302      	movs	r3, #2
  }
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7ff fcd8 	bl	8007ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b08c      	sub	sp, #48	@ 0x30
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b22      	cmp	r3, #34	@ 0x22
 800830c:	f040 80ae 	bne.w	800846c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008318:	d117      	bne.n	800834a <UART_Receive_IT+0x50>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d113      	bne.n	800834a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008322:	2300      	movs	r3, #0
 8008324:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800832a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	b29b      	uxth	r3, r3
 8008334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008338:	b29a      	uxth	r2, r3
 800833a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008342:	1c9a      	adds	r2, r3, #2
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	629a      	str	r2, [r3, #40]	@ 0x28
 8008348:	e026      	b.n	8008398 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008350:	2300      	movs	r3, #0
 8008352:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800835c:	d007      	beq.n	800836e <UART_Receive_IT+0x74>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10a      	bne.n	800837c <UART_Receive_IT+0x82>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d106      	bne.n	800837c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	b2da      	uxtb	r2, r3
 8008376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008378:	701a      	strb	r2, [r3, #0]
 800837a:	e008      	b.n	800838e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008388:	b2da      	uxtb	r2, r3
 800838a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800838c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800839c:	b29b      	uxth	r3, r3
 800839e:	3b01      	subs	r3, #1
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	4619      	mov	r1, r3
 80083a6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d15d      	bne.n	8008468 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 0220 	bic.w	r2, r2, #32
 80083ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68da      	ldr	r2, [r3, #12]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	695a      	ldr	r2, [r3, #20]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f022 0201 	bic.w	r2, r2, #1
 80083da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2220      	movs	r2, #32
 80083e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d135      	bne.n	800845e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	330c      	adds	r3, #12
 80083fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	e853 3f00 	ldrex	r3, [r3]
 8008406:	613b      	str	r3, [r7, #16]
   return(result);
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f023 0310 	bic.w	r3, r3, #16
 800840e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	330c      	adds	r3, #12
 8008416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008418:	623a      	str	r2, [r7, #32]
 800841a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	69f9      	ldr	r1, [r7, #28]
 800841e:	6a3a      	ldr	r2, [r7, #32]
 8008420:	e841 2300 	strex	r3, r2, [r1]
 8008424:	61bb      	str	r3, [r7, #24]
   return(result);
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e5      	bne.n	80083f8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0310 	and.w	r3, r3, #16
 8008436:	2b10      	cmp	r3, #16
 8008438:	d10a      	bne.n	8008450 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800843a:	2300      	movs	r3, #0
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7f9 fbf4 	bl	8001c44 <HAL_UARTEx_RxEventCallback>
 800845c:	e002      	b.n	8008464 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7ff fc32 	bl	8007cc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008464:	2300      	movs	r3, #0
 8008466:	e002      	b.n	800846e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	e000      	b.n	800846e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800846c:	2302      	movs	r3, #2
  }
}
 800846e:	4618      	mov	r0, r3
 8008470:	3730      	adds	r7, #48	@ 0x30
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800847c:	b0c0      	sub	sp, #256	@ 0x100
 800847e:	af00      	add	r7, sp, #0
 8008480:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008494:	68d9      	ldr	r1, [r3, #12]
 8008496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	ea40 0301 	orr.w	r3, r0, r1
 80084a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	431a      	orrs	r2, r3
 80084b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	4313      	orrs	r3, r2
 80084c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80084d0:	f021 010c 	bic.w	r1, r1, #12
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084de:	430b      	orrs	r3, r1
 80084e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80084ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f2:	6999      	ldr	r1, [r3, #24]
 80084f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	ea40 0301 	orr.w	r3, r0, r1
 80084fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	4b8f      	ldr	r3, [pc, #572]	@ (8008744 <UART_SetConfig+0x2cc>)
 8008508:	429a      	cmp	r2, r3
 800850a:	d005      	beq.n	8008518 <UART_SetConfig+0xa0>
 800850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b8d      	ldr	r3, [pc, #564]	@ (8008748 <UART_SetConfig+0x2d0>)
 8008514:	429a      	cmp	r2, r3
 8008516:	d104      	bne.n	8008522 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008518:	f7fe fbc4 	bl	8006ca4 <HAL_RCC_GetPCLK2Freq>
 800851c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008520:	e003      	b.n	800852a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008522:	f7fe fbab 	bl	8006c7c <HAL_RCC_GetPCLK1Freq>
 8008526:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800852a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008534:	f040 810c 	bne.w	8008750 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800853c:	2200      	movs	r2, #0
 800853e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008542:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008546:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800854a:	4622      	mov	r2, r4
 800854c:	462b      	mov	r3, r5
 800854e:	1891      	adds	r1, r2, r2
 8008550:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008552:	415b      	adcs	r3, r3
 8008554:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008556:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800855a:	4621      	mov	r1, r4
 800855c:	eb12 0801 	adds.w	r8, r2, r1
 8008560:	4629      	mov	r1, r5
 8008562:	eb43 0901 	adc.w	r9, r3, r1
 8008566:	f04f 0200 	mov.w	r2, #0
 800856a:	f04f 0300 	mov.w	r3, #0
 800856e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800857a:	4690      	mov	r8, r2
 800857c:	4699      	mov	r9, r3
 800857e:	4623      	mov	r3, r4
 8008580:	eb18 0303 	adds.w	r3, r8, r3
 8008584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008588:	462b      	mov	r3, r5
 800858a:	eb49 0303 	adc.w	r3, r9, r3
 800858e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800859e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80085a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80085a6:	460b      	mov	r3, r1
 80085a8:	18db      	adds	r3, r3, r3
 80085aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80085ac:	4613      	mov	r3, r2
 80085ae:	eb42 0303 	adc.w	r3, r2, r3
 80085b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80085b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80085b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80085bc:	f7f8 fb6c 	bl	8000c98 <__aeabi_uldivmod>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4b61      	ldr	r3, [pc, #388]	@ (800874c <UART_SetConfig+0x2d4>)
 80085c6:	fba3 2302 	umull	r2, r3, r3, r2
 80085ca:	095b      	lsrs	r3, r3, #5
 80085cc:	011c      	lsls	r4, r3, #4
 80085ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80085dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80085e0:	4642      	mov	r2, r8
 80085e2:	464b      	mov	r3, r9
 80085e4:	1891      	adds	r1, r2, r2
 80085e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80085e8:	415b      	adcs	r3, r3
 80085ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80085f0:	4641      	mov	r1, r8
 80085f2:	eb12 0a01 	adds.w	sl, r2, r1
 80085f6:	4649      	mov	r1, r9
 80085f8:	eb43 0b01 	adc.w	fp, r3, r1
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	f04f 0300 	mov.w	r3, #0
 8008604:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008608:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800860c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008610:	4692      	mov	sl, r2
 8008612:	469b      	mov	fp, r3
 8008614:	4643      	mov	r3, r8
 8008616:	eb1a 0303 	adds.w	r3, sl, r3
 800861a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800861e:	464b      	mov	r3, r9
 8008620:	eb4b 0303 	adc.w	r3, fp, r3
 8008624:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008634:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008638:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800863c:	460b      	mov	r3, r1
 800863e:	18db      	adds	r3, r3, r3
 8008640:	643b      	str	r3, [r7, #64]	@ 0x40
 8008642:	4613      	mov	r3, r2
 8008644:	eb42 0303 	adc.w	r3, r2, r3
 8008648:	647b      	str	r3, [r7, #68]	@ 0x44
 800864a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800864e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008652:	f7f8 fb21 	bl	8000c98 <__aeabi_uldivmod>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4611      	mov	r1, r2
 800865c:	4b3b      	ldr	r3, [pc, #236]	@ (800874c <UART_SetConfig+0x2d4>)
 800865e:	fba3 2301 	umull	r2, r3, r3, r1
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	2264      	movs	r2, #100	@ 0x64
 8008666:	fb02 f303 	mul.w	r3, r2, r3
 800866a:	1acb      	subs	r3, r1, r3
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008672:	4b36      	ldr	r3, [pc, #216]	@ (800874c <UART_SetConfig+0x2d4>)
 8008674:	fba3 2302 	umull	r2, r3, r3, r2
 8008678:	095b      	lsrs	r3, r3, #5
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008680:	441c      	add	r4, r3
 8008682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008686:	2200      	movs	r2, #0
 8008688:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800868c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008690:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008694:	4642      	mov	r2, r8
 8008696:	464b      	mov	r3, r9
 8008698:	1891      	adds	r1, r2, r2
 800869a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800869c:	415b      	adcs	r3, r3
 800869e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80086a4:	4641      	mov	r1, r8
 80086a6:	1851      	adds	r1, r2, r1
 80086a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80086aa:	4649      	mov	r1, r9
 80086ac:	414b      	adcs	r3, r1
 80086ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b0:	f04f 0200 	mov.w	r2, #0
 80086b4:	f04f 0300 	mov.w	r3, #0
 80086b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80086bc:	4659      	mov	r1, fp
 80086be:	00cb      	lsls	r3, r1, #3
 80086c0:	4651      	mov	r1, sl
 80086c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086c6:	4651      	mov	r1, sl
 80086c8:	00ca      	lsls	r2, r1, #3
 80086ca:	4610      	mov	r0, r2
 80086cc:	4619      	mov	r1, r3
 80086ce:	4603      	mov	r3, r0
 80086d0:	4642      	mov	r2, r8
 80086d2:	189b      	adds	r3, r3, r2
 80086d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086d8:	464b      	mov	r3, r9
 80086da:	460a      	mov	r2, r1
 80086dc:	eb42 0303 	adc.w	r3, r2, r3
 80086e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80086f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80086f8:	460b      	mov	r3, r1
 80086fa:	18db      	adds	r3, r3, r3
 80086fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086fe:	4613      	mov	r3, r2
 8008700:	eb42 0303 	adc.w	r3, r2, r3
 8008704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800870a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800870e:	f7f8 fac3 	bl	8000c98 <__aeabi_uldivmod>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4b0d      	ldr	r3, [pc, #52]	@ (800874c <UART_SetConfig+0x2d4>)
 8008718:	fba3 1302 	umull	r1, r3, r3, r2
 800871c:	095b      	lsrs	r3, r3, #5
 800871e:	2164      	movs	r1, #100	@ 0x64
 8008720:	fb01 f303 	mul.w	r3, r1, r3
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	3332      	adds	r3, #50	@ 0x32
 800872a:	4a08      	ldr	r2, [pc, #32]	@ (800874c <UART_SetConfig+0x2d4>)
 800872c:	fba2 2303 	umull	r2, r3, r2, r3
 8008730:	095b      	lsrs	r3, r3, #5
 8008732:	f003 0207 	and.w	r2, r3, #7
 8008736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4422      	add	r2, r4
 800873e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008740:	e106      	b.n	8008950 <UART_SetConfig+0x4d8>
 8008742:	bf00      	nop
 8008744:	40011000 	.word	0x40011000
 8008748:	40011400 	.word	0x40011400
 800874c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008754:	2200      	movs	r2, #0
 8008756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800875a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800875e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008762:	4642      	mov	r2, r8
 8008764:	464b      	mov	r3, r9
 8008766:	1891      	adds	r1, r2, r2
 8008768:	6239      	str	r1, [r7, #32]
 800876a:	415b      	adcs	r3, r3
 800876c:	627b      	str	r3, [r7, #36]	@ 0x24
 800876e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008772:	4641      	mov	r1, r8
 8008774:	1854      	adds	r4, r2, r1
 8008776:	4649      	mov	r1, r9
 8008778:	eb43 0501 	adc.w	r5, r3, r1
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	f04f 0300 	mov.w	r3, #0
 8008784:	00eb      	lsls	r3, r5, #3
 8008786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800878a:	00e2      	lsls	r2, r4, #3
 800878c:	4614      	mov	r4, r2
 800878e:	461d      	mov	r5, r3
 8008790:	4643      	mov	r3, r8
 8008792:	18e3      	adds	r3, r4, r3
 8008794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008798:	464b      	mov	r3, r9
 800879a:	eb45 0303 	adc.w	r3, r5, r3
 800879e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80087ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80087b2:	f04f 0200 	mov.w	r2, #0
 80087b6:	f04f 0300 	mov.w	r3, #0
 80087ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80087be:	4629      	mov	r1, r5
 80087c0:	008b      	lsls	r3, r1, #2
 80087c2:	4621      	mov	r1, r4
 80087c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087c8:	4621      	mov	r1, r4
 80087ca:	008a      	lsls	r2, r1, #2
 80087cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80087d0:	f7f8 fa62 	bl	8000c98 <__aeabi_uldivmod>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4b60      	ldr	r3, [pc, #384]	@ (800895c <UART_SetConfig+0x4e4>)
 80087da:	fba3 2302 	umull	r2, r3, r3, r2
 80087de:	095b      	lsrs	r3, r3, #5
 80087e0:	011c      	lsls	r4, r3, #4
 80087e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80087f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80087f4:	4642      	mov	r2, r8
 80087f6:	464b      	mov	r3, r9
 80087f8:	1891      	adds	r1, r2, r2
 80087fa:	61b9      	str	r1, [r7, #24]
 80087fc:	415b      	adcs	r3, r3
 80087fe:	61fb      	str	r3, [r7, #28]
 8008800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008804:	4641      	mov	r1, r8
 8008806:	1851      	adds	r1, r2, r1
 8008808:	6139      	str	r1, [r7, #16]
 800880a:	4649      	mov	r1, r9
 800880c:	414b      	adcs	r3, r1
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	f04f 0300 	mov.w	r3, #0
 8008818:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800881c:	4659      	mov	r1, fp
 800881e:	00cb      	lsls	r3, r1, #3
 8008820:	4651      	mov	r1, sl
 8008822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008826:	4651      	mov	r1, sl
 8008828:	00ca      	lsls	r2, r1, #3
 800882a:	4610      	mov	r0, r2
 800882c:	4619      	mov	r1, r3
 800882e:	4603      	mov	r3, r0
 8008830:	4642      	mov	r2, r8
 8008832:	189b      	adds	r3, r3, r2
 8008834:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008838:	464b      	mov	r3, r9
 800883a:	460a      	mov	r2, r1
 800883c:	eb42 0303 	adc.w	r3, r2, r3
 8008840:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800884e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008850:	f04f 0200 	mov.w	r2, #0
 8008854:	f04f 0300 	mov.w	r3, #0
 8008858:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800885c:	4649      	mov	r1, r9
 800885e:	008b      	lsls	r3, r1, #2
 8008860:	4641      	mov	r1, r8
 8008862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008866:	4641      	mov	r1, r8
 8008868:	008a      	lsls	r2, r1, #2
 800886a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800886e:	f7f8 fa13 	bl	8000c98 <__aeabi_uldivmod>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	4611      	mov	r1, r2
 8008878:	4b38      	ldr	r3, [pc, #224]	@ (800895c <UART_SetConfig+0x4e4>)
 800887a:	fba3 2301 	umull	r2, r3, r3, r1
 800887e:	095b      	lsrs	r3, r3, #5
 8008880:	2264      	movs	r2, #100	@ 0x64
 8008882:	fb02 f303 	mul.w	r3, r2, r3
 8008886:	1acb      	subs	r3, r1, r3
 8008888:	011b      	lsls	r3, r3, #4
 800888a:	3332      	adds	r3, #50	@ 0x32
 800888c:	4a33      	ldr	r2, [pc, #204]	@ (800895c <UART_SetConfig+0x4e4>)
 800888e:	fba2 2303 	umull	r2, r3, r2, r3
 8008892:	095b      	lsrs	r3, r3, #5
 8008894:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008898:	441c      	add	r4, r3
 800889a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800889e:	2200      	movs	r2, #0
 80088a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80088a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80088a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80088a8:	4642      	mov	r2, r8
 80088aa:	464b      	mov	r3, r9
 80088ac:	1891      	adds	r1, r2, r2
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	415b      	adcs	r3, r3
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088b8:	4641      	mov	r1, r8
 80088ba:	1851      	adds	r1, r2, r1
 80088bc:	6039      	str	r1, [r7, #0]
 80088be:	4649      	mov	r1, r9
 80088c0:	414b      	adcs	r3, r1
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	f04f 0200 	mov.w	r2, #0
 80088c8:	f04f 0300 	mov.w	r3, #0
 80088cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088d0:	4659      	mov	r1, fp
 80088d2:	00cb      	lsls	r3, r1, #3
 80088d4:	4651      	mov	r1, sl
 80088d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088da:	4651      	mov	r1, sl
 80088dc:	00ca      	lsls	r2, r1, #3
 80088de:	4610      	mov	r0, r2
 80088e0:	4619      	mov	r1, r3
 80088e2:	4603      	mov	r3, r0
 80088e4:	4642      	mov	r2, r8
 80088e6:	189b      	adds	r3, r3, r2
 80088e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088ea:	464b      	mov	r3, r9
 80088ec:	460a      	mov	r2, r1
 80088ee:	eb42 0303 	adc.w	r3, r2, r3
 80088f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80088fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800890c:	4649      	mov	r1, r9
 800890e:	008b      	lsls	r3, r1, #2
 8008910:	4641      	mov	r1, r8
 8008912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008916:	4641      	mov	r1, r8
 8008918:	008a      	lsls	r2, r1, #2
 800891a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800891e:	f7f8 f9bb 	bl	8000c98 <__aeabi_uldivmod>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4b0d      	ldr	r3, [pc, #52]	@ (800895c <UART_SetConfig+0x4e4>)
 8008928:	fba3 1302 	umull	r1, r3, r3, r2
 800892c:	095b      	lsrs	r3, r3, #5
 800892e:	2164      	movs	r1, #100	@ 0x64
 8008930:	fb01 f303 	mul.w	r3, r1, r3
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	3332      	adds	r3, #50	@ 0x32
 800893a:	4a08      	ldr	r2, [pc, #32]	@ (800895c <UART_SetConfig+0x4e4>)
 800893c:	fba2 2303 	umull	r2, r3, r2, r3
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	f003 020f 	and.w	r2, r3, #15
 8008946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4422      	add	r2, r4
 800894e:	609a      	str	r2, [r3, #8]
}
 8008950:	bf00      	nop
 8008952:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008956:	46bd      	mov	sp, r7
 8008958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800895c:	51eb851f 	.word	0x51eb851f

08008960 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008960:	b084      	sub	sp, #16
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	f107 001c 	add.w	r0, r7, #28
 800896e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008972:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008976:	2b01      	cmp	r3, #1
 8008978:	d123      	bne.n	80089c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800898e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d105      	bne.n	80089b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 fae2 	bl	8009f80 <USB_CoreReset>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]
 80089c0:	e01b      	b.n	80089fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 fad6 	bl	8009f80 <USB_CoreReset>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d106      	bne.n	80089ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80089ec:	e005      	b.n	80089fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80089fa:	7fbb      	ldrb	r3, [r7, #30]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d10b      	bne.n	8008a18 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f043 0206 	orr.w	r2, r3, #6
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f043 0220 	orr.w	r2, r3, #32
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a24:	b004      	add	sp, #16
 8008a26:	4770      	bx	lr

08008a28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	4613      	mov	r3, r2
 8008a34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d165      	bne.n	8008b08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	4a41      	ldr	r2, [pc, #260]	@ (8008b44 <USB_SetTurnaroundTime+0x11c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d906      	bls.n	8008a52 <USB_SetTurnaroundTime+0x2a>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	4a40      	ldr	r2, [pc, #256]	@ (8008b48 <USB_SetTurnaroundTime+0x120>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d202      	bcs.n	8008a52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008a4c:	230f      	movs	r3, #15
 8008a4e:	617b      	str	r3, [r7, #20]
 8008a50:	e062      	b.n	8008b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	4a3c      	ldr	r2, [pc, #240]	@ (8008b48 <USB_SetTurnaroundTime+0x120>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d306      	bcc.n	8008a68 <USB_SetTurnaroundTime+0x40>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	4a3b      	ldr	r2, [pc, #236]	@ (8008b4c <USB_SetTurnaroundTime+0x124>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d202      	bcs.n	8008a68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008a62:	230e      	movs	r3, #14
 8008a64:	617b      	str	r3, [r7, #20]
 8008a66:	e057      	b.n	8008b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	4a38      	ldr	r2, [pc, #224]	@ (8008b4c <USB_SetTurnaroundTime+0x124>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d306      	bcc.n	8008a7e <USB_SetTurnaroundTime+0x56>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	4a37      	ldr	r2, [pc, #220]	@ (8008b50 <USB_SetTurnaroundTime+0x128>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d202      	bcs.n	8008a7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008a78:	230d      	movs	r3, #13
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	e04c      	b.n	8008b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	4a33      	ldr	r2, [pc, #204]	@ (8008b50 <USB_SetTurnaroundTime+0x128>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d306      	bcc.n	8008a94 <USB_SetTurnaroundTime+0x6c>
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	4a32      	ldr	r2, [pc, #200]	@ (8008b54 <USB_SetTurnaroundTime+0x12c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d802      	bhi.n	8008a94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008a8e:	230c      	movs	r3, #12
 8008a90:	617b      	str	r3, [r7, #20]
 8008a92:	e041      	b.n	8008b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4a2f      	ldr	r2, [pc, #188]	@ (8008b54 <USB_SetTurnaroundTime+0x12c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d906      	bls.n	8008aaa <USB_SetTurnaroundTime+0x82>
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8008b58 <USB_SetTurnaroundTime+0x130>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d802      	bhi.n	8008aaa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008aa4:	230b      	movs	r3, #11
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	e036      	b.n	8008b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	4a2a      	ldr	r2, [pc, #168]	@ (8008b58 <USB_SetTurnaroundTime+0x130>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d906      	bls.n	8008ac0 <USB_SetTurnaroundTime+0x98>
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	4a29      	ldr	r2, [pc, #164]	@ (8008b5c <USB_SetTurnaroundTime+0x134>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d802      	bhi.n	8008ac0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008aba:	230a      	movs	r3, #10
 8008abc:	617b      	str	r3, [r7, #20]
 8008abe:	e02b      	b.n	8008b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	4a26      	ldr	r2, [pc, #152]	@ (8008b5c <USB_SetTurnaroundTime+0x134>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d906      	bls.n	8008ad6 <USB_SetTurnaroundTime+0xae>
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	4a25      	ldr	r2, [pc, #148]	@ (8008b60 <USB_SetTurnaroundTime+0x138>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d202      	bcs.n	8008ad6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008ad0:	2309      	movs	r3, #9
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	e020      	b.n	8008b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	4a21      	ldr	r2, [pc, #132]	@ (8008b60 <USB_SetTurnaroundTime+0x138>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d306      	bcc.n	8008aec <USB_SetTurnaroundTime+0xc4>
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	4a20      	ldr	r2, [pc, #128]	@ (8008b64 <USB_SetTurnaroundTime+0x13c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d802      	bhi.n	8008aec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008ae6:	2308      	movs	r3, #8
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	e015      	b.n	8008b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	4a1d      	ldr	r2, [pc, #116]	@ (8008b64 <USB_SetTurnaroundTime+0x13c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d906      	bls.n	8008b02 <USB_SetTurnaroundTime+0xda>
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	4a1c      	ldr	r2, [pc, #112]	@ (8008b68 <USB_SetTurnaroundTime+0x140>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d202      	bcs.n	8008b02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008afc:	2307      	movs	r3, #7
 8008afe:	617b      	str	r3, [r7, #20]
 8008b00:	e00a      	b.n	8008b18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008b02:	2306      	movs	r3, #6
 8008b04:	617b      	str	r3, [r7, #20]
 8008b06:	e007      	b.n	8008b18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d102      	bne.n	8008b14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008b0e:	2309      	movs	r3, #9
 8008b10:	617b      	str	r3, [r7, #20]
 8008b12:	e001      	b.n	8008b18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008b14:	2309      	movs	r3, #9
 8008b16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	68da      	ldr	r2, [r3, #12]
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	029b      	lsls	r3, r3, #10
 8008b2c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008b30:	431a      	orrs	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	371c      	adds	r7, #28
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	00d8acbf 	.word	0x00d8acbf
 8008b48:	00e4e1c0 	.word	0x00e4e1c0
 8008b4c:	00f42400 	.word	0x00f42400
 8008b50:	01067380 	.word	0x01067380
 8008b54:	011a499f 	.word	0x011a499f
 8008b58:	01312cff 	.word	0x01312cff
 8008b5c:	014ca43f 	.word	0x014ca43f
 8008b60:	016e3600 	.word	0x016e3600
 8008b64:	01a6ab1f 	.word	0x01a6ab1f
 8008b68:	01e84800 	.word	0x01e84800

08008b6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f043 0201 	orr.w	r2, r3, #1
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f023 0201 	bic.w	r2, r3, #1
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d115      	bne.n	8008bfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008bde:	200a      	movs	r0, #10
 8008be0:	f7fb faf6 	bl	80041d0 <HAL_Delay>
      ms += 10U;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	330a      	adds	r3, #10
 8008be8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 f939 	bl	8009e62 <USB_GetMode>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d01e      	beq.n	8008c34 <USB_SetCurrentMode+0x84>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2bc7      	cmp	r3, #199	@ 0xc7
 8008bfa:	d9f0      	bls.n	8008bde <USB_SetCurrentMode+0x2e>
 8008bfc:	e01a      	b.n	8008c34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008bfe:	78fb      	ldrb	r3, [r7, #3]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d115      	bne.n	8008c30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008c10:	200a      	movs	r0, #10
 8008c12:	f7fb fadd 	bl	80041d0 <HAL_Delay>
      ms += 10U;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	330a      	adds	r3, #10
 8008c1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 f920 	bl	8009e62 <USB_GetMode>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <USB_SetCurrentMode+0x84>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8008c2c:	d9f0      	bls.n	8008c10 <USB_SetCurrentMode+0x60>
 8008c2e:	e001      	b.n	8008c34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e005      	b.n	8008c40 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2bc8      	cmp	r3, #200	@ 0xc8
 8008c38:	d101      	bne.n	8008c3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c48:	b084      	sub	sp, #16
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b086      	sub	sp, #24
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008c62:	2300      	movs	r3, #0
 8008c64:	613b      	str	r3, [r7, #16]
 8008c66:	e009      	b.n	8008c7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	3340      	adds	r3, #64	@ 0x40
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	2200      	movs	r2, #0
 8008c74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	613b      	str	r3, [r7, #16]
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	2b0e      	cmp	r3, #14
 8008c80:	d9f2      	bls.n	8008c68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d11c      	bne.n	8008cc4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c98:	f043 0302 	orr.w	r3, r3, #2
 8008c9c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	639a      	str	r2, [r3, #56]	@ 0x38
 8008cc2:	e00b      	b.n	8008cdc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ce8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d10d      	bne.n	8008d0c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d104      	bne.n	8008d02 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f968 	bl	8008fd0 <USB_SetDevSpeed>
 8008d00:	e008      	b.n	8008d14 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d02:	2101      	movs	r1, #1
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f963 	bl	8008fd0 <USB_SetDevSpeed>
 8008d0a:	e003      	b.n	8008d14 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d0c:	2103      	movs	r1, #3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f95e 	bl	8008fd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d14:	2110      	movs	r1, #16
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f8fa 	bl	8008f10 <USB_FlushTxFifo>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f924 	bl	8008f74 <USB_FlushRxFifo>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	2300      	movs	r3, #0
 8008d40:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d48:	461a      	mov	r2, r3
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d54:	461a      	mov	r2, r3
 8008d56:	2300      	movs	r3, #0
 8008d58:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	613b      	str	r3, [r7, #16]
 8008d5e:	e043      	b.n	8008de8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d76:	d118      	bne.n	8008daa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10a      	bne.n	8008d94 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008d90:	6013      	str	r3, [r2, #0]
 8008d92:	e013      	b.n	8008dbc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008da0:	461a      	mov	r2, r3
 8008da2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008da6:	6013      	str	r3, [r2, #0]
 8008da8:	e008      	b.n	8008dbc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008db6:	461a      	mov	r2, r3
 8008db8:	2300      	movs	r3, #0
 8008dba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dc8:	461a      	mov	r2, r3
 8008dca:	2300      	movs	r3, #0
 8008dcc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	015a      	lsls	r2, r3, #5
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dda:	461a      	mov	r2, r3
 8008ddc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008de0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	3301      	adds	r3, #1
 8008de6:	613b      	str	r3, [r7, #16]
 8008de8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008dec:	461a      	mov	r2, r3
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d3b5      	bcc.n	8008d60 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008df4:	2300      	movs	r3, #0
 8008df6:	613b      	str	r3, [r7, #16]
 8008df8:	e043      	b.n	8008e82 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e10:	d118      	bne.n	8008e44 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e24:	461a      	mov	r2, r3
 8008e26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	e013      	b.n	8008e56 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	e008      	b.n	8008e56 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e50:	461a      	mov	r2, r3
 8008e52:	2300      	movs	r3, #0
 8008e54:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e62:	461a      	mov	r2, r3
 8008e64:	2300      	movs	r3, #0
 8008e66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e74:	461a      	mov	r2, r3
 8008e76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008e7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	613b      	str	r3, [r7, #16]
 8008e82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e86:	461a      	mov	r2, r3
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d3b5      	bcc.n	8008dfa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ea0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008eae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008eb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d105      	bne.n	8008ec4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	f043 0210 	orr.w	r2, r3, #16
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	699a      	ldr	r2, [r3, #24]
 8008ec8:	4b10      	ldr	r3, [pc, #64]	@ (8008f0c <USB_DevInit+0x2c4>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ed0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	f043 0208 	orr.w	r2, r3, #8
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ee4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d107      	bne.n	8008efc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ef4:	f043 0304 	orr.w	r3, r3, #4
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f08:	b004      	add	sp, #16
 8008f0a:	4770      	bx	lr
 8008f0c:	803c3800 	.word	0x803c3800

08008f10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	3301      	adds	r3, #1
 8008f22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f2a:	d901      	bls.n	8008f30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e01b      	b.n	8008f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	daf2      	bge.n	8008f1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	019b      	lsls	r3, r3, #6
 8008f40:	f043 0220 	orr.w	r2, r3, #32
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f54:	d901      	bls.n	8008f5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e006      	b.n	8008f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	f003 0320 	and.w	r3, r3, #32
 8008f62:	2b20      	cmp	r3, #32
 8008f64:	d0f0      	beq.n	8008f48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3301      	adds	r3, #1
 8008f84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f8c:	d901      	bls.n	8008f92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e018      	b.n	8008fc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	daf2      	bge.n	8008f80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2210      	movs	r2, #16
 8008fa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008fb0:	d901      	bls.n	8008fb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e006      	b.n	8008fc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	f003 0310 	and.w	r3, r3, #16
 8008fbe:	2b10      	cmp	r3, #16
 8008fc0:	d0f0      	beq.n	8008fa4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	68f9      	ldr	r1, [r7, #12]
 8008fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009002:	b480      	push	{r7}
 8009004:	b087      	sub	sp, #28
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f003 0306 	and.w	r3, r3, #6
 800901a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d102      	bne.n	8009028 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009022:	2300      	movs	r3, #0
 8009024:	75fb      	strb	r3, [r7, #23]
 8009026:	e00a      	b.n	800903e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b02      	cmp	r3, #2
 800902c:	d002      	beq.n	8009034 <USB_GetDevSpeed+0x32>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b06      	cmp	r3, #6
 8009032:	d102      	bne.n	800903a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009034:	2302      	movs	r3, #2
 8009036:	75fb      	strb	r3, [r7, #23]
 8009038:	e001      	b.n	800903e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800903a:	230f      	movs	r3, #15
 800903c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009040:	4618      	mov	r0, r3
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	785b      	ldrb	r3, [r3, #1]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d13a      	bne.n	80090de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800906e:	69da      	ldr	r2, [r3, #28]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	f003 030f 	and.w	r3, r3, #15
 8009078:	2101      	movs	r1, #1
 800907a:	fa01 f303 	lsl.w	r3, r1, r3
 800907e:	b29b      	uxth	r3, r3
 8009080:	68f9      	ldr	r1, [r7, #12]
 8009082:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009086:	4313      	orrs	r3, r2
 8009088:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	4413      	add	r3, r2
 8009092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d155      	bne.n	800914c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	791b      	ldrb	r3, [r3, #4]
 80090ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	059b      	lsls	r3, r3, #22
 80090c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090c4:	4313      	orrs	r3, r2
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	0151      	lsls	r1, r2, #5
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	440a      	add	r2, r1
 80090ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090da:	6013      	str	r3, [r2, #0]
 80090dc:	e036      	b.n	800914c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090e4:	69da      	ldr	r2, [r3, #28]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	2101      	movs	r1, #1
 80090f0:	fa01 f303 	lsl.w	r3, r1, r3
 80090f4:	041b      	lsls	r3, r3, #16
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090fc:	4313      	orrs	r3, r2
 80090fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	015a      	lsls	r2, r3, #5
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	4413      	add	r3, r2
 8009108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d11a      	bne.n	800914c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	791b      	ldrb	r3, [r3, #4]
 8009130:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009132:	430b      	orrs	r3, r1
 8009134:	4313      	orrs	r3, r2
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	0151      	lsls	r1, r2, #5
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	440a      	add	r2, r1
 800913e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800914a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
	...

0800915c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	785b      	ldrb	r3, [r3, #1]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d161      	bne.n	800923c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800918a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800918e:	d11f      	bne.n	80091d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	0151      	lsls	r1, r2, #5
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	440a      	add	r2, r1
 80091a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80091ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	0151      	lsls	r1, r2, #5
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	440a      	add	r2, r1
 80091c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	2101      	movs	r1, #1
 80091e2:	fa01 f303 	lsl.w	r3, r1, r3
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	43db      	mvns	r3, r3
 80091ea:	68f9      	ldr	r1, [r7, #12]
 80091ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091f0:	4013      	ands	r3, r2
 80091f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091fa:	69da      	ldr	r2, [r3, #28]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f003 030f 	and.w	r3, r3, #15
 8009204:	2101      	movs	r1, #1
 8009206:	fa01 f303 	lsl.w	r3, r1, r3
 800920a:	b29b      	uxth	r3, r3
 800920c:	43db      	mvns	r3, r3
 800920e:	68f9      	ldr	r1, [r7, #12]
 8009210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009214:	4013      	ands	r3, r2
 8009216:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	0159      	lsls	r1, r3, #5
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	440b      	add	r3, r1
 800922e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009232:	4619      	mov	r1, r3
 8009234:	4b35      	ldr	r3, [pc, #212]	@ (800930c <USB_DeactivateEndpoint+0x1b0>)
 8009236:	4013      	ands	r3, r2
 8009238:	600b      	str	r3, [r1, #0]
 800923a:	e060      	b.n	80092fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4413      	add	r3, r2
 8009244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800924e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009252:	d11f      	bne.n	8009294 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	0151      	lsls	r1, r2, #5
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	440a      	add	r2, r1
 800926a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800926e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009272:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4413      	add	r3, r2
 800927c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	0151      	lsls	r1, r2, #5
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	440a      	add	r2, r1
 800928a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800928e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009292:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800929a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	f003 030f 	and.w	r3, r3, #15
 80092a4:	2101      	movs	r1, #1
 80092a6:	fa01 f303 	lsl.w	r3, r1, r3
 80092aa:	041b      	lsls	r3, r3, #16
 80092ac:	43db      	mvns	r3, r3
 80092ae:	68f9      	ldr	r1, [r7, #12]
 80092b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092b4:	4013      	ands	r3, r2
 80092b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092be:	69da      	ldr	r2, [r3, #28]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	f003 030f 	and.w	r3, r3, #15
 80092c8:	2101      	movs	r1, #1
 80092ca:	fa01 f303 	lsl.w	r3, r1, r3
 80092ce:	041b      	lsls	r3, r3, #16
 80092d0:	43db      	mvns	r3, r3
 80092d2:	68f9      	ldr	r1, [r7, #12]
 80092d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092d8:	4013      	ands	r3, r2
 80092da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	0159      	lsls	r1, r3, #5
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	440b      	add	r3, r1
 80092f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092f6:	4619      	mov	r1, r3
 80092f8:	4b05      	ldr	r3, [pc, #20]	@ (8009310 <USB_DeactivateEndpoint+0x1b4>)
 80092fa:	4013      	ands	r3, r2
 80092fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	ec337800 	.word	0xec337800
 8009310:	eff37800 	.word	0xeff37800

08009314 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b08a      	sub	sp, #40	@ 0x28
 8009318:	af02      	add	r7, sp, #8
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	4613      	mov	r3, r2
 8009320:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	785b      	ldrb	r3, [r3, #1]
 8009330:	2b01      	cmp	r3, #1
 8009332:	f040 817a 	bne.w	800962a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d132      	bne.n	80093a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	4413      	add	r3, r2
 8009346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	69ba      	ldr	r2, [r7, #24]
 800934e:	0151      	lsls	r1, r2, #5
 8009350:	69fa      	ldr	r2, [r7, #28]
 8009352:	440a      	add	r2, r1
 8009354:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009358:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800935c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009360:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	0151      	lsls	r1, r2, #5
 8009374:	69fa      	ldr	r2, [r7, #28]
 8009376:	440a      	add	r2, r1
 8009378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800937c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009380:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	4413      	add	r3, r2
 800938a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	69ba      	ldr	r2, [r7, #24]
 8009392:	0151      	lsls	r1, r2, #5
 8009394:	69fa      	ldr	r2, [r7, #28]
 8009396:	440a      	add	r2, r1
 8009398:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800939c:	0cdb      	lsrs	r3, r3, #19
 800939e:	04db      	lsls	r3, r3, #19
 80093a0:	6113      	str	r3, [r2, #16]
 80093a2:	e092      	b.n	80094ca <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	69ba      	ldr	r2, [r7, #24]
 80093b4:	0151      	lsls	r1, r2, #5
 80093b6:	69fa      	ldr	r2, [r7, #28]
 80093b8:	440a      	add	r2, r1
 80093ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093be:	0cdb      	lsrs	r3, r3, #19
 80093c0:	04db      	lsls	r3, r3, #19
 80093c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	0151      	lsls	r1, r2, #5
 80093d6:	69fa      	ldr	r2, [r7, #28]
 80093d8:	440a      	add	r2, r1
 80093da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80093e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80093e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d11a      	bne.n	8009424 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	691a      	ldr	r2, [r3, #16]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d903      	bls.n	8009402 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	689a      	ldr	r2, [r3, #8]
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	0151      	lsls	r1, r2, #5
 8009414:	69fa      	ldr	r2, [r7, #28]
 8009416:	440a      	add	r2, r1
 8009418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800941c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009420:	6113      	str	r3, [r2, #16]
 8009422:	e01b      	b.n	800945c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009430:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	6919      	ldr	r1, [r3, #16]
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	440b      	add	r3, r1
 800943c:	1e59      	subs	r1, r3, #1
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	fbb1 f3f3 	udiv	r3, r1, r3
 8009446:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009448:	4ba2      	ldr	r3, [pc, #648]	@ (80096d4 <USB_EPStartXfer+0x3c0>)
 800944a:	400b      	ands	r3, r1
 800944c:	69b9      	ldr	r1, [r7, #24]
 800944e:	0148      	lsls	r0, r1, #5
 8009450:	69f9      	ldr	r1, [r7, #28]
 8009452:	4401      	add	r1, r0
 8009454:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009458:	4313      	orrs	r3, r2
 800945a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009468:	691a      	ldr	r2, [r3, #16]
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009472:	69b9      	ldr	r1, [r7, #24]
 8009474:	0148      	lsls	r0, r1, #5
 8009476:	69f9      	ldr	r1, [r7, #28]
 8009478:	4401      	add	r1, r0
 800947a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800947e:	4313      	orrs	r3, r2
 8009480:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	791b      	ldrb	r3, [r3, #4]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d11f      	bne.n	80094ca <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	015a      	lsls	r2, r3, #5
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	4413      	add	r3, r2
 8009492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	69ba      	ldr	r2, [r7, #24]
 800949a:	0151      	lsls	r1, r2, #5
 800949c:	69fa      	ldr	r2, [r7, #28]
 800949e:	440a      	add	r2, r1
 80094a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094a4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80094a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	015a      	lsls	r2, r3, #5
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	4413      	add	r3, r2
 80094b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	69ba      	ldr	r2, [r7, #24]
 80094ba:	0151      	lsls	r1, r2, #5
 80094bc:	69fa      	ldr	r2, [r7, #28]
 80094be:	440a      	add	r2, r1
 80094c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80094c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80094ca:	79fb      	ldrb	r3, [r7, #7]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d14b      	bne.n	8009568 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d009      	beq.n	80094ec <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	015a      	lsls	r2, r3, #5
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	4413      	add	r3, r2
 80094e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094e4:	461a      	mov	r2, r3
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	791b      	ldrb	r3, [r3, #4]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d128      	bne.n	8009546 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009500:	2b00      	cmp	r3, #0
 8009502:	d110      	bne.n	8009526 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	0151      	lsls	r1, r2, #5
 8009516:	69fa      	ldr	r2, [r7, #28]
 8009518:	440a      	add	r2, r1
 800951a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800951e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	e00f      	b.n	8009546 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	4413      	add	r3, r2
 800952e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	69ba      	ldr	r2, [r7, #24]
 8009536:	0151      	lsls	r1, r2, #5
 8009538:	69fa      	ldr	r2, [r7, #28]
 800953a:	440a      	add	r2, r1
 800953c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009544:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	4413      	add	r3, r2
 800954e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69ba      	ldr	r2, [r7, #24]
 8009556:	0151      	lsls	r1, r2, #5
 8009558:	69fa      	ldr	r2, [r7, #28]
 800955a:	440a      	add	r2, r1
 800955c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009560:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	e165      	b.n	8009834 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69ba      	ldr	r2, [r7, #24]
 8009578:	0151      	lsls	r1, r2, #5
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	440a      	add	r2, r1
 800957e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009582:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009586:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	791b      	ldrb	r3, [r3, #4]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d015      	beq.n	80095bc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	f000 814d 	beq.w	8009834 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	f003 030f 	and.w	r3, r3, #15
 80095aa:	2101      	movs	r1, #1
 80095ac:	fa01 f303 	lsl.w	r3, r1, r3
 80095b0:	69f9      	ldr	r1, [r7, #28]
 80095b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095b6:	4313      	orrs	r3, r2
 80095b8:	634b      	str	r3, [r1, #52]	@ 0x34
 80095ba:	e13b      	b.n	8009834 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d110      	bne.n	80095ee <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	015a      	lsls	r2, r3, #5
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	4413      	add	r3, r2
 80095d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69ba      	ldr	r2, [r7, #24]
 80095dc:	0151      	lsls	r1, r2, #5
 80095de:	69fa      	ldr	r2, [r7, #28]
 80095e0:	440a      	add	r2, r1
 80095e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	e00f      	b.n	800960e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	015a      	lsls	r2, r3, #5
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	4413      	add	r3, r2
 80095f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	0151      	lsls	r1, r2, #5
 8009600:	69fa      	ldr	r2, [r7, #28]
 8009602:	440a      	add	r2, r1
 8009604:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800960c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	68d9      	ldr	r1, [r3, #12]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	781a      	ldrb	r2, [r3, #0]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	b298      	uxth	r0, r3
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	4603      	mov	r3, r0
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f000 f9b8 	bl	8009998 <USB_WritePacket>
 8009628:	e104      	b.n	8009834 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	4413      	add	r3, r2
 8009632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	69ba      	ldr	r2, [r7, #24]
 800963a:	0151      	lsls	r1, r2, #5
 800963c:	69fa      	ldr	r2, [r7, #28]
 800963e:	440a      	add	r2, r1
 8009640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009644:	0cdb      	lsrs	r3, r3, #19
 8009646:	04db      	lsls	r3, r3, #19
 8009648:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	0151      	lsls	r1, r2, #5
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	440a      	add	r2, r1
 8009660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009664:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009668:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800966c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d131      	bne.n	80096d8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	689a      	ldr	r2, [r3, #8]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	689a      	ldr	r2, [r3, #8]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009698:	691a      	ldr	r2, [r3, #16]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096a2:	69b9      	ldr	r1, [r7, #24]
 80096a4:	0148      	lsls	r0, r1, #5
 80096a6:	69f9      	ldr	r1, [r7, #28]
 80096a8:	4401      	add	r1, r0
 80096aa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80096ae:	4313      	orrs	r3, r2
 80096b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	0151      	lsls	r1, r2, #5
 80096c4:	69fa      	ldr	r2, [r7, #28]
 80096c6:	440a      	add	r2, r1
 80096c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096d0:	6113      	str	r3, [r2, #16]
 80096d2:	e061      	b.n	8009798 <USB_EPStartXfer+0x484>
 80096d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d123      	bne.n	8009728 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096ec:	691a      	ldr	r2, [r3, #16]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096f6:	69b9      	ldr	r1, [r7, #24]
 80096f8:	0148      	lsls	r0, r1, #5
 80096fa:	69f9      	ldr	r1, [r7, #28]
 80096fc:	4401      	add	r1, r0
 80096fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009702:	4313      	orrs	r3, r2
 8009704:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	4413      	add	r3, r2
 800970e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	0151      	lsls	r1, r2, #5
 8009718:	69fa      	ldr	r2, [r7, #28]
 800971a:	440a      	add	r2, r1
 800971c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009720:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009724:	6113      	str	r3, [r2, #16]
 8009726:	e037      	b.n	8009798 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	691a      	ldr	r2, [r3, #16]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	4413      	add	r3, r2
 8009732:	1e5a      	subs	r2, r3, #1
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	fbb2 f3f3 	udiv	r3, r2, r3
 800973c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	8afa      	ldrh	r2, [r7, #22]
 8009744:	fb03 f202 	mul.w	r2, r3, r2
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009758:	691a      	ldr	r2, [r3, #16]
 800975a:	8afb      	ldrh	r3, [r7, #22]
 800975c:	04d9      	lsls	r1, r3, #19
 800975e:	4b38      	ldr	r3, [pc, #224]	@ (8009840 <USB_EPStartXfer+0x52c>)
 8009760:	400b      	ands	r3, r1
 8009762:	69b9      	ldr	r1, [r7, #24]
 8009764:	0148      	lsls	r0, r1, #5
 8009766:	69f9      	ldr	r1, [r7, #28]
 8009768:	4401      	add	r1, r0
 800976a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800976e:	4313      	orrs	r3, r2
 8009770:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	015a      	lsls	r2, r3, #5
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	4413      	add	r3, r2
 800977a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800977e:	691a      	ldr	r2, [r3, #16]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	6a1b      	ldr	r3, [r3, #32]
 8009784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009788:	69b9      	ldr	r1, [r7, #24]
 800978a:	0148      	lsls	r0, r1, #5
 800978c:	69f9      	ldr	r1, [r7, #28]
 800978e:	4401      	add	r1, r0
 8009790:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009794:	4313      	orrs	r3, r2
 8009796:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009798:	79fb      	ldrb	r3, [r7, #7]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d10d      	bne.n	80097ba <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d009      	beq.n	80097ba <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	68d9      	ldr	r1, [r3, #12]
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	015a      	lsls	r2, r3, #5
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	4413      	add	r3, r2
 80097b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097b6:	460a      	mov	r2, r1
 80097b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	791b      	ldrb	r3, [r3, #4]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d128      	bne.n	8009814 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d110      	bne.n	80097f4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	69ba      	ldr	r2, [r7, #24]
 80097e2:	0151      	lsls	r1, r2, #5
 80097e4:	69fa      	ldr	r2, [r7, #28]
 80097e6:	440a      	add	r2, r1
 80097e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	e00f      	b.n	8009814 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	015a      	lsls	r2, r3, #5
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	0151      	lsls	r1, r2, #5
 8009806:	69fa      	ldr	r2, [r7, #28]
 8009808:	440a      	add	r2, r1
 800980a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800980e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009812:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	0151      	lsls	r1, r2, #5
 8009826:	69fa      	ldr	r2, [r7, #28]
 8009828:	440a      	add	r2, r1
 800982a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800982e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009832:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3720      	adds	r7, #32
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	1ff80000 	.word	0x1ff80000

08009844 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	785b      	ldrb	r3, [r3, #1]
 800985e:	2b01      	cmp	r3, #1
 8009860:	d14a      	bne.n	80098f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	4413      	add	r3, r2
 800986c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009876:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800987a:	f040 8086 	bne.w	800998a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	7812      	ldrb	r2, [r2, #0]
 8009892:	0151      	lsls	r1, r2, #5
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	440a      	add	r2, r1
 8009898:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800989c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80098a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	7812      	ldrb	r2, [r2, #0]
 80098b6:	0151      	lsls	r1, r2, #5
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	440a      	add	r2, r1
 80098bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3301      	adds	r3, #1
 80098ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d902      	bls.n	80098dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	75fb      	strb	r3, [r7, #23]
          break;
 80098da:	e056      	b.n	800998a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098f4:	d0e7      	beq.n	80098c6 <USB_EPStopXfer+0x82>
 80098f6:	e048      	b.n	800998a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800990c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009910:	d13b      	bne.n	800998a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	4413      	add	r3, r2
 800991c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	7812      	ldrb	r2, [r2, #0]
 8009926:	0151      	lsls	r1, r2, #5
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	440a      	add	r2, r1
 800992c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009930:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009934:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	7812      	ldrb	r2, [r2, #0]
 800994a:	0151      	lsls	r1, r2, #5
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	440a      	add	r2, r1
 8009950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009954:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009958:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3301      	adds	r3, #1
 800995e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009966:	4293      	cmp	r3, r2
 8009968:	d902      	bls.n	8009970 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	75fb      	strb	r3, [r7, #23]
          break;
 800996e:	e00c      	b.n	800998a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	4413      	add	r3, r2
 800997a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009984:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009988:	d0e7      	beq.n	800995a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800998a:	7dfb      	ldrb	r3, [r7, #23]
}
 800998c:	4618      	mov	r0, r3
 800998e:	371c      	adds	r7, #28
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009998:	b480      	push	{r7}
 800999a:	b089      	sub	sp, #36	@ 0x24
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	4611      	mov	r1, r2
 80099a4:	461a      	mov	r2, r3
 80099a6:	460b      	mov	r3, r1
 80099a8:	71fb      	strb	r3, [r7, #7]
 80099aa:	4613      	mov	r3, r2
 80099ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80099b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d123      	bne.n	8009a06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80099be:	88bb      	ldrh	r3, [r7, #4]
 80099c0:	3303      	adds	r3, #3
 80099c2:	089b      	lsrs	r3, r3, #2
 80099c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80099c6:	2300      	movs	r3, #0
 80099c8:	61bb      	str	r3, [r7, #24]
 80099ca:	e018      	b.n	80099fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80099cc:	79fb      	ldrb	r3, [r7, #7]
 80099ce:	031a      	lsls	r2, r3, #12
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099d8:	461a      	mov	r2, r3
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	3301      	adds	r3, #1
 80099e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	3301      	adds	r3, #1
 80099ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	3301      	adds	r3, #1
 80099f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	3301      	adds	r3, #1
 80099f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	3301      	adds	r3, #1
 80099fc:	61bb      	str	r3, [r7, #24]
 80099fe:	69ba      	ldr	r2, [r7, #24]
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d3e2      	bcc.n	80099cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3724      	adds	r7, #36	@ 0x24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b08b      	sub	sp, #44	@ 0x2c
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009a2a:	88fb      	ldrh	r3, [r7, #6]
 8009a2c:	089b      	lsrs	r3, r3, #2
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009a32:	88fb      	ldrh	r3, [r7, #6]
 8009a34:	f003 0303 	and.w	r3, r3, #3
 8009a38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	623b      	str	r3, [r7, #32]
 8009a3e:	e014      	b.n	8009a6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4e:	3301      	adds	r3, #1
 8009a50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a54:	3301      	adds	r3, #1
 8009a56:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a60:	3301      	adds	r3, #1
 8009a62:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	3301      	adds	r3, #1
 8009a68:	623b      	str	r3, [r7, #32]
 8009a6a:	6a3a      	ldr	r2, [r7, #32]
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d3e6      	bcc.n	8009a40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009a72:	8bfb      	ldrh	r3, [r7, #30]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d01e      	beq.n	8009ab6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a82:	461a      	mov	r2, r3
 8009a84:	f107 0310 	add.w	r3, r7, #16
 8009a88:	6812      	ldr	r2, [r2, #0]
 8009a8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	00db      	lsls	r3, r3, #3
 8009a94:	fa22 f303 	lsr.w	r3, r2, r3
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9c:	701a      	strb	r2, [r3, #0]
      i++;
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	623b      	str	r3, [r7, #32]
      pDest++;
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009aaa:	8bfb      	ldrh	r3, [r7, #30]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009ab0:	8bfb      	ldrh	r3, [r7, #30]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1ea      	bne.n	8009a8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	372c      	adds	r7, #44	@ 0x2c
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	785b      	ldrb	r3, [r3, #1]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d12c      	bne.n	8009b3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	db12      	blt.n	8009b18 <USB_EPSetStall+0x54>
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00f      	beq.n	8009b18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68ba      	ldr	r2, [r7, #8]
 8009b08:	0151      	lsls	r1, r2, #5
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	440a      	add	r2, r1
 8009b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009b16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	0151      	lsls	r1, r2, #5
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	440a      	add	r2, r1
 8009b2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	e02b      	b.n	8009b92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	db12      	blt.n	8009b72 <USB_EPSetStall+0xae>
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00f      	beq.n	8009b72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	0151      	lsls	r1, r2, #5
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	440a      	add	r2, r1
 8009b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009b70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	0151      	lsls	r1, r2, #5
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	440a      	add	r2, r1
 8009b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009b90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3714      	adds	r7, #20
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	785b      	ldrb	r3, [r3, #1]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d128      	bne.n	8009c0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	0151      	lsls	r1, r2, #5
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	440a      	add	r2, r1
 8009bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009bda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	791b      	ldrb	r3, [r3, #4]
 8009be0:	2b03      	cmp	r3, #3
 8009be2:	d003      	beq.n	8009bec <USB_EPClearStall+0x4c>
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	791b      	ldrb	r3, [r3, #4]
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d138      	bne.n	8009c5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	0151      	lsls	r1, r2, #5
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	440a      	add	r2, r1
 8009c02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c0a:	6013      	str	r3, [r2, #0]
 8009c0c:	e027      	b.n	8009c5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	015a      	lsls	r2, r3, #5
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	4413      	add	r3, r2
 8009c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	0151      	lsls	r1, r2, #5
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	440a      	add	r2, r1
 8009c24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009c2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	791b      	ldrb	r3, [r3, #4]
 8009c32:	2b03      	cmp	r3, #3
 8009c34:	d003      	beq.n	8009c3e <USB_EPClearStall+0x9e>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	791b      	ldrb	r3, [r3, #4]
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d10f      	bne.n	8009c5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	0151      	lsls	r1, r2, #5
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	440a      	add	r2, r1
 8009c54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	460b      	mov	r3, r1
 8009c76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009c8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	78fb      	ldrb	r3, [r7, #3]
 8009c9a:	011b      	lsls	r3, r3, #4
 8009c9c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009ca0:	68f9      	ldr	r1, [r7, #12]
 8009ca2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009cd2:	f023 0303 	bic.w	r3, r3, #3
 8009cd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ce6:	f023 0302 	bic.w	r3, r3, #2
 8009cea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009cfa:	b480      	push	{r7}
 8009cfc:	b085      	sub	sp, #20
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009d14:	f023 0303 	bic.w	r3, r3, #3
 8009d18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d28:	f043 0302 	orr.w	r3, r3, #2
 8009d2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3714      	adds	r7, #20
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	695b      	ldr	r3, [r3, #20]
 8009d48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	4013      	ands	r3, r2
 8009d52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d54:	68fb      	ldr	r3, [r7, #12]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b085      	sub	sp, #20
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d74:	699b      	ldr	r3, [r3, #24]
 8009d76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	4013      	ands	r3, r2
 8009d84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	0c1b      	lsrs	r3, r3, #16
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b085      	sub	sp, #20
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009db2:	69db      	ldr	r3, [r3, #28]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	4013      	ands	r3, r2
 8009db8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	b29b      	uxth	r3, r3
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b085      	sub	sp, #20
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009dda:	78fb      	ldrb	r3, [r7, #3]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	4013      	ands	r3, r2
 8009df6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009df8:	68bb      	ldr	r3, [r7, #8]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e06:	b480      	push	{r7}
 8009e08:	b087      	sub	sp, #28
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	f003 030f 	and.w	r3, r3, #15
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	fa22 f303 	lsr.w	r3, r2, r3
 8009e36:	01db      	lsls	r3, r3, #7
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	4013      	ands	r3, r2
 8009e52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e54:	68bb      	ldr	r3, [r7, #8]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	371c      	adds	r7, #28
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	f003 0301 	and.w	r3, r3, #1
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b085      	sub	sp, #20
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009e9c:	f023 0307 	bic.w	r3, r3, #7
 8009ea0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009eb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	333c      	adds	r3, #60	@ 0x3c
 8009eda:	3304      	adds	r3, #4
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	4a26      	ldr	r2, [pc, #152]	@ (8009f7c <USB_EP0_OutStart+0xb8>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d90a      	bls.n	8009efe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ef8:	d101      	bne.n	8009efe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	e037      	b.n	8009f6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f04:	461a      	mov	r2, r3
 8009f06:	2300      	movs	r3, #0
 8009f08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f2c:	f043 0318 	orr.w	r3, r3, #24
 8009f30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f40:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009f44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009f46:	7afb      	ldrb	r3, [r7, #11]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d10f      	bne.n	8009f6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f52:	461a      	mov	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f66:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009f6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	371c      	adds	r7, #28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	4f54300a 	.word	0x4f54300a

08009f80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f98:	d901      	bls.n	8009f9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e01b      	b.n	8009fd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	daf2      	bge.n	8009f8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	f043 0201 	orr.w	r2, r3, #1
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009fc2:	d901      	bls.n	8009fc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e006      	b.n	8009fd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d0f0      	beq.n	8009fb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
	...

08009fe4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009ff0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009ff4:	f002 fc88 	bl	800c908 <USBD_static_malloc>
 8009ff8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d109      	bne.n	800a014 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	32b0      	adds	r2, #176	@ 0xb0
 800a00a:	2100      	movs	r1, #0
 800a00c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a010:	2302      	movs	r3, #2
 800a012:	e0d4      	b.n	800a1be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a014:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a018:	2100      	movs	r1, #0
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f004 fa15 	bl	800e44a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	32b0      	adds	r2, #176	@ 0xb0
 800a02a:	68f9      	ldr	r1, [r7, #12]
 800a02c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	32b0      	adds	r2, #176	@ 0xb0
 800a03a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	7c1b      	ldrb	r3, [r3, #16]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d138      	bne.n	800a0be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a04c:	4b5e      	ldr	r3, [pc, #376]	@ (800a1c8 <USBD_CDC_Init+0x1e4>)
 800a04e:	7819      	ldrb	r1, [r3, #0]
 800a050:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a054:	2202      	movs	r2, #2
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f002 fb33 	bl	800c6c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a05c:	4b5a      	ldr	r3, [pc, #360]	@ (800a1c8 <USBD_CDC_Init+0x1e4>)
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	f003 020f 	and.w	r2, r3, #15
 800a064:	6879      	ldr	r1, [r7, #4]
 800a066:	4613      	mov	r3, r2
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	4413      	add	r3, r2
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	440b      	add	r3, r1
 800a070:	3324      	adds	r3, #36	@ 0x24
 800a072:	2201      	movs	r2, #1
 800a074:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a076:	4b55      	ldr	r3, [pc, #340]	@ (800a1cc <USBD_CDC_Init+0x1e8>)
 800a078:	7819      	ldrb	r1, [r3, #0]
 800a07a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a07e:	2202      	movs	r2, #2
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f002 fb1e 	bl	800c6c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a086:	4b51      	ldr	r3, [pc, #324]	@ (800a1cc <USBD_CDC_Init+0x1e8>)
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	f003 020f 	and.w	r2, r3, #15
 800a08e:	6879      	ldr	r1, [r7, #4]
 800a090:	4613      	mov	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	440b      	add	r3, r1
 800a09a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a09e:	2201      	movs	r2, #1
 800a0a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a0a2:	4b4b      	ldr	r3, [pc, #300]	@ (800a1d0 <USBD_CDC_Init+0x1ec>)
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	f003 020f 	and.w	r2, r3, #15
 800a0aa:	6879      	ldr	r1, [r7, #4]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4413      	add	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	440b      	add	r3, r1
 800a0b6:	3326      	adds	r3, #38	@ 0x26
 800a0b8:	2210      	movs	r2, #16
 800a0ba:	801a      	strh	r2, [r3, #0]
 800a0bc:	e035      	b.n	800a12a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a0be:	4b42      	ldr	r3, [pc, #264]	@ (800a1c8 <USBD_CDC_Init+0x1e4>)
 800a0c0:	7819      	ldrb	r1, [r3, #0]
 800a0c2:	2340      	movs	r3, #64	@ 0x40
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f002 fafb 	bl	800c6c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a0cc:	4b3e      	ldr	r3, [pc, #248]	@ (800a1c8 <USBD_CDC_Init+0x1e4>)
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	f003 020f 	and.w	r2, r3, #15
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	440b      	add	r3, r1
 800a0e0:	3324      	adds	r3, #36	@ 0x24
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a0e6:	4b39      	ldr	r3, [pc, #228]	@ (800a1cc <USBD_CDC_Init+0x1e8>)
 800a0e8:	7819      	ldrb	r1, [r3, #0]
 800a0ea:	2340      	movs	r3, #64	@ 0x40
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f002 fae7 	bl	800c6c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a0f4:	4b35      	ldr	r3, [pc, #212]	@ (800a1cc <USBD_CDC_Init+0x1e8>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	f003 020f 	and.w	r2, r3, #15
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a10c:	2201      	movs	r2, #1
 800a10e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a110:	4b2f      	ldr	r3, [pc, #188]	@ (800a1d0 <USBD_CDC_Init+0x1ec>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	f003 020f 	and.w	r2, r3, #15
 800a118:	6879      	ldr	r1, [r7, #4]
 800a11a:	4613      	mov	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	440b      	add	r3, r1
 800a124:	3326      	adds	r3, #38	@ 0x26
 800a126:	2210      	movs	r2, #16
 800a128:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a12a:	4b29      	ldr	r3, [pc, #164]	@ (800a1d0 <USBD_CDC_Init+0x1ec>)
 800a12c:	7819      	ldrb	r1, [r3, #0]
 800a12e:	2308      	movs	r3, #8
 800a130:	2203      	movs	r2, #3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f002 fac5 	bl	800c6c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a138:	4b25      	ldr	r3, [pc, #148]	@ (800a1d0 <USBD_CDC_Init+0x1ec>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	f003 020f 	and.w	r2, r3, #15
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	4613      	mov	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	440b      	add	r3, r1
 800a14c:	3324      	adds	r3, #36	@ 0x24
 800a14e:	2201      	movs	r2, #1
 800a150:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	33b0      	adds	r3, #176	@ 0xb0
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a184:	2b00      	cmp	r3, #0
 800a186:	d101      	bne.n	800a18c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a188:	2302      	movs	r3, #2
 800a18a:	e018      	b.n	800a1be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	7c1b      	ldrb	r3, [r3, #16]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10a      	bne.n	800a1aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a194:	4b0d      	ldr	r3, [pc, #52]	@ (800a1cc <USBD_CDC_Init+0x1e8>)
 800a196:	7819      	ldrb	r1, [r3, #0]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a19e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f002 fb7c 	bl	800c8a0 <USBD_LL_PrepareReceive>
 800a1a8:	e008      	b.n	800a1bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1aa:	4b08      	ldr	r3, [pc, #32]	@ (800a1cc <USBD_CDC_Init+0x1e8>)
 800a1ac:	7819      	ldrb	r1, [r3, #0]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a1b4:	2340      	movs	r3, #64	@ 0x40
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f002 fb72 	bl	800c8a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	2000009f 	.word	0x2000009f
 800a1cc:	200000a0 	.word	0x200000a0
 800a1d0:	200000a1 	.word	0x200000a1

0800a1d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a1e0:	4b3a      	ldr	r3, [pc, #232]	@ (800a2cc <USBD_CDC_DeInit+0xf8>)
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f002 fa91 	bl	800c70e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a1ec:	4b37      	ldr	r3, [pc, #220]	@ (800a2cc <USBD_CDC_DeInit+0xf8>)
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	f003 020f 	and.w	r2, r3, #15
 800a1f4:	6879      	ldr	r1, [r7, #4]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	440b      	add	r3, r1
 800a200:	3324      	adds	r3, #36	@ 0x24
 800a202:	2200      	movs	r2, #0
 800a204:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a206:	4b32      	ldr	r3, [pc, #200]	@ (800a2d0 <USBD_CDC_DeInit+0xfc>)
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	4619      	mov	r1, r3
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f002 fa7e 	bl	800c70e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a212:	4b2f      	ldr	r3, [pc, #188]	@ (800a2d0 <USBD_CDC_DeInit+0xfc>)
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	f003 020f 	and.w	r2, r3, #15
 800a21a:	6879      	ldr	r1, [r7, #4]
 800a21c:	4613      	mov	r3, r2
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	4413      	add	r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	440b      	add	r3, r1
 800a226:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a22a:	2200      	movs	r2, #0
 800a22c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a22e:	4b29      	ldr	r3, [pc, #164]	@ (800a2d4 <USBD_CDC_DeInit+0x100>)
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f002 fa6a 	bl	800c70e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a23a:	4b26      	ldr	r3, [pc, #152]	@ (800a2d4 <USBD_CDC_DeInit+0x100>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	f003 020f 	and.w	r2, r3, #15
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	4613      	mov	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	440b      	add	r3, r1
 800a24e:	3324      	adds	r3, #36	@ 0x24
 800a250:	2200      	movs	r2, #0
 800a252:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a254:	4b1f      	ldr	r3, [pc, #124]	@ (800a2d4 <USBD_CDC_DeInit+0x100>)
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	f003 020f 	and.w	r2, r3, #15
 800a25c:	6879      	ldr	r1, [r7, #4]
 800a25e:	4613      	mov	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	440b      	add	r3, r1
 800a268:	3326      	adds	r3, #38	@ 0x26
 800a26a:	2200      	movs	r2, #0
 800a26c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	32b0      	adds	r2, #176	@ 0xb0
 800a278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d01f      	beq.n	800a2c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	33b0      	adds	r3, #176	@ 0xb0
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4413      	add	r3, r2
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	32b0      	adds	r2, #176	@ 0xb0
 800a29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f002 fb3e 	bl	800c924 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	32b0      	adds	r2, #176	@ 0xb0
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	2000009f 	.word	0x2000009f
 800a2d0:	200000a0 	.word	0x200000a0
 800a2d4:	200000a1 	.word	0x200000a1

0800a2d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	32b0      	adds	r2, #176	@ 0xb0
 800a2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d101      	bne.n	800a308 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a304:	2303      	movs	r3, #3
 800a306:	e0bf      	b.n	800a488 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a310:	2b00      	cmp	r3, #0
 800a312:	d050      	beq.n	800a3b6 <USBD_CDC_Setup+0xde>
 800a314:	2b20      	cmp	r3, #32
 800a316:	f040 80af 	bne.w	800a478 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	88db      	ldrh	r3, [r3, #6]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d03a      	beq.n	800a398 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	b25b      	sxtb	r3, r3
 800a328:	2b00      	cmp	r3, #0
 800a32a:	da1b      	bge.n	800a364 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	33b0      	adds	r3, #176	@ 0xb0
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4413      	add	r3, r2
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a342:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	88d2      	ldrh	r2, [r2, #6]
 800a348:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	88db      	ldrh	r3, [r3, #6]
 800a34e:	2b07      	cmp	r3, #7
 800a350:	bf28      	it	cs
 800a352:	2307      	movcs	r3, #7
 800a354:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	89fa      	ldrh	r2, [r7, #14]
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f001 fd87 	bl	800be70 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a362:	e090      	b.n	800a486 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	785a      	ldrb	r2, [r3, #1]
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	88db      	ldrh	r3, [r3, #6]
 800a372:	2b3f      	cmp	r3, #63	@ 0x3f
 800a374:	d803      	bhi.n	800a37e <USBD_CDC_Setup+0xa6>
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	88db      	ldrh	r3, [r3, #6]
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	e000      	b.n	800a380 <USBD_CDC_Setup+0xa8>
 800a37e:	2240      	movs	r2, #64	@ 0x40
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a386:	6939      	ldr	r1, [r7, #16]
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a38e:	461a      	mov	r2, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f001 fd99 	bl	800bec8 <USBD_CtlPrepareRx>
      break;
 800a396:	e076      	b.n	800a486 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	33b0      	adds	r3, #176	@ 0xb0
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4413      	add	r3, r2
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	7850      	ldrb	r0, [r2, #1]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	6839      	ldr	r1, [r7, #0]
 800a3b2:	4798      	blx	r3
      break;
 800a3b4:	e067      	b.n	800a486 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	785b      	ldrb	r3, [r3, #1]
 800a3ba:	2b0b      	cmp	r3, #11
 800a3bc:	d851      	bhi.n	800a462 <USBD_CDC_Setup+0x18a>
 800a3be:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c4 <USBD_CDC_Setup+0xec>)
 800a3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c4:	0800a3f5 	.word	0x0800a3f5
 800a3c8:	0800a471 	.word	0x0800a471
 800a3cc:	0800a463 	.word	0x0800a463
 800a3d0:	0800a463 	.word	0x0800a463
 800a3d4:	0800a463 	.word	0x0800a463
 800a3d8:	0800a463 	.word	0x0800a463
 800a3dc:	0800a463 	.word	0x0800a463
 800a3e0:	0800a463 	.word	0x0800a463
 800a3e4:	0800a463 	.word	0x0800a463
 800a3e8:	0800a463 	.word	0x0800a463
 800a3ec:	0800a41f 	.word	0x0800a41f
 800a3f0:	0800a449 	.word	0x0800a449
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b03      	cmp	r3, #3
 800a3fe:	d107      	bne.n	800a410 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a400:	f107 030a 	add.w	r3, r7, #10
 800a404:	2202      	movs	r2, #2
 800a406:	4619      	mov	r1, r3
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f001 fd31 	bl	800be70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a40e:	e032      	b.n	800a476 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f001 fcbb 	bl	800bd8e <USBD_CtlError>
            ret = USBD_FAIL;
 800a418:	2303      	movs	r3, #3
 800a41a:	75fb      	strb	r3, [r7, #23]
          break;
 800a41c:	e02b      	b.n	800a476 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b03      	cmp	r3, #3
 800a428:	d107      	bne.n	800a43a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a42a:	f107 030d 	add.w	r3, r7, #13
 800a42e:	2201      	movs	r2, #1
 800a430:	4619      	mov	r1, r3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f001 fd1c 	bl	800be70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a438:	e01d      	b.n	800a476 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f001 fca6 	bl	800bd8e <USBD_CtlError>
            ret = USBD_FAIL;
 800a442:	2303      	movs	r3, #3
 800a444:	75fb      	strb	r3, [r7, #23]
          break;
 800a446:	e016      	b.n	800a476 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	2b03      	cmp	r3, #3
 800a452:	d00f      	beq.n	800a474 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f001 fc99 	bl	800bd8e <USBD_CtlError>
            ret = USBD_FAIL;
 800a45c:	2303      	movs	r3, #3
 800a45e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a460:	e008      	b.n	800a474 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f001 fc92 	bl	800bd8e <USBD_CtlError>
          ret = USBD_FAIL;
 800a46a:	2303      	movs	r3, #3
 800a46c:	75fb      	strb	r3, [r7, #23]
          break;
 800a46e:	e002      	b.n	800a476 <USBD_CDC_Setup+0x19e>
          break;
 800a470:	bf00      	nop
 800a472:	e008      	b.n	800a486 <USBD_CDC_Setup+0x1ae>
          break;
 800a474:	bf00      	nop
      }
      break;
 800a476:	e006      	b.n	800a486 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f001 fc87 	bl	800bd8e <USBD_CtlError>
      ret = USBD_FAIL;
 800a480:	2303      	movs	r3, #3
 800a482:	75fb      	strb	r3, [r7, #23]
      break;
 800a484:	bf00      	nop
  }

  return (uint8_t)ret;
 800a486:	7dfb      	ldrb	r3, [r7, #23]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	460b      	mov	r3, r1
 800a49a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a4a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	32b0      	adds	r2, #176	@ 0xb0
 800a4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e065      	b.n	800a586 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	32b0      	adds	r2, #176	@ 0xb0
 800a4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a4ca:	78fb      	ldrb	r3, [r7, #3]
 800a4cc:	f003 020f 	and.w	r2, r3, #15
 800a4d0:	6879      	ldr	r1, [r7, #4]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4413      	add	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	440b      	add	r3, r1
 800a4dc:	3318      	adds	r3, #24
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d02f      	beq.n	800a544 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a4e4:	78fb      	ldrb	r3, [r7, #3]
 800a4e6:	f003 020f 	and.w	r2, r3, #15
 800a4ea:	6879      	ldr	r1, [r7, #4]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	440b      	add	r3, r1
 800a4f6:	3318      	adds	r3, #24
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	78fb      	ldrb	r3, [r7, #3]
 800a4fc:	f003 010f 	and.w	r1, r3, #15
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	460b      	mov	r3, r1
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	440b      	add	r3, r1
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4403      	add	r3, r0
 800a50c:	331c      	adds	r3, #28
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	fbb2 f1f3 	udiv	r1, r2, r3
 800a514:	fb01 f303 	mul.w	r3, r1, r3
 800a518:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d112      	bne.n	800a544 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a51e:	78fb      	ldrb	r3, [r7, #3]
 800a520:	f003 020f 	and.w	r2, r3, #15
 800a524:	6879      	ldr	r1, [r7, #4]
 800a526:	4613      	mov	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4413      	add	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	440b      	add	r3, r1
 800a530:	3318      	adds	r3, #24
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a536:	78f9      	ldrb	r1, [r7, #3]
 800a538:	2300      	movs	r3, #0
 800a53a:	2200      	movs	r2, #0
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f002 f98e 	bl	800c85e <USBD_LL_Transmit>
 800a542:	e01f      	b.n	800a584 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	2200      	movs	r2, #0
 800a548:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	33b0      	adds	r3, #176	@ 0xb0
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d010      	beq.n	800a584 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	33b0      	adds	r3, #176	@ 0xb0
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4413      	add	r3, r2
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a580:	78fa      	ldrb	r2, [r7, #3]
 800a582:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b084      	sub	sp, #16
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	460b      	mov	r3, r1
 800a598:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	32b0      	adds	r2, #176	@ 0xb0
 800a5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	32b0      	adds	r2, #176	@ 0xb0
 800a5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d101      	bne.n	800a5c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	e01a      	b.n	800a5f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f002 f98c 	bl	800c8e2 <USBD_LL_GetRxDataSize>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	33b0      	adds	r3, #176	@ 0xb0
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4413      	add	r3, r2
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b084      	sub	sp, #16
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	32b0      	adds	r2, #176	@ 0xb0
 800a610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a614:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e024      	b.n	800a66a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	33b0      	adds	r3, #176	@ 0xb0
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4413      	add	r3, r2
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d019      	beq.n	800a668 <USBD_CDC_EP0_RxReady+0x6a>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a63a:	2bff      	cmp	r3, #255	@ 0xff
 800a63c:	d014      	beq.n	800a668 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	33b0      	adds	r3, #176	@ 0xb0
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a656:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a65e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	22ff      	movs	r2, #255	@ 0xff
 800a664:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a67c:	2182      	movs	r1, #130	@ 0x82
 800a67e:	4818      	ldr	r0, [pc, #96]	@ (800a6e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a680:	f000 fd4f 	bl	800b122 <USBD_GetEpDesc>
 800a684:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a686:	2101      	movs	r1, #1
 800a688:	4815      	ldr	r0, [pc, #84]	@ (800a6e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a68a:	f000 fd4a 	bl	800b122 <USBD_GetEpDesc>
 800a68e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a690:	2181      	movs	r1, #129	@ 0x81
 800a692:	4813      	ldr	r0, [pc, #76]	@ (800a6e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a694:	f000 fd45 	bl	800b122 <USBD_GetEpDesc>
 800a698:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d002      	beq.n	800a6a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	2210      	movs	r2, #16
 800a6a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d006      	beq.n	800a6ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a6b4:	711a      	strb	r2, [r3, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d006      	beq.n	800a6ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a6c8:	711a      	strb	r2, [r3, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2243      	movs	r2, #67	@ 0x43
 800a6d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a6d4:	4b02      	ldr	r3, [pc, #8]	@ (800a6e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	2000005c 	.word	0x2000005c

0800a6e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a6ec:	2182      	movs	r1, #130	@ 0x82
 800a6ee:	4818      	ldr	r0, [pc, #96]	@ (800a750 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6f0:	f000 fd17 	bl	800b122 <USBD_GetEpDesc>
 800a6f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	4815      	ldr	r0, [pc, #84]	@ (800a750 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a6fa:	f000 fd12 	bl	800b122 <USBD_GetEpDesc>
 800a6fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a700:	2181      	movs	r1, #129	@ 0x81
 800a702:	4813      	ldr	r0, [pc, #76]	@ (800a750 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a704:	f000 fd0d 	bl	800b122 <USBD_GetEpDesc>
 800a708:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	2210      	movs	r2, #16
 800a714:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d006      	beq.n	800a72a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	2200      	movs	r2, #0
 800a720:	711a      	strb	r2, [r3, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f042 0202 	orr.w	r2, r2, #2
 800a728:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d006      	beq.n	800a73e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	711a      	strb	r2, [r3, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	f042 0202 	orr.w	r2, r2, #2
 800a73c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2243      	movs	r2, #67	@ 0x43
 800a742:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a744:	4b02      	ldr	r3, [pc, #8]	@ (800a750 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	2000005c 	.word	0x2000005c

0800a754 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a75c:	2182      	movs	r1, #130	@ 0x82
 800a75e:	4818      	ldr	r0, [pc, #96]	@ (800a7c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a760:	f000 fcdf 	bl	800b122 <USBD_GetEpDesc>
 800a764:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a766:	2101      	movs	r1, #1
 800a768:	4815      	ldr	r0, [pc, #84]	@ (800a7c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a76a:	f000 fcda 	bl	800b122 <USBD_GetEpDesc>
 800a76e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a770:	2181      	movs	r1, #129	@ 0x81
 800a772:	4813      	ldr	r0, [pc, #76]	@ (800a7c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a774:	f000 fcd5 	bl	800b122 <USBD_GetEpDesc>
 800a778:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	2210      	movs	r2, #16
 800a784:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d006      	beq.n	800a79a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	2200      	movs	r2, #0
 800a790:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a794:	711a      	strb	r2, [r3, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d006      	beq.n	800a7ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7a8:	711a      	strb	r2, [r3, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2243      	movs	r2, #67	@ 0x43
 800a7b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a7b4:	4b02      	ldr	r3, [pc, #8]	@ (800a7c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	2000005c 	.word	0x2000005c

0800a7c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	220a      	movs	r2, #10
 800a7d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a7d2:	4b03      	ldr	r3, [pc, #12]	@ (800a7e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	20000018 	.word	0x20000018

0800a7e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d101      	bne.n	800a7f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e009      	b.n	800a80c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	33b0      	adds	r3, #176	@ 0xb0
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	4413      	add	r3, r2
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a818:	b480      	push	{r7}
 800a81a:	b087      	sub	sp, #28
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	32b0      	adds	r2, #176	@ 0xb0
 800a82e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a832:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a83a:	2303      	movs	r3, #3
 800a83c:	e008      	b.n	800a850 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	371c      	adds	r7, #28
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	32b0      	adds	r2, #176	@ 0xb0
 800a870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a874:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d101      	bne.n	800a880 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e004      	b.n	800a88a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
	...

0800a898 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	32b0      	adds	r2, #176	@ 0xb0
 800a8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e025      	b.n	800a90a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d11f      	bne.n	800a908 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a8d0:	4b10      	ldr	r3, [pc, #64]	@ (800a914 <USBD_CDC_TransmitPacket+0x7c>)
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	f003 020f 	and.w	r2, r3, #15
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4403      	add	r3, r0
 800a8ea:	3318      	adds	r3, #24
 800a8ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a8ee:	4b09      	ldr	r3, [pc, #36]	@ (800a914 <USBD_CDC_TransmitPacket+0x7c>)
 800a8f0:	7819      	ldrb	r1, [r3, #0]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f001 ffad 	bl	800c85e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a908:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	2000009f 	.word	0x2000009f

0800a918 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	32b0      	adds	r2, #176	@ 0xb0
 800a92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	32b0      	adds	r2, #176	@ 0xb0
 800a93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a942:	2303      	movs	r3, #3
 800a944:	e018      	b.n	800a978 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	7c1b      	ldrb	r3, [r3, #16]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10a      	bne.n	800a964 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a94e:	4b0c      	ldr	r3, [pc, #48]	@ (800a980 <USBD_CDC_ReceivePacket+0x68>)
 800a950:	7819      	ldrb	r1, [r3, #0]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a958:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f001 ff9f 	bl	800c8a0 <USBD_LL_PrepareReceive>
 800a962:	e008      	b.n	800a976 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a964:	4b06      	ldr	r3, [pc, #24]	@ (800a980 <USBD_CDC_ReceivePacket+0x68>)
 800a966:	7819      	ldrb	r1, [r3, #0]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a96e:	2340      	movs	r3, #64	@ 0x40
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 ff95 	bl	800c8a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	200000a0 	.word	0x200000a0

0800a984 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	4613      	mov	r3, r2
 800a990:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a998:	2303      	movs	r3, #3
 800a99a:	e01f      	b.n	800a9dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	79fa      	ldrb	r2, [r7, #7]
 800a9ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f001 fe0f 	bl	800c5f4 <USBD_LL_Init>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a9da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3718      	adds	r7, #24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d101      	bne.n	800a9fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e025      	b.n	800aa48 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	32ae      	adds	r2, #174	@ 0xae
 800aa0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00f      	beq.n	800aa38 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	32ae      	adds	r2, #174	@ 0xae
 800aa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa28:	f107 020e 	add.w	r2, r7, #14
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	4798      	blx	r3
 800aa30:	4602      	mov	r2, r0
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800aa3e:	1c5a      	adds	r2, r3, #1
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f001 fe17 	bl	800c68c <USBD_LL_Start>
 800aa5e:	4603      	mov	r3, r0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa70:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	370c      	adds	r7, #12
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b084      	sub	sp, #16
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	460b      	mov	r3, r1
 800aa88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d009      	beq.n	800aaac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	78fa      	ldrb	r2, [r7, #3]
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	4798      	blx	r3
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b084      	sub	sp, #16
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	460b      	mov	r3, r1
 800aac0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	78fa      	ldrb	r2, [r7, #3]
 800aad0:	4611      	mov	r1, r2
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	4798      	blx	r3
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d001      	beq.n	800aae0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aadc:	2303      	movs	r3, #3
 800aade:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b084      	sub	sp, #16
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f001 f90c 	bl	800bd1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ab10:	461a      	mov	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ab1e:	f003 031f 	and.w	r3, r3, #31
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d01a      	beq.n	800ab5c <USBD_LL_SetupStage+0x72>
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d822      	bhi.n	800ab70 <USBD_LL_SetupStage+0x86>
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d002      	beq.n	800ab34 <USBD_LL_SetupStage+0x4a>
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d00a      	beq.n	800ab48 <USBD_LL_SetupStage+0x5e>
 800ab32:	e01d      	b.n	800ab70 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fb63 	bl	800b208 <USBD_StdDevReq>
 800ab42:	4603      	mov	r3, r0
 800ab44:	73fb      	strb	r3, [r7, #15]
      break;
 800ab46:	e020      	b.n	800ab8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fbcb 	bl	800b2ec <USBD_StdItfReq>
 800ab56:	4603      	mov	r3, r0
 800ab58:	73fb      	strb	r3, [r7, #15]
      break;
 800ab5a:	e016      	b.n	800ab8a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ab62:	4619      	mov	r1, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fc2d 	bl	800b3c4 <USBD_StdEPReq>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab6e:	e00c      	b.n	800ab8a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ab76:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f001 fde4 	bl	800c74c <USBD_LL_StallEP>
 800ab84:	4603      	mov	r3, r0
 800ab86:	73fb      	strb	r3, [r7, #15]
      break;
 800ab88:	bf00      	nop
  }

  return ret;
 800ab8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	607a      	str	r2, [r7, #4]
 800aba0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800aba6:	7afb      	ldrb	r3, [r7, #11]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d16e      	bne.n	800ac8a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800abb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800abba:	2b03      	cmp	r3, #3
 800abbc:	f040 8098 	bne.w	800acf0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	689a      	ldr	r2, [r3, #8]
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d913      	bls.n	800abf4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	689a      	ldr	r2, [r3, #8]
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	1ad2      	subs	r2, r2, r3
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	4293      	cmp	r3, r2
 800abe4:	bf28      	it	cs
 800abe6:	4613      	movcs	r3, r2
 800abe8:	461a      	mov	r2, r3
 800abea:	6879      	ldr	r1, [r7, #4]
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f001 f988 	bl	800bf02 <USBD_CtlContinueRx>
 800abf2:	e07d      	b.n	800acf0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800abfa:	f003 031f 	and.w	r3, r3, #31
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d014      	beq.n	800ac2c <USBD_LL_DataOutStage+0x98>
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	d81d      	bhi.n	800ac42 <USBD_LL_DataOutStage+0xae>
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <USBD_LL_DataOutStage+0x7c>
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d003      	beq.n	800ac16 <USBD_LL_DataOutStage+0x82>
 800ac0e:	e018      	b.n	800ac42 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ac10:	2300      	movs	r3, #0
 800ac12:	75bb      	strb	r3, [r7, #22]
            break;
 800ac14:	e018      	b.n	800ac48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	4619      	mov	r1, r3
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f000 fa64 	bl	800b0ee <USBD_CoreFindIF>
 800ac26:	4603      	mov	r3, r0
 800ac28:	75bb      	strb	r3, [r7, #22]
            break;
 800ac2a:	e00d      	b.n	800ac48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	4619      	mov	r1, r3
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f000 fa66 	bl	800b108 <USBD_CoreFindEP>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	75bb      	strb	r3, [r7, #22]
            break;
 800ac40:	e002      	b.n	800ac48 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ac42:	2300      	movs	r3, #0
 800ac44:	75bb      	strb	r3, [r7, #22]
            break;
 800ac46:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ac48:	7dbb      	ldrb	r3, [r7, #22]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d119      	bne.n	800ac82 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	d113      	bne.n	800ac82 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ac5a:	7dba      	ldrb	r2, [r7, #22]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	32ae      	adds	r2, #174	@ 0xae
 800ac60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00b      	beq.n	800ac82 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ac6a:	7dba      	ldrb	r2, [r7, #22]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ac72:	7dba      	ldrb	r2, [r7, #22]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	32ae      	adds	r2, #174	@ 0xae
 800ac78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f001 f94e 	bl	800bf24 <USBD_CtlSendStatus>
 800ac88:	e032      	b.n	800acf0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ac8a:	7afb      	ldrb	r3, [r7, #11]
 800ac8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	4619      	mov	r1, r3
 800ac94:	68f8      	ldr	r0, [r7, #12]
 800ac96:	f000 fa37 	bl	800b108 <USBD_CoreFindEP>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac9e:	7dbb      	ldrb	r3, [r7, #22]
 800aca0:	2bff      	cmp	r3, #255	@ 0xff
 800aca2:	d025      	beq.n	800acf0 <USBD_LL_DataOutStage+0x15c>
 800aca4:	7dbb      	ldrb	r3, [r7, #22]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d122      	bne.n	800acf0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	2b03      	cmp	r3, #3
 800acb4:	d117      	bne.n	800ace6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800acb6:	7dba      	ldrb	r2, [r7, #22]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	32ae      	adds	r2, #174	@ 0xae
 800acbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00f      	beq.n	800ace6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800acc6:	7dba      	ldrb	r2, [r7, #22]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800acce:	7dba      	ldrb	r2, [r7, #22]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	32ae      	adds	r2, #174	@ 0xae
 800acd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd8:	699b      	ldr	r3, [r3, #24]
 800acda:	7afa      	ldrb	r2, [r7, #11]
 800acdc:	4611      	mov	r1, r2
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	4798      	blx	r3
 800ace2:	4603      	mov	r3, r0
 800ace4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ace6:	7dfb      	ldrb	r3, [r7, #23]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d001      	beq.n	800acf0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800acec:	7dfb      	ldrb	r3, [r7, #23]
 800acee:	e000      	b.n	800acf2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3718      	adds	r7, #24
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b086      	sub	sp, #24
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	60f8      	str	r0, [r7, #12]
 800ad02:	460b      	mov	r3, r1
 800ad04:	607a      	str	r2, [r7, #4]
 800ad06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ad08:	7afb      	ldrb	r3, [r7, #11]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d16f      	bne.n	800adee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	3314      	adds	r3, #20
 800ad12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d15a      	bne.n	800add4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	689a      	ldr	r2, [r3, #8]
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d914      	bls.n	800ad54 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	689a      	ldr	r2, [r3, #8]
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	1ad2      	subs	r2, r2, r3
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	6879      	ldr	r1, [r7, #4]
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f001 f8b0 	bl	800bea6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad46:	2300      	movs	r3, #0
 800ad48:	2200      	movs	r2, #0
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f001 fda7 	bl	800c8a0 <USBD_LL_PrepareReceive>
 800ad52:	e03f      	b.n	800add4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	68da      	ldr	r2, [r3, #12]
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d11c      	bne.n	800ad9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d316      	bcc.n	800ad9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d20f      	bcs.n	800ad9a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f001 f891 	bl	800bea6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2100      	movs	r1, #0
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f001 fd84 	bl	800c8a0 <USBD_LL_PrepareReceive>
 800ad98:	e01c      	b.n	800add4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	2b03      	cmp	r3, #3
 800ada4:	d10f      	bne.n	800adc6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d009      	beq.n	800adc6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800adc6:	2180      	movs	r1, #128	@ 0x80
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f001 fcbf 	bl	800c74c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f001 f8bb 	bl	800bf4a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d03a      	beq.n	800ae54 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f7ff fe42 	bl	800aa68 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800adec:	e032      	b.n	800ae54 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800adee:	7afb      	ldrb	r3, [r7, #11]
 800adf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	4619      	mov	r1, r3
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f000 f985 	bl	800b108 <USBD_CoreFindEP>
 800adfe:	4603      	mov	r3, r0
 800ae00:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae02:	7dfb      	ldrb	r3, [r7, #23]
 800ae04:	2bff      	cmp	r3, #255	@ 0xff
 800ae06:	d025      	beq.n	800ae54 <USBD_LL_DataInStage+0x15a>
 800ae08:	7dfb      	ldrb	r3, [r7, #23]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d122      	bne.n	800ae54 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	d11c      	bne.n	800ae54 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ae1a:	7dfa      	ldrb	r2, [r7, #23]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	32ae      	adds	r2, #174	@ 0xae
 800ae20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae24:	695b      	ldr	r3, [r3, #20]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d014      	beq.n	800ae54 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ae2a:	7dfa      	ldrb	r2, [r7, #23]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ae32:	7dfa      	ldrb	r2, [r7, #23]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	32ae      	adds	r2, #174	@ 0xae
 800ae38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae3c:	695b      	ldr	r3, [r3, #20]
 800ae3e:	7afa      	ldrb	r2, [r7, #11]
 800ae40:	4611      	mov	r1, r2
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	4798      	blx	r3
 800ae46:	4603      	mov	r3, r0
 800ae48:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ae4a:	7dbb      	ldrb	r3, [r7, #22]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ae50:	7dbb      	ldrb	r3, [r7, #22]
 800ae52:	e000      	b.n	800ae56 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3718      	adds	r7, #24
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b084      	sub	sp, #16
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae66:	2300      	movs	r3, #0
 800ae68:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d014      	beq.n	800aec4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00e      	beq.n	800aec4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	6852      	ldr	r2, [r2, #4]
 800aeb2:	b2d2      	uxtb	r2, r2
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	4798      	blx	r3
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aec0:	2303      	movs	r3, #3
 800aec2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aec4:	2340      	movs	r3, #64	@ 0x40
 800aec6:	2200      	movs	r2, #0
 800aec8:	2100      	movs	r1, #0
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f001 fbf9 	bl	800c6c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2240      	movs	r2, #64	@ 0x40
 800aedc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aee0:	2340      	movs	r3, #64	@ 0x40
 800aee2:	2200      	movs	r2, #0
 800aee4:	2180      	movs	r1, #128	@ 0x80
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f001 fbeb 	bl	800c6c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2240      	movs	r2, #64	@ 0x40
 800aef6:	621a      	str	r2, [r3, #32]

  return ret;
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af02:	b480      	push	{r7}
 800af04:	b083      	sub	sp, #12
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	460b      	mov	r3, r1
 800af0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	78fa      	ldrb	r2, [r7, #3]
 800af12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af22:	b480      	push	{r7}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b04      	cmp	r3, #4
 800af34:	d006      	beq.n	800af44 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2204      	movs	r2, #4
 800af48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af5a:	b480      	push	{r7}
 800af5c:	b083      	sub	sp, #12
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	2b04      	cmp	r3, #4
 800af6c:	d106      	bne.n	800af7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800af74:	b2da      	uxtb	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b082      	sub	sp, #8
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	2b03      	cmp	r3, #3
 800af9c:	d110      	bne.n	800afc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00b      	beq.n	800afc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afae:	69db      	ldr	r3, [r3, #28]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d005      	beq.n	800afc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afba:	69db      	ldr	r3, [r3, #28]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3708      	adds	r7, #8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b082      	sub	sp, #8
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	460b      	mov	r3, r1
 800afd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	32ae      	adds	r2, #174	@ 0xae
 800afe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800afe8:	2303      	movs	r3, #3
 800afea:	e01c      	b.n	800b026 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b03      	cmp	r3, #3
 800aff6:	d115      	bne.n	800b024 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	32ae      	adds	r2, #174	@ 0xae
 800b002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b006:	6a1b      	ldr	r3, [r3, #32]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00b      	beq.n	800b024 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	32ae      	adds	r2, #174	@ 0xae
 800b016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01a:	6a1b      	ldr	r3, [r3, #32]
 800b01c:	78fa      	ldrb	r2, [r7, #3]
 800b01e:	4611      	mov	r1, r2
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b082      	sub	sp, #8
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	460b      	mov	r3, r1
 800b038:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	32ae      	adds	r2, #174	@ 0xae
 800b044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b04c:	2303      	movs	r3, #3
 800b04e:	e01c      	b.n	800b08a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d115      	bne.n	800b088 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	32ae      	adds	r2, #174	@ 0xae
 800b066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00b      	beq.n	800b088 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	32ae      	adds	r2, #174	@ 0xae
 800b07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b080:	78fa      	ldrb	r2, [r7, #3]
 800b082:	4611      	mov	r1, r2
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b092:	b480      	push	{r7}
 800b094:	b083      	sub	sp, #12
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00e      	beq.n	800b0e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	6852      	ldr	r2, [r2, #4]
 800b0d2:	b2d2      	uxtb	r2, r2
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	4798      	blx	r3
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b083      	sub	sp, #12
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b0fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	460b      	mov	r3, r1
 800b112:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b114:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b116:	4618      	mov	r0, r3
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b086      	sub	sp, #24
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	460b      	mov	r3, r1
 800b12c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b136:	2300      	movs	r3, #0
 800b138:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	885b      	ldrh	r3, [r3, #2]
 800b13e:	b29b      	uxth	r3, r3
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	7812      	ldrb	r2, [r2, #0]
 800b144:	4293      	cmp	r3, r2
 800b146:	d91f      	bls.n	800b188 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b14e:	e013      	b.n	800b178 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b150:	f107 030a 	add.w	r3, r7, #10
 800b154:	4619      	mov	r1, r3
 800b156:	6978      	ldr	r0, [r7, #20]
 800b158:	f000 f81b 	bl	800b192 <USBD_GetNextDesc>
 800b15c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	785b      	ldrb	r3, [r3, #1]
 800b162:	2b05      	cmp	r3, #5
 800b164:	d108      	bne.n	800b178 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	789b      	ldrb	r3, [r3, #2]
 800b16e:	78fa      	ldrb	r2, [r7, #3]
 800b170:	429a      	cmp	r2, r3
 800b172:	d008      	beq.n	800b186 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b174:	2300      	movs	r3, #0
 800b176:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	885b      	ldrh	r3, [r3, #2]
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	897b      	ldrh	r3, [r7, #10]
 800b180:	429a      	cmp	r2, r3
 800b182:	d8e5      	bhi.n	800b150 <USBD_GetEpDesc+0x2e>
 800b184:	e000      	b.n	800b188 <USBD_GetEpDesc+0x66>
          break;
 800b186:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b188:	693b      	ldr	r3, [r7, #16]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b192:	b480      	push	{r7}
 800b194:	b085      	sub	sp, #20
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	7812      	ldrb	r2, [r2, #0]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b087      	sub	sp, #28
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b1e8:	8a3b      	ldrh	r3, [r7, #16]
 800b1ea:	021b      	lsls	r3, r3, #8
 800b1ec:	b21a      	sxth	r2, r3
 800b1ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	b21b      	sxth	r3, r3
 800b1f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b1f8:	89fb      	ldrh	r3, [r7, #14]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	371c      	adds	r7, #28
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
	...

0800b208 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b21e:	2b40      	cmp	r3, #64	@ 0x40
 800b220:	d005      	beq.n	800b22e <USBD_StdDevReq+0x26>
 800b222:	2b40      	cmp	r3, #64	@ 0x40
 800b224:	d857      	bhi.n	800b2d6 <USBD_StdDevReq+0xce>
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00f      	beq.n	800b24a <USBD_StdDevReq+0x42>
 800b22a:	2b20      	cmp	r3, #32
 800b22c:	d153      	bne.n	800b2d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	32ae      	adds	r2, #174	@ 0xae
 800b238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	4798      	blx	r3
 800b244:	4603      	mov	r3, r0
 800b246:	73fb      	strb	r3, [r7, #15]
      break;
 800b248:	e04a      	b.n	800b2e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	785b      	ldrb	r3, [r3, #1]
 800b24e:	2b09      	cmp	r3, #9
 800b250:	d83b      	bhi.n	800b2ca <USBD_StdDevReq+0xc2>
 800b252:	a201      	add	r2, pc, #4	@ (adr r2, 800b258 <USBD_StdDevReq+0x50>)
 800b254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b258:	0800b2ad 	.word	0x0800b2ad
 800b25c:	0800b2c1 	.word	0x0800b2c1
 800b260:	0800b2cb 	.word	0x0800b2cb
 800b264:	0800b2b7 	.word	0x0800b2b7
 800b268:	0800b2cb 	.word	0x0800b2cb
 800b26c:	0800b28b 	.word	0x0800b28b
 800b270:	0800b281 	.word	0x0800b281
 800b274:	0800b2cb 	.word	0x0800b2cb
 800b278:	0800b2a3 	.word	0x0800b2a3
 800b27c:	0800b295 	.word	0x0800b295
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fa3c 	bl	800b700 <USBD_GetDescriptor>
          break;
 800b288:	e024      	b.n	800b2d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b28a:	6839      	ldr	r1, [r7, #0]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fba1 	bl	800b9d4 <USBD_SetAddress>
          break;
 800b292:	e01f      	b.n	800b2d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fbe0 	bl	800ba5c <USBD_SetConfig>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73fb      	strb	r3, [r7, #15]
          break;
 800b2a0:	e018      	b.n	800b2d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b2a2:	6839      	ldr	r1, [r7, #0]
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 fc83 	bl	800bbb0 <USBD_GetConfig>
          break;
 800b2aa:	e013      	b.n	800b2d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b2ac:	6839      	ldr	r1, [r7, #0]
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 fcb4 	bl	800bc1c <USBD_GetStatus>
          break;
 800b2b4:	e00e      	b.n	800b2d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b2b6:	6839      	ldr	r1, [r7, #0]
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fce3 	bl	800bc84 <USBD_SetFeature>
          break;
 800b2be:	e009      	b.n	800b2d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 fd07 	bl	800bcd6 <USBD_ClrFeature>
          break;
 800b2c8:	e004      	b.n	800b2d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 fd5e 	bl	800bd8e <USBD_CtlError>
          break;
 800b2d2:	bf00      	nop
      }
      break;
 800b2d4:	e004      	b.n	800b2e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b2d6:	6839      	ldr	r1, [r7, #0]
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 fd58 	bl	800bd8e <USBD_CtlError>
      break;
 800b2de:	bf00      	nop
  }

  return ret;
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop

0800b2ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b302:	2b40      	cmp	r3, #64	@ 0x40
 800b304:	d005      	beq.n	800b312 <USBD_StdItfReq+0x26>
 800b306:	2b40      	cmp	r3, #64	@ 0x40
 800b308:	d852      	bhi.n	800b3b0 <USBD_StdItfReq+0xc4>
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <USBD_StdItfReq+0x26>
 800b30e:	2b20      	cmp	r3, #32
 800b310:	d14e      	bne.n	800b3b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	3b01      	subs	r3, #1
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d840      	bhi.n	800b3a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	889b      	ldrh	r3, [r3, #4]
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b01      	cmp	r3, #1
 800b328:	d836      	bhi.n	800b398 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	889b      	ldrh	r3, [r3, #4]
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	4619      	mov	r1, r3
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7ff fedb 	bl	800b0ee <USBD_CoreFindIF>
 800b338:	4603      	mov	r3, r0
 800b33a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b33c:	7bbb      	ldrb	r3, [r7, #14]
 800b33e:	2bff      	cmp	r3, #255	@ 0xff
 800b340:	d01d      	beq.n	800b37e <USBD_StdItfReq+0x92>
 800b342:	7bbb      	ldrb	r3, [r7, #14]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d11a      	bne.n	800b37e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b348:	7bba      	ldrb	r2, [r7, #14]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	32ae      	adds	r2, #174	@ 0xae
 800b34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00f      	beq.n	800b378 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b358:	7bba      	ldrb	r2, [r7, #14]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b360:	7bba      	ldrb	r2, [r7, #14]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	32ae      	adds	r2, #174	@ 0xae
 800b366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	6839      	ldr	r1, [r7, #0]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	4798      	blx	r3
 800b372:	4603      	mov	r3, r0
 800b374:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b376:	e004      	b.n	800b382 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b378:	2303      	movs	r3, #3
 800b37a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b37c:	e001      	b.n	800b382 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b37e:	2303      	movs	r3, #3
 800b380:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	88db      	ldrh	r3, [r3, #6]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d110      	bne.n	800b3ac <USBD_StdItfReq+0xc0>
 800b38a:	7bfb      	ldrb	r3, [r7, #15]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d10d      	bne.n	800b3ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fdc7 	bl	800bf24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b396:	e009      	b.n	800b3ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b398:	6839      	ldr	r1, [r7, #0]
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 fcf7 	bl	800bd8e <USBD_CtlError>
          break;
 800b3a0:	e004      	b.n	800b3ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fcf2 	bl	800bd8e <USBD_CtlError>
          break;
 800b3aa:	e000      	b.n	800b3ae <USBD_StdItfReq+0xc2>
          break;
 800b3ac:	bf00      	nop
      }
      break;
 800b3ae:	e004      	b.n	800b3ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fceb 	bl	800bd8e <USBD_CtlError>
      break;
 800b3b8:	bf00      	nop
  }

  return ret;
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	889b      	ldrh	r3, [r3, #4]
 800b3d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b3e0:	2b40      	cmp	r3, #64	@ 0x40
 800b3e2:	d007      	beq.n	800b3f4 <USBD_StdEPReq+0x30>
 800b3e4:	2b40      	cmp	r3, #64	@ 0x40
 800b3e6:	f200 817f 	bhi.w	800b6e8 <USBD_StdEPReq+0x324>
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d02a      	beq.n	800b444 <USBD_StdEPReq+0x80>
 800b3ee:	2b20      	cmp	r3, #32
 800b3f0:	f040 817a 	bne.w	800b6e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b3f4:	7bbb      	ldrb	r3, [r7, #14]
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f7ff fe85 	bl	800b108 <USBD_CoreFindEP>
 800b3fe:	4603      	mov	r3, r0
 800b400:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b402:	7b7b      	ldrb	r3, [r7, #13]
 800b404:	2bff      	cmp	r3, #255	@ 0xff
 800b406:	f000 8174 	beq.w	800b6f2 <USBD_StdEPReq+0x32e>
 800b40a:	7b7b      	ldrb	r3, [r7, #13]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f040 8170 	bne.w	800b6f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b412:	7b7a      	ldrb	r2, [r7, #13]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b41a:	7b7a      	ldrb	r2, [r7, #13]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	32ae      	adds	r2, #174	@ 0xae
 800b420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	2b00      	cmp	r3, #0
 800b428:	f000 8163 	beq.w	800b6f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b42c:	7b7a      	ldrb	r2, [r7, #13]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	32ae      	adds	r2, #174	@ 0xae
 800b432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	4798      	blx	r3
 800b43e:	4603      	mov	r3, r0
 800b440:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b442:	e156      	b.n	800b6f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	785b      	ldrb	r3, [r3, #1]
 800b448:	2b03      	cmp	r3, #3
 800b44a:	d008      	beq.n	800b45e <USBD_StdEPReq+0x9a>
 800b44c:	2b03      	cmp	r3, #3
 800b44e:	f300 8145 	bgt.w	800b6dc <USBD_StdEPReq+0x318>
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 809b 	beq.w	800b58e <USBD_StdEPReq+0x1ca>
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d03c      	beq.n	800b4d6 <USBD_StdEPReq+0x112>
 800b45c:	e13e      	b.n	800b6dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b02      	cmp	r3, #2
 800b468:	d002      	beq.n	800b470 <USBD_StdEPReq+0xac>
 800b46a:	2b03      	cmp	r3, #3
 800b46c:	d016      	beq.n	800b49c <USBD_StdEPReq+0xd8>
 800b46e:	e02c      	b.n	800b4ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b470:	7bbb      	ldrb	r3, [r7, #14]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00d      	beq.n	800b492 <USBD_StdEPReq+0xce>
 800b476:	7bbb      	ldrb	r3, [r7, #14]
 800b478:	2b80      	cmp	r3, #128	@ 0x80
 800b47a:	d00a      	beq.n	800b492 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b47c:	7bbb      	ldrb	r3, [r7, #14]
 800b47e:	4619      	mov	r1, r3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f001 f963 	bl	800c74c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b486:	2180      	movs	r1, #128	@ 0x80
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f001 f95f 	bl	800c74c <USBD_LL_StallEP>
 800b48e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b490:	e020      	b.n	800b4d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fc7a 	bl	800bd8e <USBD_CtlError>
              break;
 800b49a:	e01b      	b.n	800b4d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	885b      	ldrh	r3, [r3, #2]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10e      	bne.n	800b4c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b4a4:	7bbb      	ldrb	r3, [r7, #14]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00b      	beq.n	800b4c2 <USBD_StdEPReq+0xfe>
 800b4aa:	7bbb      	ldrb	r3, [r7, #14]
 800b4ac:	2b80      	cmp	r3, #128	@ 0x80
 800b4ae:	d008      	beq.n	800b4c2 <USBD_StdEPReq+0xfe>
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	88db      	ldrh	r3, [r3, #6]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d104      	bne.n	800b4c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4b8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f001 f945 	bl	800c74c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fd2e 	bl	800bf24 <USBD_CtlSendStatus>

              break;
 800b4c8:	e004      	b.n	800b4d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b4ca:	6839      	ldr	r1, [r7, #0]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fc5e 	bl	800bd8e <USBD_CtlError>
              break;
 800b4d2:	bf00      	nop
          }
          break;
 800b4d4:	e107      	b.n	800b6e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d002      	beq.n	800b4e8 <USBD_StdEPReq+0x124>
 800b4e2:	2b03      	cmp	r3, #3
 800b4e4:	d016      	beq.n	800b514 <USBD_StdEPReq+0x150>
 800b4e6:	e04b      	b.n	800b580 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4e8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00d      	beq.n	800b50a <USBD_StdEPReq+0x146>
 800b4ee:	7bbb      	ldrb	r3, [r7, #14]
 800b4f0:	2b80      	cmp	r3, #128	@ 0x80
 800b4f2:	d00a      	beq.n	800b50a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4f4:	7bbb      	ldrb	r3, [r7, #14]
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f001 f927 	bl	800c74c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4fe:	2180      	movs	r1, #128	@ 0x80
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f001 f923 	bl	800c74c <USBD_LL_StallEP>
 800b506:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b508:	e040      	b.n	800b58c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b50a:	6839      	ldr	r1, [r7, #0]
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fc3e 	bl	800bd8e <USBD_CtlError>
              break;
 800b512:	e03b      	b.n	800b58c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	885b      	ldrh	r3, [r3, #2]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d136      	bne.n	800b58a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b51c:	7bbb      	ldrb	r3, [r7, #14]
 800b51e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b522:	2b00      	cmp	r3, #0
 800b524:	d004      	beq.n	800b530 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b526:	7bbb      	ldrb	r3, [r7, #14]
 800b528:	4619      	mov	r1, r3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f001 f92d 	bl	800c78a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fcf7 	bl	800bf24 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b536:	7bbb      	ldrb	r3, [r7, #14]
 800b538:	4619      	mov	r1, r3
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7ff fde4 	bl	800b108 <USBD_CoreFindEP>
 800b540:	4603      	mov	r3, r0
 800b542:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b544:	7b7b      	ldrb	r3, [r7, #13]
 800b546:	2bff      	cmp	r3, #255	@ 0xff
 800b548:	d01f      	beq.n	800b58a <USBD_StdEPReq+0x1c6>
 800b54a:	7b7b      	ldrb	r3, [r7, #13]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d11c      	bne.n	800b58a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b550:	7b7a      	ldrb	r2, [r7, #13]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b558:	7b7a      	ldrb	r2, [r7, #13]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	32ae      	adds	r2, #174	@ 0xae
 800b55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d010      	beq.n	800b58a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b568:	7b7a      	ldrb	r2, [r7, #13]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	32ae      	adds	r2, #174	@ 0xae
 800b56e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	4798      	blx	r3
 800b57a:	4603      	mov	r3, r0
 800b57c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b57e:	e004      	b.n	800b58a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fc03 	bl	800bd8e <USBD_CtlError>
              break;
 800b588:	e000      	b.n	800b58c <USBD_StdEPReq+0x1c8>
              break;
 800b58a:	bf00      	nop
          }
          break;
 800b58c:	e0ab      	b.n	800b6e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b594:	b2db      	uxtb	r3, r3
 800b596:	2b02      	cmp	r3, #2
 800b598:	d002      	beq.n	800b5a0 <USBD_StdEPReq+0x1dc>
 800b59a:	2b03      	cmp	r3, #3
 800b59c:	d032      	beq.n	800b604 <USBD_StdEPReq+0x240>
 800b59e:	e097      	b.n	800b6d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5a0:	7bbb      	ldrb	r3, [r7, #14]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d007      	beq.n	800b5b6 <USBD_StdEPReq+0x1f2>
 800b5a6:	7bbb      	ldrb	r3, [r7, #14]
 800b5a8:	2b80      	cmp	r3, #128	@ 0x80
 800b5aa:	d004      	beq.n	800b5b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b5ac:	6839      	ldr	r1, [r7, #0]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fbed 	bl	800bd8e <USBD_CtlError>
                break;
 800b5b4:	e091      	b.n	800b6da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	da0b      	bge.n	800b5d6 <USBD_StdEPReq+0x212>
 800b5be:	7bbb      	ldrb	r3, [r7, #14]
 800b5c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	4413      	add	r3, r2
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	3310      	adds	r3, #16
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	e00b      	b.n	800b5ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5dc:	4613      	mov	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 fc37 	bl	800be70 <USBD_CtlSendData>
              break;
 800b602:	e06a      	b.n	800b6da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	da11      	bge.n	800b630 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b60c:	7bbb      	ldrb	r3, [r7, #14]
 800b60e:	f003 020f 	and.w	r2, r3, #15
 800b612:	6879      	ldr	r1, [r7, #4]
 800b614:	4613      	mov	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	4413      	add	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	440b      	add	r3, r1
 800b61e:	3324      	adds	r3, #36	@ 0x24
 800b620:	881b      	ldrh	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d117      	bne.n	800b656 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fbb0 	bl	800bd8e <USBD_CtlError>
                  break;
 800b62e:	e054      	b.n	800b6da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b630:	7bbb      	ldrb	r3, [r7, #14]
 800b632:	f003 020f 	and.w	r2, r3, #15
 800b636:	6879      	ldr	r1, [r7, #4]
 800b638:	4613      	mov	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	4413      	add	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	440b      	add	r3, r1
 800b642:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b646:	881b      	ldrh	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d104      	bne.n	800b656 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fb9d 	bl	800bd8e <USBD_CtlError>
                  break;
 800b654:	e041      	b.n	800b6da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b656:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	da0b      	bge.n	800b676 <USBD_StdEPReq+0x2b2>
 800b65e:	7bbb      	ldrb	r3, [r7, #14]
 800b660:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b664:	4613      	mov	r3, r2
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	4413      	add	r3, r2
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	3310      	adds	r3, #16
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	4413      	add	r3, r2
 800b672:	3304      	adds	r3, #4
 800b674:	e00b      	b.n	800b68e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b676:	7bbb      	ldrb	r3, [r7, #14]
 800b678:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b67c:	4613      	mov	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	4413      	add	r3, r2
 800b68c:	3304      	adds	r3, #4
 800b68e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b690:	7bbb      	ldrb	r3, [r7, #14]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d002      	beq.n	800b69c <USBD_StdEPReq+0x2d8>
 800b696:	7bbb      	ldrb	r3, [r7, #14]
 800b698:	2b80      	cmp	r3, #128	@ 0x80
 800b69a:	d103      	bne.n	800b6a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	e00e      	b.n	800b6c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b6a4:	7bbb      	ldrb	r3, [r7, #14]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f001 f88d 	bl	800c7c8 <USBD_LL_IsStallEP>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d003      	beq.n	800b6bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	601a      	str	r2, [r3, #0]
 800b6ba:	e002      	b.n	800b6c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	2202      	movs	r2, #2
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fbd1 	bl	800be70 <USBD_CtlSendData>
              break;
 800b6ce:	e004      	b.n	800b6da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fb5b 	bl	800bd8e <USBD_CtlError>
              break;
 800b6d8:	bf00      	nop
          }
          break;
 800b6da:	e004      	b.n	800b6e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 fb55 	bl	800bd8e <USBD_CtlError>
          break;
 800b6e4:	bf00      	nop
      }
      break;
 800b6e6:	e005      	b.n	800b6f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b6e8:	6839      	ldr	r1, [r7, #0]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fb4f 	bl	800bd8e <USBD_CtlError>
      break;
 800b6f0:	e000      	b.n	800b6f4 <USBD_StdEPReq+0x330>
      break;
 800b6f2:	bf00      	nop
  }

  return ret;
 800b6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b70a:	2300      	movs	r3, #0
 800b70c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b70e:	2300      	movs	r3, #0
 800b710:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b712:	2300      	movs	r3, #0
 800b714:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	885b      	ldrh	r3, [r3, #2]
 800b71a:	0a1b      	lsrs	r3, r3, #8
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	3b01      	subs	r3, #1
 800b720:	2b06      	cmp	r3, #6
 800b722:	f200 8128 	bhi.w	800b976 <USBD_GetDescriptor+0x276>
 800b726:	a201      	add	r2, pc, #4	@ (adr r2, 800b72c <USBD_GetDescriptor+0x2c>)
 800b728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72c:	0800b749 	.word	0x0800b749
 800b730:	0800b761 	.word	0x0800b761
 800b734:	0800b7a1 	.word	0x0800b7a1
 800b738:	0800b977 	.word	0x0800b977
 800b73c:	0800b977 	.word	0x0800b977
 800b740:	0800b917 	.word	0x0800b917
 800b744:	0800b943 	.word	0x0800b943
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	7c12      	ldrb	r2, [r2, #16]
 800b754:	f107 0108 	add.w	r1, r7, #8
 800b758:	4610      	mov	r0, r2
 800b75a:	4798      	blx	r3
 800b75c:	60f8      	str	r0, [r7, #12]
      break;
 800b75e:	e112      	b.n	800b986 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	7c1b      	ldrb	r3, [r3, #16]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10d      	bne.n	800b784 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b76e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b770:	f107 0208 	add.w	r2, r7, #8
 800b774:	4610      	mov	r0, r2
 800b776:	4798      	blx	r3
 800b778:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	3301      	adds	r3, #1
 800b77e:	2202      	movs	r2, #2
 800b780:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b782:	e100      	b.n	800b986 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b78a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b78c:	f107 0208 	add.w	r2, r7, #8
 800b790:	4610      	mov	r0, r2
 800b792:	4798      	blx	r3
 800b794:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	3301      	adds	r3, #1
 800b79a:	2202      	movs	r2, #2
 800b79c:	701a      	strb	r2, [r3, #0]
      break;
 800b79e:	e0f2      	b.n	800b986 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	885b      	ldrh	r3, [r3, #2]
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	2b05      	cmp	r3, #5
 800b7a8:	f200 80ac 	bhi.w	800b904 <USBD_GetDescriptor+0x204>
 800b7ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b7b4 <USBD_GetDescriptor+0xb4>)
 800b7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b2:	bf00      	nop
 800b7b4:	0800b7cd 	.word	0x0800b7cd
 800b7b8:	0800b801 	.word	0x0800b801
 800b7bc:	0800b835 	.word	0x0800b835
 800b7c0:	0800b869 	.word	0x0800b869
 800b7c4:	0800b89d 	.word	0x0800b89d
 800b7c8:	0800b8d1 	.word	0x0800b8d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00b      	beq.n	800b7f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	7c12      	ldrb	r2, [r2, #16]
 800b7e4:	f107 0108 	add.w	r1, r7, #8
 800b7e8:	4610      	mov	r0, r2
 800b7ea:	4798      	blx	r3
 800b7ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7ee:	e091      	b.n	800b914 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7f0:	6839      	ldr	r1, [r7, #0]
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 facb 	bl	800bd8e <USBD_CtlError>
            err++;
 800b7f8:	7afb      	ldrb	r3, [r7, #11]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b7fe:	e089      	b.n	800b914 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00b      	beq.n	800b824 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	7c12      	ldrb	r2, [r2, #16]
 800b818:	f107 0108 	add.w	r1, r7, #8
 800b81c:	4610      	mov	r0, r2
 800b81e:	4798      	blx	r3
 800b820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b822:	e077      	b.n	800b914 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b824:	6839      	ldr	r1, [r7, #0]
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fab1 	bl	800bd8e <USBD_CtlError>
            err++;
 800b82c:	7afb      	ldrb	r3, [r7, #11]
 800b82e:	3301      	adds	r3, #1
 800b830:	72fb      	strb	r3, [r7, #11]
          break;
 800b832:	e06f      	b.n	800b914 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00b      	beq.n	800b858 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	7c12      	ldrb	r2, [r2, #16]
 800b84c:	f107 0108 	add.w	r1, r7, #8
 800b850:	4610      	mov	r0, r2
 800b852:	4798      	blx	r3
 800b854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b856:	e05d      	b.n	800b914 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fa97 	bl	800bd8e <USBD_CtlError>
            err++;
 800b860:	7afb      	ldrb	r3, [r7, #11]
 800b862:	3301      	adds	r3, #1
 800b864:	72fb      	strb	r3, [r7, #11]
          break;
 800b866:	e055      	b.n	800b914 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00b      	beq.n	800b88c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	7c12      	ldrb	r2, [r2, #16]
 800b880:	f107 0108 	add.w	r1, r7, #8
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b88a:	e043      	b.n	800b914 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fa7d 	bl	800bd8e <USBD_CtlError>
            err++;
 800b894:	7afb      	ldrb	r3, [r7, #11]
 800b896:	3301      	adds	r3, #1
 800b898:	72fb      	strb	r3, [r7, #11]
          break;
 800b89a:	e03b      	b.n	800b914 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8a2:	695b      	ldr	r3, [r3, #20]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00b      	beq.n	800b8c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	7c12      	ldrb	r2, [r2, #16]
 800b8b4:	f107 0108 	add.w	r1, r7, #8
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	4798      	blx	r3
 800b8bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8be:	e029      	b.n	800b914 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fa63 	bl	800bd8e <USBD_CtlError>
            err++;
 800b8c8:	7afb      	ldrb	r3, [r7, #11]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b8ce:	e021      	b.n	800b914 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8d6:	699b      	ldr	r3, [r3, #24]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00b      	beq.n	800b8f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8e2:	699b      	ldr	r3, [r3, #24]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	7c12      	ldrb	r2, [r2, #16]
 800b8e8:	f107 0108 	add.w	r1, r7, #8
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	4798      	blx	r3
 800b8f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8f2:	e00f      	b.n	800b914 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8f4:	6839      	ldr	r1, [r7, #0]
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fa49 	bl	800bd8e <USBD_CtlError>
            err++;
 800b8fc:	7afb      	ldrb	r3, [r7, #11]
 800b8fe:	3301      	adds	r3, #1
 800b900:	72fb      	strb	r3, [r7, #11]
          break;
 800b902:	e007      	b.n	800b914 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fa41 	bl	800bd8e <USBD_CtlError>
          err++;
 800b90c:	7afb      	ldrb	r3, [r7, #11]
 800b90e:	3301      	adds	r3, #1
 800b910:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b912:	bf00      	nop
      }
      break;
 800b914:	e037      	b.n	800b986 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	7c1b      	ldrb	r3, [r3, #16]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d109      	bne.n	800b932 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b926:	f107 0208 	add.w	r2, r7, #8
 800b92a:	4610      	mov	r0, r2
 800b92c:	4798      	blx	r3
 800b92e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b930:	e029      	b.n	800b986 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b932:	6839      	ldr	r1, [r7, #0]
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fa2a 	bl	800bd8e <USBD_CtlError>
        err++;
 800b93a:	7afb      	ldrb	r3, [r7, #11]
 800b93c:	3301      	adds	r3, #1
 800b93e:	72fb      	strb	r3, [r7, #11]
      break;
 800b940:	e021      	b.n	800b986 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	7c1b      	ldrb	r3, [r3, #16]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d10d      	bne.n	800b966 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b952:	f107 0208 	add.w	r2, r7, #8
 800b956:	4610      	mov	r0, r2
 800b958:	4798      	blx	r3
 800b95a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	3301      	adds	r3, #1
 800b960:	2207      	movs	r2, #7
 800b962:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b964:	e00f      	b.n	800b986 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b966:	6839      	ldr	r1, [r7, #0]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 fa10 	bl	800bd8e <USBD_CtlError>
        err++;
 800b96e:	7afb      	ldrb	r3, [r7, #11]
 800b970:	3301      	adds	r3, #1
 800b972:	72fb      	strb	r3, [r7, #11]
      break;
 800b974:	e007      	b.n	800b986 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b976:	6839      	ldr	r1, [r7, #0]
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 fa08 	bl	800bd8e <USBD_CtlError>
      err++;
 800b97e:	7afb      	ldrb	r3, [r7, #11]
 800b980:	3301      	adds	r3, #1
 800b982:	72fb      	strb	r3, [r7, #11]
      break;
 800b984:	bf00      	nop
  }

  if (err != 0U)
 800b986:	7afb      	ldrb	r3, [r7, #11]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d11e      	bne.n	800b9ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	88db      	ldrh	r3, [r3, #6]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d016      	beq.n	800b9c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b994:	893b      	ldrh	r3, [r7, #8]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00e      	beq.n	800b9b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	88da      	ldrh	r2, [r3, #6]
 800b99e:	893b      	ldrh	r3, [r7, #8]
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	bf28      	it	cs
 800b9a4:	4613      	movcs	r3, r2
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b9aa:	893b      	ldrh	r3, [r7, #8]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	68f9      	ldr	r1, [r7, #12]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fa5d 	bl	800be70 <USBD_CtlSendData>
 800b9b6:	e009      	b.n	800b9cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f9e7 	bl	800bd8e <USBD_CtlError>
 800b9c0:	e004      	b.n	800b9cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 faae 	bl	800bf24 <USBD_CtlSendStatus>
 800b9c8:	e000      	b.n	800b9cc <USBD_GetDescriptor+0x2cc>
    return;
 800b9ca:	bf00      	nop
  }
}
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop

0800b9d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	889b      	ldrh	r3, [r3, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d131      	bne.n	800ba4a <USBD_SetAddress+0x76>
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	88db      	ldrh	r3, [r3, #6]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d12d      	bne.n	800ba4a <USBD_SetAddress+0x76>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	885b      	ldrh	r3, [r3, #2]
 800b9f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800b9f4:	d829      	bhi.n	800ba4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	885b      	ldrh	r3, [r3, #2]
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b03      	cmp	r3, #3
 800ba0c:	d104      	bne.n	800ba18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 f9bc 	bl	800bd8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba16:	e01d      	b.n	800ba54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	7bfa      	ldrb	r2, [r7, #15]
 800ba1c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ba20:	7bfb      	ldrb	r3, [r7, #15]
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 fefb 	bl	800c820 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fa7a 	bl	800bf24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d004      	beq.n	800ba40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2202      	movs	r2, #2
 800ba3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba3e:	e009      	b.n	800ba54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba48:	e004      	b.n	800ba54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba4a:	6839      	ldr	r1, [r7, #0]
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 f99e 	bl	800bd8e <USBD_CtlError>
  }
}
 800ba52:	bf00      	nop
 800ba54:	bf00      	nop
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	885b      	ldrh	r3, [r3, #2]
 800ba6e:	b2da      	uxtb	r2, r3
 800ba70:	4b4e      	ldr	r3, [pc, #312]	@ (800bbac <USBD_SetConfig+0x150>)
 800ba72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba74:	4b4d      	ldr	r3, [pc, #308]	@ (800bbac <USBD_SetConfig+0x150>)
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d905      	bls.n	800ba88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba7c:	6839      	ldr	r1, [r7, #0]
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f985 	bl	800bd8e <USBD_CtlError>
    return USBD_FAIL;
 800ba84:	2303      	movs	r3, #3
 800ba86:	e08c      	b.n	800bba2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d002      	beq.n	800ba9a <USBD_SetConfig+0x3e>
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d029      	beq.n	800baec <USBD_SetConfig+0x90>
 800ba98:	e075      	b.n	800bb86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ba9a:	4b44      	ldr	r3, [pc, #272]	@ (800bbac <USBD_SetConfig+0x150>)
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d020      	beq.n	800bae4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800baa2:	4b42      	ldr	r3, [pc, #264]	@ (800bbac <USBD_SetConfig+0x150>)
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	461a      	mov	r2, r3
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800baac:	4b3f      	ldr	r3, [pc, #252]	@ (800bbac <USBD_SetConfig+0x150>)
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	4619      	mov	r1, r3
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7fe ffe3 	bl	800aa7e <USBD_SetClassConfig>
 800bab8:	4603      	mov	r3, r0
 800baba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800babc:	7bfb      	ldrb	r3, [r7, #15]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d008      	beq.n	800bad4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 f962 	bl	800bd8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2202      	movs	r2, #2
 800bace:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bad2:	e065      	b.n	800bba0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fa25 	bl	800bf24 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2203      	movs	r2, #3
 800bade:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bae2:	e05d      	b.n	800bba0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fa1d 	bl	800bf24 <USBD_CtlSendStatus>
      break;
 800baea:	e059      	b.n	800bba0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800baec:	4b2f      	ldr	r3, [pc, #188]	@ (800bbac <USBD_SetConfig+0x150>)
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d112      	bne.n	800bb1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2202      	movs	r2, #2
 800baf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bafc:	4b2b      	ldr	r3, [pc, #172]	@ (800bbac <USBD_SetConfig+0x150>)
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	461a      	mov	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb06:	4b29      	ldr	r3, [pc, #164]	@ (800bbac <USBD_SetConfig+0x150>)
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7fe ffd2 	bl	800aab6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fa06 	bl	800bf24 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb18:	e042      	b.n	800bba0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bb1a:	4b24      	ldr	r3, [pc, #144]	@ (800bbac <USBD_SetConfig+0x150>)
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d02a      	beq.n	800bb7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	4619      	mov	r1, r3
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7fe ffc0 	bl	800aab6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb36:	4b1d      	ldr	r3, [pc, #116]	@ (800bbac <USBD_SetConfig+0x150>)
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb40:	4b1a      	ldr	r3, [pc, #104]	@ (800bbac <USBD_SetConfig+0x150>)
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	4619      	mov	r1, r3
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7fe ff99 	bl	800aa7e <USBD_SetClassConfig>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00f      	beq.n	800bb76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bb56:	6839      	ldr	r1, [r7, #0]
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f918 	bl	800bd8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	4619      	mov	r1, r3
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7fe ffa5 	bl	800aab6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2202      	movs	r2, #2
 800bb70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bb74:	e014      	b.n	800bba0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f9d4 	bl	800bf24 <USBD_CtlSendStatus>
      break;
 800bb7c:	e010      	b.n	800bba0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f9d0 	bl	800bf24 <USBD_CtlSendStatus>
      break;
 800bb84:	e00c      	b.n	800bba0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bb86:	6839      	ldr	r1, [r7, #0]
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 f900 	bl	800bd8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb8e:	4b07      	ldr	r3, [pc, #28]	@ (800bbac <USBD_SetConfig+0x150>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	4619      	mov	r1, r3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7fe ff8e 	bl	800aab6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb9e:	bf00      	nop
  }

  return ret;
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	2000090c 	.word	0x2000090c

0800bbb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	88db      	ldrh	r3, [r3, #6]
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d004      	beq.n	800bbcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bbc2:	6839      	ldr	r1, [r7, #0]
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f8e2 	bl	800bd8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bbca:	e023      	b.n	800bc14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	dc02      	bgt.n	800bbde <USBD_GetConfig+0x2e>
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dc03      	bgt.n	800bbe4 <USBD_GetConfig+0x34>
 800bbdc:	e015      	b.n	800bc0a <USBD_GetConfig+0x5a>
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d00b      	beq.n	800bbfa <USBD_GetConfig+0x4a>
 800bbe2:	e012      	b.n	800bc0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	3308      	adds	r3, #8
 800bbee:	2201      	movs	r2, #1
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 f93c 	bl	800be70 <USBD_CtlSendData>
        break;
 800bbf8:	e00c      	b.n	800bc14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	3304      	adds	r3, #4
 800bbfe:	2201      	movs	r2, #1
 800bc00:	4619      	mov	r1, r3
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f934 	bl	800be70 <USBD_CtlSendData>
        break;
 800bc08:	e004      	b.n	800bc14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bc0a:	6839      	ldr	r1, [r7, #0]
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 f8be 	bl	800bd8e <USBD_CtlError>
        break;
 800bc12:	bf00      	nop
}
 800bc14:	bf00      	nop
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	d81e      	bhi.n	800bc72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	88db      	ldrh	r3, [r3, #6]
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d004      	beq.n	800bc46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f8a5 	bl	800bd8e <USBD_CtlError>
        break;
 800bc44:	e01a      	b.n	800bc7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d005      	beq.n	800bc62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	f043 0202 	orr.w	r2, r3, #2
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	330c      	adds	r3, #12
 800bc66:	2202      	movs	r2, #2
 800bc68:	4619      	mov	r1, r3
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f900 	bl	800be70 <USBD_CtlSendData>
      break;
 800bc70:	e004      	b.n	800bc7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc72:	6839      	ldr	r1, [r7, #0]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f88a 	bl	800bd8e <USBD_CtlError>
      break;
 800bc7a:	bf00      	nop
  }
}
 800bc7c:	bf00      	nop
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	885b      	ldrh	r3, [r3, #2]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d107      	bne.n	800bca6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 f940 	bl	800bf24 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bca4:	e013      	b.n	800bcce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	885b      	ldrh	r3, [r3, #2]
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d10b      	bne.n	800bcc6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	889b      	ldrh	r3, [r3, #4]
 800bcb2:	0a1b      	lsrs	r3, r3, #8
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	b2da      	uxtb	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 f930 	bl	800bf24 <USBD_CtlSendStatus>
}
 800bcc4:	e003      	b.n	800bcce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bcc6:	6839      	ldr	r1, [r7, #0]
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 f860 	bl	800bd8e <USBD_CtlError>
}
 800bcce:	bf00      	nop
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b082      	sub	sp, #8
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
 800bcde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	3b01      	subs	r3, #1
 800bcea:	2b02      	cmp	r3, #2
 800bcec:	d80b      	bhi.n	800bd06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	885b      	ldrh	r3, [r3, #2]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d10c      	bne.n	800bd10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 f910 	bl	800bf24 <USBD_CtlSendStatus>
      }
      break;
 800bd04:	e004      	b.n	800bd10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f840 	bl	800bd8e <USBD_CtlError>
      break;
 800bd0e:	e000      	b.n	800bd12 <USBD_ClrFeature+0x3c>
      break;
 800bd10:	bf00      	nop
  }
}
 800bd12:	bf00      	nop
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b084      	sub	sp, #16
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	781a      	ldrb	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3301      	adds	r3, #1
 800bd34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	781a      	ldrb	r2, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	3301      	adds	r3, #1
 800bd42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	f7ff fa40 	bl	800b1ca <SWAPBYTE>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	3301      	adds	r3, #1
 800bd56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f7ff fa33 	bl	800b1ca <SWAPBYTE>
 800bd64:	4603      	mov	r3, r0
 800bd66:	461a      	mov	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	3301      	adds	r3, #1
 800bd76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f7ff fa26 	bl	800b1ca <SWAPBYTE>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	461a      	mov	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	80da      	strh	r2, [r3, #6]
}
 800bd86:	bf00      	nop
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b082      	sub	sp, #8
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
 800bd96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd98:	2180      	movs	r1, #128	@ 0x80
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fcd6 	bl	800c74c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bda0:	2100      	movs	r1, #0
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 fcd2 	bl	800c74c <USBD_LL_StallEP>
}
 800bda8:	bf00      	nop
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d036      	beq.n	800be34 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bdca:	6938      	ldr	r0, [r7, #16]
 800bdcc:	f000 f836 	bl	800be3c <USBD_GetLen>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	005b      	lsls	r3, r3, #1
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bdde:	7dfb      	ldrb	r3, [r7, #23]
 800bde0:	68ba      	ldr	r2, [r7, #8]
 800bde2:	4413      	add	r3, r2
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	7812      	ldrb	r2, [r2, #0]
 800bde8:	701a      	strb	r2, [r3, #0]
  idx++;
 800bdea:	7dfb      	ldrb	r3, [r7, #23]
 800bdec:	3301      	adds	r3, #1
 800bdee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bdf0:	7dfb      	ldrb	r3, [r7, #23]
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	2203      	movs	r2, #3
 800bdf8:	701a      	strb	r2, [r3, #0]
  idx++;
 800bdfa:	7dfb      	ldrb	r3, [r7, #23]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800be00:	e013      	b.n	800be2a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800be02:	7dfb      	ldrb	r3, [r7, #23]
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	4413      	add	r3, r2
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	7812      	ldrb	r2, [r2, #0]
 800be0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	3301      	adds	r3, #1
 800be12:	613b      	str	r3, [r7, #16]
    idx++;
 800be14:	7dfb      	ldrb	r3, [r7, #23]
 800be16:	3301      	adds	r3, #1
 800be18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
 800be1c:	68ba      	ldr	r2, [r7, #8]
 800be1e:	4413      	add	r3, r2
 800be20:	2200      	movs	r2, #0
 800be22:	701a      	strb	r2, [r3, #0]
    idx++;
 800be24:	7dfb      	ldrb	r3, [r7, #23]
 800be26:	3301      	adds	r3, #1
 800be28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d1e7      	bne.n	800be02 <USBD_GetString+0x52>
 800be32:	e000      	b.n	800be36 <USBD_GetString+0x86>
    return;
 800be34:	bf00      	nop
  }
}
 800be36:	3718      	adds	r7, #24
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be44:	2300      	movs	r3, #0
 800be46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800be4c:	e005      	b.n	800be5a <USBD_GetLen+0x1e>
  {
    len++;
 800be4e:	7bfb      	ldrb	r3, [r7, #15]
 800be50:	3301      	adds	r3, #1
 800be52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	3301      	adds	r3, #1
 800be58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1f5      	bne.n	800be4e <USBD_GetLen+0x12>
  }

  return len;
 800be62:	7bfb      	ldrb	r3, [r7, #15]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3714      	adds	r7, #20
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2202      	movs	r2, #2
 800be80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	2100      	movs	r1, #0
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	f000 fce1 	bl	800c85e <USBD_LL_Transmit>

  return USBD_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b084      	sub	sp, #16
 800beaa:	af00      	add	r7, sp, #0
 800beac:	60f8      	str	r0, [r7, #12]
 800beae:	60b9      	str	r1, [r7, #8]
 800beb0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	68ba      	ldr	r2, [r7, #8]
 800beb6:	2100      	movs	r1, #0
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f000 fcd0 	bl	800c85e <USBD_LL_Transmit>

  return USBD_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2203      	movs	r2, #3
 800bed8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	2100      	movs	r1, #0
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f000 fcd4 	bl	800c8a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b084      	sub	sp, #16
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	60f8      	str	r0, [r7, #12]
 800bf0a:	60b9      	str	r1, [r7, #8]
 800bf0c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	68ba      	ldr	r2, [r7, #8]
 800bf12:	2100      	movs	r1, #0
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f000 fcc3 	bl	800c8a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2204      	movs	r2, #4
 800bf30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf34:	2300      	movs	r3, #0
 800bf36:	2200      	movs	r2, #0
 800bf38:	2100      	movs	r1, #0
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fc8f 	bl	800c85e <USBD_LL_Transmit>

  return USBD_OK;
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2205      	movs	r2, #5
 800bf56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	2100      	movs	r1, #0
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 fc9d 	bl	800c8a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bf74:	2200      	movs	r2, #0
 800bf76:	4912      	ldr	r1, [pc, #72]	@ (800bfc0 <MX_USB_DEVICE_Init+0x50>)
 800bf78:	4812      	ldr	r0, [pc, #72]	@ (800bfc4 <MX_USB_DEVICE_Init+0x54>)
 800bf7a:	f7fe fd03 	bl	800a984 <USBD_Init>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d001      	beq.n	800bf88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bf84:	f7f7 f804 	bl	8002f90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bf88:	490f      	ldr	r1, [pc, #60]	@ (800bfc8 <MX_USB_DEVICE_Init+0x58>)
 800bf8a:	480e      	ldr	r0, [pc, #56]	@ (800bfc4 <MX_USB_DEVICE_Init+0x54>)
 800bf8c:	f7fe fd2a 	bl	800a9e4 <USBD_RegisterClass>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d001      	beq.n	800bf9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bf96:	f7f6 fffb 	bl	8002f90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bf9a:	490c      	ldr	r1, [pc, #48]	@ (800bfcc <MX_USB_DEVICE_Init+0x5c>)
 800bf9c:	4809      	ldr	r0, [pc, #36]	@ (800bfc4 <MX_USB_DEVICE_Init+0x54>)
 800bf9e:	f7fe fc21 	bl	800a7e4 <USBD_CDC_RegisterInterface>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d001      	beq.n	800bfac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bfa8:	f7f6 fff2 	bl	8002f90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bfac:	4805      	ldr	r0, [pc, #20]	@ (800bfc4 <MX_USB_DEVICE_Init+0x54>)
 800bfae:	f7fe fd4f 	bl	800aa50 <USBD_Start>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d001      	beq.n	800bfbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bfb8:	f7f6 ffea 	bl	8002f90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bfbc:	bf00      	nop
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	200000b8 	.word	0x200000b8
 800bfc4:	20000910 	.word	0x20000910
 800bfc8:	20000024 	.word	0x20000024
 800bfcc:	200000a4 	.word	0x200000a4

0800bfd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	4905      	ldr	r1, [pc, #20]	@ (800bfec <CDC_Init_FS+0x1c>)
 800bfd8:	4805      	ldr	r0, [pc, #20]	@ (800bff0 <CDC_Init_FS+0x20>)
 800bfda:	f7fe fc1d 	bl	800a818 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bfde:	4905      	ldr	r1, [pc, #20]	@ (800bff4 <CDC_Init_FS+0x24>)
 800bfe0:	4803      	ldr	r0, [pc, #12]	@ (800bff0 <CDC_Init_FS+0x20>)
 800bfe2:	f7fe fc3b 	bl	800a85c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bfe6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	20000fec 	.word	0x20000fec
 800bff0:	20000910 	.word	0x20000910
 800bff4:	20000bec 	.word	0x20000bec

0800bff8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bff8:	b480      	push	{r7}
 800bffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bffc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bffe:	4618      	mov	r0, r3
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	4603      	mov	r3, r0
 800c010:	6039      	str	r1, [r7, #0]
 800c012:	71fb      	strb	r3, [r7, #7]
 800c014:	4613      	mov	r3, r2
 800c016:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c018:	79fb      	ldrb	r3, [r7, #7]
 800c01a:	2b23      	cmp	r3, #35	@ 0x23
 800c01c:	d84a      	bhi.n	800c0b4 <CDC_Control_FS+0xac>
 800c01e:	a201      	add	r2, pc, #4	@ (adr r2, 800c024 <CDC_Control_FS+0x1c>)
 800c020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c024:	0800c0b5 	.word	0x0800c0b5
 800c028:	0800c0b5 	.word	0x0800c0b5
 800c02c:	0800c0b5 	.word	0x0800c0b5
 800c030:	0800c0b5 	.word	0x0800c0b5
 800c034:	0800c0b5 	.word	0x0800c0b5
 800c038:	0800c0b5 	.word	0x0800c0b5
 800c03c:	0800c0b5 	.word	0x0800c0b5
 800c040:	0800c0b5 	.word	0x0800c0b5
 800c044:	0800c0b5 	.word	0x0800c0b5
 800c048:	0800c0b5 	.word	0x0800c0b5
 800c04c:	0800c0b5 	.word	0x0800c0b5
 800c050:	0800c0b5 	.word	0x0800c0b5
 800c054:	0800c0b5 	.word	0x0800c0b5
 800c058:	0800c0b5 	.word	0x0800c0b5
 800c05c:	0800c0b5 	.word	0x0800c0b5
 800c060:	0800c0b5 	.word	0x0800c0b5
 800c064:	0800c0b5 	.word	0x0800c0b5
 800c068:	0800c0b5 	.word	0x0800c0b5
 800c06c:	0800c0b5 	.word	0x0800c0b5
 800c070:	0800c0b5 	.word	0x0800c0b5
 800c074:	0800c0b5 	.word	0x0800c0b5
 800c078:	0800c0b5 	.word	0x0800c0b5
 800c07c:	0800c0b5 	.word	0x0800c0b5
 800c080:	0800c0b5 	.word	0x0800c0b5
 800c084:	0800c0b5 	.word	0x0800c0b5
 800c088:	0800c0b5 	.word	0x0800c0b5
 800c08c:	0800c0b5 	.word	0x0800c0b5
 800c090:	0800c0b5 	.word	0x0800c0b5
 800c094:	0800c0b5 	.word	0x0800c0b5
 800c098:	0800c0b5 	.word	0x0800c0b5
 800c09c:	0800c0b5 	.word	0x0800c0b5
 800c0a0:	0800c0b5 	.word	0x0800c0b5
 800c0a4:	0800c0b5 	.word	0x0800c0b5
 800c0a8:	0800c0b5 	.word	0x0800c0b5
 800c0ac:	0800c0b5 	.word	0x0800c0b5
 800c0b0:	0800c0b5 	.word	0x0800c0b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c0b4:	bf00      	nop
  }

  return (USBD_OK);
 800c0b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c0ce:	6879      	ldr	r1, [r7, #4]
 800c0d0:	4805      	ldr	r0, [pc, #20]	@ (800c0e8 <CDC_Receive_FS+0x24>)
 800c0d2:	f7fe fbc3 	bl	800a85c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c0d6:	4804      	ldr	r0, [pc, #16]	@ (800c0e8 <CDC_Receive_FS+0x24>)
 800c0d8:	f7fe fc1e 	bl	800a918 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c0dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20000910 	.word	0x20000910

0800c0ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c0fc:	4b0d      	ldr	r3, [pc, #52]	@ (800c134 <CDC_Transmit_FS+0x48>)
 800c0fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c102:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d001      	beq.n	800c112 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c10e:	2301      	movs	r3, #1
 800c110:	e00b      	b.n	800c12a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c112:	887b      	ldrh	r3, [r7, #2]
 800c114:	461a      	mov	r2, r3
 800c116:	6879      	ldr	r1, [r7, #4]
 800c118:	4806      	ldr	r0, [pc, #24]	@ (800c134 <CDC_Transmit_FS+0x48>)
 800c11a:	f7fe fb7d 	bl	800a818 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c11e:	4805      	ldr	r0, [pc, #20]	@ (800c134 <CDC_Transmit_FS+0x48>)
 800c120:	f7fe fbba 	bl	800a898 <USBD_CDC_TransmitPacket>
 800c124:	4603      	mov	r3, r0
 800c126:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c128:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20000910 	.word	0x20000910

0800c138 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c138:	b480      	push	{r7}
 800c13a:	b087      	sub	sp, #28
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	4613      	mov	r3, r2
 800c144:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c14a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	371c      	adds	r7, #28
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
	...

0800c15c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	4603      	mov	r3, r0
 800c164:	6039      	str	r1, [r7, #0]
 800c166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	2212      	movs	r2, #18
 800c16c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c16e:	4b03      	ldr	r3, [pc, #12]	@ (800c17c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c170:	4618      	mov	r0, r3
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	200000d4 	.word	0x200000d4

0800c180 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	4603      	mov	r3, r0
 800c188:	6039      	str	r1, [r7, #0]
 800c18a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	2204      	movs	r2, #4
 800c190:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c192:	4b03      	ldr	r3, [pc, #12]	@ (800c1a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c194:	4618      	mov	r0, r3
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr
 800c1a0:	200000e8 	.word	0x200000e8

0800c1a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	6039      	str	r1, [r7, #0]
 800c1ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1b0:	79fb      	ldrb	r3, [r7, #7]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d105      	bne.n	800c1c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1b6:	683a      	ldr	r2, [r7, #0]
 800c1b8:	4907      	ldr	r1, [pc, #28]	@ (800c1d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1ba:	4808      	ldr	r0, [pc, #32]	@ (800c1dc <USBD_FS_ProductStrDescriptor+0x38>)
 800c1bc:	f7ff fdf8 	bl	800bdb0 <USBD_GetString>
 800c1c0:	e004      	b.n	800c1cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	4904      	ldr	r1, [pc, #16]	@ (800c1d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1c6:	4805      	ldr	r0, [pc, #20]	@ (800c1dc <USBD_FS_ProductStrDescriptor+0x38>)
 800c1c8:	f7ff fdf2 	bl	800bdb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1cc:	4b02      	ldr	r3, [pc, #8]	@ (800c1d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	200013ec 	.word	0x200013ec
 800c1dc:	08012d5c 	.word	0x08012d5c

0800c1e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	6039      	str	r1, [r7, #0]
 800c1ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c1ec:	683a      	ldr	r2, [r7, #0]
 800c1ee:	4904      	ldr	r1, [pc, #16]	@ (800c200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c1f0:	4804      	ldr	r0, [pc, #16]	@ (800c204 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c1f2:	f7ff fddd 	bl	800bdb0 <USBD_GetString>
  return USBD_StrDesc;
 800c1f6:	4b02      	ldr	r3, [pc, #8]	@ (800c200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	200013ec 	.word	0x200013ec
 800c204:	08012d74 	.word	0x08012d74

0800c208 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	4603      	mov	r3, r0
 800c210:	6039      	str	r1, [r7, #0]
 800c212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	221a      	movs	r2, #26
 800c218:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c21a:	f000 f843 	bl	800c2a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c21e:	4b02      	ldr	r3, [pc, #8]	@ (800c228 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c220:	4618      	mov	r0, r3
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	200000ec 	.word	0x200000ec

0800c22c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	4603      	mov	r3, r0
 800c234:	6039      	str	r1, [r7, #0]
 800c236:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c238:	79fb      	ldrb	r3, [r7, #7]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d105      	bne.n	800c24a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	4907      	ldr	r1, [pc, #28]	@ (800c260 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c242:	4808      	ldr	r0, [pc, #32]	@ (800c264 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c244:	f7ff fdb4 	bl	800bdb0 <USBD_GetString>
 800c248:	e004      	b.n	800c254 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	4904      	ldr	r1, [pc, #16]	@ (800c260 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c24e:	4805      	ldr	r0, [pc, #20]	@ (800c264 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c250:	f7ff fdae 	bl	800bdb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c254:	4b02      	ldr	r3, [pc, #8]	@ (800c260 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c256:	4618      	mov	r0, r3
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	200013ec 	.word	0x200013ec
 800c264:	08012d88 	.word	0x08012d88

0800c268 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	6039      	str	r1, [r7, #0]
 800c272:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c274:	79fb      	ldrb	r3, [r7, #7]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d105      	bne.n	800c286 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	4907      	ldr	r1, [pc, #28]	@ (800c29c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c27e:	4808      	ldr	r0, [pc, #32]	@ (800c2a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c280:	f7ff fd96 	bl	800bdb0 <USBD_GetString>
 800c284:	e004      	b.n	800c290 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c286:	683a      	ldr	r2, [r7, #0]
 800c288:	4904      	ldr	r1, [pc, #16]	@ (800c29c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c28a:	4805      	ldr	r0, [pc, #20]	@ (800c2a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c28c:	f7ff fd90 	bl	800bdb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c290:	4b02      	ldr	r3, [pc, #8]	@ (800c29c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c292:	4618      	mov	r0, r3
 800c294:	3708      	adds	r7, #8
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	200013ec 	.word	0x200013ec
 800c2a0:	08012d94 	.word	0x08012d94

0800c2a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c2aa:	4b0f      	ldr	r3, [pc, #60]	@ (800c2e8 <Get_SerialNum+0x44>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c2b0:	4b0e      	ldr	r3, [pc, #56]	@ (800c2ec <Get_SerialNum+0x48>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c2b6:	4b0e      	ldr	r3, [pc, #56]	@ (800c2f0 <Get_SerialNum+0x4c>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d009      	beq.n	800c2de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c2ca:	2208      	movs	r2, #8
 800c2cc:	4909      	ldr	r1, [pc, #36]	@ (800c2f4 <Get_SerialNum+0x50>)
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	f000 f814 	bl	800c2fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c2d4:	2204      	movs	r2, #4
 800c2d6:	4908      	ldr	r1, [pc, #32]	@ (800c2f8 <Get_SerialNum+0x54>)
 800c2d8:	68b8      	ldr	r0, [r7, #8]
 800c2da:	f000 f80f 	bl	800c2fc <IntToUnicode>
  }
}
 800c2de:	bf00      	nop
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	1fff7a10 	.word	0x1fff7a10
 800c2ec:	1fff7a14 	.word	0x1fff7a14
 800c2f0:	1fff7a18 	.word	0x1fff7a18
 800c2f4:	200000ee 	.word	0x200000ee
 800c2f8:	200000fe 	.word	0x200000fe

0800c2fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b087      	sub	sp, #28
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	4613      	mov	r3, r2
 800c308:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c30e:	2300      	movs	r3, #0
 800c310:	75fb      	strb	r3, [r7, #23]
 800c312:	e027      	b.n	800c364 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	0f1b      	lsrs	r3, r3, #28
 800c318:	2b09      	cmp	r3, #9
 800c31a:	d80b      	bhi.n	800c334 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	0f1b      	lsrs	r3, r3, #28
 800c320:	b2da      	uxtb	r2, r3
 800c322:	7dfb      	ldrb	r3, [r7, #23]
 800c324:	005b      	lsls	r3, r3, #1
 800c326:	4619      	mov	r1, r3
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	440b      	add	r3, r1
 800c32c:	3230      	adds	r2, #48	@ 0x30
 800c32e:	b2d2      	uxtb	r2, r2
 800c330:	701a      	strb	r2, [r3, #0]
 800c332:	e00a      	b.n	800c34a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	0f1b      	lsrs	r3, r3, #28
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	7dfb      	ldrb	r3, [r7, #23]
 800c33c:	005b      	lsls	r3, r3, #1
 800c33e:	4619      	mov	r1, r3
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	440b      	add	r3, r1
 800c344:	3237      	adds	r2, #55	@ 0x37
 800c346:	b2d2      	uxtb	r2, r2
 800c348:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	011b      	lsls	r3, r3, #4
 800c34e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c350:	7dfb      	ldrb	r3, [r7, #23]
 800c352:	005b      	lsls	r3, r3, #1
 800c354:	3301      	adds	r3, #1
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	4413      	add	r3, r2
 800c35a:	2200      	movs	r2, #0
 800c35c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c35e:	7dfb      	ldrb	r3, [r7, #23]
 800c360:	3301      	adds	r3, #1
 800c362:	75fb      	strb	r3, [r7, #23]
 800c364:	7dfa      	ldrb	r2, [r7, #23]
 800c366:	79fb      	ldrb	r3, [r7, #7]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d3d3      	bcc.n	800c314 <IntToUnicode+0x18>
  }
}
 800c36c:	bf00      	nop
 800c36e:	bf00      	nop
 800c370:	371c      	adds	r7, #28
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr
	...

0800c37c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08a      	sub	sp, #40	@ 0x28
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c384:	f107 0314 	add.w	r3, r7, #20
 800c388:	2200      	movs	r2, #0
 800c38a:	601a      	str	r2, [r3, #0]
 800c38c:	605a      	str	r2, [r3, #4]
 800c38e:	609a      	str	r2, [r3, #8]
 800c390:	60da      	str	r2, [r3, #12]
 800c392:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c39c:	d13a      	bne.n	800c414 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c39e:	2300      	movs	r3, #0
 800c3a0:	613b      	str	r3, [r7, #16]
 800c3a2:	4b1e      	ldr	r3, [pc, #120]	@ (800c41c <HAL_PCD_MspInit+0xa0>)
 800c3a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3a6:	4a1d      	ldr	r2, [pc, #116]	@ (800c41c <HAL_PCD_MspInit+0xa0>)
 800c3a8:	f043 0301 	orr.w	r3, r3, #1
 800c3ac:	6313      	str	r3, [r2, #48]	@ 0x30
 800c3ae:	4b1b      	ldr	r3, [pc, #108]	@ (800c41c <HAL_PCD_MspInit+0xa0>)
 800c3b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3b2:	f003 0301 	and.w	r3, r3, #1
 800c3b6:	613b      	str	r3, [r7, #16]
 800c3b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c3ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c3be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c3cc:	230a      	movs	r3, #10
 800c3ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3d0:	f107 0314 	add.w	r3, r7, #20
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	4812      	ldr	r0, [pc, #72]	@ (800c420 <HAL_PCD_MspInit+0xa4>)
 800c3d8:	f7f8 fc32 	bl	8004c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c3dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c41c <HAL_PCD_MspInit+0xa0>)
 800c3de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3e0:	4a0e      	ldr	r2, [pc, #56]	@ (800c41c <HAL_PCD_MspInit+0xa0>)
 800c3e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3e6:	6353      	str	r3, [r2, #52]	@ 0x34
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	60fb      	str	r3, [r7, #12]
 800c3ec:	4b0b      	ldr	r3, [pc, #44]	@ (800c41c <HAL_PCD_MspInit+0xa0>)
 800c3ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c41c <HAL_PCD_MspInit+0xa0>)
 800c3f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c3f6:	6453      	str	r3, [r2, #68]	@ 0x44
 800c3f8:	4b08      	ldr	r3, [pc, #32]	@ (800c41c <HAL_PCD_MspInit+0xa0>)
 800c3fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c400:	60fb      	str	r3, [r7, #12]
 800c402:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c404:	2200      	movs	r2, #0
 800c406:	2100      	movs	r1, #0
 800c408:	2043      	movs	r0, #67	@ 0x43
 800c40a:	f7f7 ffe0 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c40e:	2043      	movs	r0, #67	@ 0x43
 800c410:	f7f7 fff9 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c414:	bf00      	nop
 800c416:	3728      	adds	r7, #40	@ 0x28
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	40023800 	.word	0x40023800
 800c420:	40020000 	.word	0x40020000

0800c424 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c438:	4619      	mov	r1, r3
 800c43a:	4610      	mov	r0, r2
 800c43c:	f7fe fb55 	bl	800aaea <USBD_LL_SetupStage>
}
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	460b      	mov	r3, r1
 800c452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c45a:	78fa      	ldrb	r2, [r7, #3]
 800c45c:	6879      	ldr	r1, [r7, #4]
 800c45e:	4613      	mov	r3, r2
 800c460:	00db      	lsls	r3, r3, #3
 800c462:	4413      	add	r3, r2
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	440b      	add	r3, r1
 800c468:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	78fb      	ldrb	r3, [r7, #3]
 800c470:	4619      	mov	r1, r3
 800c472:	f7fe fb8f 	bl	800ab94 <USBD_LL_DataOutStage>
}
 800c476:	bf00      	nop
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b082      	sub	sp, #8
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
 800c486:	460b      	mov	r3, r1
 800c488:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c490:	78fa      	ldrb	r2, [r7, #3]
 800c492:	6879      	ldr	r1, [r7, #4]
 800c494:	4613      	mov	r3, r2
 800c496:	00db      	lsls	r3, r3, #3
 800c498:	4413      	add	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	440b      	add	r3, r1
 800c49e:	3320      	adds	r3, #32
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	78fb      	ldrb	r3, [r7, #3]
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	f7fe fc28 	bl	800acfa <USBD_LL_DataInStage>
}
 800c4aa:	bf00      	nop
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b082      	sub	sp, #8
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fe fd62 	bl	800af8a <USBD_LL_SOF>
}
 800c4c6:	bf00      	nop
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b084      	sub	sp, #16
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	79db      	ldrb	r3, [r3, #7]
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d001      	beq.n	800c4e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c4e2:	f7f6 fd55 	bl	8002f90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4ec:	7bfa      	ldrb	r2, [r7, #15]
 800c4ee:	4611      	mov	r1, r2
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fe fd06 	bl	800af02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7fe fcae 	bl	800ae5e <USBD_LL_Reset>
}
 800c502:	bf00      	nop
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
	...

0800c50c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fe fd01 	bl	800af22 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	6812      	ldr	r2, [r2, #0]
 800c52e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c532:	f043 0301 	orr.w	r3, r3, #1
 800c536:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	7adb      	ldrb	r3, [r3, #11]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d005      	beq.n	800c54c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c540:	4b04      	ldr	r3, [pc, #16]	@ (800c554 <HAL_PCD_SuspendCallback+0x48>)
 800c542:	691b      	ldr	r3, [r3, #16]
 800c544:	4a03      	ldr	r2, [pc, #12]	@ (800c554 <HAL_PCD_SuspendCallback+0x48>)
 800c546:	f043 0306 	orr.w	r3, r3, #6
 800c54a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c54c:	bf00      	nop
 800c54e:	3708      	adds	r7, #8
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	e000ed00 	.word	0xe000ed00

0800c558 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c566:	4618      	mov	r0, r3
 800c568:	f7fe fcf7 	bl	800af5a <USBD_LL_Resume>
}
 800c56c:	bf00      	nop
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	460b      	mov	r3, r1
 800c57e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c586:	78fa      	ldrb	r2, [r7, #3]
 800c588:	4611      	mov	r1, r2
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fe fd4f 	bl	800b02e <USBD_LL_IsoOUTIncomplete>
}
 800c590:	bf00      	nop
 800c592:	3708      	adds	r7, #8
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5aa:	78fa      	ldrb	r2, [r7, #3]
 800c5ac:	4611      	mov	r1, r2
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fe fd0b 	bl	800afca <USBD_LL_IsoINIncomplete>
}
 800c5b4:	bf00      	nop
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fe fd61 	bl	800b092 <USBD_LL_DevConnected>
}
 800c5d0:	bf00      	nop
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fe fd5e 	bl	800b0a8 <USBD_LL_DevDisconnected>
}
 800c5ec:	bf00      	nop
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d13c      	bne.n	800c67e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c604:	4a20      	ldr	r2, [pc, #128]	@ (800c688 <USBD_LL_Init+0x94>)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a1e      	ldr	r2, [pc, #120]	@ (800c688 <USBD_LL_Init+0x94>)
 800c610:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c614:	4b1c      	ldr	r3, [pc, #112]	@ (800c688 <USBD_LL_Init+0x94>)
 800c616:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c61a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c61c:	4b1a      	ldr	r3, [pc, #104]	@ (800c688 <USBD_LL_Init+0x94>)
 800c61e:	2204      	movs	r2, #4
 800c620:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c622:	4b19      	ldr	r3, [pc, #100]	@ (800c688 <USBD_LL_Init+0x94>)
 800c624:	2202      	movs	r2, #2
 800c626:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c628:	4b17      	ldr	r3, [pc, #92]	@ (800c688 <USBD_LL_Init+0x94>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c62e:	4b16      	ldr	r3, [pc, #88]	@ (800c688 <USBD_LL_Init+0x94>)
 800c630:	2202      	movs	r2, #2
 800c632:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c634:	4b14      	ldr	r3, [pc, #80]	@ (800c688 <USBD_LL_Init+0x94>)
 800c636:	2200      	movs	r2, #0
 800c638:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c63a:	4b13      	ldr	r3, [pc, #76]	@ (800c688 <USBD_LL_Init+0x94>)
 800c63c:	2200      	movs	r2, #0
 800c63e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c640:	4b11      	ldr	r3, [pc, #68]	@ (800c688 <USBD_LL_Init+0x94>)
 800c642:	2200      	movs	r2, #0
 800c644:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c646:	4b10      	ldr	r3, [pc, #64]	@ (800c688 <USBD_LL_Init+0x94>)
 800c648:	2200      	movs	r2, #0
 800c64a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c64c:	4b0e      	ldr	r3, [pc, #56]	@ (800c688 <USBD_LL_Init+0x94>)
 800c64e:	2200      	movs	r2, #0
 800c650:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c652:	480d      	ldr	r0, [pc, #52]	@ (800c688 <USBD_LL_Init+0x94>)
 800c654:	f7f8 fc91 	bl	8004f7a <HAL_PCD_Init>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d001      	beq.n	800c662 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c65e:	f7f6 fc97 	bl	8002f90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c662:	2180      	movs	r1, #128	@ 0x80
 800c664:	4808      	ldr	r0, [pc, #32]	@ (800c688 <USBD_LL_Init+0x94>)
 800c666:	f7f9 febc 	bl	80063e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c66a:	2240      	movs	r2, #64	@ 0x40
 800c66c:	2100      	movs	r1, #0
 800c66e:	4806      	ldr	r0, [pc, #24]	@ (800c688 <USBD_LL_Init+0x94>)
 800c670:	f7f9 fe70 	bl	8006354 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c674:	2280      	movs	r2, #128	@ 0x80
 800c676:	2101      	movs	r1, #1
 800c678:	4803      	ldr	r0, [pc, #12]	@ (800c688 <USBD_LL_Init+0x94>)
 800c67a:	f7f9 fe6b 	bl	8006354 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	200015ec 	.word	0x200015ec

0800c68c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c694:	2300      	movs	r3, #0
 800c696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c698:	2300      	movs	r3, #0
 800c69a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7f8 fd78 	bl	8005198 <HAL_PCD_Start>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 f942 	bl	800c938 <USBD_Get_USB_Status>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b084      	sub	sp, #16
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	4608      	mov	r0, r1
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	70fb      	strb	r3, [r7, #3]
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	70bb      	strb	r3, [r7, #2]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c6ea:	78bb      	ldrb	r3, [r7, #2]
 800c6ec:	883a      	ldrh	r2, [r7, #0]
 800c6ee:	78f9      	ldrb	r1, [r7, #3]
 800c6f0:	f7f9 fa4c 	bl	8005b8c <HAL_PCD_EP_Open>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f000 f91c 	bl	800c938 <USBD_Get_USB_Status>
 800c700:	4603      	mov	r3, r0
 800c702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c704:	7bbb      	ldrb	r3, [r7, #14]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b084      	sub	sp, #16
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	460b      	mov	r3, r1
 800c718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c71a:	2300      	movs	r3, #0
 800c71c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c728:	78fa      	ldrb	r2, [r7, #3]
 800c72a:	4611      	mov	r1, r2
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7f9 fa95 	bl	8005c5c <HAL_PCD_EP_Close>
 800c732:	4603      	mov	r3, r0
 800c734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c736:	7bfb      	ldrb	r3, [r7, #15]
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 f8fd 	bl	800c938 <USBD_Get_USB_Status>
 800c73e:	4603      	mov	r3, r0
 800c740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c742:	7bbb      	ldrb	r3, [r7, #14]
}
 800c744:	4618      	mov	r0, r3
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	460b      	mov	r3, r1
 800c756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c758:	2300      	movs	r3, #0
 800c75a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c75c:	2300      	movs	r3, #0
 800c75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c766:	78fa      	ldrb	r2, [r7, #3]
 800c768:	4611      	mov	r1, r2
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7f9 fb4d 	bl	8005e0a <HAL_PCD_EP_SetStall>
 800c770:	4603      	mov	r3, r0
 800c772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c774:	7bfb      	ldrb	r3, [r7, #15]
 800c776:	4618      	mov	r0, r3
 800c778:	f000 f8de 	bl	800c938 <USBD_Get_USB_Status>
 800c77c:	4603      	mov	r3, r0
 800c77e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c780:	7bbb      	ldrb	r3, [r7, #14]
}
 800c782:	4618      	mov	r0, r3
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b084      	sub	sp, #16
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
 800c792:	460b      	mov	r3, r1
 800c794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c796:	2300      	movs	r3, #0
 800c798:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c79a:	2300      	movs	r3, #0
 800c79c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c7a4:	78fa      	ldrb	r2, [r7, #3]
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7f9 fb91 	bl	8005ed0 <HAL_PCD_EP_ClrStall>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7b2:	7bfb      	ldrb	r3, [r7, #15]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 f8bf 	bl	800c938 <USBD_Get_USB_Status>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7be:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c7da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c7dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	da0b      	bge.n	800c7fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c7e4:	78fb      	ldrb	r3, [r7, #3]
 800c7e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c7ea:	68f9      	ldr	r1, [r7, #12]
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	00db      	lsls	r3, r3, #3
 800c7f0:	4413      	add	r3, r2
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	440b      	add	r3, r1
 800c7f6:	3316      	adds	r3, #22
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	e00b      	b.n	800c814 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c7fc:	78fb      	ldrb	r3, [r7, #3]
 800c7fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c802:	68f9      	ldr	r1, [r7, #12]
 800c804:	4613      	mov	r3, r2
 800c806:	00db      	lsls	r3, r3, #3
 800c808:	4413      	add	r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	440b      	add	r3, r1
 800c80e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c812:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c814:	4618      	mov	r0, r3
 800c816:	3714      	adds	r7, #20
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	460b      	mov	r3, r1
 800c82a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c82c:	2300      	movs	r3, #0
 800c82e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c830:	2300      	movs	r3, #0
 800c832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c83a:	78fa      	ldrb	r2, [r7, #3]
 800c83c:	4611      	mov	r1, r2
 800c83e:	4618      	mov	r0, r3
 800c840:	f7f9 f980 	bl	8005b44 <HAL_PCD_SetAddress>
 800c844:	4603      	mov	r3, r0
 800c846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c848:	7bfb      	ldrb	r3, [r7, #15]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f000 f874 	bl	800c938 <USBD_Get_USB_Status>
 800c850:	4603      	mov	r3, r0
 800c852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c854:	7bbb      	ldrb	r3, [r7, #14]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b086      	sub	sp, #24
 800c862:	af00      	add	r7, sp, #0
 800c864:	60f8      	str	r0, [r7, #12]
 800c866:	607a      	str	r2, [r7, #4]
 800c868:	603b      	str	r3, [r7, #0]
 800c86a:	460b      	mov	r3, r1
 800c86c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c87c:	7af9      	ldrb	r1, [r7, #11]
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	f7f9 fa88 	bl	8005d96 <HAL_PCD_EP_Transmit>
 800c886:	4603      	mov	r3, r0
 800c888:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c88a:	7dfb      	ldrb	r3, [r7, #23]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 f853 	bl	800c938 <USBD_Get_USB_Status>
 800c892:	4603      	mov	r3, r0
 800c894:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c896:	7dbb      	ldrb	r3, [r7, #22]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	607a      	str	r2, [r7, #4]
 800c8aa:	603b      	str	r3, [r7, #0]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c8be:	7af9      	ldrb	r1, [r7, #11]
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	f7f9 fa14 	bl	8005cf0 <HAL_PCD_EP_Receive>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8cc:	7dfb      	ldrb	r3, [r7, #23]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f000 f832 	bl	800c938 <USBD_Get_USB_Status>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3718      	adds	r7, #24
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b082      	sub	sp, #8
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8f4:	78fa      	ldrb	r2, [r7, #3]
 800c8f6:	4611      	mov	r1, r2
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7f9 fa34 	bl	8005d66 <HAL_PCD_EP_GetRxCount>
 800c8fe:	4603      	mov	r3, r0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c910:	4b03      	ldr	r3, [pc, #12]	@ (800c920 <USBD_static_malloc+0x18>)
}
 800c912:	4618      	mov	r0, r3
 800c914:	370c      	adds	r7, #12
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	20001ad0 	.word	0x20001ad0

0800c924 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]

}
 800c92c:	bf00      	nop
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	4603      	mov	r3, r0
 800c940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c946:	79fb      	ldrb	r3, [r7, #7]
 800c948:	2b03      	cmp	r3, #3
 800c94a:	d817      	bhi.n	800c97c <USBD_Get_USB_Status+0x44>
 800c94c:	a201      	add	r2, pc, #4	@ (adr r2, 800c954 <USBD_Get_USB_Status+0x1c>)
 800c94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c952:	bf00      	nop
 800c954:	0800c965 	.word	0x0800c965
 800c958:	0800c96b 	.word	0x0800c96b
 800c95c:	0800c971 	.word	0x0800c971
 800c960:	0800c977 	.word	0x0800c977
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c964:	2300      	movs	r3, #0
 800c966:	73fb      	strb	r3, [r7, #15]
    break;
 800c968:	e00b      	b.n	800c982 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c96a:	2303      	movs	r3, #3
 800c96c:	73fb      	strb	r3, [r7, #15]
    break;
 800c96e:	e008      	b.n	800c982 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c970:	2301      	movs	r3, #1
 800c972:	73fb      	strb	r3, [r7, #15]
    break;
 800c974:	e005      	b.n	800c982 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c976:	2303      	movs	r3, #3
 800c978:	73fb      	strb	r3, [r7, #15]
    break;
 800c97a:	e002      	b.n	800c982 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c97c:	2303      	movs	r3, #3
 800c97e:	73fb      	strb	r3, [r7, #15]
    break;
 800c980:	bf00      	nop
  }
  return usb_status;
 800c982:	7bfb      	ldrb	r3, [r7, #15]
}
 800c984:	4618      	mov	r0, r3
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <atoi>:
 800c990:	220a      	movs	r2, #10
 800c992:	2100      	movs	r1, #0
 800c994:	f000 bf9e 	b.w	800d8d4 <strtol>

0800c998 <malloc>:
 800c998:	4b02      	ldr	r3, [pc, #8]	@ (800c9a4 <malloc+0xc>)
 800c99a:	4601      	mov	r1, r0
 800c99c:	6818      	ldr	r0, [r3, #0]
 800c99e:	f000 b82d 	b.w	800c9fc <_malloc_r>
 800c9a2:	bf00      	nop
 800c9a4:	20000280 	.word	0x20000280

0800c9a8 <free>:
 800c9a8:	4b02      	ldr	r3, [pc, #8]	@ (800c9b4 <free+0xc>)
 800c9aa:	4601      	mov	r1, r0
 800c9ac:	6818      	ldr	r0, [r3, #0]
 800c9ae:	f002 bd07 	b.w	800f3c0 <_free_r>
 800c9b2:	bf00      	nop
 800c9b4:	20000280 	.word	0x20000280

0800c9b8 <sbrk_aligned>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	4e0f      	ldr	r6, [pc, #60]	@ (800c9f8 <sbrk_aligned+0x40>)
 800c9bc:	460c      	mov	r4, r1
 800c9be:	6831      	ldr	r1, [r6, #0]
 800c9c0:	4605      	mov	r5, r0
 800c9c2:	b911      	cbnz	r1, 800c9ca <sbrk_aligned+0x12>
 800c9c4:	f001 fe26 	bl	800e614 <_sbrk_r>
 800c9c8:	6030      	str	r0, [r6, #0]
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f001 fe21 	bl	800e614 <_sbrk_r>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	d103      	bne.n	800c9de <sbrk_aligned+0x26>
 800c9d6:	f04f 34ff 	mov.w	r4, #4294967295
 800c9da:	4620      	mov	r0, r4
 800c9dc:	bd70      	pop	{r4, r5, r6, pc}
 800c9de:	1cc4      	adds	r4, r0, #3
 800c9e0:	f024 0403 	bic.w	r4, r4, #3
 800c9e4:	42a0      	cmp	r0, r4
 800c9e6:	d0f8      	beq.n	800c9da <sbrk_aligned+0x22>
 800c9e8:	1a21      	subs	r1, r4, r0
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	f001 fe12 	bl	800e614 <_sbrk_r>
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d1f2      	bne.n	800c9da <sbrk_aligned+0x22>
 800c9f4:	e7ef      	b.n	800c9d6 <sbrk_aligned+0x1e>
 800c9f6:	bf00      	nop
 800c9f8:	20001cf0 	.word	0x20001cf0

0800c9fc <_malloc_r>:
 800c9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca00:	1ccd      	adds	r5, r1, #3
 800ca02:	f025 0503 	bic.w	r5, r5, #3
 800ca06:	3508      	adds	r5, #8
 800ca08:	2d0c      	cmp	r5, #12
 800ca0a:	bf38      	it	cc
 800ca0c:	250c      	movcc	r5, #12
 800ca0e:	2d00      	cmp	r5, #0
 800ca10:	4606      	mov	r6, r0
 800ca12:	db01      	blt.n	800ca18 <_malloc_r+0x1c>
 800ca14:	42a9      	cmp	r1, r5
 800ca16:	d904      	bls.n	800ca22 <_malloc_r+0x26>
 800ca18:	230c      	movs	r3, #12
 800ca1a:	6033      	str	r3, [r6, #0]
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800caf8 <_malloc_r+0xfc>
 800ca26:	f000 f869 	bl	800cafc <__malloc_lock>
 800ca2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca2e:	461c      	mov	r4, r3
 800ca30:	bb44      	cbnz	r4, 800ca84 <_malloc_r+0x88>
 800ca32:	4629      	mov	r1, r5
 800ca34:	4630      	mov	r0, r6
 800ca36:	f7ff ffbf 	bl	800c9b8 <sbrk_aligned>
 800ca3a:	1c43      	adds	r3, r0, #1
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	d158      	bne.n	800caf2 <_malloc_r+0xf6>
 800ca40:	f8d8 4000 	ldr.w	r4, [r8]
 800ca44:	4627      	mov	r7, r4
 800ca46:	2f00      	cmp	r7, #0
 800ca48:	d143      	bne.n	800cad2 <_malloc_r+0xd6>
 800ca4a:	2c00      	cmp	r4, #0
 800ca4c:	d04b      	beq.n	800cae6 <_malloc_r+0xea>
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	4639      	mov	r1, r7
 800ca52:	4630      	mov	r0, r6
 800ca54:	eb04 0903 	add.w	r9, r4, r3
 800ca58:	f001 fddc 	bl	800e614 <_sbrk_r>
 800ca5c:	4581      	cmp	r9, r0
 800ca5e:	d142      	bne.n	800cae6 <_malloc_r+0xea>
 800ca60:	6821      	ldr	r1, [r4, #0]
 800ca62:	1a6d      	subs	r5, r5, r1
 800ca64:	4629      	mov	r1, r5
 800ca66:	4630      	mov	r0, r6
 800ca68:	f7ff ffa6 	bl	800c9b8 <sbrk_aligned>
 800ca6c:	3001      	adds	r0, #1
 800ca6e:	d03a      	beq.n	800cae6 <_malloc_r+0xea>
 800ca70:	6823      	ldr	r3, [r4, #0]
 800ca72:	442b      	add	r3, r5
 800ca74:	6023      	str	r3, [r4, #0]
 800ca76:	f8d8 3000 	ldr.w	r3, [r8]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	bb62      	cbnz	r2, 800cad8 <_malloc_r+0xdc>
 800ca7e:	f8c8 7000 	str.w	r7, [r8]
 800ca82:	e00f      	b.n	800caa4 <_malloc_r+0xa8>
 800ca84:	6822      	ldr	r2, [r4, #0]
 800ca86:	1b52      	subs	r2, r2, r5
 800ca88:	d420      	bmi.n	800cacc <_malloc_r+0xd0>
 800ca8a:	2a0b      	cmp	r2, #11
 800ca8c:	d917      	bls.n	800cabe <_malloc_r+0xc2>
 800ca8e:	1961      	adds	r1, r4, r5
 800ca90:	42a3      	cmp	r3, r4
 800ca92:	6025      	str	r5, [r4, #0]
 800ca94:	bf18      	it	ne
 800ca96:	6059      	strne	r1, [r3, #4]
 800ca98:	6863      	ldr	r3, [r4, #4]
 800ca9a:	bf08      	it	eq
 800ca9c:	f8c8 1000 	streq.w	r1, [r8]
 800caa0:	5162      	str	r2, [r4, r5]
 800caa2:	604b      	str	r3, [r1, #4]
 800caa4:	4630      	mov	r0, r6
 800caa6:	f000 f82f 	bl	800cb08 <__malloc_unlock>
 800caaa:	f104 000b 	add.w	r0, r4, #11
 800caae:	1d23      	adds	r3, r4, #4
 800cab0:	f020 0007 	bic.w	r0, r0, #7
 800cab4:	1ac2      	subs	r2, r0, r3
 800cab6:	bf1c      	itt	ne
 800cab8:	1a1b      	subne	r3, r3, r0
 800caba:	50a3      	strne	r3, [r4, r2]
 800cabc:	e7af      	b.n	800ca1e <_malloc_r+0x22>
 800cabe:	6862      	ldr	r2, [r4, #4]
 800cac0:	42a3      	cmp	r3, r4
 800cac2:	bf0c      	ite	eq
 800cac4:	f8c8 2000 	streq.w	r2, [r8]
 800cac8:	605a      	strne	r2, [r3, #4]
 800caca:	e7eb      	b.n	800caa4 <_malloc_r+0xa8>
 800cacc:	4623      	mov	r3, r4
 800cace:	6864      	ldr	r4, [r4, #4]
 800cad0:	e7ae      	b.n	800ca30 <_malloc_r+0x34>
 800cad2:	463c      	mov	r4, r7
 800cad4:	687f      	ldr	r7, [r7, #4]
 800cad6:	e7b6      	b.n	800ca46 <_malloc_r+0x4a>
 800cad8:	461a      	mov	r2, r3
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	42a3      	cmp	r3, r4
 800cade:	d1fb      	bne.n	800cad8 <_malloc_r+0xdc>
 800cae0:	2300      	movs	r3, #0
 800cae2:	6053      	str	r3, [r2, #4]
 800cae4:	e7de      	b.n	800caa4 <_malloc_r+0xa8>
 800cae6:	230c      	movs	r3, #12
 800cae8:	6033      	str	r3, [r6, #0]
 800caea:	4630      	mov	r0, r6
 800caec:	f000 f80c 	bl	800cb08 <__malloc_unlock>
 800caf0:	e794      	b.n	800ca1c <_malloc_r+0x20>
 800caf2:	6005      	str	r5, [r0, #0]
 800caf4:	e7d6      	b.n	800caa4 <_malloc_r+0xa8>
 800caf6:	bf00      	nop
 800caf8:	20001cf4 	.word	0x20001cf4

0800cafc <__malloc_lock>:
 800cafc:	4801      	ldr	r0, [pc, #4]	@ (800cb04 <__malloc_lock+0x8>)
 800cafe:	f001 bdd6 	b.w	800e6ae <__retarget_lock_acquire_recursive>
 800cb02:	bf00      	nop
 800cb04:	20001e38 	.word	0x20001e38

0800cb08 <__malloc_unlock>:
 800cb08:	4801      	ldr	r0, [pc, #4]	@ (800cb10 <__malloc_unlock+0x8>)
 800cb0a:	f001 bdd1 	b.w	800e6b0 <__retarget_lock_release_recursive>
 800cb0e:	bf00      	nop
 800cb10:	20001e38 	.word	0x20001e38

0800cb14 <sulp>:
 800cb14:	b570      	push	{r4, r5, r6, lr}
 800cb16:	4604      	mov	r4, r0
 800cb18:	460d      	mov	r5, r1
 800cb1a:	ec45 4b10 	vmov	d0, r4, r5
 800cb1e:	4616      	mov	r6, r2
 800cb20:	f003 fb58 	bl	80101d4 <__ulp>
 800cb24:	ec51 0b10 	vmov	r0, r1, d0
 800cb28:	b17e      	cbz	r6, 800cb4a <sulp+0x36>
 800cb2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cb2e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	dd09      	ble.n	800cb4a <sulp+0x36>
 800cb36:	051b      	lsls	r3, r3, #20
 800cb38:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cb3c:	2400      	movs	r4, #0
 800cb3e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cb42:	4622      	mov	r2, r4
 800cb44:	462b      	mov	r3, r5
 800cb46:	f7f3 fd5f 	bl	8000608 <__aeabi_dmul>
 800cb4a:	ec41 0b10 	vmov	d0, r0, r1
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}

0800cb50 <_strtod_l>:
 800cb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb54:	b09f      	sub	sp, #124	@ 0x7c
 800cb56:	460c      	mov	r4, r1
 800cb58:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	921a      	str	r2, [sp, #104]	@ 0x68
 800cb5e:	9005      	str	r0, [sp, #20]
 800cb60:	f04f 0a00 	mov.w	sl, #0
 800cb64:	f04f 0b00 	mov.w	fp, #0
 800cb68:	460a      	mov	r2, r1
 800cb6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb6c:	7811      	ldrb	r1, [r2, #0]
 800cb6e:	292b      	cmp	r1, #43	@ 0x2b
 800cb70:	d04a      	beq.n	800cc08 <_strtod_l+0xb8>
 800cb72:	d838      	bhi.n	800cbe6 <_strtod_l+0x96>
 800cb74:	290d      	cmp	r1, #13
 800cb76:	d832      	bhi.n	800cbde <_strtod_l+0x8e>
 800cb78:	2908      	cmp	r1, #8
 800cb7a:	d832      	bhi.n	800cbe2 <_strtod_l+0x92>
 800cb7c:	2900      	cmp	r1, #0
 800cb7e:	d03b      	beq.n	800cbf8 <_strtod_l+0xa8>
 800cb80:	2200      	movs	r2, #0
 800cb82:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cb84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cb86:	782a      	ldrb	r2, [r5, #0]
 800cb88:	2a30      	cmp	r2, #48	@ 0x30
 800cb8a:	f040 80b3 	bne.w	800ccf4 <_strtod_l+0x1a4>
 800cb8e:	786a      	ldrb	r2, [r5, #1]
 800cb90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cb94:	2a58      	cmp	r2, #88	@ 0x58
 800cb96:	d16e      	bne.n	800cc76 <_strtod_l+0x126>
 800cb98:	9302      	str	r3, [sp, #8]
 800cb9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	4a8e      	ldr	r2, [pc, #568]	@ (800cddc <_strtod_l+0x28c>)
 800cba4:	9805      	ldr	r0, [sp, #20]
 800cba6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cba8:	a919      	add	r1, sp, #100	@ 0x64
 800cbaa:	f002 fcbb 	bl	800f524 <__gethex>
 800cbae:	f010 060f 	ands.w	r6, r0, #15
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	d005      	beq.n	800cbc2 <_strtod_l+0x72>
 800cbb6:	2e06      	cmp	r6, #6
 800cbb8:	d128      	bne.n	800cc0c <_strtod_l+0xbc>
 800cbba:	3501      	adds	r5, #1
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	9519      	str	r5, [sp, #100]	@ 0x64
 800cbc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	f040 858e 	bne.w	800d6e6 <_strtod_l+0xb96>
 800cbca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbcc:	b1cb      	cbz	r3, 800cc02 <_strtod_l+0xb2>
 800cbce:	4652      	mov	r2, sl
 800cbd0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cbd4:	ec43 2b10 	vmov	d0, r2, r3
 800cbd8:	b01f      	add	sp, #124	@ 0x7c
 800cbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbde:	2920      	cmp	r1, #32
 800cbe0:	d1ce      	bne.n	800cb80 <_strtod_l+0x30>
 800cbe2:	3201      	adds	r2, #1
 800cbe4:	e7c1      	b.n	800cb6a <_strtod_l+0x1a>
 800cbe6:	292d      	cmp	r1, #45	@ 0x2d
 800cbe8:	d1ca      	bne.n	800cb80 <_strtod_l+0x30>
 800cbea:	2101      	movs	r1, #1
 800cbec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cbee:	1c51      	adds	r1, r2, #1
 800cbf0:	9119      	str	r1, [sp, #100]	@ 0x64
 800cbf2:	7852      	ldrb	r2, [r2, #1]
 800cbf4:	2a00      	cmp	r2, #0
 800cbf6:	d1c5      	bne.n	800cb84 <_strtod_l+0x34>
 800cbf8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cbfa:	9419      	str	r4, [sp, #100]	@ 0x64
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f040 8570 	bne.w	800d6e2 <_strtod_l+0xb92>
 800cc02:	4652      	mov	r2, sl
 800cc04:	465b      	mov	r3, fp
 800cc06:	e7e5      	b.n	800cbd4 <_strtod_l+0x84>
 800cc08:	2100      	movs	r1, #0
 800cc0a:	e7ef      	b.n	800cbec <_strtod_l+0x9c>
 800cc0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cc0e:	b13a      	cbz	r2, 800cc20 <_strtod_l+0xd0>
 800cc10:	2135      	movs	r1, #53	@ 0x35
 800cc12:	a81c      	add	r0, sp, #112	@ 0x70
 800cc14:	f003 fbd8 	bl	80103c8 <__copybits>
 800cc18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc1a:	9805      	ldr	r0, [sp, #20]
 800cc1c:	f002 ffa6 	bl	800fb6c <_Bfree>
 800cc20:	3e01      	subs	r6, #1
 800cc22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cc24:	2e04      	cmp	r6, #4
 800cc26:	d806      	bhi.n	800cc36 <_strtod_l+0xe6>
 800cc28:	e8df f006 	tbb	[pc, r6]
 800cc2c:	201d0314 	.word	0x201d0314
 800cc30:	14          	.byte	0x14
 800cc31:	00          	.byte	0x00
 800cc32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cc36:	05e1      	lsls	r1, r4, #23
 800cc38:	bf48      	it	mi
 800cc3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cc3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc42:	0d1b      	lsrs	r3, r3, #20
 800cc44:	051b      	lsls	r3, r3, #20
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1bb      	bne.n	800cbc2 <_strtod_l+0x72>
 800cc4a:	f001 fd05 	bl	800e658 <__errno>
 800cc4e:	2322      	movs	r3, #34	@ 0x22
 800cc50:	6003      	str	r3, [r0, #0]
 800cc52:	e7b6      	b.n	800cbc2 <_strtod_l+0x72>
 800cc54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cc58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cc5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cc60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cc64:	e7e7      	b.n	800cc36 <_strtod_l+0xe6>
 800cc66:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cde4 <_strtod_l+0x294>
 800cc6a:	e7e4      	b.n	800cc36 <_strtod_l+0xe6>
 800cc6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cc70:	f04f 3aff 	mov.w	sl, #4294967295
 800cc74:	e7df      	b.n	800cc36 <_strtod_l+0xe6>
 800cc76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc78:	1c5a      	adds	r2, r3, #1
 800cc7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc7c:	785b      	ldrb	r3, [r3, #1]
 800cc7e:	2b30      	cmp	r3, #48	@ 0x30
 800cc80:	d0f9      	beq.n	800cc76 <_strtod_l+0x126>
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d09d      	beq.n	800cbc2 <_strtod_l+0x72>
 800cc86:	2301      	movs	r3, #1
 800cc88:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc8c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc8e:	2300      	movs	r3, #0
 800cc90:	9308      	str	r3, [sp, #32]
 800cc92:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc94:	461f      	mov	r7, r3
 800cc96:	220a      	movs	r2, #10
 800cc98:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cc9a:	7805      	ldrb	r5, [r0, #0]
 800cc9c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cca0:	b2d9      	uxtb	r1, r3
 800cca2:	2909      	cmp	r1, #9
 800cca4:	d928      	bls.n	800ccf8 <_strtod_l+0x1a8>
 800cca6:	494e      	ldr	r1, [pc, #312]	@ (800cde0 <_strtod_l+0x290>)
 800cca8:	2201      	movs	r2, #1
 800ccaa:	f001 fbe3 	bl	800e474 <strncmp>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d032      	beq.n	800cd18 <_strtod_l+0x1c8>
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	462a      	mov	r2, r5
 800ccb6:	4681      	mov	r9, r0
 800ccb8:	463d      	mov	r5, r7
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2a65      	cmp	r2, #101	@ 0x65
 800ccbe:	d001      	beq.n	800ccc4 <_strtod_l+0x174>
 800ccc0:	2a45      	cmp	r2, #69	@ 0x45
 800ccc2:	d114      	bne.n	800ccee <_strtod_l+0x19e>
 800ccc4:	b91d      	cbnz	r5, 800ccce <_strtod_l+0x17e>
 800ccc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccc8:	4302      	orrs	r2, r0
 800ccca:	d095      	beq.n	800cbf8 <_strtod_l+0xa8>
 800cccc:	2500      	movs	r5, #0
 800ccce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ccd0:	1c62      	adds	r2, r4, #1
 800ccd2:	9219      	str	r2, [sp, #100]	@ 0x64
 800ccd4:	7862      	ldrb	r2, [r4, #1]
 800ccd6:	2a2b      	cmp	r2, #43	@ 0x2b
 800ccd8:	d077      	beq.n	800cdca <_strtod_l+0x27a>
 800ccda:	2a2d      	cmp	r2, #45	@ 0x2d
 800ccdc:	d07b      	beq.n	800cdd6 <_strtod_l+0x286>
 800ccde:	f04f 0c00 	mov.w	ip, #0
 800cce2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cce6:	2909      	cmp	r1, #9
 800cce8:	f240 8082 	bls.w	800cdf0 <_strtod_l+0x2a0>
 800ccec:	9419      	str	r4, [sp, #100]	@ 0x64
 800ccee:	f04f 0800 	mov.w	r8, #0
 800ccf2:	e0a2      	b.n	800ce3a <_strtod_l+0x2ea>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	e7c7      	b.n	800cc88 <_strtod_l+0x138>
 800ccf8:	2f08      	cmp	r7, #8
 800ccfa:	bfd5      	itete	le
 800ccfc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ccfe:	9908      	ldrgt	r1, [sp, #32]
 800cd00:	fb02 3301 	mlale	r3, r2, r1, r3
 800cd04:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cd08:	f100 0001 	add.w	r0, r0, #1
 800cd0c:	bfd4      	ite	le
 800cd0e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cd10:	9308      	strgt	r3, [sp, #32]
 800cd12:	3701      	adds	r7, #1
 800cd14:	9019      	str	r0, [sp, #100]	@ 0x64
 800cd16:	e7bf      	b.n	800cc98 <_strtod_l+0x148>
 800cd18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd1a:	1c5a      	adds	r2, r3, #1
 800cd1c:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd1e:	785a      	ldrb	r2, [r3, #1]
 800cd20:	b37f      	cbz	r7, 800cd82 <_strtod_l+0x232>
 800cd22:	4681      	mov	r9, r0
 800cd24:	463d      	mov	r5, r7
 800cd26:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cd2a:	2b09      	cmp	r3, #9
 800cd2c:	d912      	bls.n	800cd54 <_strtod_l+0x204>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e7c4      	b.n	800ccbc <_strtod_l+0x16c>
 800cd32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd34:	1c5a      	adds	r2, r3, #1
 800cd36:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd38:	785a      	ldrb	r2, [r3, #1]
 800cd3a:	3001      	adds	r0, #1
 800cd3c:	2a30      	cmp	r2, #48	@ 0x30
 800cd3e:	d0f8      	beq.n	800cd32 <_strtod_l+0x1e2>
 800cd40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cd44:	2b08      	cmp	r3, #8
 800cd46:	f200 84d3 	bhi.w	800d6f0 <_strtod_l+0xba0>
 800cd4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cd4e:	4681      	mov	r9, r0
 800cd50:	2000      	movs	r0, #0
 800cd52:	4605      	mov	r5, r0
 800cd54:	3a30      	subs	r2, #48	@ 0x30
 800cd56:	f100 0301 	add.w	r3, r0, #1
 800cd5a:	d02a      	beq.n	800cdb2 <_strtod_l+0x262>
 800cd5c:	4499      	add	r9, r3
 800cd5e:	eb00 0c05 	add.w	ip, r0, r5
 800cd62:	462b      	mov	r3, r5
 800cd64:	210a      	movs	r1, #10
 800cd66:	4563      	cmp	r3, ip
 800cd68:	d10d      	bne.n	800cd86 <_strtod_l+0x236>
 800cd6a:	1c69      	adds	r1, r5, #1
 800cd6c:	4401      	add	r1, r0
 800cd6e:	4428      	add	r0, r5
 800cd70:	2808      	cmp	r0, #8
 800cd72:	dc16      	bgt.n	800cda2 <_strtod_l+0x252>
 800cd74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cd76:	230a      	movs	r3, #10
 800cd78:	fb03 2300 	mla	r3, r3, r0, r2
 800cd7c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd7e:	2300      	movs	r3, #0
 800cd80:	e018      	b.n	800cdb4 <_strtod_l+0x264>
 800cd82:	4638      	mov	r0, r7
 800cd84:	e7da      	b.n	800cd3c <_strtod_l+0x1ec>
 800cd86:	2b08      	cmp	r3, #8
 800cd88:	f103 0301 	add.w	r3, r3, #1
 800cd8c:	dc03      	bgt.n	800cd96 <_strtod_l+0x246>
 800cd8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cd90:	434e      	muls	r6, r1
 800cd92:	960a      	str	r6, [sp, #40]	@ 0x28
 800cd94:	e7e7      	b.n	800cd66 <_strtod_l+0x216>
 800cd96:	2b10      	cmp	r3, #16
 800cd98:	bfde      	ittt	le
 800cd9a:	9e08      	ldrle	r6, [sp, #32]
 800cd9c:	434e      	mulle	r6, r1
 800cd9e:	9608      	strle	r6, [sp, #32]
 800cda0:	e7e1      	b.n	800cd66 <_strtod_l+0x216>
 800cda2:	280f      	cmp	r0, #15
 800cda4:	dceb      	bgt.n	800cd7e <_strtod_l+0x22e>
 800cda6:	9808      	ldr	r0, [sp, #32]
 800cda8:	230a      	movs	r3, #10
 800cdaa:	fb03 2300 	mla	r3, r3, r0, r2
 800cdae:	9308      	str	r3, [sp, #32]
 800cdb0:	e7e5      	b.n	800cd7e <_strtod_l+0x22e>
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cdb6:	1c50      	adds	r0, r2, #1
 800cdb8:	9019      	str	r0, [sp, #100]	@ 0x64
 800cdba:	7852      	ldrb	r2, [r2, #1]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	460d      	mov	r5, r1
 800cdc0:	e7b1      	b.n	800cd26 <_strtod_l+0x1d6>
 800cdc2:	f04f 0900 	mov.w	r9, #0
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e77d      	b.n	800ccc6 <_strtod_l+0x176>
 800cdca:	f04f 0c00 	mov.w	ip, #0
 800cdce:	1ca2      	adds	r2, r4, #2
 800cdd0:	9219      	str	r2, [sp, #100]	@ 0x64
 800cdd2:	78a2      	ldrb	r2, [r4, #2]
 800cdd4:	e785      	b.n	800cce2 <_strtod_l+0x192>
 800cdd6:	f04f 0c01 	mov.w	ip, #1
 800cdda:	e7f8      	b.n	800cdce <_strtod_l+0x27e>
 800cddc:	08012ddc 	.word	0x08012ddc
 800cde0:	08012dc4 	.word	0x08012dc4
 800cde4:	7ff00000 	.word	0x7ff00000
 800cde8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cdea:	1c51      	adds	r1, r2, #1
 800cdec:	9119      	str	r1, [sp, #100]	@ 0x64
 800cdee:	7852      	ldrb	r2, [r2, #1]
 800cdf0:	2a30      	cmp	r2, #48	@ 0x30
 800cdf2:	d0f9      	beq.n	800cde8 <_strtod_l+0x298>
 800cdf4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cdf8:	2908      	cmp	r1, #8
 800cdfa:	f63f af78 	bhi.w	800ccee <_strtod_l+0x19e>
 800cdfe:	3a30      	subs	r2, #48	@ 0x30
 800ce00:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ce04:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ce06:	f04f 080a 	mov.w	r8, #10
 800ce0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ce0c:	1c56      	adds	r6, r2, #1
 800ce0e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ce10:	7852      	ldrb	r2, [r2, #1]
 800ce12:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ce16:	f1be 0f09 	cmp.w	lr, #9
 800ce1a:	d939      	bls.n	800ce90 <_strtod_l+0x340>
 800ce1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ce1e:	1a76      	subs	r6, r6, r1
 800ce20:	2e08      	cmp	r6, #8
 800ce22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ce26:	dc03      	bgt.n	800ce30 <_strtod_l+0x2e0>
 800ce28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ce2a:	4588      	cmp	r8, r1
 800ce2c:	bfa8      	it	ge
 800ce2e:	4688      	movge	r8, r1
 800ce30:	f1bc 0f00 	cmp.w	ip, #0
 800ce34:	d001      	beq.n	800ce3a <_strtod_l+0x2ea>
 800ce36:	f1c8 0800 	rsb	r8, r8, #0
 800ce3a:	2d00      	cmp	r5, #0
 800ce3c:	d14e      	bne.n	800cedc <_strtod_l+0x38c>
 800ce3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce40:	4308      	orrs	r0, r1
 800ce42:	f47f aebe 	bne.w	800cbc2 <_strtod_l+0x72>
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	f47f aed6 	bne.w	800cbf8 <_strtod_l+0xa8>
 800ce4c:	2a69      	cmp	r2, #105	@ 0x69
 800ce4e:	d028      	beq.n	800cea2 <_strtod_l+0x352>
 800ce50:	dc25      	bgt.n	800ce9e <_strtod_l+0x34e>
 800ce52:	2a49      	cmp	r2, #73	@ 0x49
 800ce54:	d025      	beq.n	800cea2 <_strtod_l+0x352>
 800ce56:	2a4e      	cmp	r2, #78	@ 0x4e
 800ce58:	f47f aece 	bne.w	800cbf8 <_strtod_l+0xa8>
 800ce5c:	499b      	ldr	r1, [pc, #620]	@ (800d0cc <_strtod_l+0x57c>)
 800ce5e:	a819      	add	r0, sp, #100	@ 0x64
 800ce60:	f002 fd82 	bl	800f968 <__match>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	f43f aec7 	beq.w	800cbf8 <_strtod_l+0xa8>
 800ce6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	2b28      	cmp	r3, #40	@ 0x28
 800ce70:	d12e      	bne.n	800ced0 <_strtod_l+0x380>
 800ce72:	4997      	ldr	r1, [pc, #604]	@ (800d0d0 <_strtod_l+0x580>)
 800ce74:	aa1c      	add	r2, sp, #112	@ 0x70
 800ce76:	a819      	add	r0, sp, #100	@ 0x64
 800ce78:	f002 fd8a 	bl	800f990 <__hexnan>
 800ce7c:	2805      	cmp	r0, #5
 800ce7e:	d127      	bne.n	800ced0 <_strtod_l+0x380>
 800ce80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ce82:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ce86:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ce8a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ce8e:	e698      	b.n	800cbc2 <_strtod_l+0x72>
 800ce90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ce92:	fb08 2101 	mla	r1, r8, r1, r2
 800ce96:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ce9a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce9c:	e7b5      	b.n	800ce0a <_strtod_l+0x2ba>
 800ce9e:	2a6e      	cmp	r2, #110	@ 0x6e
 800cea0:	e7da      	b.n	800ce58 <_strtod_l+0x308>
 800cea2:	498c      	ldr	r1, [pc, #560]	@ (800d0d4 <_strtod_l+0x584>)
 800cea4:	a819      	add	r0, sp, #100	@ 0x64
 800cea6:	f002 fd5f 	bl	800f968 <__match>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	f43f aea4 	beq.w	800cbf8 <_strtod_l+0xa8>
 800ceb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ceb2:	4989      	ldr	r1, [pc, #548]	@ (800d0d8 <_strtod_l+0x588>)
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	a819      	add	r0, sp, #100	@ 0x64
 800ceb8:	9319      	str	r3, [sp, #100]	@ 0x64
 800ceba:	f002 fd55 	bl	800f968 <__match>
 800cebe:	b910      	cbnz	r0, 800cec6 <_strtod_l+0x376>
 800cec0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cec2:	3301      	adds	r3, #1
 800cec4:	9319      	str	r3, [sp, #100]	@ 0x64
 800cec6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d0e8 <_strtod_l+0x598>
 800ceca:	f04f 0a00 	mov.w	sl, #0
 800cece:	e678      	b.n	800cbc2 <_strtod_l+0x72>
 800ced0:	4882      	ldr	r0, [pc, #520]	@ (800d0dc <_strtod_l+0x58c>)
 800ced2:	f001 fbfd 	bl	800e6d0 <nan>
 800ced6:	ec5b ab10 	vmov	sl, fp, d0
 800ceda:	e672      	b.n	800cbc2 <_strtod_l+0x72>
 800cedc:	eba8 0309 	sub.w	r3, r8, r9
 800cee0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cee2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cee4:	2f00      	cmp	r7, #0
 800cee6:	bf08      	it	eq
 800cee8:	462f      	moveq	r7, r5
 800ceea:	2d10      	cmp	r5, #16
 800ceec:	462c      	mov	r4, r5
 800ceee:	bfa8      	it	ge
 800cef0:	2410      	movge	r4, #16
 800cef2:	f7f3 fb0f 	bl	8000514 <__aeabi_ui2d>
 800cef6:	2d09      	cmp	r5, #9
 800cef8:	4682      	mov	sl, r0
 800cefa:	468b      	mov	fp, r1
 800cefc:	dc13      	bgt.n	800cf26 <_strtod_l+0x3d6>
 800cefe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f43f ae5e 	beq.w	800cbc2 <_strtod_l+0x72>
 800cf06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf08:	dd78      	ble.n	800cffc <_strtod_l+0x4ac>
 800cf0a:	2b16      	cmp	r3, #22
 800cf0c:	dc5f      	bgt.n	800cfce <_strtod_l+0x47e>
 800cf0e:	4974      	ldr	r1, [pc, #464]	@ (800d0e0 <_strtod_l+0x590>)
 800cf10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf18:	4652      	mov	r2, sl
 800cf1a:	465b      	mov	r3, fp
 800cf1c:	f7f3 fb74 	bl	8000608 <__aeabi_dmul>
 800cf20:	4682      	mov	sl, r0
 800cf22:	468b      	mov	fp, r1
 800cf24:	e64d      	b.n	800cbc2 <_strtod_l+0x72>
 800cf26:	4b6e      	ldr	r3, [pc, #440]	@ (800d0e0 <_strtod_l+0x590>)
 800cf28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cf30:	f7f3 fb6a 	bl	8000608 <__aeabi_dmul>
 800cf34:	4682      	mov	sl, r0
 800cf36:	9808      	ldr	r0, [sp, #32]
 800cf38:	468b      	mov	fp, r1
 800cf3a:	f7f3 faeb 	bl	8000514 <__aeabi_ui2d>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	460b      	mov	r3, r1
 800cf42:	4650      	mov	r0, sl
 800cf44:	4659      	mov	r1, fp
 800cf46:	f7f3 f9a9 	bl	800029c <__adddf3>
 800cf4a:	2d0f      	cmp	r5, #15
 800cf4c:	4682      	mov	sl, r0
 800cf4e:	468b      	mov	fp, r1
 800cf50:	ddd5      	ble.n	800cefe <_strtod_l+0x3ae>
 800cf52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf54:	1b2c      	subs	r4, r5, r4
 800cf56:	441c      	add	r4, r3
 800cf58:	2c00      	cmp	r4, #0
 800cf5a:	f340 8096 	ble.w	800d08a <_strtod_l+0x53a>
 800cf5e:	f014 030f 	ands.w	r3, r4, #15
 800cf62:	d00a      	beq.n	800cf7a <_strtod_l+0x42a>
 800cf64:	495e      	ldr	r1, [pc, #376]	@ (800d0e0 <_strtod_l+0x590>)
 800cf66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf6a:	4652      	mov	r2, sl
 800cf6c:	465b      	mov	r3, fp
 800cf6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf72:	f7f3 fb49 	bl	8000608 <__aeabi_dmul>
 800cf76:	4682      	mov	sl, r0
 800cf78:	468b      	mov	fp, r1
 800cf7a:	f034 040f 	bics.w	r4, r4, #15
 800cf7e:	d073      	beq.n	800d068 <_strtod_l+0x518>
 800cf80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cf84:	dd48      	ble.n	800d018 <_strtod_l+0x4c8>
 800cf86:	2400      	movs	r4, #0
 800cf88:	46a0      	mov	r8, r4
 800cf8a:	940a      	str	r4, [sp, #40]	@ 0x28
 800cf8c:	46a1      	mov	r9, r4
 800cf8e:	9a05      	ldr	r2, [sp, #20]
 800cf90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d0e8 <_strtod_l+0x598>
 800cf94:	2322      	movs	r3, #34	@ 0x22
 800cf96:	6013      	str	r3, [r2, #0]
 800cf98:	f04f 0a00 	mov.w	sl, #0
 800cf9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f43f ae0f 	beq.w	800cbc2 <_strtod_l+0x72>
 800cfa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cfa6:	9805      	ldr	r0, [sp, #20]
 800cfa8:	f002 fde0 	bl	800fb6c <_Bfree>
 800cfac:	9805      	ldr	r0, [sp, #20]
 800cfae:	4649      	mov	r1, r9
 800cfb0:	f002 fddc 	bl	800fb6c <_Bfree>
 800cfb4:	9805      	ldr	r0, [sp, #20]
 800cfb6:	4641      	mov	r1, r8
 800cfb8:	f002 fdd8 	bl	800fb6c <_Bfree>
 800cfbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cfbe:	9805      	ldr	r0, [sp, #20]
 800cfc0:	f002 fdd4 	bl	800fb6c <_Bfree>
 800cfc4:	9805      	ldr	r0, [sp, #20]
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	f002 fdd0 	bl	800fb6c <_Bfree>
 800cfcc:	e5f9      	b.n	800cbc2 <_strtod_l+0x72>
 800cfce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfd0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	dbbc      	blt.n	800cf52 <_strtod_l+0x402>
 800cfd8:	4c41      	ldr	r4, [pc, #260]	@ (800d0e0 <_strtod_l+0x590>)
 800cfda:	f1c5 050f 	rsb	r5, r5, #15
 800cfde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cfe2:	4652      	mov	r2, sl
 800cfe4:	465b      	mov	r3, fp
 800cfe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfea:	f7f3 fb0d 	bl	8000608 <__aeabi_dmul>
 800cfee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cff0:	1b5d      	subs	r5, r3, r5
 800cff2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cff6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cffa:	e78f      	b.n	800cf1c <_strtod_l+0x3cc>
 800cffc:	3316      	adds	r3, #22
 800cffe:	dba8      	blt.n	800cf52 <_strtod_l+0x402>
 800d000:	4b37      	ldr	r3, [pc, #220]	@ (800d0e0 <_strtod_l+0x590>)
 800d002:	eba9 0808 	sub.w	r8, r9, r8
 800d006:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d00a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d00e:	4650      	mov	r0, sl
 800d010:	4659      	mov	r1, fp
 800d012:	f7f3 fc23 	bl	800085c <__aeabi_ddiv>
 800d016:	e783      	b.n	800cf20 <_strtod_l+0x3d0>
 800d018:	4b32      	ldr	r3, [pc, #200]	@ (800d0e4 <_strtod_l+0x594>)
 800d01a:	9308      	str	r3, [sp, #32]
 800d01c:	2300      	movs	r3, #0
 800d01e:	1124      	asrs	r4, r4, #4
 800d020:	4650      	mov	r0, sl
 800d022:	4659      	mov	r1, fp
 800d024:	461e      	mov	r6, r3
 800d026:	2c01      	cmp	r4, #1
 800d028:	dc21      	bgt.n	800d06e <_strtod_l+0x51e>
 800d02a:	b10b      	cbz	r3, 800d030 <_strtod_l+0x4e0>
 800d02c:	4682      	mov	sl, r0
 800d02e:	468b      	mov	fp, r1
 800d030:	492c      	ldr	r1, [pc, #176]	@ (800d0e4 <_strtod_l+0x594>)
 800d032:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d036:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d03a:	4652      	mov	r2, sl
 800d03c:	465b      	mov	r3, fp
 800d03e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d042:	f7f3 fae1 	bl	8000608 <__aeabi_dmul>
 800d046:	4b28      	ldr	r3, [pc, #160]	@ (800d0e8 <_strtod_l+0x598>)
 800d048:	460a      	mov	r2, r1
 800d04a:	400b      	ands	r3, r1
 800d04c:	4927      	ldr	r1, [pc, #156]	@ (800d0ec <_strtod_l+0x59c>)
 800d04e:	428b      	cmp	r3, r1
 800d050:	4682      	mov	sl, r0
 800d052:	d898      	bhi.n	800cf86 <_strtod_l+0x436>
 800d054:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d058:	428b      	cmp	r3, r1
 800d05a:	bf86      	itte	hi
 800d05c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d0f0 <_strtod_l+0x5a0>
 800d060:	f04f 3aff 	movhi.w	sl, #4294967295
 800d064:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d068:	2300      	movs	r3, #0
 800d06a:	9308      	str	r3, [sp, #32]
 800d06c:	e07a      	b.n	800d164 <_strtod_l+0x614>
 800d06e:	07e2      	lsls	r2, r4, #31
 800d070:	d505      	bpl.n	800d07e <_strtod_l+0x52e>
 800d072:	9b08      	ldr	r3, [sp, #32]
 800d074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d078:	f7f3 fac6 	bl	8000608 <__aeabi_dmul>
 800d07c:	2301      	movs	r3, #1
 800d07e:	9a08      	ldr	r2, [sp, #32]
 800d080:	3208      	adds	r2, #8
 800d082:	3601      	adds	r6, #1
 800d084:	1064      	asrs	r4, r4, #1
 800d086:	9208      	str	r2, [sp, #32]
 800d088:	e7cd      	b.n	800d026 <_strtod_l+0x4d6>
 800d08a:	d0ed      	beq.n	800d068 <_strtod_l+0x518>
 800d08c:	4264      	negs	r4, r4
 800d08e:	f014 020f 	ands.w	r2, r4, #15
 800d092:	d00a      	beq.n	800d0aa <_strtod_l+0x55a>
 800d094:	4b12      	ldr	r3, [pc, #72]	@ (800d0e0 <_strtod_l+0x590>)
 800d096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d09a:	4650      	mov	r0, sl
 800d09c:	4659      	mov	r1, fp
 800d09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a2:	f7f3 fbdb 	bl	800085c <__aeabi_ddiv>
 800d0a6:	4682      	mov	sl, r0
 800d0a8:	468b      	mov	fp, r1
 800d0aa:	1124      	asrs	r4, r4, #4
 800d0ac:	d0dc      	beq.n	800d068 <_strtod_l+0x518>
 800d0ae:	2c1f      	cmp	r4, #31
 800d0b0:	dd20      	ble.n	800d0f4 <_strtod_l+0x5a4>
 800d0b2:	2400      	movs	r4, #0
 800d0b4:	46a0      	mov	r8, r4
 800d0b6:	940a      	str	r4, [sp, #40]	@ 0x28
 800d0b8:	46a1      	mov	r9, r4
 800d0ba:	9a05      	ldr	r2, [sp, #20]
 800d0bc:	2322      	movs	r3, #34	@ 0x22
 800d0be:	f04f 0a00 	mov.w	sl, #0
 800d0c2:	f04f 0b00 	mov.w	fp, #0
 800d0c6:	6013      	str	r3, [r2, #0]
 800d0c8:	e768      	b.n	800cf9c <_strtod_l+0x44c>
 800d0ca:	bf00      	nop
 800d0cc:	08012f26 	.word	0x08012f26
 800d0d0:	08012dc8 	.word	0x08012dc8
 800d0d4:	08012f1e 	.word	0x08012f1e
 800d0d8:	08013005 	.word	0x08013005
 800d0dc:	08013001 	.word	0x08013001
 800d0e0:	08013168 	.word	0x08013168
 800d0e4:	08013140 	.word	0x08013140
 800d0e8:	7ff00000 	.word	0x7ff00000
 800d0ec:	7ca00000 	.word	0x7ca00000
 800d0f0:	7fefffff 	.word	0x7fefffff
 800d0f4:	f014 0310 	ands.w	r3, r4, #16
 800d0f8:	bf18      	it	ne
 800d0fa:	236a      	movne	r3, #106	@ 0x6a
 800d0fc:	4ea9      	ldr	r6, [pc, #676]	@ (800d3a4 <_strtod_l+0x854>)
 800d0fe:	9308      	str	r3, [sp, #32]
 800d100:	4650      	mov	r0, sl
 800d102:	4659      	mov	r1, fp
 800d104:	2300      	movs	r3, #0
 800d106:	07e2      	lsls	r2, r4, #31
 800d108:	d504      	bpl.n	800d114 <_strtod_l+0x5c4>
 800d10a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d10e:	f7f3 fa7b 	bl	8000608 <__aeabi_dmul>
 800d112:	2301      	movs	r3, #1
 800d114:	1064      	asrs	r4, r4, #1
 800d116:	f106 0608 	add.w	r6, r6, #8
 800d11a:	d1f4      	bne.n	800d106 <_strtod_l+0x5b6>
 800d11c:	b10b      	cbz	r3, 800d122 <_strtod_l+0x5d2>
 800d11e:	4682      	mov	sl, r0
 800d120:	468b      	mov	fp, r1
 800d122:	9b08      	ldr	r3, [sp, #32]
 800d124:	b1b3      	cbz	r3, 800d154 <_strtod_l+0x604>
 800d126:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d12a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d12e:	2b00      	cmp	r3, #0
 800d130:	4659      	mov	r1, fp
 800d132:	dd0f      	ble.n	800d154 <_strtod_l+0x604>
 800d134:	2b1f      	cmp	r3, #31
 800d136:	dd55      	ble.n	800d1e4 <_strtod_l+0x694>
 800d138:	2b34      	cmp	r3, #52	@ 0x34
 800d13a:	bfde      	ittt	le
 800d13c:	f04f 33ff 	movle.w	r3, #4294967295
 800d140:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d144:	4093      	lslle	r3, r2
 800d146:	f04f 0a00 	mov.w	sl, #0
 800d14a:	bfcc      	ite	gt
 800d14c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d150:	ea03 0b01 	andle.w	fp, r3, r1
 800d154:	2200      	movs	r2, #0
 800d156:	2300      	movs	r3, #0
 800d158:	4650      	mov	r0, sl
 800d15a:	4659      	mov	r1, fp
 800d15c:	f7f3 fcbc 	bl	8000ad8 <__aeabi_dcmpeq>
 800d160:	2800      	cmp	r0, #0
 800d162:	d1a6      	bne.n	800d0b2 <_strtod_l+0x562>
 800d164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d16a:	9805      	ldr	r0, [sp, #20]
 800d16c:	462b      	mov	r3, r5
 800d16e:	463a      	mov	r2, r7
 800d170:	f002 fd64 	bl	800fc3c <__s2b>
 800d174:	900a      	str	r0, [sp, #40]	@ 0x28
 800d176:	2800      	cmp	r0, #0
 800d178:	f43f af05 	beq.w	800cf86 <_strtod_l+0x436>
 800d17c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d17e:	2a00      	cmp	r2, #0
 800d180:	eba9 0308 	sub.w	r3, r9, r8
 800d184:	bfa8      	it	ge
 800d186:	2300      	movge	r3, #0
 800d188:	9312      	str	r3, [sp, #72]	@ 0x48
 800d18a:	2400      	movs	r4, #0
 800d18c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d190:	9316      	str	r3, [sp, #88]	@ 0x58
 800d192:	46a0      	mov	r8, r4
 800d194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d196:	9805      	ldr	r0, [sp, #20]
 800d198:	6859      	ldr	r1, [r3, #4]
 800d19a:	f002 fca7 	bl	800faec <_Balloc>
 800d19e:	4681      	mov	r9, r0
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	f43f aef4 	beq.w	800cf8e <_strtod_l+0x43e>
 800d1a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1a8:	691a      	ldr	r2, [r3, #16]
 800d1aa:	3202      	adds	r2, #2
 800d1ac:	f103 010c 	add.w	r1, r3, #12
 800d1b0:	0092      	lsls	r2, r2, #2
 800d1b2:	300c      	adds	r0, #12
 800d1b4:	f001 fa7d 	bl	800e6b2 <memcpy>
 800d1b8:	ec4b ab10 	vmov	d0, sl, fp
 800d1bc:	9805      	ldr	r0, [sp, #20]
 800d1be:	aa1c      	add	r2, sp, #112	@ 0x70
 800d1c0:	a91b      	add	r1, sp, #108	@ 0x6c
 800d1c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d1c6:	f003 f875 	bl	80102b4 <__d2b>
 800d1ca:	901a      	str	r0, [sp, #104]	@ 0x68
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	f43f aede 	beq.w	800cf8e <_strtod_l+0x43e>
 800d1d2:	9805      	ldr	r0, [sp, #20]
 800d1d4:	2101      	movs	r1, #1
 800d1d6:	f002 fdc7 	bl	800fd68 <__i2b>
 800d1da:	4680      	mov	r8, r0
 800d1dc:	b948      	cbnz	r0, 800d1f2 <_strtod_l+0x6a2>
 800d1de:	f04f 0800 	mov.w	r8, #0
 800d1e2:	e6d4      	b.n	800cf8e <_strtod_l+0x43e>
 800d1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ec:	ea03 0a0a 	and.w	sl, r3, sl
 800d1f0:	e7b0      	b.n	800d154 <_strtod_l+0x604>
 800d1f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d1f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d1f6:	2d00      	cmp	r5, #0
 800d1f8:	bfab      	itete	ge
 800d1fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d1fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d1fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d200:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d202:	bfac      	ite	ge
 800d204:	18ef      	addge	r7, r5, r3
 800d206:	1b5e      	sublt	r6, r3, r5
 800d208:	9b08      	ldr	r3, [sp, #32]
 800d20a:	1aed      	subs	r5, r5, r3
 800d20c:	4415      	add	r5, r2
 800d20e:	4b66      	ldr	r3, [pc, #408]	@ (800d3a8 <_strtod_l+0x858>)
 800d210:	3d01      	subs	r5, #1
 800d212:	429d      	cmp	r5, r3
 800d214:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d218:	da50      	bge.n	800d2bc <_strtod_l+0x76c>
 800d21a:	1b5b      	subs	r3, r3, r5
 800d21c:	2b1f      	cmp	r3, #31
 800d21e:	eba2 0203 	sub.w	r2, r2, r3
 800d222:	f04f 0101 	mov.w	r1, #1
 800d226:	dc3d      	bgt.n	800d2a4 <_strtod_l+0x754>
 800d228:	fa01 f303 	lsl.w	r3, r1, r3
 800d22c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d22e:	2300      	movs	r3, #0
 800d230:	9310      	str	r3, [sp, #64]	@ 0x40
 800d232:	18bd      	adds	r5, r7, r2
 800d234:	9b08      	ldr	r3, [sp, #32]
 800d236:	42af      	cmp	r7, r5
 800d238:	4416      	add	r6, r2
 800d23a:	441e      	add	r6, r3
 800d23c:	463b      	mov	r3, r7
 800d23e:	bfa8      	it	ge
 800d240:	462b      	movge	r3, r5
 800d242:	42b3      	cmp	r3, r6
 800d244:	bfa8      	it	ge
 800d246:	4633      	movge	r3, r6
 800d248:	2b00      	cmp	r3, #0
 800d24a:	bfc2      	ittt	gt
 800d24c:	1aed      	subgt	r5, r5, r3
 800d24e:	1af6      	subgt	r6, r6, r3
 800d250:	1aff      	subgt	r7, r7, r3
 800d252:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d254:	2b00      	cmp	r3, #0
 800d256:	dd16      	ble.n	800d286 <_strtod_l+0x736>
 800d258:	4641      	mov	r1, r8
 800d25a:	9805      	ldr	r0, [sp, #20]
 800d25c:	461a      	mov	r2, r3
 800d25e:	f002 fe43 	bl	800fee8 <__pow5mult>
 800d262:	4680      	mov	r8, r0
 800d264:	2800      	cmp	r0, #0
 800d266:	d0ba      	beq.n	800d1de <_strtod_l+0x68e>
 800d268:	4601      	mov	r1, r0
 800d26a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d26c:	9805      	ldr	r0, [sp, #20]
 800d26e:	f002 fd91 	bl	800fd94 <__multiply>
 800d272:	900e      	str	r0, [sp, #56]	@ 0x38
 800d274:	2800      	cmp	r0, #0
 800d276:	f43f ae8a 	beq.w	800cf8e <_strtod_l+0x43e>
 800d27a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d27c:	9805      	ldr	r0, [sp, #20]
 800d27e:	f002 fc75 	bl	800fb6c <_Bfree>
 800d282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d284:	931a      	str	r3, [sp, #104]	@ 0x68
 800d286:	2d00      	cmp	r5, #0
 800d288:	dc1d      	bgt.n	800d2c6 <_strtod_l+0x776>
 800d28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	dd23      	ble.n	800d2d8 <_strtod_l+0x788>
 800d290:	4649      	mov	r1, r9
 800d292:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d294:	9805      	ldr	r0, [sp, #20]
 800d296:	f002 fe27 	bl	800fee8 <__pow5mult>
 800d29a:	4681      	mov	r9, r0
 800d29c:	b9e0      	cbnz	r0, 800d2d8 <_strtod_l+0x788>
 800d29e:	f04f 0900 	mov.w	r9, #0
 800d2a2:	e674      	b.n	800cf8e <_strtod_l+0x43e>
 800d2a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d2a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d2ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d2b0:	35e2      	adds	r5, #226	@ 0xe2
 800d2b2:	fa01 f305 	lsl.w	r3, r1, r5
 800d2b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d2b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d2ba:	e7ba      	b.n	800d232 <_strtod_l+0x6e2>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	9310      	str	r3, [sp, #64]	@ 0x40
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d2c4:	e7b5      	b.n	800d232 <_strtod_l+0x6e2>
 800d2c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2c8:	9805      	ldr	r0, [sp, #20]
 800d2ca:	462a      	mov	r2, r5
 800d2cc:	f002 fe66 	bl	800ff9c <__lshift>
 800d2d0:	901a      	str	r0, [sp, #104]	@ 0x68
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	d1d9      	bne.n	800d28a <_strtod_l+0x73a>
 800d2d6:	e65a      	b.n	800cf8e <_strtod_l+0x43e>
 800d2d8:	2e00      	cmp	r6, #0
 800d2da:	dd07      	ble.n	800d2ec <_strtod_l+0x79c>
 800d2dc:	4649      	mov	r1, r9
 800d2de:	9805      	ldr	r0, [sp, #20]
 800d2e0:	4632      	mov	r2, r6
 800d2e2:	f002 fe5b 	bl	800ff9c <__lshift>
 800d2e6:	4681      	mov	r9, r0
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d0d8      	beq.n	800d29e <_strtod_l+0x74e>
 800d2ec:	2f00      	cmp	r7, #0
 800d2ee:	dd08      	ble.n	800d302 <_strtod_l+0x7b2>
 800d2f0:	4641      	mov	r1, r8
 800d2f2:	9805      	ldr	r0, [sp, #20]
 800d2f4:	463a      	mov	r2, r7
 800d2f6:	f002 fe51 	bl	800ff9c <__lshift>
 800d2fa:	4680      	mov	r8, r0
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	f43f ae46 	beq.w	800cf8e <_strtod_l+0x43e>
 800d302:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d304:	9805      	ldr	r0, [sp, #20]
 800d306:	464a      	mov	r2, r9
 800d308:	f002 fed0 	bl	80100ac <__mdiff>
 800d30c:	4604      	mov	r4, r0
 800d30e:	2800      	cmp	r0, #0
 800d310:	f43f ae3d 	beq.w	800cf8e <_strtod_l+0x43e>
 800d314:	68c3      	ldr	r3, [r0, #12]
 800d316:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d318:	2300      	movs	r3, #0
 800d31a:	60c3      	str	r3, [r0, #12]
 800d31c:	4641      	mov	r1, r8
 800d31e:	f002 fea9 	bl	8010074 <__mcmp>
 800d322:	2800      	cmp	r0, #0
 800d324:	da46      	bge.n	800d3b4 <_strtod_l+0x864>
 800d326:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d328:	ea53 030a 	orrs.w	r3, r3, sl
 800d32c:	d16c      	bne.n	800d408 <_strtod_l+0x8b8>
 800d32e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d332:	2b00      	cmp	r3, #0
 800d334:	d168      	bne.n	800d408 <_strtod_l+0x8b8>
 800d336:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d33a:	0d1b      	lsrs	r3, r3, #20
 800d33c:	051b      	lsls	r3, r3, #20
 800d33e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d342:	d961      	bls.n	800d408 <_strtod_l+0x8b8>
 800d344:	6963      	ldr	r3, [r4, #20]
 800d346:	b913      	cbnz	r3, 800d34e <_strtod_l+0x7fe>
 800d348:	6923      	ldr	r3, [r4, #16]
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	dd5c      	ble.n	800d408 <_strtod_l+0x8b8>
 800d34e:	4621      	mov	r1, r4
 800d350:	2201      	movs	r2, #1
 800d352:	9805      	ldr	r0, [sp, #20]
 800d354:	f002 fe22 	bl	800ff9c <__lshift>
 800d358:	4641      	mov	r1, r8
 800d35a:	4604      	mov	r4, r0
 800d35c:	f002 fe8a 	bl	8010074 <__mcmp>
 800d360:	2800      	cmp	r0, #0
 800d362:	dd51      	ble.n	800d408 <_strtod_l+0x8b8>
 800d364:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d368:	9a08      	ldr	r2, [sp, #32]
 800d36a:	0d1b      	lsrs	r3, r3, #20
 800d36c:	051b      	lsls	r3, r3, #20
 800d36e:	2a00      	cmp	r2, #0
 800d370:	d06b      	beq.n	800d44a <_strtod_l+0x8fa>
 800d372:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d376:	d868      	bhi.n	800d44a <_strtod_l+0x8fa>
 800d378:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d37c:	f67f ae9d 	bls.w	800d0ba <_strtod_l+0x56a>
 800d380:	4b0a      	ldr	r3, [pc, #40]	@ (800d3ac <_strtod_l+0x85c>)
 800d382:	4650      	mov	r0, sl
 800d384:	4659      	mov	r1, fp
 800d386:	2200      	movs	r2, #0
 800d388:	f7f3 f93e 	bl	8000608 <__aeabi_dmul>
 800d38c:	4b08      	ldr	r3, [pc, #32]	@ (800d3b0 <_strtod_l+0x860>)
 800d38e:	400b      	ands	r3, r1
 800d390:	4682      	mov	sl, r0
 800d392:	468b      	mov	fp, r1
 800d394:	2b00      	cmp	r3, #0
 800d396:	f47f ae05 	bne.w	800cfa4 <_strtod_l+0x454>
 800d39a:	9a05      	ldr	r2, [sp, #20]
 800d39c:	2322      	movs	r3, #34	@ 0x22
 800d39e:	6013      	str	r3, [r2, #0]
 800d3a0:	e600      	b.n	800cfa4 <_strtod_l+0x454>
 800d3a2:	bf00      	nop
 800d3a4:	08012df0 	.word	0x08012df0
 800d3a8:	fffffc02 	.word	0xfffffc02
 800d3ac:	39500000 	.word	0x39500000
 800d3b0:	7ff00000 	.word	0x7ff00000
 800d3b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d3b8:	d165      	bne.n	800d486 <_strtod_l+0x936>
 800d3ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d3bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d3c0:	b35a      	cbz	r2, 800d41a <_strtod_l+0x8ca>
 800d3c2:	4a9f      	ldr	r2, [pc, #636]	@ (800d640 <_strtod_l+0xaf0>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d12b      	bne.n	800d420 <_strtod_l+0x8d0>
 800d3c8:	9b08      	ldr	r3, [sp, #32]
 800d3ca:	4651      	mov	r1, sl
 800d3cc:	b303      	cbz	r3, 800d410 <_strtod_l+0x8c0>
 800d3ce:	4b9d      	ldr	r3, [pc, #628]	@ (800d644 <_strtod_l+0xaf4>)
 800d3d0:	465a      	mov	r2, fp
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d3dc:	d81b      	bhi.n	800d416 <_strtod_l+0x8c6>
 800d3de:	0d1b      	lsrs	r3, r3, #20
 800d3e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d3e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d3e8:	4299      	cmp	r1, r3
 800d3ea:	d119      	bne.n	800d420 <_strtod_l+0x8d0>
 800d3ec:	4b96      	ldr	r3, [pc, #600]	@ (800d648 <_strtod_l+0xaf8>)
 800d3ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d102      	bne.n	800d3fa <_strtod_l+0x8aa>
 800d3f4:	3101      	adds	r1, #1
 800d3f6:	f43f adca 	beq.w	800cf8e <_strtod_l+0x43e>
 800d3fa:	4b92      	ldr	r3, [pc, #584]	@ (800d644 <_strtod_l+0xaf4>)
 800d3fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d3fe:	401a      	ands	r2, r3
 800d400:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d404:	f04f 0a00 	mov.w	sl, #0
 800d408:	9b08      	ldr	r3, [sp, #32]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1b8      	bne.n	800d380 <_strtod_l+0x830>
 800d40e:	e5c9      	b.n	800cfa4 <_strtod_l+0x454>
 800d410:	f04f 33ff 	mov.w	r3, #4294967295
 800d414:	e7e8      	b.n	800d3e8 <_strtod_l+0x898>
 800d416:	4613      	mov	r3, r2
 800d418:	e7e6      	b.n	800d3e8 <_strtod_l+0x898>
 800d41a:	ea53 030a 	orrs.w	r3, r3, sl
 800d41e:	d0a1      	beq.n	800d364 <_strtod_l+0x814>
 800d420:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d422:	b1db      	cbz	r3, 800d45c <_strtod_l+0x90c>
 800d424:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d426:	4213      	tst	r3, r2
 800d428:	d0ee      	beq.n	800d408 <_strtod_l+0x8b8>
 800d42a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d42c:	9a08      	ldr	r2, [sp, #32]
 800d42e:	4650      	mov	r0, sl
 800d430:	4659      	mov	r1, fp
 800d432:	b1bb      	cbz	r3, 800d464 <_strtod_l+0x914>
 800d434:	f7ff fb6e 	bl	800cb14 <sulp>
 800d438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d43c:	ec53 2b10 	vmov	r2, r3, d0
 800d440:	f7f2 ff2c 	bl	800029c <__adddf3>
 800d444:	4682      	mov	sl, r0
 800d446:	468b      	mov	fp, r1
 800d448:	e7de      	b.n	800d408 <_strtod_l+0x8b8>
 800d44a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d44e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d452:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d456:	f04f 3aff 	mov.w	sl, #4294967295
 800d45a:	e7d5      	b.n	800d408 <_strtod_l+0x8b8>
 800d45c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d45e:	ea13 0f0a 	tst.w	r3, sl
 800d462:	e7e1      	b.n	800d428 <_strtod_l+0x8d8>
 800d464:	f7ff fb56 	bl	800cb14 <sulp>
 800d468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d46c:	ec53 2b10 	vmov	r2, r3, d0
 800d470:	f7f2 ff12 	bl	8000298 <__aeabi_dsub>
 800d474:	2200      	movs	r2, #0
 800d476:	2300      	movs	r3, #0
 800d478:	4682      	mov	sl, r0
 800d47a:	468b      	mov	fp, r1
 800d47c:	f7f3 fb2c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d480:	2800      	cmp	r0, #0
 800d482:	d0c1      	beq.n	800d408 <_strtod_l+0x8b8>
 800d484:	e619      	b.n	800d0ba <_strtod_l+0x56a>
 800d486:	4641      	mov	r1, r8
 800d488:	4620      	mov	r0, r4
 800d48a:	f002 ff6b 	bl	8010364 <__ratio>
 800d48e:	ec57 6b10 	vmov	r6, r7, d0
 800d492:	2200      	movs	r2, #0
 800d494:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d498:	4630      	mov	r0, r6
 800d49a:	4639      	mov	r1, r7
 800d49c:	f7f3 fb30 	bl	8000b00 <__aeabi_dcmple>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	d06f      	beq.n	800d584 <_strtod_l+0xa34>
 800d4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d17a      	bne.n	800d5a0 <_strtod_l+0xa50>
 800d4aa:	f1ba 0f00 	cmp.w	sl, #0
 800d4ae:	d158      	bne.n	800d562 <_strtod_l+0xa12>
 800d4b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d15a      	bne.n	800d570 <_strtod_l+0xa20>
 800d4ba:	4b64      	ldr	r3, [pc, #400]	@ (800d64c <_strtod_l+0xafc>)
 800d4bc:	2200      	movs	r2, #0
 800d4be:	4630      	mov	r0, r6
 800d4c0:	4639      	mov	r1, r7
 800d4c2:	f7f3 fb13 	bl	8000aec <__aeabi_dcmplt>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	d159      	bne.n	800d57e <_strtod_l+0xa2e>
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	4639      	mov	r1, r7
 800d4ce:	4b60      	ldr	r3, [pc, #384]	@ (800d650 <_strtod_l+0xb00>)
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f7f3 f899 	bl	8000608 <__aeabi_dmul>
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	460f      	mov	r7, r1
 800d4da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d4de:	9606      	str	r6, [sp, #24]
 800d4e0:	9307      	str	r3, [sp, #28]
 800d4e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4e6:	4d57      	ldr	r5, [pc, #348]	@ (800d644 <_strtod_l+0xaf4>)
 800d4e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d4ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4ee:	401d      	ands	r5, r3
 800d4f0:	4b58      	ldr	r3, [pc, #352]	@ (800d654 <_strtod_l+0xb04>)
 800d4f2:	429d      	cmp	r5, r3
 800d4f4:	f040 80b2 	bne.w	800d65c <_strtod_l+0xb0c>
 800d4f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d4fe:	ec4b ab10 	vmov	d0, sl, fp
 800d502:	f002 fe67 	bl	80101d4 <__ulp>
 800d506:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d50a:	ec51 0b10 	vmov	r0, r1, d0
 800d50e:	f7f3 f87b 	bl	8000608 <__aeabi_dmul>
 800d512:	4652      	mov	r2, sl
 800d514:	465b      	mov	r3, fp
 800d516:	f7f2 fec1 	bl	800029c <__adddf3>
 800d51a:	460b      	mov	r3, r1
 800d51c:	4949      	ldr	r1, [pc, #292]	@ (800d644 <_strtod_l+0xaf4>)
 800d51e:	4a4e      	ldr	r2, [pc, #312]	@ (800d658 <_strtod_l+0xb08>)
 800d520:	4019      	ands	r1, r3
 800d522:	4291      	cmp	r1, r2
 800d524:	4682      	mov	sl, r0
 800d526:	d942      	bls.n	800d5ae <_strtod_l+0xa5e>
 800d528:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d52a:	4b47      	ldr	r3, [pc, #284]	@ (800d648 <_strtod_l+0xaf8>)
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d103      	bne.n	800d538 <_strtod_l+0x9e8>
 800d530:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d532:	3301      	adds	r3, #1
 800d534:	f43f ad2b 	beq.w	800cf8e <_strtod_l+0x43e>
 800d538:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d648 <_strtod_l+0xaf8>
 800d53c:	f04f 3aff 	mov.w	sl, #4294967295
 800d540:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d542:	9805      	ldr	r0, [sp, #20]
 800d544:	f002 fb12 	bl	800fb6c <_Bfree>
 800d548:	9805      	ldr	r0, [sp, #20]
 800d54a:	4649      	mov	r1, r9
 800d54c:	f002 fb0e 	bl	800fb6c <_Bfree>
 800d550:	9805      	ldr	r0, [sp, #20]
 800d552:	4641      	mov	r1, r8
 800d554:	f002 fb0a 	bl	800fb6c <_Bfree>
 800d558:	9805      	ldr	r0, [sp, #20]
 800d55a:	4621      	mov	r1, r4
 800d55c:	f002 fb06 	bl	800fb6c <_Bfree>
 800d560:	e618      	b.n	800d194 <_strtod_l+0x644>
 800d562:	f1ba 0f01 	cmp.w	sl, #1
 800d566:	d103      	bne.n	800d570 <_strtod_l+0xa20>
 800d568:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	f43f ada5 	beq.w	800d0ba <_strtod_l+0x56a>
 800d570:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d620 <_strtod_l+0xad0>
 800d574:	4f35      	ldr	r7, [pc, #212]	@ (800d64c <_strtod_l+0xafc>)
 800d576:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d57a:	2600      	movs	r6, #0
 800d57c:	e7b1      	b.n	800d4e2 <_strtod_l+0x992>
 800d57e:	4f34      	ldr	r7, [pc, #208]	@ (800d650 <_strtod_l+0xb00>)
 800d580:	2600      	movs	r6, #0
 800d582:	e7aa      	b.n	800d4da <_strtod_l+0x98a>
 800d584:	4b32      	ldr	r3, [pc, #200]	@ (800d650 <_strtod_l+0xb00>)
 800d586:	4630      	mov	r0, r6
 800d588:	4639      	mov	r1, r7
 800d58a:	2200      	movs	r2, #0
 800d58c:	f7f3 f83c 	bl	8000608 <__aeabi_dmul>
 800d590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d592:	4606      	mov	r6, r0
 800d594:	460f      	mov	r7, r1
 800d596:	2b00      	cmp	r3, #0
 800d598:	d09f      	beq.n	800d4da <_strtod_l+0x98a>
 800d59a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d59e:	e7a0      	b.n	800d4e2 <_strtod_l+0x992>
 800d5a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d628 <_strtod_l+0xad8>
 800d5a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d5a8:	ec57 6b17 	vmov	r6, r7, d7
 800d5ac:	e799      	b.n	800d4e2 <_strtod_l+0x992>
 800d5ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d5b2:	9b08      	ldr	r3, [sp, #32]
 800d5b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d1c1      	bne.n	800d540 <_strtod_l+0x9f0>
 800d5bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d5c0:	0d1b      	lsrs	r3, r3, #20
 800d5c2:	051b      	lsls	r3, r3, #20
 800d5c4:	429d      	cmp	r5, r3
 800d5c6:	d1bb      	bne.n	800d540 <_strtod_l+0x9f0>
 800d5c8:	4630      	mov	r0, r6
 800d5ca:	4639      	mov	r1, r7
 800d5cc:	f7f3 fb7c 	bl	8000cc8 <__aeabi_d2lz>
 800d5d0:	f7f2 ffec 	bl	80005ac <__aeabi_l2d>
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	4630      	mov	r0, r6
 800d5da:	4639      	mov	r1, r7
 800d5dc:	f7f2 fe5c 	bl	8000298 <__aeabi_dsub>
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d5e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5ee:	ea46 060a 	orr.w	r6, r6, sl
 800d5f2:	431e      	orrs	r6, r3
 800d5f4:	d06f      	beq.n	800d6d6 <_strtod_l+0xb86>
 800d5f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d630 <_strtod_l+0xae0>)
 800d5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fc:	f7f3 fa76 	bl	8000aec <__aeabi_dcmplt>
 800d600:	2800      	cmp	r0, #0
 800d602:	f47f accf 	bne.w	800cfa4 <_strtod_l+0x454>
 800d606:	a30c      	add	r3, pc, #48	@ (adr r3, 800d638 <_strtod_l+0xae8>)
 800d608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d610:	f7f3 fa8a 	bl	8000b28 <__aeabi_dcmpgt>
 800d614:	2800      	cmp	r0, #0
 800d616:	d093      	beq.n	800d540 <_strtod_l+0x9f0>
 800d618:	e4c4      	b.n	800cfa4 <_strtod_l+0x454>
 800d61a:	bf00      	nop
 800d61c:	f3af 8000 	nop.w
 800d620:	00000000 	.word	0x00000000
 800d624:	bff00000 	.word	0xbff00000
 800d628:	00000000 	.word	0x00000000
 800d62c:	3ff00000 	.word	0x3ff00000
 800d630:	94a03595 	.word	0x94a03595
 800d634:	3fdfffff 	.word	0x3fdfffff
 800d638:	35afe535 	.word	0x35afe535
 800d63c:	3fe00000 	.word	0x3fe00000
 800d640:	000fffff 	.word	0x000fffff
 800d644:	7ff00000 	.word	0x7ff00000
 800d648:	7fefffff 	.word	0x7fefffff
 800d64c:	3ff00000 	.word	0x3ff00000
 800d650:	3fe00000 	.word	0x3fe00000
 800d654:	7fe00000 	.word	0x7fe00000
 800d658:	7c9fffff 	.word	0x7c9fffff
 800d65c:	9b08      	ldr	r3, [sp, #32]
 800d65e:	b323      	cbz	r3, 800d6aa <_strtod_l+0xb5a>
 800d660:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d664:	d821      	bhi.n	800d6aa <_strtod_l+0xb5a>
 800d666:	a328      	add	r3, pc, #160	@ (adr r3, 800d708 <_strtod_l+0xbb8>)
 800d668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66c:	4630      	mov	r0, r6
 800d66e:	4639      	mov	r1, r7
 800d670:	f7f3 fa46 	bl	8000b00 <__aeabi_dcmple>
 800d674:	b1a0      	cbz	r0, 800d6a0 <_strtod_l+0xb50>
 800d676:	4639      	mov	r1, r7
 800d678:	4630      	mov	r0, r6
 800d67a:	f7f3 fa9d 	bl	8000bb8 <__aeabi_d2uiz>
 800d67e:	2801      	cmp	r0, #1
 800d680:	bf38      	it	cc
 800d682:	2001      	movcc	r0, #1
 800d684:	f7f2 ff46 	bl	8000514 <__aeabi_ui2d>
 800d688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d68a:	4606      	mov	r6, r0
 800d68c:	460f      	mov	r7, r1
 800d68e:	b9fb      	cbnz	r3, 800d6d0 <_strtod_l+0xb80>
 800d690:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d694:	9014      	str	r0, [sp, #80]	@ 0x50
 800d696:	9315      	str	r3, [sp, #84]	@ 0x54
 800d698:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d69c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d6a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d6a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d6a6:	1b5b      	subs	r3, r3, r5
 800d6a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d6aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d6ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d6b2:	f002 fd8f 	bl	80101d4 <__ulp>
 800d6b6:	4650      	mov	r0, sl
 800d6b8:	ec53 2b10 	vmov	r2, r3, d0
 800d6bc:	4659      	mov	r1, fp
 800d6be:	f7f2 ffa3 	bl	8000608 <__aeabi_dmul>
 800d6c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d6c6:	f7f2 fde9 	bl	800029c <__adddf3>
 800d6ca:	4682      	mov	sl, r0
 800d6cc:	468b      	mov	fp, r1
 800d6ce:	e770      	b.n	800d5b2 <_strtod_l+0xa62>
 800d6d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d6d4:	e7e0      	b.n	800d698 <_strtod_l+0xb48>
 800d6d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d710 <_strtod_l+0xbc0>)
 800d6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6dc:	f7f3 fa06 	bl	8000aec <__aeabi_dcmplt>
 800d6e0:	e798      	b.n	800d614 <_strtod_l+0xac4>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d6e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6ea:	6013      	str	r3, [r2, #0]
 800d6ec:	f7ff ba6d 	b.w	800cbca <_strtod_l+0x7a>
 800d6f0:	2a65      	cmp	r2, #101	@ 0x65
 800d6f2:	f43f ab66 	beq.w	800cdc2 <_strtod_l+0x272>
 800d6f6:	2a45      	cmp	r2, #69	@ 0x45
 800d6f8:	f43f ab63 	beq.w	800cdc2 <_strtod_l+0x272>
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	f7ff bb9e 	b.w	800ce3e <_strtod_l+0x2ee>
 800d702:	bf00      	nop
 800d704:	f3af 8000 	nop.w
 800d708:	ffc00000 	.word	0xffc00000
 800d70c:	41dfffff 	.word	0x41dfffff
 800d710:	94a03595 	.word	0x94a03595
 800d714:	3fcfffff 	.word	0x3fcfffff

0800d718 <strtof>:
 800d718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d71c:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800d7dc <strtof+0xc4>
 800d720:	4b29      	ldr	r3, [pc, #164]	@ (800d7c8 <strtof+0xb0>)
 800d722:	460a      	mov	r2, r1
 800d724:	ed2d 8b02 	vpush	{d8}
 800d728:	4601      	mov	r1, r0
 800d72a:	f8d8 0000 	ldr.w	r0, [r8]
 800d72e:	f7ff fa0f 	bl	800cb50 <_strtod_l>
 800d732:	ec55 4b10 	vmov	r4, r5, d0
 800d736:	4622      	mov	r2, r4
 800d738:	462b      	mov	r3, r5
 800d73a:	4620      	mov	r0, r4
 800d73c:	4629      	mov	r1, r5
 800d73e:	f7f3 f9fd 	bl	8000b3c <__aeabi_dcmpun>
 800d742:	b190      	cbz	r0, 800d76a <strtof+0x52>
 800d744:	2d00      	cmp	r5, #0
 800d746:	4821      	ldr	r0, [pc, #132]	@ (800d7cc <strtof+0xb4>)
 800d748:	da09      	bge.n	800d75e <strtof+0x46>
 800d74a:	f000 ffc9 	bl	800e6e0 <nanf>
 800d74e:	eeb1 8a40 	vneg.f32	s16, s0
 800d752:	eeb0 0a48 	vmov.f32	s0, s16
 800d756:	ecbd 8b02 	vpop	{d8}
 800d75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d75e:	ecbd 8b02 	vpop	{d8}
 800d762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d766:	f000 bfbb 	b.w	800e6e0 <nanf>
 800d76a:	4620      	mov	r0, r4
 800d76c:	4629      	mov	r1, r5
 800d76e:	f7f3 fa43 	bl	8000bf8 <__aeabi_d2f>
 800d772:	ee08 0a10 	vmov	s16, r0
 800d776:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800d7d0 <strtof+0xb8>
 800d77a:	eeb0 7ac8 	vabs.f32	s14, s16
 800d77e:	eeb4 7a67 	vcmp.f32	s14, s15
 800d782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d786:	dd11      	ble.n	800d7ac <strtof+0x94>
 800d788:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800d78c:	4b11      	ldr	r3, [pc, #68]	@ (800d7d4 <strtof+0xbc>)
 800d78e:	f04f 32ff 	mov.w	r2, #4294967295
 800d792:	4620      	mov	r0, r4
 800d794:	4639      	mov	r1, r7
 800d796:	f7f3 f9d1 	bl	8000b3c <__aeabi_dcmpun>
 800d79a:	b980      	cbnz	r0, 800d7be <strtof+0xa6>
 800d79c:	4b0d      	ldr	r3, [pc, #52]	@ (800d7d4 <strtof+0xbc>)
 800d79e:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	4639      	mov	r1, r7
 800d7a6:	f7f3 f9ab 	bl	8000b00 <__aeabi_dcmple>
 800d7aa:	b940      	cbnz	r0, 800d7be <strtof+0xa6>
 800d7ac:	ee18 3a10 	vmov	r3, s16
 800d7b0:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d7b4:	d1cd      	bne.n	800d752 <strtof+0x3a>
 800d7b6:	4b08      	ldr	r3, [pc, #32]	@ (800d7d8 <strtof+0xc0>)
 800d7b8:	402b      	ands	r3, r5
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d0c9      	beq.n	800d752 <strtof+0x3a>
 800d7be:	f8d8 3000 	ldr.w	r3, [r8]
 800d7c2:	2222      	movs	r2, #34	@ 0x22
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	e7c4      	b.n	800d752 <strtof+0x3a>
 800d7c8:	20000114 	.word	0x20000114
 800d7cc:	08013001 	.word	0x08013001
 800d7d0:	7f7fffff 	.word	0x7f7fffff
 800d7d4:	7fefffff 	.word	0x7fefffff
 800d7d8:	7ff00000 	.word	0x7ff00000
 800d7dc:	20000280 	.word	0x20000280

0800d7e0 <_strtol_l.constprop.0>:
 800d7e0:	2b24      	cmp	r3, #36	@ 0x24
 800d7e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e6:	4686      	mov	lr, r0
 800d7e8:	4690      	mov	r8, r2
 800d7ea:	d801      	bhi.n	800d7f0 <_strtol_l.constprop.0+0x10>
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d106      	bne.n	800d7fe <_strtol_l.constprop.0+0x1e>
 800d7f0:	f000 ff32 	bl	800e658 <__errno>
 800d7f4:	2316      	movs	r3, #22
 800d7f6:	6003      	str	r3, [r0, #0]
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7fe:	4834      	ldr	r0, [pc, #208]	@ (800d8d0 <_strtol_l.constprop.0+0xf0>)
 800d800:	460d      	mov	r5, r1
 800d802:	462a      	mov	r2, r5
 800d804:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d808:	5d06      	ldrb	r6, [r0, r4]
 800d80a:	f016 0608 	ands.w	r6, r6, #8
 800d80e:	d1f8      	bne.n	800d802 <_strtol_l.constprop.0+0x22>
 800d810:	2c2d      	cmp	r4, #45	@ 0x2d
 800d812:	d12d      	bne.n	800d870 <_strtol_l.constprop.0+0x90>
 800d814:	782c      	ldrb	r4, [r5, #0]
 800d816:	2601      	movs	r6, #1
 800d818:	1c95      	adds	r5, r2, #2
 800d81a:	f033 0210 	bics.w	r2, r3, #16
 800d81e:	d109      	bne.n	800d834 <_strtol_l.constprop.0+0x54>
 800d820:	2c30      	cmp	r4, #48	@ 0x30
 800d822:	d12a      	bne.n	800d87a <_strtol_l.constprop.0+0x9a>
 800d824:	782a      	ldrb	r2, [r5, #0]
 800d826:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d82a:	2a58      	cmp	r2, #88	@ 0x58
 800d82c:	d125      	bne.n	800d87a <_strtol_l.constprop.0+0x9a>
 800d82e:	786c      	ldrb	r4, [r5, #1]
 800d830:	2310      	movs	r3, #16
 800d832:	3502      	adds	r5, #2
 800d834:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d838:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d83c:	2200      	movs	r2, #0
 800d83e:	fbbc f9f3 	udiv	r9, ip, r3
 800d842:	4610      	mov	r0, r2
 800d844:	fb03 ca19 	mls	sl, r3, r9, ip
 800d848:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d84c:	2f09      	cmp	r7, #9
 800d84e:	d81b      	bhi.n	800d888 <_strtol_l.constprop.0+0xa8>
 800d850:	463c      	mov	r4, r7
 800d852:	42a3      	cmp	r3, r4
 800d854:	dd27      	ble.n	800d8a6 <_strtol_l.constprop.0+0xc6>
 800d856:	1c57      	adds	r7, r2, #1
 800d858:	d007      	beq.n	800d86a <_strtol_l.constprop.0+0x8a>
 800d85a:	4581      	cmp	r9, r0
 800d85c:	d320      	bcc.n	800d8a0 <_strtol_l.constprop.0+0xc0>
 800d85e:	d101      	bne.n	800d864 <_strtol_l.constprop.0+0x84>
 800d860:	45a2      	cmp	sl, r4
 800d862:	db1d      	blt.n	800d8a0 <_strtol_l.constprop.0+0xc0>
 800d864:	fb00 4003 	mla	r0, r0, r3, r4
 800d868:	2201      	movs	r2, #1
 800d86a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d86e:	e7eb      	b.n	800d848 <_strtol_l.constprop.0+0x68>
 800d870:	2c2b      	cmp	r4, #43	@ 0x2b
 800d872:	bf04      	itt	eq
 800d874:	782c      	ldrbeq	r4, [r5, #0]
 800d876:	1c95      	addeq	r5, r2, #2
 800d878:	e7cf      	b.n	800d81a <_strtol_l.constprop.0+0x3a>
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1da      	bne.n	800d834 <_strtol_l.constprop.0+0x54>
 800d87e:	2c30      	cmp	r4, #48	@ 0x30
 800d880:	bf0c      	ite	eq
 800d882:	2308      	moveq	r3, #8
 800d884:	230a      	movne	r3, #10
 800d886:	e7d5      	b.n	800d834 <_strtol_l.constprop.0+0x54>
 800d888:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d88c:	2f19      	cmp	r7, #25
 800d88e:	d801      	bhi.n	800d894 <_strtol_l.constprop.0+0xb4>
 800d890:	3c37      	subs	r4, #55	@ 0x37
 800d892:	e7de      	b.n	800d852 <_strtol_l.constprop.0+0x72>
 800d894:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d898:	2f19      	cmp	r7, #25
 800d89a:	d804      	bhi.n	800d8a6 <_strtol_l.constprop.0+0xc6>
 800d89c:	3c57      	subs	r4, #87	@ 0x57
 800d89e:	e7d8      	b.n	800d852 <_strtol_l.constprop.0+0x72>
 800d8a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a4:	e7e1      	b.n	800d86a <_strtol_l.constprop.0+0x8a>
 800d8a6:	1c53      	adds	r3, r2, #1
 800d8a8:	d108      	bne.n	800d8bc <_strtol_l.constprop.0+0xdc>
 800d8aa:	2322      	movs	r3, #34	@ 0x22
 800d8ac:	f8ce 3000 	str.w	r3, [lr]
 800d8b0:	4660      	mov	r0, ip
 800d8b2:	f1b8 0f00 	cmp.w	r8, #0
 800d8b6:	d0a0      	beq.n	800d7fa <_strtol_l.constprop.0+0x1a>
 800d8b8:	1e69      	subs	r1, r5, #1
 800d8ba:	e006      	b.n	800d8ca <_strtol_l.constprop.0+0xea>
 800d8bc:	b106      	cbz	r6, 800d8c0 <_strtol_l.constprop.0+0xe0>
 800d8be:	4240      	negs	r0, r0
 800d8c0:	f1b8 0f00 	cmp.w	r8, #0
 800d8c4:	d099      	beq.n	800d7fa <_strtol_l.constprop.0+0x1a>
 800d8c6:	2a00      	cmp	r2, #0
 800d8c8:	d1f6      	bne.n	800d8b8 <_strtol_l.constprop.0+0xd8>
 800d8ca:	f8c8 1000 	str.w	r1, [r8]
 800d8ce:	e794      	b.n	800d7fa <_strtol_l.constprop.0+0x1a>
 800d8d0:	08012e19 	.word	0x08012e19

0800d8d4 <strtol>:
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	460a      	mov	r2, r1
 800d8d8:	4601      	mov	r1, r0
 800d8da:	4802      	ldr	r0, [pc, #8]	@ (800d8e4 <strtol+0x10>)
 800d8dc:	6800      	ldr	r0, [r0, #0]
 800d8de:	f7ff bf7f 	b.w	800d7e0 <_strtol_l.constprop.0>
 800d8e2:	bf00      	nop
 800d8e4:	20000280 	.word	0x20000280

0800d8e8 <__cvt>:
 800d8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8ec:	ec57 6b10 	vmov	r6, r7, d0
 800d8f0:	2f00      	cmp	r7, #0
 800d8f2:	460c      	mov	r4, r1
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	463b      	mov	r3, r7
 800d8f8:	bfbb      	ittet	lt
 800d8fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d8fe:	461f      	movlt	r7, r3
 800d900:	2300      	movge	r3, #0
 800d902:	232d      	movlt	r3, #45	@ 0x2d
 800d904:	700b      	strb	r3, [r1, #0]
 800d906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d908:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d90c:	4691      	mov	r9, r2
 800d90e:	f023 0820 	bic.w	r8, r3, #32
 800d912:	bfbc      	itt	lt
 800d914:	4632      	movlt	r2, r6
 800d916:	4616      	movlt	r6, r2
 800d918:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d91c:	d005      	beq.n	800d92a <__cvt+0x42>
 800d91e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d922:	d100      	bne.n	800d926 <__cvt+0x3e>
 800d924:	3401      	adds	r4, #1
 800d926:	2102      	movs	r1, #2
 800d928:	e000      	b.n	800d92c <__cvt+0x44>
 800d92a:	2103      	movs	r1, #3
 800d92c:	ab03      	add	r3, sp, #12
 800d92e:	9301      	str	r3, [sp, #4]
 800d930:	ab02      	add	r3, sp, #8
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	ec47 6b10 	vmov	d0, r6, r7
 800d938:	4653      	mov	r3, sl
 800d93a:	4622      	mov	r2, r4
 800d93c:	f000 ff7c 	bl	800e838 <_dtoa_r>
 800d940:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d944:	4605      	mov	r5, r0
 800d946:	d119      	bne.n	800d97c <__cvt+0x94>
 800d948:	f019 0f01 	tst.w	r9, #1
 800d94c:	d00e      	beq.n	800d96c <__cvt+0x84>
 800d94e:	eb00 0904 	add.w	r9, r0, r4
 800d952:	2200      	movs	r2, #0
 800d954:	2300      	movs	r3, #0
 800d956:	4630      	mov	r0, r6
 800d958:	4639      	mov	r1, r7
 800d95a:	f7f3 f8bd 	bl	8000ad8 <__aeabi_dcmpeq>
 800d95e:	b108      	cbz	r0, 800d964 <__cvt+0x7c>
 800d960:	f8cd 900c 	str.w	r9, [sp, #12]
 800d964:	2230      	movs	r2, #48	@ 0x30
 800d966:	9b03      	ldr	r3, [sp, #12]
 800d968:	454b      	cmp	r3, r9
 800d96a:	d31e      	bcc.n	800d9aa <__cvt+0xc2>
 800d96c:	9b03      	ldr	r3, [sp, #12]
 800d96e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d970:	1b5b      	subs	r3, r3, r5
 800d972:	4628      	mov	r0, r5
 800d974:	6013      	str	r3, [r2, #0]
 800d976:	b004      	add	sp, #16
 800d978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d97c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d980:	eb00 0904 	add.w	r9, r0, r4
 800d984:	d1e5      	bne.n	800d952 <__cvt+0x6a>
 800d986:	7803      	ldrb	r3, [r0, #0]
 800d988:	2b30      	cmp	r3, #48	@ 0x30
 800d98a:	d10a      	bne.n	800d9a2 <__cvt+0xba>
 800d98c:	2200      	movs	r2, #0
 800d98e:	2300      	movs	r3, #0
 800d990:	4630      	mov	r0, r6
 800d992:	4639      	mov	r1, r7
 800d994:	f7f3 f8a0 	bl	8000ad8 <__aeabi_dcmpeq>
 800d998:	b918      	cbnz	r0, 800d9a2 <__cvt+0xba>
 800d99a:	f1c4 0401 	rsb	r4, r4, #1
 800d99e:	f8ca 4000 	str.w	r4, [sl]
 800d9a2:	f8da 3000 	ldr.w	r3, [sl]
 800d9a6:	4499      	add	r9, r3
 800d9a8:	e7d3      	b.n	800d952 <__cvt+0x6a>
 800d9aa:	1c59      	adds	r1, r3, #1
 800d9ac:	9103      	str	r1, [sp, #12]
 800d9ae:	701a      	strb	r2, [r3, #0]
 800d9b0:	e7d9      	b.n	800d966 <__cvt+0x7e>

0800d9b2 <__exponent>:
 800d9b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9b4:	2900      	cmp	r1, #0
 800d9b6:	bfba      	itte	lt
 800d9b8:	4249      	neglt	r1, r1
 800d9ba:	232d      	movlt	r3, #45	@ 0x2d
 800d9bc:	232b      	movge	r3, #43	@ 0x2b
 800d9be:	2909      	cmp	r1, #9
 800d9c0:	7002      	strb	r2, [r0, #0]
 800d9c2:	7043      	strb	r3, [r0, #1]
 800d9c4:	dd29      	ble.n	800da1a <__exponent+0x68>
 800d9c6:	f10d 0307 	add.w	r3, sp, #7
 800d9ca:	461d      	mov	r5, r3
 800d9cc:	270a      	movs	r7, #10
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	fbb1 f6f7 	udiv	r6, r1, r7
 800d9d4:	fb07 1416 	mls	r4, r7, r6, r1
 800d9d8:	3430      	adds	r4, #48	@ 0x30
 800d9da:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d9de:	460c      	mov	r4, r1
 800d9e0:	2c63      	cmp	r4, #99	@ 0x63
 800d9e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d9e6:	4631      	mov	r1, r6
 800d9e8:	dcf1      	bgt.n	800d9ce <__exponent+0x1c>
 800d9ea:	3130      	adds	r1, #48	@ 0x30
 800d9ec:	1e94      	subs	r4, r2, #2
 800d9ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d9f2:	1c41      	adds	r1, r0, #1
 800d9f4:	4623      	mov	r3, r4
 800d9f6:	42ab      	cmp	r3, r5
 800d9f8:	d30a      	bcc.n	800da10 <__exponent+0x5e>
 800d9fa:	f10d 0309 	add.w	r3, sp, #9
 800d9fe:	1a9b      	subs	r3, r3, r2
 800da00:	42ac      	cmp	r4, r5
 800da02:	bf88      	it	hi
 800da04:	2300      	movhi	r3, #0
 800da06:	3302      	adds	r3, #2
 800da08:	4403      	add	r3, r0
 800da0a:	1a18      	subs	r0, r3, r0
 800da0c:	b003      	add	sp, #12
 800da0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da10:	f813 6b01 	ldrb.w	r6, [r3], #1
 800da14:	f801 6f01 	strb.w	r6, [r1, #1]!
 800da18:	e7ed      	b.n	800d9f6 <__exponent+0x44>
 800da1a:	2330      	movs	r3, #48	@ 0x30
 800da1c:	3130      	adds	r1, #48	@ 0x30
 800da1e:	7083      	strb	r3, [r0, #2]
 800da20:	70c1      	strb	r1, [r0, #3]
 800da22:	1d03      	adds	r3, r0, #4
 800da24:	e7f1      	b.n	800da0a <__exponent+0x58>
	...

0800da28 <_printf_float>:
 800da28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da2c:	b08d      	sub	sp, #52	@ 0x34
 800da2e:	460c      	mov	r4, r1
 800da30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800da34:	4616      	mov	r6, r2
 800da36:	461f      	mov	r7, r3
 800da38:	4605      	mov	r5, r0
 800da3a:	f000 fdb3 	bl	800e5a4 <_localeconv_r>
 800da3e:	6803      	ldr	r3, [r0, #0]
 800da40:	9304      	str	r3, [sp, #16]
 800da42:	4618      	mov	r0, r3
 800da44:	f7f2 fc1c 	bl	8000280 <strlen>
 800da48:	2300      	movs	r3, #0
 800da4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800da4c:	f8d8 3000 	ldr.w	r3, [r8]
 800da50:	9005      	str	r0, [sp, #20]
 800da52:	3307      	adds	r3, #7
 800da54:	f023 0307 	bic.w	r3, r3, #7
 800da58:	f103 0208 	add.w	r2, r3, #8
 800da5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800da60:	f8d4 b000 	ldr.w	fp, [r4]
 800da64:	f8c8 2000 	str.w	r2, [r8]
 800da68:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800da70:	9307      	str	r3, [sp, #28]
 800da72:	f8cd 8018 	str.w	r8, [sp, #24]
 800da76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800da7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da7e:	4b9c      	ldr	r3, [pc, #624]	@ (800dcf0 <_printf_float+0x2c8>)
 800da80:	f04f 32ff 	mov.w	r2, #4294967295
 800da84:	f7f3 f85a 	bl	8000b3c <__aeabi_dcmpun>
 800da88:	bb70      	cbnz	r0, 800dae8 <_printf_float+0xc0>
 800da8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da8e:	4b98      	ldr	r3, [pc, #608]	@ (800dcf0 <_printf_float+0x2c8>)
 800da90:	f04f 32ff 	mov.w	r2, #4294967295
 800da94:	f7f3 f834 	bl	8000b00 <__aeabi_dcmple>
 800da98:	bb30      	cbnz	r0, 800dae8 <_printf_float+0xc0>
 800da9a:	2200      	movs	r2, #0
 800da9c:	2300      	movs	r3, #0
 800da9e:	4640      	mov	r0, r8
 800daa0:	4649      	mov	r1, r9
 800daa2:	f7f3 f823 	bl	8000aec <__aeabi_dcmplt>
 800daa6:	b110      	cbz	r0, 800daae <_printf_float+0x86>
 800daa8:	232d      	movs	r3, #45	@ 0x2d
 800daaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800daae:	4a91      	ldr	r2, [pc, #580]	@ (800dcf4 <_printf_float+0x2cc>)
 800dab0:	4b91      	ldr	r3, [pc, #580]	@ (800dcf8 <_printf_float+0x2d0>)
 800dab2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dab6:	bf94      	ite	ls
 800dab8:	4690      	movls	r8, r2
 800daba:	4698      	movhi	r8, r3
 800dabc:	2303      	movs	r3, #3
 800dabe:	6123      	str	r3, [r4, #16]
 800dac0:	f02b 0304 	bic.w	r3, fp, #4
 800dac4:	6023      	str	r3, [r4, #0]
 800dac6:	f04f 0900 	mov.w	r9, #0
 800daca:	9700      	str	r7, [sp, #0]
 800dacc:	4633      	mov	r3, r6
 800dace:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dad0:	4621      	mov	r1, r4
 800dad2:	4628      	mov	r0, r5
 800dad4:	f000 f9d2 	bl	800de7c <_printf_common>
 800dad8:	3001      	adds	r0, #1
 800dada:	f040 808d 	bne.w	800dbf8 <_printf_float+0x1d0>
 800dade:	f04f 30ff 	mov.w	r0, #4294967295
 800dae2:	b00d      	add	sp, #52	@ 0x34
 800dae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae8:	4642      	mov	r2, r8
 800daea:	464b      	mov	r3, r9
 800daec:	4640      	mov	r0, r8
 800daee:	4649      	mov	r1, r9
 800daf0:	f7f3 f824 	bl	8000b3c <__aeabi_dcmpun>
 800daf4:	b140      	cbz	r0, 800db08 <_printf_float+0xe0>
 800daf6:	464b      	mov	r3, r9
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	bfbc      	itt	lt
 800dafc:	232d      	movlt	r3, #45	@ 0x2d
 800dafe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800db02:	4a7e      	ldr	r2, [pc, #504]	@ (800dcfc <_printf_float+0x2d4>)
 800db04:	4b7e      	ldr	r3, [pc, #504]	@ (800dd00 <_printf_float+0x2d8>)
 800db06:	e7d4      	b.n	800dab2 <_printf_float+0x8a>
 800db08:	6863      	ldr	r3, [r4, #4]
 800db0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800db0e:	9206      	str	r2, [sp, #24]
 800db10:	1c5a      	adds	r2, r3, #1
 800db12:	d13b      	bne.n	800db8c <_printf_float+0x164>
 800db14:	2306      	movs	r3, #6
 800db16:	6063      	str	r3, [r4, #4]
 800db18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800db1c:	2300      	movs	r3, #0
 800db1e:	6022      	str	r2, [r4, #0]
 800db20:	9303      	str	r3, [sp, #12]
 800db22:	ab0a      	add	r3, sp, #40	@ 0x28
 800db24:	e9cd a301 	strd	sl, r3, [sp, #4]
 800db28:	ab09      	add	r3, sp, #36	@ 0x24
 800db2a:	9300      	str	r3, [sp, #0]
 800db2c:	6861      	ldr	r1, [r4, #4]
 800db2e:	ec49 8b10 	vmov	d0, r8, r9
 800db32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800db36:	4628      	mov	r0, r5
 800db38:	f7ff fed6 	bl	800d8e8 <__cvt>
 800db3c:	9b06      	ldr	r3, [sp, #24]
 800db3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db40:	2b47      	cmp	r3, #71	@ 0x47
 800db42:	4680      	mov	r8, r0
 800db44:	d129      	bne.n	800db9a <_printf_float+0x172>
 800db46:	1cc8      	adds	r0, r1, #3
 800db48:	db02      	blt.n	800db50 <_printf_float+0x128>
 800db4a:	6863      	ldr	r3, [r4, #4]
 800db4c:	4299      	cmp	r1, r3
 800db4e:	dd41      	ble.n	800dbd4 <_printf_float+0x1ac>
 800db50:	f1aa 0a02 	sub.w	sl, sl, #2
 800db54:	fa5f fa8a 	uxtb.w	sl, sl
 800db58:	3901      	subs	r1, #1
 800db5a:	4652      	mov	r2, sl
 800db5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800db60:	9109      	str	r1, [sp, #36]	@ 0x24
 800db62:	f7ff ff26 	bl	800d9b2 <__exponent>
 800db66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db68:	1813      	adds	r3, r2, r0
 800db6a:	2a01      	cmp	r2, #1
 800db6c:	4681      	mov	r9, r0
 800db6e:	6123      	str	r3, [r4, #16]
 800db70:	dc02      	bgt.n	800db78 <_printf_float+0x150>
 800db72:	6822      	ldr	r2, [r4, #0]
 800db74:	07d2      	lsls	r2, r2, #31
 800db76:	d501      	bpl.n	800db7c <_printf_float+0x154>
 800db78:	3301      	adds	r3, #1
 800db7a:	6123      	str	r3, [r4, #16]
 800db7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800db80:	2b00      	cmp	r3, #0
 800db82:	d0a2      	beq.n	800daca <_printf_float+0xa2>
 800db84:	232d      	movs	r3, #45	@ 0x2d
 800db86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db8a:	e79e      	b.n	800daca <_printf_float+0xa2>
 800db8c:	9a06      	ldr	r2, [sp, #24]
 800db8e:	2a47      	cmp	r2, #71	@ 0x47
 800db90:	d1c2      	bne.n	800db18 <_printf_float+0xf0>
 800db92:	2b00      	cmp	r3, #0
 800db94:	d1c0      	bne.n	800db18 <_printf_float+0xf0>
 800db96:	2301      	movs	r3, #1
 800db98:	e7bd      	b.n	800db16 <_printf_float+0xee>
 800db9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800db9e:	d9db      	bls.n	800db58 <_printf_float+0x130>
 800dba0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dba4:	d118      	bne.n	800dbd8 <_printf_float+0x1b0>
 800dba6:	2900      	cmp	r1, #0
 800dba8:	6863      	ldr	r3, [r4, #4]
 800dbaa:	dd0b      	ble.n	800dbc4 <_printf_float+0x19c>
 800dbac:	6121      	str	r1, [r4, #16]
 800dbae:	b913      	cbnz	r3, 800dbb6 <_printf_float+0x18e>
 800dbb0:	6822      	ldr	r2, [r4, #0]
 800dbb2:	07d0      	lsls	r0, r2, #31
 800dbb4:	d502      	bpl.n	800dbbc <_printf_float+0x194>
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	440b      	add	r3, r1
 800dbba:	6123      	str	r3, [r4, #16]
 800dbbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dbbe:	f04f 0900 	mov.w	r9, #0
 800dbc2:	e7db      	b.n	800db7c <_printf_float+0x154>
 800dbc4:	b913      	cbnz	r3, 800dbcc <_printf_float+0x1a4>
 800dbc6:	6822      	ldr	r2, [r4, #0]
 800dbc8:	07d2      	lsls	r2, r2, #31
 800dbca:	d501      	bpl.n	800dbd0 <_printf_float+0x1a8>
 800dbcc:	3302      	adds	r3, #2
 800dbce:	e7f4      	b.n	800dbba <_printf_float+0x192>
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e7f2      	b.n	800dbba <_printf_float+0x192>
 800dbd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dbd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbda:	4299      	cmp	r1, r3
 800dbdc:	db05      	blt.n	800dbea <_printf_float+0x1c2>
 800dbde:	6823      	ldr	r3, [r4, #0]
 800dbe0:	6121      	str	r1, [r4, #16]
 800dbe2:	07d8      	lsls	r0, r3, #31
 800dbe4:	d5ea      	bpl.n	800dbbc <_printf_float+0x194>
 800dbe6:	1c4b      	adds	r3, r1, #1
 800dbe8:	e7e7      	b.n	800dbba <_printf_float+0x192>
 800dbea:	2900      	cmp	r1, #0
 800dbec:	bfd4      	ite	le
 800dbee:	f1c1 0202 	rsble	r2, r1, #2
 800dbf2:	2201      	movgt	r2, #1
 800dbf4:	4413      	add	r3, r2
 800dbf6:	e7e0      	b.n	800dbba <_printf_float+0x192>
 800dbf8:	6823      	ldr	r3, [r4, #0]
 800dbfa:	055a      	lsls	r2, r3, #21
 800dbfc:	d407      	bmi.n	800dc0e <_printf_float+0x1e6>
 800dbfe:	6923      	ldr	r3, [r4, #16]
 800dc00:	4642      	mov	r2, r8
 800dc02:	4631      	mov	r1, r6
 800dc04:	4628      	mov	r0, r5
 800dc06:	47b8      	blx	r7
 800dc08:	3001      	adds	r0, #1
 800dc0a:	d12b      	bne.n	800dc64 <_printf_float+0x23c>
 800dc0c:	e767      	b.n	800dade <_printf_float+0xb6>
 800dc0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc12:	f240 80dd 	bls.w	800ddd0 <_printf_float+0x3a8>
 800dc16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	f7f2 ff5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc22:	2800      	cmp	r0, #0
 800dc24:	d033      	beq.n	800dc8e <_printf_float+0x266>
 800dc26:	4a37      	ldr	r2, [pc, #220]	@ (800dd04 <_printf_float+0x2dc>)
 800dc28:	2301      	movs	r3, #1
 800dc2a:	4631      	mov	r1, r6
 800dc2c:	4628      	mov	r0, r5
 800dc2e:	47b8      	blx	r7
 800dc30:	3001      	adds	r0, #1
 800dc32:	f43f af54 	beq.w	800dade <_printf_float+0xb6>
 800dc36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dc3a:	4543      	cmp	r3, r8
 800dc3c:	db02      	blt.n	800dc44 <_printf_float+0x21c>
 800dc3e:	6823      	ldr	r3, [r4, #0]
 800dc40:	07d8      	lsls	r0, r3, #31
 800dc42:	d50f      	bpl.n	800dc64 <_printf_float+0x23c>
 800dc44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc48:	4631      	mov	r1, r6
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	47b8      	blx	r7
 800dc4e:	3001      	adds	r0, #1
 800dc50:	f43f af45 	beq.w	800dade <_printf_float+0xb6>
 800dc54:	f04f 0900 	mov.w	r9, #0
 800dc58:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc5c:	f104 0a1a 	add.w	sl, r4, #26
 800dc60:	45c8      	cmp	r8, r9
 800dc62:	dc09      	bgt.n	800dc78 <_printf_float+0x250>
 800dc64:	6823      	ldr	r3, [r4, #0]
 800dc66:	079b      	lsls	r3, r3, #30
 800dc68:	f100 8103 	bmi.w	800de72 <_printf_float+0x44a>
 800dc6c:	68e0      	ldr	r0, [r4, #12]
 800dc6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc70:	4298      	cmp	r0, r3
 800dc72:	bfb8      	it	lt
 800dc74:	4618      	movlt	r0, r3
 800dc76:	e734      	b.n	800dae2 <_printf_float+0xba>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	4652      	mov	r2, sl
 800dc7c:	4631      	mov	r1, r6
 800dc7e:	4628      	mov	r0, r5
 800dc80:	47b8      	blx	r7
 800dc82:	3001      	adds	r0, #1
 800dc84:	f43f af2b 	beq.w	800dade <_printf_float+0xb6>
 800dc88:	f109 0901 	add.w	r9, r9, #1
 800dc8c:	e7e8      	b.n	800dc60 <_printf_float+0x238>
 800dc8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	dc39      	bgt.n	800dd08 <_printf_float+0x2e0>
 800dc94:	4a1b      	ldr	r2, [pc, #108]	@ (800dd04 <_printf_float+0x2dc>)
 800dc96:	2301      	movs	r3, #1
 800dc98:	4631      	mov	r1, r6
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	47b8      	blx	r7
 800dc9e:	3001      	adds	r0, #1
 800dca0:	f43f af1d 	beq.w	800dade <_printf_float+0xb6>
 800dca4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dca8:	ea59 0303 	orrs.w	r3, r9, r3
 800dcac:	d102      	bne.n	800dcb4 <_printf_float+0x28c>
 800dcae:	6823      	ldr	r3, [r4, #0]
 800dcb0:	07d9      	lsls	r1, r3, #31
 800dcb2:	d5d7      	bpl.n	800dc64 <_printf_float+0x23c>
 800dcb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcb8:	4631      	mov	r1, r6
 800dcba:	4628      	mov	r0, r5
 800dcbc:	47b8      	blx	r7
 800dcbe:	3001      	adds	r0, #1
 800dcc0:	f43f af0d 	beq.w	800dade <_printf_float+0xb6>
 800dcc4:	f04f 0a00 	mov.w	sl, #0
 800dcc8:	f104 0b1a 	add.w	fp, r4, #26
 800dccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcce:	425b      	negs	r3, r3
 800dcd0:	4553      	cmp	r3, sl
 800dcd2:	dc01      	bgt.n	800dcd8 <_printf_float+0x2b0>
 800dcd4:	464b      	mov	r3, r9
 800dcd6:	e793      	b.n	800dc00 <_printf_float+0x1d8>
 800dcd8:	2301      	movs	r3, #1
 800dcda:	465a      	mov	r2, fp
 800dcdc:	4631      	mov	r1, r6
 800dcde:	4628      	mov	r0, r5
 800dce0:	47b8      	blx	r7
 800dce2:	3001      	adds	r0, #1
 800dce4:	f43f aefb 	beq.w	800dade <_printf_float+0xb6>
 800dce8:	f10a 0a01 	add.w	sl, sl, #1
 800dcec:	e7ee      	b.n	800dccc <_printf_float+0x2a4>
 800dcee:	bf00      	nop
 800dcf0:	7fefffff 	.word	0x7fefffff
 800dcf4:	08012f19 	.word	0x08012f19
 800dcf8:	08012f1d 	.word	0x08012f1d
 800dcfc:	08012f21 	.word	0x08012f21
 800dd00:	08012f25 	.word	0x08012f25
 800dd04:	08012f29 	.word	0x08012f29
 800dd08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dd0e:	4553      	cmp	r3, sl
 800dd10:	bfa8      	it	ge
 800dd12:	4653      	movge	r3, sl
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	4699      	mov	r9, r3
 800dd18:	dc36      	bgt.n	800dd88 <_printf_float+0x360>
 800dd1a:	f04f 0b00 	mov.w	fp, #0
 800dd1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd22:	f104 021a 	add.w	r2, r4, #26
 800dd26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd28:	9306      	str	r3, [sp, #24]
 800dd2a:	eba3 0309 	sub.w	r3, r3, r9
 800dd2e:	455b      	cmp	r3, fp
 800dd30:	dc31      	bgt.n	800dd96 <_printf_float+0x36e>
 800dd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd34:	459a      	cmp	sl, r3
 800dd36:	dc3a      	bgt.n	800ddae <_printf_float+0x386>
 800dd38:	6823      	ldr	r3, [r4, #0]
 800dd3a:	07da      	lsls	r2, r3, #31
 800dd3c:	d437      	bmi.n	800ddae <_printf_float+0x386>
 800dd3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd40:	ebaa 0903 	sub.w	r9, sl, r3
 800dd44:	9b06      	ldr	r3, [sp, #24]
 800dd46:	ebaa 0303 	sub.w	r3, sl, r3
 800dd4a:	4599      	cmp	r9, r3
 800dd4c:	bfa8      	it	ge
 800dd4e:	4699      	movge	r9, r3
 800dd50:	f1b9 0f00 	cmp.w	r9, #0
 800dd54:	dc33      	bgt.n	800ddbe <_printf_float+0x396>
 800dd56:	f04f 0800 	mov.w	r8, #0
 800dd5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd5e:	f104 0b1a 	add.w	fp, r4, #26
 800dd62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd64:	ebaa 0303 	sub.w	r3, sl, r3
 800dd68:	eba3 0309 	sub.w	r3, r3, r9
 800dd6c:	4543      	cmp	r3, r8
 800dd6e:	f77f af79 	ble.w	800dc64 <_printf_float+0x23c>
 800dd72:	2301      	movs	r3, #1
 800dd74:	465a      	mov	r2, fp
 800dd76:	4631      	mov	r1, r6
 800dd78:	4628      	mov	r0, r5
 800dd7a:	47b8      	blx	r7
 800dd7c:	3001      	adds	r0, #1
 800dd7e:	f43f aeae 	beq.w	800dade <_printf_float+0xb6>
 800dd82:	f108 0801 	add.w	r8, r8, #1
 800dd86:	e7ec      	b.n	800dd62 <_printf_float+0x33a>
 800dd88:	4642      	mov	r2, r8
 800dd8a:	4631      	mov	r1, r6
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	47b8      	blx	r7
 800dd90:	3001      	adds	r0, #1
 800dd92:	d1c2      	bne.n	800dd1a <_printf_float+0x2f2>
 800dd94:	e6a3      	b.n	800dade <_printf_float+0xb6>
 800dd96:	2301      	movs	r3, #1
 800dd98:	4631      	mov	r1, r6
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	9206      	str	r2, [sp, #24]
 800dd9e:	47b8      	blx	r7
 800dda0:	3001      	adds	r0, #1
 800dda2:	f43f ae9c 	beq.w	800dade <_printf_float+0xb6>
 800dda6:	9a06      	ldr	r2, [sp, #24]
 800dda8:	f10b 0b01 	add.w	fp, fp, #1
 800ddac:	e7bb      	b.n	800dd26 <_printf_float+0x2fe>
 800ddae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddb2:	4631      	mov	r1, r6
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	47b8      	blx	r7
 800ddb8:	3001      	adds	r0, #1
 800ddba:	d1c0      	bne.n	800dd3e <_printf_float+0x316>
 800ddbc:	e68f      	b.n	800dade <_printf_float+0xb6>
 800ddbe:	9a06      	ldr	r2, [sp, #24]
 800ddc0:	464b      	mov	r3, r9
 800ddc2:	4442      	add	r2, r8
 800ddc4:	4631      	mov	r1, r6
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	47b8      	blx	r7
 800ddca:	3001      	adds	r0, #1
 800ddcc:	d1c3      	bne.n	800dd56 <_printf_float+0x32e>
 800ddce:	e686      	b.n	800dade <_printf_float+0xb6>
 800ddd0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ddd4:	f1ba 0f01 	cmp.w	sl, #1
 800ddd8:	dc01      	bgt.n	800ddde <_printf_float+0x3b6>
 800ddda:	07db      	lsls	r3, r3, #31
 800dddc:	d536      	bpl.n	800de4c <_printf_float+0x424>
 800ddde:	2301      	movs	r3, #1
 800dde0:	4642      	mov	r2, r8
 800dde2:	4631      	mov	r1, r6
 800dde4:	4628      	mov	r0, r5
 800dde6:	47b8      	blx	r7
 800dde8:	3001      	adds	r0, #1
 800ddea:	f43f ae78 	beq.w	800dade <_printf_float+0xb6>
 800ddee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddf2:	4631      	mov	r1, r6
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	47b8      	blx	r7
 800ddf8:	3001      	adds	r0, #1
 800ddfa:	f43f ae70 	beq.w	800dade <_printf_float+0xb6>
 800ddfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800de02:	2200      	movs	r2, #0
 800de04:	2300      	movs	r3, #0
 800de06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de0a:	f7f2 fe65 	bl	8000ad8 <__aeabi_dcmpeq>
 800de0e:	b9c0      	cbnz	r0, 800de42 <_printf_float+0x41a>
 800de10:	4653      	mov	r3, sl
 800de12:	f108 0201 	add.w	r2, r8, #1
 800de16:	4631      	mov	r1, r6
 800de18:	4628      	mov	r0, r5
 800de1a:	47b8      	blx	r7
 800de1c:	3001      	adds	r0, #1
 800de1e:	d10c      	bne.n	800de3a <_printf_float+0x412>
 800de20:	e65d      	b.n	800dade <_printf_float+0xb6>
 800de22:	2301      	movs	r3, #1
 800de24:	465a      	mov	r2, fp
 800de26:	4631      	mov	r1, r6
 800de28:	4628      	mov	r0, r5
 800de2a:	47b8      	blx	r7
 800de2c:	3001      	adds	r0, #1
 800de2e:	f43f ae56 	beq.w	800dade <_printf_float+0xb6>
 800de32:	f108 0801 	add.w	r8, r8, #1
 800de36:	45d0      	cmp	r8, sl
 800de38:	dbf3      	blt.n	800de22 <_printf_float+0x3fa>
 800de3a:	464b      	mov	r3, r9
 800de3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800de40:	e6df      	b.n	800dc02 <_printf_float+0x1da>
 800de42:	f04f 0800 	mov.w	r8, #0
 800de46:	f104 0b1a 	add.w	fp, r4, #26
 800de4a:	e7f4      	b.n	800de36 <_printf_float+0x40e>
 800de4c:	2301      	movs	r3, #1
 800de4e:	4642      	mov	r2, r8
 800de50:	e7e1      	b.n	800de16 <_printf_float+0x3ee>
 800de52:	2301      	movs	r3, #1
 800de54:	464a      	mov	r2, r9
 800de56:	4631      	mov	r1, r6
 800de58:	4628      	mov	r0, r5
 800de5a:	47b8      	blx	r7
 800de5c:	3001      	adds	r0, #1
 800de5e:	f43f ae3e 	beq.w	800dade <_printf_float+0xb6>
 800de62:	f108 0801 	add.w	r8, r8, #1
 800de66:	68e3      	ldr	r3, [r4, #12]
 800de68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800de6a:	1a5b      	subs	r3, r3, r1
 800de6c:	4543      	cmp	r3, r8
 800de6e:	dcf0      	bgt.n	800de52 <_printf_float+0x42a>
 800de70:	e6fc      	b.n	800dc6c <_printf_float+0x244>
 800de72:	f04f 0800 	mov.w	r8, #0
 800de76:	f104 0919 	add.w	r9, r4, #25
 800de7a:	e7f4      	b.n	800de66 <_printf_float+0x43e>

0800de7c <_printf_common>:
 800de7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de80:	4616      	mov	r6, r2
 800de82:	4698      	mov	r8, r3
 800de84:	688a      	ldr	r2, [r1, #8]
 800de86:	690b      	ldr	r3, [r1, #16]
 800de88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800de8c:	4293      	cmp	r3, r2
 800de8e:	bfb8      	it	lt
 800de90:	4613      	movlt	r3, r2
 800de92:	6033      	str	r3, [r6, #0]
 800de94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800de98:	4607      	mov	r7, r0
 800de9a:	460c      	mov	r4, r1
 800de9c:	b10a      	cbz	r2, 800dea2 <_printf_common+0x26>
 800de9e:	3301      	adds	r3, #1
 800dea0:	6033      	str	r3, [r6, #0]
 800dea2:	6823      	ldr	r3, [r4, #0]
 800dea4:	0699      	lsls	r1, r3, #26
 800dea6:	bf42      	ittt	mi
 800dea8:	6833      	ldrmi	r3, [r6, #0]
 800deaa:	3302      	addmi	r3, #2
 800deac:	6033      	strmi	r3, [r6, #0]
 800deae:	6825      	ldr	r5, [r4, #0]
 800deb0:	f015 0506 	ands.w	r5, r5, #6
 800deb4:	d106      	bne.n	800dec4 <_printf_common+0x48>
 800deb6:	f104 0a19 	add.w	sl, r4, #25
 800deba:	68e3      	ldr	r3, [r4, #12]
 800debc:	6832      	ldr	r2, [r6, #0]
 800debe:	1a9b      	subs	r3, r3, r2
 800dec0:	42ab      	cmp	r3, r5
 800dec2:	dc26      	bgt.n	800df12 <_printf_common+0x96>
 800dec4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dec8:	6822      	ldr	r2, [r4, #0]
 800deca:	3b00      	subs	r3, #0
 800decc:	bf18      	it	ne
 800dece:	2301      	movne	r3, #1
 800ded0:	0692      	lsls	r2, r2, #26
 800ded2:	d42b      	bmi.n	800df2c <_printf_common+0xb0>
 800ded4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ded8:	4641      	mov	r1, r8
 800deda:	4638      	mov	r0, r7
 800dedc:	47c8      	blx	r9
 800dede:	3001      	adds	r0, #1
 800dee0:	d01e      	beq.n	800df20 <_printf_common+0xa4>
 800dee2:	6823      	ldr	r3, [r4, #0]
 800dee4:	6922      	ldr	r2, [r4, #16]
 800dee6:	f003 0306 	and.w	r3, r3, #6
 800deea:	2b04      	cmp	r3, #4
 800deec:	bf02      	ittt	eq
 800deee:	68e5      	ldreq	r5, [r4, #12]
 800def0:	6833      	ldreq	r3, [r6, #0]
 800def2:	1aed      	subeq	r5, r5, r3
 800def4:	68a3      	ldr	r3, [r4, #8]
 800def6:	bf0c      	ite	eq
 800def8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800defc:	2500      	movne	r5, #0
 800defe:	4293      	cmp	r3, r2
 800df00:	bfc4      	itt	gt
 800df02:	1a9b      	subgt	r3, r3, r2
 800df04:	18ed      	addgt	r5, r5, r3
 800df06:	2600      	movs	r6, #0
 800df08:	341a      	adds	r4, #26
 800df0a:	42b5      	cmp	r5, r6
 800df0c:	d11a      	bne.n	800df44 <_printf_common+0xc8>
 800df0e:	2000      	movs	r0, #0
 800df10:	e008      	b.n	800df24 <_printf_common+0xa8>
 800df12:	2301      	movs	r3, #1
 800df14:	4652      	mov	r2, sl
 800df16:	4641      	mov	r1, r8
 800df18:	4638      	mov	r0, r7
 800df1a:	47c8      	blx	r9
 800df1c:	3001      	adds	r0, #1
 800df1e:	d103      	bne.n	800df28 <_printf_common+0xac>
 800df20:	f04f 30ff 	mov.w	r0, #4294967295
 800df24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df28:	3501      	adds	r5, #1
 800df2a:	e7c6      	b.n	800deba <_printf_common+0x3e>
 800df2c:	18e1      	adds	r1, r4, r3
 800df2e:	1c5a      	adds	r2, r3, #1
 800df30:	2030      	movs	r0, #48	@ 0x30
 800df32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df36:	4422      	add	r2, r4
 800df38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800df3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800df40:	3302      	adds	r3, #2
 800df42:	e7c7      	b.n	800ded4 <_printf_common+0x58>
 800df44:	2301      	movs	r3, #1
 800df46:	4622      	mov	r2, r4
 800df48:	4641      	mov	r1, r8
 800df4a:	4638      	mov	r0, r7
 800df4c:	47c8      	blx	r9
 800df4e:	3001      	adds	r0, #1
 800df50:	d0e6      	beq.n	800df20 <_printf_common+0xa4>
 800df52:	3601      	adds	r6, #1
 800df54:	e7d9      	b.n	800df0a <_printf_common+0x8e>
	...

0800df58 <_printf_i>:
 800df58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df5c:	7e0f      	ldrb	r7, [r1, #24]
 800df5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800df60:	2f78      	cmp	r7, #120	@ 0x78
 800df62:	4691      	mov	r9, r2
 800df64:	4680      	mov	r8, r0
 800df66:	460c      	mov	r4, r1
 800df68:	469a      	mov	sl, r3
 800df6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800df6e:	d807      	bhi.n	800df80 <_printf_i+0x28>
 800df70:	2f62      	cmp	r7, #98	@ 0x62
 800df72:	d80a      	bhi.n	800df8a <_printf_i+0x32>
 800df74:	2f00      	cmp	r7, #0
 800df76:	f000 80d2 	beq.w	800e11e <_printf_i+0x1c6>
 800df7a:	2f58      	cmp	r7, #88	@ 0x58
 800df7c:	f000 80b9 	beq.w	800e0f2 <_printf_i+0x19a>
 800df80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800df84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800df88:	e03a      	b.n	800e000 <_printf_i+0xa8>
 800df8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800df8e:	2b15      	cmp	r3, #21
 800df90:	d8f6      	bhi.n	800df80 <_printf_i+0x28>
 800df92:	a101      	add	r1, pc, #4	@ (adr r1, 800df98 <_printf_i+0x40>)
 800df94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800df98:	0800dff1 	.word	0x0800dff1
 800df9c:	0800e005 	.word	0x0800e005
 800dfa0:	0800df81 	.word	0x0800df81
 800dfa4:	0800df81 	.word	0x0800df81
 800dfa8:	0800df81 	.word	0x0800df81
 800dfac:	0800df81 	.word	0x0800df81
 800dfb0:	0800e005 	.word	0x0800e005
 800dfb4:	0800df81 	.word	0x0800df81
 800dfb8:	0800df81 	.word	0x0800df81
 800dfbc:	0800df81 	.word	0x0800df81
 800dfc0:	0800df81 	.word	0x0800df81
 800dfc4:	0800e105 	.word	0x0800e105
 800dfc8:	0800e02f 	.word	0x0800e02f
 800dfcc:	0800e0bf 	.word	0x0800e0bf
 800dfd0:	0800df81 	.word	0x0800df81
 800dfd4:	0800df81 	.word	0x0800df81
 800dfd8:	0800e127 	.word	0x0800e127
 800dfdc:	0800df81 	.word	0x0800df81
 800dfe0:	0800e02f 	.word	0x0800e02f
 800dfe4:	0800df81 	.word	0x0800df81
 800dfe8:	0800df81 	.word	0x0800df81
 800dfec:	0800e0c7 	.word	0x0800e0c7
 800dff0:	6833      	ldr	r3, [r6, #0]
 800dff2:	1d1a      	adds	r2, r3, #4
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	6032      	str	r2, [r6, #0]
 800dff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dffc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e000:	2301      	movs	r3, #1
 800e002:	e09d      	b.n	800e140 <_printf_i+0x1e8>
 800e004:	6833      	ldr	r3, [r6, #0]
 800e006:	6820      	ldr	r0, [r4, #0]
 800e008:	1d19      	adds	r1, r3, #4
 800e00a:	6031      	str	r1, [r6, #0]
 800e00c:	0606      	lsls	r6, r0, #24
 800e00e:	d501      	bpl.n	800e014 <_printf_i+0xbc>
 800e010:	681d      	ldr	r5, [r3, #0]
 800e012:	e003      	b.n	800e01c <_printf_i+0xc4>
 800e014:	0645      	lsls	r5, r0, #25
 800e016:	d5fb      	bpl.n	800e010 <_printf_i+0xb8>
 800e018:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e01c:	2d00      	cmp	r5, #0
 800e01e:	da03      	bge.n	800e028 <_printf_i+0xd0>
 800e020:	232d      	movs	r3, #45	@ 0x2d
 800e022:	426d      	negs	r5, r5
 800e024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e028:	4859      	ldr	r0, [pc, #356]	@ (800e190 <_printf_i+0x238>)
 800e02a:	230a      	movs	r3, #10
 800e02c:	e011      	b.n	800e052 <_printf_i+0xfa>
 800e02e:	6821      	ldr	r1, [r4, #0]
 800e030:	6833      	ldr	r3, [r6, #0]
 800e032:	0608      	lsls	r0, r1, #24
 800e034:	f853 5b04 	ldr.w	r5, [r3], #4
 800e038:	d402      	bmi.n	800e040 <_printf_i+0xe8>
 800e03a:	0649      	lsls	r1, r1, #25
 800e03c:	bf48      	it	mi
 800e03e:	b2ad      	uxthmi	r5, r5
 800e040:	2f6f      	cmp	r7, #111	@ 0x6f
 800e042:	4853      	ldr	r0, [pc, #332]	@ (800e190 <_printf_i+0x238>)
 800e044:	6033      	str	r3, [r6, #0]
 800e046:	bf14      	ite	ne
 800e048:	230a      	movne	r3, #10
 800e04a:	2308      	moveq	r3, #8
 800e04c:	2100      	movs	r1, #0
 800e04e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e052:	6866      	ldr	r6, [r4, #4]
 800e054:	60a6      	str	r6, [r4, #8]
 800e056:	2e00      	cmp	r6, #0
 800e058:	bfa2      	ittt	ge
 800e05a:	6821      	ldrge	r1, [r4, #0]
 800e05c:	f021 0104 	bicge.w	r1, r1, #4
 800e060:	6021      	strge	r1, [r4, #0]
 800e062:	b90d      	cbnz	r5, 800e068 <_printf_i+0x110>
 800e064:	2e00      	cmp	r6, #0
 800e066:	d04b      	beq.n	800e100 <_printf_i+0x1a8>
 800e068:	4616      	mov	r6, r2
 800e06a:	fbb5 f1f3 	udiv	r1, r5, r3
 800e06e:	fb03 5711 	mls	r7, r3, r1, r5
 800e072:	5dc7      	ldrb	r7, [r0, r7]
 800e074:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e078:	462f      	mov	r7, r5
 800e07a:	42bb      	cmp	r3, r7
 800e07c:	460d      	mov	r5, r1
 800e07e:	d9f4      	bls.n	800e06a <_printf_i+0x112>
 800e080:	2b08      	cmp	r3, #8
 800e082:	d10b      	bne.n	800e09c <_printf_i+0x144>
 800e084:	6823      	ldr	r3, [r4, #0]
 800e086:	07df      	lsls	r7, r3, #31
 800e088:	d508      	bpl.n	800e09c <_printf_i+0x144>
 800e08a:	6923      	ldr	r3, [r4, #16]
 800e08c:	6861      	ldr	r1, [r4, #4]
 800e08e:	4299      	cmp	r1, r3
 800e090:	bfde      	ittt	le
 800e092:	2330      	movle	r3, #48	@ 0x30
 800e094:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e098:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e09c:	1b92      	subs	r2, r2, r6
 800e09e:	6122      	str	r2, [r4, #16]
 800e0a0:	f8cd a000 	str.w	sl, [sp]
 800e0a4:	464b      	mov	r3, r9
 800e0a6:	aa03      	add	r2, sp, #12
 800e0a8:	4621      	mov	r1, r4
 800e0aa:	4640      	mov	r0, r8
 800e0ac:	f7ff fee6 	bl	800de7c <_printf_common>
 800e0b0:	3001      	adds	r0, #1
 800e0b2:	d14a      	bne.n	800e14a <_printf_i+0x1f2>
 800e0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b8:	b004      	add	sp, #16
 800e0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	f043 0320 	orr.w	r3, r3, #32
 800e0c4:	6023      	str	r3, [r4, #0]
 800e0c6:	4833      	ldr	r0, [pc, #204]	@ (800e194 <_printf_i+0x23c>)
 800e0c8:	2778      	movs	r7, #120	@ 0x78
 800e0ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e0ce:	6823      	ldr	r3, [r4, #0]
 800e0d0:	6831      	ldr	r1, [r6, #0]
 800e0d2:	061f      	lsls	r7, r3, #24
 800e0d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800e0d8:	d402      	bmi.n	800e0e0 <_printf_i+0x188>
 800e0da:	065f      	lsls	r7, r3, #25
 800e0dc:	bf48      	it	mi
 800e0de:	b2ad      	uxthmi	r5, r5
 800e0e0:	6031      	str	r1, [r6, #0]
 800e0e2:	07d9      	lsls	r1, r3, #31
 800e0e4:	bf44      	itt	mi
 800e0e6:	f043 0320 	orrmi.w	r3, r3, #32
 800e0ea:	6023      	strmi	r3, [r4, #0]
 800e0ec:	b11d      	cbz	r5, 800e0f6 <_printf_i+0x19e>
 800e0ee:	2310      	movs	r3, #16
 800e0f0:	e7ac      	b.n	800e04c <_printf_i+0xf4>
 800e0f2:	4827      	ldr	r0, [pc, #156]	@ (800e190 <_printf_i+0x238>)
 800e0f4:	e7e9      	b.n	800e0ca <_printf_i+0x172>
 800e0f6:	6823      	ldr	r3, [r4, #0]
 800e0f8:	f023 0320 	bic.w	r3, r3, #32
 800e0fc:	6023      	str	r3, [r4, #0]
 800e0fe:	e7f6      	b.n	800e0ee <_printf_i+0x196>
 800e100:	4616      	mov	r6, r2
 800e102:	e7bd      	b.n	800e080 <_printf_i+0x128>
 800e104:	6833      	ldr	r3, [r6, #0]
 800e106:	6825      	ldr	r5, [r4, #0]
 800e108:	6961      	ldr	r1, [r4, #20]
 800e10a:	1d18      	adds	r0, r3, #4
 800e10c:	6030      	str	r0, [r6, #0]
 800e10e:	062e      	lsls	r6, r5, #24
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	d501      	bpl.n	800e118 <_printf_i+0x1c0>
 800e114:	6019      	str	r1, [r3, #0]
 800e116:	e002      	b.n	800e11e <_printf_i+0x1c6>
 800e118:	0668      	lsls	r0, r5, #25
 800e11a:	d5fb      	bpl.n	800e114 <_printf_i+0x1bc>
 800e11c:	8019      	strh	r1, [r3, #0]
 800e11e:	2300      	movs	r3, #0
 800e120:	6123      	str	r3, [r4, #16]
 800e122:	4616      	mov	r6, r2
 800e124:	e7bc      	b.n	800e0a0 <_printf_i+0x148>
 800e126:	6833      	ldr	r3, [r6, #0]
 800e128:	1d1a      	adds	r2, r3, #4
 800e12a:	6032      	str	r2, [r6, #0]
 800e12c:	681e      	ldr	r6, [r3, #0]
 800e12e:	6862      	ldr	r2, [r4, #4]
 800e130:	2100      	movs	r1, #0
 800e132:	4630      	mov	r0, r6
 800e134:	f7f2 f854 	bl	80001e0 <memchr>
 800e138:	b108      	cbz	r0, 800e13e <_printf_i+0x1e6>
 800e13a:	1b80      	subs	r0, r0, r6
 800e13c:	6060      	str	r0, [r4, #4]
 800e13e:	6863      	ldr	r3, [r4, #4]
 800e140:	6123      	str	r3, [r4, #16]
 800e142:	2300      	movs	r3, #0
 800e144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e148:	e7aa      	b.n	800e0a0 <_printf_i+0x148>
 800e14a:	6923      	ldr	r3, [r4, #16]
 800e14c:	4632      	mov	r2, r6
 800e14e:	4649      	mov	r1, r9
 800e150:	4640      	mov	r0, r8
 800e152:	47d0      	blx	sl
 800e154:	3001      	adds	r0, #1
 800e156:	d0ad      	beq.n	800e0b4 <_printf_i+0x15c>
 800e158:	6823      	ldr	r3, [r4, #0]
 800e15a:	079b      	lsls	r3, r3, #30
 800e15c:	d413      	bmi.n	800e186 <_printf_i+0x22e>
 800e15e:	68e0      	ldr	r0, [r4, #12]
 800e160:	9b03      	ldr	r3, [sp, #12]
 800e162:	4298      	cmp	r0, r3
 800e164:	bfb8      	it	lt
 800e166:	4618      	movlt	r0, r3
 800e168:	e7a6      	b.n	800e0b8 <_printf_i+0x160>
 800e16a:	2301      	movs	r3, #1
 800e16c:	4632      	mov	r2, r6
 800e16e:	4649      	mov	r1, r9
 800e170:	4640      	mov	r0, r8
 800e172:	47d0      	blx	sl
 800e174:	3001      	adds	r0, #1
 800e176:	d09d      	beq.n	800e0b4 <_printf_i+0x15c>
 800e178:	3501      	adds	r5, #1
 800e17a:	68e3      	ldr	r3, [r4, #12]
 800e17c:	9903      	ldr	r1, [sp, #12]
 800e17e:	1a5b      	subs	r3, r3, r1
 800e180:	42ab      	cmp	r3, r5
 800e182:	dcf2      	bgt.n	800e16a <_printf_i+0x212>
 800e184:	e7eb      	b.n	800e15e <_printf_i+0x206>
 800e186:	2500      	movs	r5, #0
 800e188:	f104 0619 	add.w	r6, r4, #25
 800e18c:	e7f5      	b.n	800e17a <_printf_i+0x222>
 800e18e:	bf00      	nop
 800e190:	08012f2b 	.word	0x08012f2b
 800e194:	08012f3c 	.word	0x08012f3c

0800e198 <std>:
 800e198:	2300      	movs	r3, #0
 800e19a:	b510      	push	{r4, lr}
 800e19c:	4604      	mov	r4, r0
 800e19e:	e9c0 3300 	strd	r3, r3, [r0]
 800e1a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1a6:	6083      	str	r3, [r0, #8]
 800e1a8:	8181      	strh	r1, [r0, #12]
 800e1aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800e1ac:	81c2      	strh	r2, [r0, #14]
 800e1ae:	6183      	str	r3, [r0, #24]
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	2208      	movs	r2, #8
 800e1b4:	305c      	adds	r0, #92	@ 0x5c
 800e1b6:	f000 f948 	bl	800e44a <memset>
 800e1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e1f0 <std+0x58>)
 800e1bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800e1be:	4b0d      	ldr	r3, [pc, #52]	@ (800e1f4 <std+0x5c>)
 800e1c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e1f8 <std+0x60>)
 800e1c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e1fc <std+0x64>)
 800e1c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800e1ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e200 <std+0x68>)
 800e1cc:	6224      	str	r4, [r4, #32]
 800e1ce:	429c      	cmp	r4, r3
 800e1d0:	d006      	beq.n	800e1e0 <std+0x48>
 800e1d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e1d6:	4294      	cmp	r4, r2
 800e1d8:	d002      	beq.n	800e1e0 <std+0x48>
 800e1da:	33d0      	adds	r3, #208	@ 0xd0
 800e1dc:	429c      	cmp	r4, r3
 800e1de:	d105      	bne.n	800e1ec <std+0x54>
 800e1e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1e8:	f000 ba60 	b.w	800e6ac <__retarget_lock_init_recursive>
 800e1ec:	bd10      	pop	{r4, pc}
 800e1ee:	bf00      	nop
 800e1f0:	0800e3c5 	.word	0x0800e3c5
 800e1f4:	0800e3e7 	.word	0x0800e3e7
 800e1f8:	0800e41f 	.word	0x0800e41f
 800e1fc:	0800e443 	.word	0x0800e443
 800e200:	20001cf8 	.word	0x20001cf8

0800e204 <stdio_exit_handler>:
 800e204:	4a02      	ldr	r2, [pc, #8]	@ (800e210 <stdio_exit_handler+0xc>)
 800e206:	4903      	ldr	r1, [pc, #12]	@ (800e214 <stdio_exit_handler+0x10>)
 800e208:	4803      	ldr	r0, [pc, #12]	@ (800e218 <stdio_exit_handler+0x14>)
 800e20a:	f000 b869 	b.w	800e2e0 <_fwalk_sglue>
 800e20e:	bf00      	nop
 800e210:	20000108 	.word	0x20000108
 800e214:	08010821 	.word	0x08010821
 800e218:	20000284 	.word	0x20000284

0800e21c <cleanup_stdio>:
 800e21c:	6841      	ldr	r1, [r0, #4]
 800e21e:	4b0c      	ldr	r3, [pc, #48]	@ (800e250 <cleanup_stdio+0x34>)
 800e220:	4299      	cmp	r1, r3
 800e222:	b510      	push	{r4, lr}
 800e224:	4604      	mov	r4, r0
 800e226:	d001      	beq.n	800e22c <cleanup_stdio+0x10>
 800e228:	f002 fafa 	bl	8010820 <_fflush_r>
 800e22c:	68a1      	ldr	r1, [r4, #8]
 800e22e:	4b09      	ldr	r3, [pc, #36]	@ (800e254 <cleanup_stdio+0x38>)
 800e230:	4299      	cmp	r1, r3
 800e232:	d002      	beq.n	800e23a <cleanup_stdio+0x1e>
 800e234:	4620      	mov	r0, r4
 800e236:	f002 faf3 	bl	8010820 <_fflush_r>
 800e23a:	68e1      	ldr	r1, [r4, #12]
 800e23c:	4b06      	ldr	r3, [pc, #24]	@ (800e258 <cleanup_stdio+0x3c>)
 800e23e:	4299      	cmp	r1, r3
 800e240:	d004      	beq.n	800e24c <cleanup_stdio+0x30>
 800e242:	4620      	mov	r0, r4
 800e244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e248:	f002 baea 	b.w	8010820 <_fflush_r>
 800e24c:	bd10      	pop	{r4, pc}
 800e24e:	bf00      	nop
 800e250:	20001cf8 	.word	0x20001cf8
 800e254:	20001d60 	.word	0x20001d60
 800e258:	20001dc8 	.word	0x20001dc8

0800e25c <global_stdio_init.part.0>:
 800e25c:	b510      	push	{r4, lr}
 800e25e:	4b0b      	ldr	r3, [pc, #44]	@ (800e28c <global_stdio_init.part.0+0x30>)
 800e260:	4c0b      	ldr	r4, [pc, #44]	@ (800e290 <global_stdio_init.part.0+0x34>)
 800e262:	4a0c      	ldr	r2, [pc, #48]	@ (800e294 <global_stdio_init.part.0+0x38>)
 800e264:	601a      	str	r2, [r3, #0]
 800e266:	4620      	mov	r0, r4
 800e268:	2200      	movs	r2, #0
 800e26a:	2104      	movs	r1, #4
 800e26c:	f7ff ff94 	bl	800e198 <std>
 800e270:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e274:	2201      	movs	r2, #1
 800e276:	2109      	movs	r1, #9
 800e278:	f7ff ff8e 	bl	800e198 <std>
 800e27c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e280:	2202      	movs	r2, #2
 800e282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e286:	2112      	movs	r1, #18
 800e288:	f7ff bf86 	b.w	800e198 <std>
 800e28c:	20001e30 	.word	0x20001e30
 800e290:	20001cf8 	.word	0x20001cf8
 800e294:	0800e205 	.word	0x0800e205

0800e298 <__sfp_lock_acquire>:
 800e298:	4801      	ldr	r0, [pc, #4]	@ (800e2a0 <__sfp_lock_acquire+0x8>)
 800e29a:	f000 ba08 	b.w	800e6ae <__retarget_lock_acquire_recursive>
 800e29e:	bf00      	nop
 800e2a0:	20001e39 	.word	0x20001e39

0800e2a4 <__sfp_lock_release>:
 800e2a4:	4801      	ldr	r0, [pc, #4]	@ (800e2ac <__sfp_lock_release+0x8>)
 800e2a6:	f000 ba03 	b.w	800e6b0 <__retarget_lock_release_recursive>
 800e2aa:	bf00      	nop
 800e2ac:	20001e39 	.word	0x20001e39

0800e2b0 <__sinit>:
 800e2b0:	b510      	push	{r4, lr}
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	f7ff fff0 	bl	800e298 <__sfp_lock_acquire>
 800e2b8:	6a23      	ldr	r3, [r4, #32]
 800e2ba:	b11b      	cbz	r3, 800e2c4 <__sinit+0x14>
 800e2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2c0:	f7ff bff0 	b.w	800e2a4 <__sfp_lock_release>
 800e2c4:	4b04      	ldr	r3, [pc, #16]	@ (800e2d8 <__sinit+0x28>)
 800e2c6:	6223      	str	r3, [r4, #32]
 800e2c8:	4b04      	ldr	r3, [pc, #16]	@ (800e2dc <__sinit+0x2c>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d1f5      	bne.n	800e2bc <__sinit+0xc>
 800e2d0:	f7ff ffc4 	bl	800e25c <global_stdio_init.part.0>
 800e2d4:	e7f2      	b.n	800e2bc <__sinit+0xc>
 800e2d6:	bf00      	nop
 800e2d8:	0800e21d 	.word	0x0800e21d
 800e2dc:	20001e30 	.word	0x20001e30

0800e2e0 <_fwalk_sglue>:
 800e2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2e4:	4607      	mov	r7, r0
 800e2e6:	4688      	mov	r8, r1
 800e2e8:	4614      	mov	r4, r2
 800e2ea:	2600      	movs	r6, #0
 800e2ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e2f0:	f1b9 0901 	subs.w	r9, r9, #1
 800e2f4:	d505      	bpl.n	800e302 <_fwalk_sglue+0x22>
 800e2f6:	6824      	ldr	r4, [r4, #0]
 800e2f8:	2c00      	cmp	r4, #0
 800e2fa:	d1f7      	bne.n	800e2ec <_fwalk_sglue+0xc>
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e302:	89ab      	ldrh	r3, [r5, #12]
 800e304:	2b01      	cmp	r3, #1
 800e306:	d907      	bls.n	800e318 <_fwalk_sglue+0x38>
 800e308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e30c:	3301      	adds	r3, #1
 800e30e:	d003      	beq.n	800e318 <_fwalk_sglue+0x38>
 800e310:	4629      	mov	r1, r5
 800e312:	4638      	mov	r0, r7
 800e314:	47c0      	blx	r8
 800e316:	4306      	orrs	r6, r0
 800e318:	3568      	adds	r5, #104	@ 0x68
 800e31a:	e7e9      	b.n	800e2f0 <_fwalk_sglue+0x10>

0800e31c <sniprintf>:
 800e31c:	b40c      	push	{r2, r3}
 800e31e:	b530      	push	{r4, r5, lr}
 800e320:	4b17      	ldr	r3, [pc, #92]	@ (800e380 <sniprintf+0x64>)
 800e322:	1e0c      	subs	r4, r1, #0
 800e324:	681d      	ldr	r5, [r3, #0]
 800e326:	b09d      	sub	sp, #116	@ 0x74
 800e328:	da08      	bge.n	800e33c <sniprintf+0x20>
 800e32a:	238b      	movs	r3, #139	@ 0x8b
 800e32c:	602b      	str	r3, [r5, #0]
 800e32e:	f04f 30ff 	mov.w	r0, #4294967295
 800e332:	b01d      	add	sp, #116	@ 0x74
 800e334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e338:	b002      	add	sp, #8
 800e33a:	4770      	bx	lr
 800e33c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e340:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e344:	bf14      	ite	ne
 800e346:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e34a:	4623      	moveq	r3, r4
 800e34c:	9304      	str	r3, [sp, #16]
 800e34e:	9307      	str	r3, [sp, #28]
 800e350:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e354:	9002      	str	r0, [sp, #8]
 800e356:	9006      	str	r0, [sp, #24]
 800e358:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e35c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e35e:	ab21      	add	r3, sp, #132	@ 0x84
 800e360:	a902      	add	r1, sp, #8
 800e362:	4628      	mov	r0, r5
 800e364:	9301      	str	r3, [sp, #4]
 800e366:	f002 f8db 	bl	8010520 <_svfiprintf_r>
 800e36a:	1c43      	adds	r3, r0, #1
 800e36c:	bfbc      	itt	lt
 800e36e:	238b      	movlt	r3, #139	@ 0x8b
 800e370:	602b      	strlt	r3, [r5, #0]
 800e372:	2c00      	cmp	r4, #0
 800e374:	d0dd      	beq.n	800e332 <sniprintf+0x16>
 800e376:	9b02      	ldr	r3, [sp, #8]
 800e378:	2200      	movs	r2, #0
 800e37a:	701a      	strb	r2, [r3, #0]
 800e37c:	e7d9      	b.n	800e332 <sniprintf+0x16>
 800e37e:	bf00      	nop
 800e380:	20000280 	.word	0x20000280

0800e384 <siprintf>:
 800e384:	b40e      	push	{r1, r2, r3}
 800e386:	b500      	push	{lr}
 800e388:	b09c      	sub	sp, #112	@ 0x70
 800e38a:	ab1d      	add	r3, sp, #116	@ 0x74
 800e38c:	9002      	str	r0, [sp, #8]
 800e38e:	9006      	str	r0, [sp, #24]
 800e390:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e394:	4809      	ldr	r0, [pc, #36]	@ (800e3bc <siprintf+0x38>)
 800e396:	9107      	str	r1, [sp, #28]
 800e398:	9104      	str	r1, [sp, #16]
 800e39a:	4909      	ldr	r1, [pc, #36]	@ (800e3c0 <siprintf+0x3c>)
 800e39c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3a0:	9105      	str	r1, [sp, #20]
 800e3a2:	6800      	ldr	r0, [r0, #0]
 800e3a4:	9301      	str	r3, [sp, #4]
 800e3a6:	a902      	add	r1, sp, #8
 800e3a8:	f002 f8ba 	bl	8010520 <_svfiprintf_r>
 800e3ac:	9b02      	ldr	r3, [sp, #8]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	701a      	strb	r2, [r3, #0]
 800e3b2:	b01c      	add	sp, #112	@ 0x70
 800e3b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3b8:	b003      	add	sp, #12
 800e3ba:	4770      	bx	lr
 800e3bc:	20000280 	.word	0x20000280
 800e3c0:	ffff0208 	.word	0xffff0208

0800e3c4 <__sread>:
 800e3c4:	b510      	push	{r4, lr}
 800e3c6:	460c      	mov	r4, r1
 800e3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3cc:	f000 f910 	bl	800e5f0 <_read_r>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	bfab      	itete	ge
 800e3d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e3d6:	89a3      	ldrhlt	r3, [r4, #12]
 800e3d8:	181b      	addge	r3, r3, r0
 800e3da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e3de:	bfac      	ite	ge
 800e3e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e3e2:	81a3      	strhlt	r3, [r4, #12]
 800e3e4:	bd10      	pop	{r4, pc}

0800e3e6 <__swrite>:
 800e3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ea:	461f      	mov	r7, r3
 800e3ec:	898b      	ldrh	r3, [r1, #12]
 800e3ee:	05db      	lsls	r3, r3, #23
 800e3f0:	4605      	mov	r5, r0
 800e3f2:	460c      	mov	r4, r1
 800e3f4:	4616      	mov	r6, r2
 800e3f6:	d505      	bpl.n	800e404 <__swrite+0x1e>
 800e3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3fc:	2302      	movs	r3, #2
 800e3fe:	2200      	movs	r2, #0
 800e400:	f000 f8e4 	bl	800e5cc <_lseek_r>
 800e404:	89a3      	ldrh	r3, [r4, #12]
 800e406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e40a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e40e:	81a3      	strh	r3, [r4, #12]
 800e410:	4632      	mov	r2, r6
 800e412:	463b      	mov	r3, r7
 800e414:	4628      	mov	r0, r5
 800e416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e41a:	f000 b90b 	b.w	800e634 <_write_r>

0800e41e <__sseek>:
 800e41e:	b510      	push	{r4, lr}
 800e420:	460c      	mov	r4, r1
 800e422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e426:	f000 f8d1 	bl	800e5cc <_lseek_r>
 800e42a:	1c43      	adds	r3, r0, #1
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	bf15      	itete	ne
 800e430:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e432:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e436:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e43a:	81a3      	strheq	r3, [r4, #12]
 800e43c:	bf18      	it	ne
 800e43e:	81a3      	strhne	r3, [r4, #12]
 800e440:	bd10      	pop	{r4, pc}

0800e442 <__sclose>:
 800e442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e446:	f000 b8b1 	b.w	800e5ac <_close_r>

0800e44a <memset>:
 800e44a:	4402      	add	r2, r0
 800e44c:	4603      	mov	r3, r0
 800e44e:	4293      	cmp	r3, r2
 800e450:	d100      	bne.n	800e454 <memset+0xa>
 800e452:	4770      	bx	lr
 800e454:	f803 1b01 	strb.w	r1, [r3], #1
 800e458:	e7f9      	b.n	800e44e <memset+0x4>

0800e45a <strchr>:
 800e45a:	b2c9      	uxtb	r1, r1
 800e45c:	4603      	mov	r3, r0
 800e45e:	4618      	mov	r0, r3
 800e460:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e464:	b112      	cbz	r2, 800e46c <strchr+0x12>
 800e466:	428a      	cmp	r2, r1
 800e468:	d1f9      	bne.n	800e45e <strchr+0x4>
 800e46a:	4770      	bx	lr
 800e46c:	2900      	cmp	r1, #0
 800e46e:	bf18      	it	ne
 800e470:	2000      	movne	r0, #0
 800e472:	4770      	bx	lr

0800e474 <strncmp>:
 800e474:	b510      	push	{r4, lr}
 800e476:	b16a      	cbz	r2, 800e494 <strncmp+0x20>
 800e478:	3901      	subs	r1, #1
 800e47a:	1884      	adds	r4, r0, r2
 800e47c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e480:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e484:	429a      	cmp	r2, r3
 800e486:	d103      	bne.n	800e490 <strncmp+0x1c>
 800e488:	42a0      	cmp	r0, r4
 800e48a:	d001      	beq.n	800e490 <strncmp+0x1c>
 800e48c:	2a00      	cmp	r2, #0
 800e48e:	d1f5      	bne.n	800e47c <strncmp+0x8>
 800e490:	1ad0      	subs	r0, r2, r3
 800e492:	bd10      	pop	{r4, pc}
 800e494:	4610      	mov	r0, r2
 800e496:	e7fc      	b.n	800e492 <strncmp+0x1e>

0800e498 <strncpy>:
 800e498:	b510      	push	{r4, lr}
 800e49a:	3901      	subs	r1, #1
 800e49c:	4603      	mov	r3, r0
 800e49e:	b132      	cbz	r2, 800e4ae <strncpy+0x16>
 800e4a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e4a4:	f803 4b01 	strb.w	r4, [r3], #1
 800e4a8:	3a01      	subs	r2, #1
 800e4aa:	2c00      	cmp	r4, #0
 800e4ac:	d1f7      	bne.n	800e49e <strncpy+0x6>
 800e4ae:	441a      	add	r2, r3
 800e4b0:	2100      	movs	r1, #0
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d100      	bne.n	800e4b8 <strncpy+0x20>
 800e4b6:	bd10      	pop	{r4, pc}
 800e4b8:	f803 1b01 	strb.w	r1, [r3], #1
 800e4bc:	e7f9      	b.n	800e4b2 <strncpy+0x1a>
	...

0800e4c0 <strtok>:
 800e4c0:	4b16      	ldr	r3, [pc, #88]	@ (800e51c <strtok+0x5c>)
 800e4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c6:	681f      	ldr	r7, [r3, #0]
 800e4c8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800e4ca:	4605      	mov	r5, r0
 800e4cc:	460e      	mov	r6, r1
 800e4ce:	b9ec      	cbnz	r4, 800e50c <strtok+0x4c>
 800e4d0:	2050      	movs	r0, #80	@ 0x50
 800e4d2:	f7fe fa61 	bl	800c998 <malloc>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	6478      	str	r0, [r7, #68]	@ 0x44
 800e4da:	b920      	cbnz	r0, 800e4e6 <strtok+0x26>
 800e4dc:	4b10      	ldr	r3, [pc, #64]	@ (800e520 <strtok+0x60>)
 800e4de:	4811      	ldr	r0, [pc, #68]	@ (800e524 <strtok+0x64>)
 800e4e0:	215b      	movs	r1, #91	@ 0x5b
 800e4e2:	f000 f903 	bl	800e6ec <__assert_func>
 800e4e6:	e9c0 4400 	strd	r4, r4, [r0]
 800e4ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e4ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e4f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800e4f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800e4fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800e4fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800e502:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800e506:	6184      	str	r4, [r0, #24]
 800e508:	7704      	strb	r4, [r0, #28]
 800e50a:	6244      	str	r4, [r0, #36]	@ 0x24
 800e50c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e50e:	4631      	mov	r1, r6
 800e510:	4628      	mov	r0, r5
 800e512:	2301      	movs	r3, #1
 800e514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e518:	f000 b806 	b.w	800e528 <__strtok_r>
 800e51c:	20000280 	.word	0x20000280
 800e520:	08012f4d 	.word	0x08012f4d
 800e524:	08012f64 	.word	0x08012f64

0800e528 <__strtok_r>:
 800e528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e52a:	4604      	mov	r4, r0
 800e52c:	b908      	cbnz	r0, 800e532 <__strtok_r+0xa>
 800e52e:	6814      	ldr	r4, [r2, #0]
 800e530:	b144      	cbz	r4, 800e544 <__strtok_r+0x1c>
 800e532:	4620      	mov	r0, r4
 800e534:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e538:	460f      	mov	r7, r1
 800e53a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e53e:	b91e      	cbnz	r6, 800e548 <__strtok_r+0x20>
 800e540:	b965      	cbnz	r5, 800e55c <__strtok_r+0x34>
 800e542:	6015      	str	r5, [r2, #0]
 800e544:	2000      	movs	r0, #0
 800e546:	e005      	b.n	800e554 <__strtok_r+0x2c>
 800e548:	42b5      	cmp	r5, r6
 800e54a:	d1f6      	bne.n	800e53a <__strtok_r+0x12>
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1f0      	bne.n	800e532 <__strtok_r+0xa>
 800e550:	6014      	str	r4, [r2, #0]
 800e552:	7003      	strb	r3, [r0, #0]
 800e554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e556:	461c      	mov	r4, r3
 800e558:	e00c      	b.n	800e574 <__strtok_r+0x4c>
 800e55a:	b915      	cbnz	r5, 800e562 <__strtok_r+0x3a>
 800e55c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e560:	460e      	mov	r6, r1
 800e562:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e566:	42ab      	cmp	r3, r5
 800e568:	d1f7      	bne.n	800e55a <__strtok_r+0x32>
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d0f3      	beq.n	800e556 <__strtok_r+0x2e>
 800e56e:	2300      	movs	r3, #0
 800e570:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e574:	6014      	str	r4, [r2, #0]
 800e576:	e7ed      	b.n	800e554 <__strtok_r+0x2c>

0800e578 <strstr>:
 800e578:	780a      	ldrb	r2, [r1, #0]
 800e57a:	b570      	push	{r4, r5, r6, lr}
 800e57c:	b96a      	cbnz	r2, 800e59a <strstr+0x22>
 800e57e:	bd70      	pop	{r4, r5, r6, pc}
 800e580:	429a      	cmp	r2, r3
 800e582:	d109      	bne.n	800e598 <strstr+0x20>
 800e584:	460c      	mov	r4, r1
 800e586:	4605      	mov	r5, r0
 800e588:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d0f6      	beq.n	800e57e <strstr+0x6>
 800e590:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e594:	429e      	cmp	r6, r3
 800e596:	d0f7      	beq.n	800e588 <strstr+0x10>
 800e598:	3001      	adds	r0, #1
 800e59a:	7803      	ldrb	r3, [r0, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d1ef      	bne.n	800e580 <strstr+0x8>
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	e7ec      	b.n	800e57e <strstr+0x6>

0800e5a4 <_localeconv_r>:
 800e5a4:	4800      	ldr	r0, [pc, #0]	@ (800e5a8 <_localeconv_r+0x4>)
 800e5a6:	4770      	bx	lr
 800e5a8:	20000204 	.word	0x20000204

0800e5ac <_close_r>:
 800e5ac:	b538      	push	{r3, r4, r5, lr}
 800e5ae:	4d06      	ldr	r5, [pc, #24]	@ (800e5c8 <_close_r+0x1c>)
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	4608      	mov	r0, r1
 800e5b6:	602b      	str	r3, [r5, #0]
 800e5b8:	f7f4 ffb0 	bl	800351c <_close>
 800e5bc:	1c43      	adds	r3, r0, #1
 800e5be:	d102      	bne.n	800e5c6 <_close_r+0x1a>
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	b103      	cbz	r3, 800e5c6 <_close_r+0x1a>
 800e5c4:	6023      	str	r3, [r4, #0]
 800e5c6:	bd38      	pop	{r3, r4, r5, pc}
 800e5c8:	20001e34 	.word	0x20001e34

0800e5cc <_lseek_r>:
 800e5cc:	b538      	push	{r3, r4, r5, lr}
 800e5ce:	4d07      	ldr	r5, [pc, #28]	@ (800e5ec <_lseek_r+0x20>)
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	4608      	mov	r0, r1
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	602a      	str	r2, [r5, #0]
 800e5da:	461a      	mov	r2, r3
 800e5dc:	f7f4 ffc5 	bl	800356a <_lseek>
 800e5e0:	1c43      	adds	r3, r0, #1
 800e5e2:	d102      	bne.n	800e5ea <_lseek_r+0x1e>
 800e5e4:	682b      	ldr	r3, [r5, #0]
 800e5e6:	b103      	cbz	r3, 800e5ea <_lseek_r+0x1e>
 800e5e8:	6023      	str	r3, [r4, #0]
 800e5ea:	bd38      	pop	{r3, r4, r5, pc}
 800e5ec:	20001e34 	.word	0x20001e34

0800e5f0 <_read_r>:
 800e5f0:	b538      	push	{r3, r4, r5, lr}
 800e5f2:	4d07      	ldr	r5, [pc, #28]	@ (800e610 <_read_r+0x20>)
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	4608      	mov	r0, r1
 800e5f8:	4611      	mov	r1, r2
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	602a      	str	r2, [r5, #0]
 800e5fe:	461a      	mov	r2, r3
 800e600:	f7f4 ff53 	bl	80034aa <_read>
 800e604:	1c43      	adds	r3, r0, #1
 800e606:	d102      	bne.n	800e60e <_read_r+0x1e>
 800e608:	682b      	ldr	r3, [r5, #0]
 800e60a:	b103      	cbz	r3, 800e60e <_read_r+0x1e>
 800e60c:	6023      	str	r3, [r4, #0]
 800e60e:	bd38      	pop	{r3, r4, r5, pc}
 800e610:	20001e34 	.word	0x20001e34

0800e614 <_sbrk_r>:
 800e614:	b538      	push	{r3, r4, r5, lr}
 800e616:	4d06      	ldr	r5, [pc, #24]	@ (800e630 <_sbrk_r+0x1c>)
 800e618:	2300      	movs	r3, #0
 800e61a:	4604      	mov	r4, r0
 800e61c:	4608      	mov	r0, r1
 800e61e:	602b      	str	r3, [r5, #0]
 800e620:	f7f4 ffb0 	bl	8003584 <_sbrk>
 800e624:	1c43      	adds	r3, r0, #1
 800e626:	d102      	bne.n	800e62e <_sbrk_r+0x1a>
 800e628:	682b      	ldr	r3, [r5, #0]
 800e62a:	b103      	cbz	r3, 800e62e <_sbrk_r+0x1a>
 800e62c:	6023      	str	r3, [r4, #0]
 800e62e:	bd38      	pop	{r3, r4, r5, pc}
 800e630:	20001e34 	.word	0x20001e34

0800e634 <_write_r>:
 800e634:	b538      	push	{r3, r4, r5, lr}
 800e636:	4d07      	ldr	r5, [pc, #28]	@ (800e654 <_write_r+0x20>)
 800e638:	4604      	mov	r4, r0
 800e63a:	4608      	mov	r0, r1
 800e63c:	4611      	mov	r1, r2
 800e63e:	2200      	movs	r2, #0
 800e640:	602a      	str	r2, [r5, #0]
 800e642:	461a      	mov	r2, r3
 800e644:	f7f4 ff4e 	bl	80034e4 <_write>
 800e648:	1c43      	adds	r3, r0, #1
 800e64a:	d102      	bne.n	800e652 <_write_r+0x1e>
 800e64c:	682b      	ldr	r3, [r5, #0]
 800e64e:	b103      	cbz	r3, 800e652 <_write_r+0x1e>
 800e650:	6023      	str	r3, [r4, #0]
 800e652:	bd38      	pop	{r3, r4, r5, pc}
 800e654:	20001e34 	.word	0x20001e34

0800e658 <__errno>:
 800e658:	4b01      	ldr	r3, [pc, #4]	@ (800e660 <__errno+0x8>)
 800e65a:	6818      	ldr	r0, [r3, #0]
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop
 800e660:	20000280 	.word	0x20000280

0800e664 <__libc_init_array>:
 800e664:	b570      	push	{r4, r5, r6, lr}
 800e666:	4d0d      	ldr	r5, [pc, #52]	@ (800e69c <__libc_init_array+0x38>)
 800e668:	4c0d      	ldr	r4, [pc, #52]	@ (800e6a0 <__libc_init_array+0x3c>)
 800e66a:	1b64      	subs	r4, r4, r5
 800e66c:	10a4      	asrs	r4, r4, #2
 800e66e:	2600      	movs	r6, #0
 800e670:	42a6      	cmp	r6, r4
 800e672:	d109      	bne.n	800e688 <__libc_init_array+0x24>
 800e674:	4d0b      	ldr	r5, [pc, #44]	@ (800e6a4 <__libc_init_array+0x40>)
 800e676:	4c0c      	ldr	r4, [pc, #48]	@ (800e6a8 <__libc_init_array+0x44>)
 800e678:	f004 f802 	bl	8012680 <_init>
 800e67c:	1b64      	subs	r4, r4, r5
 800e67e:	10a4      	asrs	r4, r4, #2
 800e680:	2600      	movs	r6, #0
 800e682:	42a6      	cmp	r6, r4
 800e684:	d105      	bne.n	800e692 <__libc_init_array+0x2e>
 800e686:	bd70      	pop	{r4, r5, r6, pc}
 800e688:	f855 3b04 	ldr.w	r3, [r5], #4
 800e68c:	4798      	blx	r3
 800e68e:	3601      	adds	r6, #1
 800e690:	e7ee      	b.n	800e670 <__libc_init_array+0xc>
 800e692:	f855 3b04 	ldr.w	r3, [r5], #4
 800e696:	4798      	blx	r3
 800e698:	3601      	adds	r6, #1
 800e69a:	e7f2      	b.n	800e682 <__libc_init_array+0x1e>
 800e69c:	08013498 	.word	0x08013498
 800e6a0:	08013498 	.word	0x08013498
 800e6a4:	08013498 	.word	0x08013498
 800e6a8:	0801349c 	.word	0x0801349c

0800e6ac <__retarget_lock_init_recursive>:
 800e6ac:	4770      	bx	lr

0800e6ae <__retarget_lock_acquire_recursive>:
 800e6ae:	4770      	bx	lr

0800e6b0 <__retarget_lock_release_recursive>:
 800e6b0:	4770      	bx	lr

0800e6b2 <memcpy>:
 800e6b2:	440a      	add	r2, r1
 800e6b4:	4291      	cmp	r1, r2
 800e6b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6ba:	d100      	bne.n	800e6be <memcpy+0xc>
 800e6bc:	4770      	bx	lr
 800e6be:	b510      	push	{r4, lr}
 800e6c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6c8:	4291      	cmp	r1, r2
 800e6ca:	d1f9      	bne.n	800e6c0 <memcpy+0xe>
 800e6cc:	bd10      	pop	{r4, pc}
	...

0800e6d0 <nan>:
 800e6d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e6d8 <nan+0x8>
 800e6d4:	4770      	bx	lr
 800e6d6:	bf00      	nop
 800e6d8:	00000000 	.word	0x00000000
 800e6dc:	7ff80000 	.word	0x7ff80000

0800e6e0 <nanf>:
 800e6e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e6e8 <nanf+0x8>
 800e6e4:	4770      	bx	lr
 800e6e6:	bf00      	nop
 800e6e8:	7fc00000 	.word	0x7fc00000

0800e6ec <__assert_func>:
 800e6ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6ee:	4614      	mov	r4, r2
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	4b09      	ldr	r3, [pc, #36]	@ (800e718 <__assert_func+0x2c>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4605      	mov	r5, r0
 800e6f8:	68d8      	ldr	r0, [r3, #12]
 800e6fa:	b954      	cbnz	r4, 800e712 <__assert_func+0x26>
 800e6fc:	4b07      	ldr	r3, [pc, #28]	@ (800e71c <__assert_func+0x30>)
 800e6fe:	461c      	mov	r4, r3
 800e700:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e704:	9100      	str	r1, [sp, #0]
 800e706:	462b      	mov	r3, r5
 800e708:	4905      	ldr	r1, [pc, #20]	@ (800e720 <__assert_func+0x34>)
 800e70a:	f002 f8b1 	bl	8010870 <fiprintf>
 800e70e:	f002 f8db 	bl	80108c8 <abort>
 800e712:	4b04      	ldr	r3, [pc, #16]	@ (800e724 <__assert_func+0x38>)
 800e714:	e7f4      	b.n	800e700 <__assert_func+0x14>
 800e716:	bf00      	nop
 800e718:	20000280 	.word	0x20000280
 800e71c:	08013001 	.word	0x08013001
 800e720:	08012fd3 	.word	0x08012fd3
 800e724:	08012fc6 	.word	0x08012fc6

0800e728 <quorem>:
 800e728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e72c:	6903      	ldr	r3, [r0, #16]
 800e72e:	690c      	ldr	r4, [r1, #16]
 800e730:	42a3      	cmp	r3, r4
 800e732:	4607      	mov	r7, r0
 800e734:	db7e      	blt.n	800e834 <quorem+0x10c>
 800e736:	3c01      	subs	r4, #1
 800e738:	f101 0814 	add.w	r8, r1, #20
 800e73c:	00a3      	lsls	r3, r4, #2
 800e73e:	f100 0514 	add.w	r5, r0, #20
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e748:	9301      	str	r3, [sp, #4]
 800e74a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e74e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e752:	3301      	adds	r3, #1
 800e754:	429a      	cmp	r2, r3
 800e756:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e75a:	fbb2 f6f3 	udiv	r6, r2, r3
 800e75e:	d32e      	bcc.n	800e7be <quorem+0x96>
 800e760:	f04f 0a00 	mov.w	sl, #0
 800e764:	46c4      	mov	ip, r8
 800e766:	46ae      	mov	lr, r5
 800e768:	46d3      	mov	fp, sl
 800e76a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e76e:	b298      	uxth	r0, r3
 800e770:	fb06 a000 	mla	r0, r6, r0, sl
 800e774:	0c02      	lsrs	r2, r0, #16
 800e776:	0c1b      	lsrs	r3, r3, #16
 800e778:	fb06 2303 	mla	r3, r6, r3, r2
 800e77c:	f8de 2000 	ldr.w	r2, [lr]
 800e780:	b280      	uxth	r0, r0
 800e782:	b292      	uxth	r2, r2
 800e784:	1a12      	subs	r2, r2, r0
 800e786:	445a      	add	r2, fp
 800e788:	f8de 0000 	ldr.w	r0, [lr]
 800e78c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e790:	b29b      	uxth	r3, r3
 800e792:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e796:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e79a:	b292      	uxth	r2, r2
 800e79c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e7a0:	45e1      	cmp	r9, ip
 800e7a2:	f84e 2b04 	str.w	r2, [lr], #4
 800e7a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e7aa:	d2de      	bcs.n	800e76a <quorem+0x42>
 800e7ac:	9b00      	ldr	r3, [sp, #0]
 800e7ae:	58eb      	ldr	r3, [r5, r3]
 800e7b0:	b92b      	cbnz	r3, 800e7be <quorem+0x96>
 800e7b2:	9b01      	ldr	r3, [sp, #4]
 800e7b4:	3b04      	subs	r3, #4
 800e7b6:	429d      	cmp	r5, r3
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	d32f      	bcc.n	800e81c <quorem+0xf4>
 800e7bc:	613c      	str	r4, [r7, #16]
 800e7be:	4638      	mov	r0, r7
 800e7c0:	f001 fc58 	bl	8010074 <__mcmp>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	db25      	blt.n	800e814 <quorem+0xec>
 800e7c8:	4629      	mov	r1, r5
 800e7ca:	2000      	movs	r0, #0
 800e7cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e7d0:	f8d1 c000 	ldr.w	ip, [r1]
 800e7d4:	fa1f fe82 	uxth.w	lr, r2
 800e7d8:	fa1f f38c 	uxth.w	r3, ip
 800e7dc:	eba3 030e 	sub.w	r3, r3, lr
 800e7e0:	4403      	add	r3, r0
 800e7e2:	0c12      	lsrs	r2, r2, #16
 800e7e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e7e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7f2:	45c1      	cmp	r9, r8
 800e7f4:	f841 3b04 	str.w	r3, [r1], #4
 800e7f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e7fc:	d2e6      	bcs.n	800e7cc <quorem+0xa4>
 800e7fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e806:	b922      	cbnz	r2, 800e812 <quorem+0xea>
 800e808:	3b04      	subs	r3, #4
 800e80a:	429d      	cmp	r5, r3
 800e80c:	461a      	mov	r2, r3
 800e80e:	d30b      	bcc.n	800e828 <quorem+0x100>
 800e810:	613c      	str	r4, [r7, #16]
 800e812:	3601      	adds	r6, #1
 800e814:	4630      	mov	r0, r6
 800e816:	b003      	add	sp, #12
 800e818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e81c:	6812      	ldr	r2, [r2, #0]
 800e81e:	3b04      	subs	r3, #4
 800e820:	2a00      	cmp	r2, #0
 800e822:	d1cb      	bne.n	800e7bc <quorem+0x94>
 800e824:	3c01      	subs	r4, #1
 800e826:	e7c6      	b.n	800e7b6 <quorem+0x8e>
 800e828:	6812      	ldr	r2, [r2, #0]
 800e82a:	3b04      	subs	r3, #4
 800e82c:	2a00      	cmp	r2, #0
 800e82e:	d1ef      	bne.n	800e810 <quorem+0xe8>
 800e830:	3c01      	subs	r4, #1
 800e832:	e7ea      	b.n	800e80a <quorem+0xe2>
 800e834:	2000      	movs	r0, #0
 800e836:	e7ee      	b.n	800e816 <quorem+0xee>

0800e838 <_dtoa_r>:
 800e838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e83c:	69c7      	ldr	r7, [r0, #28]
 800e83e:	b099      	sub	sp, #100	@ 0x64
 800e840:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e844:	ec55 4b10 	vmov	r4, r5, d0
 800e848:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e84a:	9109      	str	r1, [sp, #36]	@ 0x24
 800e84c:	4683      	mov	fp, r0
 800e84e:	920e      	str	r2, [sp, #56]	@ 0x38
 800e850:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e852:	b97f      	cbnz	r7, 800e874 <_dtoa_r+0x3c>
 800e854:	2010      	movs	r0, #16
 800e856:	f7fe f89f 	bl	800c998 <malloc>
 800e85a:	4602      	mov	r2, r0
 800e85c:	f8cb 001c 	str.w	r0, [fp, #28]
 800e860:	b920      	cbnz	r0, 800e86c <_dtoa_r+0x34>
 800e862:	4ba7      	ldr	r3, [pc, #668]	@ (800eb00 <_dtoa_r+0x2c8>)
 800e864:	21ef      	movs	r1, #239	@ 0xef
 800e866:	48a7      	ldr	r0, [pc, #668]	@ (800eb04 <_dtoa_r+0x2cc>)
 800e868:	f7ff ff40 	bl	800e6ec <__assert_func>
 800e86c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e870:	6007      	str	r7, [r0, #0]
 800e872:	60c7      	str	r7, [r0, #12]
 800e874:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e878:	6819      	ldr	r1, [r3, #0]
 800e87a:	b159      	cbz	r1, 800e894 <_dtoa_r+0x5c>
 800e87c:	685a      	ldr	r2, [r3, #4]
 800e87e:	604a      	str	r2, [r1, #4]
 800e880:	2301      	movs	r3, #1
 800e882:	4093      	lsls	r3, r2
 800e884:	608b      	str	r3, [r1, #8]
 800e886:	4658      	mov	r0, fp
 800e888:	f001 f970 	bl	800fb6c <_Bfree>
 800e88c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e890:	2200      	movs	r2, #0
 800e892:	601a      	str	r2, [r3, #0]
 800e894:	1e2b      	subs	r3, r5, #0
 800e896:	bfb9      	ittee	lt
 800e898:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e89c:	9303      	strlt	r3, [sp, #12]
 800e89e:	2300      	movge	r3, #0
 800e8a0:	6033      	strge	r3, [r6, #0]
 800e8a2:	9f03      	ldr	r7, [sp, #12]
 800e8a4:	4b98      	ldr	r3, [pc, #608]	@ (800eb08 <_dtoa_r+0x2d0>)
 800e8a6:	bfbc      	itt	lt
 800e8a8:	2201      	movlt	r2, #1
 800e8aa:	6032      	strlt	r2, [r6, #0]
 800e8ac:	43bb      	bics	r3, r7
 800e8ae:	d112      	bne.n	800e8d6 <_dtoa_r+0x9e>
 800e8b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e8b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e8b6:	6013      	str	r3, [r2, #0]
 800e8b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e8bc:	4323      	orrs	r3, r4
 800e8be:	f000 854d 	beq.w	800f35c <_dtoa_r+0xb24>
 800e8c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e8c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800eb1c <_dtoa_r+0x2e4>
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f000 854f 	beq.w	800f36c <_dtoa_r+0xb34>
 800e8ce:	f10a 0303 	add.w	r3, sl, #3
 800e8d2:	f000 bd49 	b.w	800f368 <_dtoa_r+0xb30>
 800e8d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	ec51 0b17 	vmov	r0, r1, d7
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e8e6:	f7f2 f8f7 	bl	8000ad8 <__aeabi_dcmpeq>
 800e8ea:	4680      	mov	r8, r0
 800e8ec:	b158      	cbz	r0, 800e906 <_dtoa_r+0xce>
 800e8ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	6013      	str	r3, [r2, #0]
 800e8f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e8f6:	b113      	cbz	r3, 800e8fe <_dtoa_r+0xc6>
 800e8f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e8fa:	4b84      	ldr	r3, [pc, #528]	@ (800eb0c <_dtoa_r+0x2d4>)
 800e8fc:	6013      	str	r3, [r2, #0]
 800e8fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800eb20 <_dtoa_r+0x2e8>
 800e902:	f000 bd33 	b.w	800f36c <_dtoa_r+0xb34>
 800e906:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e90a:	aa16      	add	r2, sp, #88	@ 0x58
 800e90c:	a917      	add	r1, sp, #92	@ 0x5c
 800e90e:	4658      	mov	r0, fp
 800e910:	f001 fcd0 	bl	80102b4 <__d2b>
 800e914:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e918:	4681      	mov	r9, r0
 800e91a:	2e00      	cmp	r6, #0
 800e91c:	d077      	beq.n	800ea0e <_dtoa_r+0x1d6>
 800e91e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e920:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e92c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e930:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e934:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e938:	4619      	mov	r1, r3
 800e93a:	2200      	movs	r2, #0
 800e93c:	4b74      	ldr	r3, [pc, #464]	@ (800eb10 <_dtoa_r+0x2d8>)
 800e93e:	f7f1 fcab 	bl	8000298 <__aeabi_dsub>
 800e942:	a369      	add	r3, pc, #420	@ (adr r3, 800eae8 <_dtoa_r+0x2b0>)
 800e944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e948:	f7f1 fe5e 	bl	8000608 <__aeabi_dmul>
 800e94c:	a368      	add	r3, pc, #416	@ (adr r3, 800eaf0 <_dtoa_r+0x2b8>)
 800e94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e952:	f7f1 fca3 	bl	800029c <__adddf3>
 800e956:	4604      	mov	r4, r0
 800e958:	4630      	mov	r0, r6
 800e95a:	460d      	mov	r5, r1
 800e95c:	f7f1 fdea 	bl	8000534 <__aeabi_i2d>
 800e960:	a365      	add	r3, pc, #404	@ (adr r3, 800eaf8 <_dtoa_r+0x2c0>)
 800e962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e966:	f7f1 fe4f 	bl	8000608 <__aeabi_dmul>
 800e96a:	4602      	mov	r2, r0
 800e96c:	460b      	mov	r3, r1
 800e96e:	4620      	mov	r0, r4
 800e970:	4629      	mov	r1, r5
 800e972:	f7f1 fc93 	bl	800029c <__adddf3>
 800e976:	4604      	mov	r4, r0
 800e978:	460d      	mov	r5, r1
 800e97a:	f7f2 f8f5 	bl	8000b68 <__aeabi_d2iz>
 800e97e:	2200      	movs	r2, #0
 800e980:	4607      	mov	r7, r0
 800e982:	2300      	movs	r3, #0
 800e984:	4620      	mov	r0, r4
 800e986:	4629      	mov	r1, r5
 800e988:	f7f2 f8b0 	bl	8000aec <__aeabi_dcmplt>
 800e98c:	b140      	cbz	r0, 800e9a0 <_dtoa_r+0x168>
 800e98e:	4638      	mov	r0, r7
 800e990:	f7f1 fdd0 	bl	8000534 <__aeabi_i2d>
 800e994:	4622      	mov	r2, r4
 800e996:	462b      	mov	r3, r5
 800e998:	f7f2 f89e 	bl	8000ad8 <__aeabi_dcmpeq>
 800e99c:	b900      	cbnz	r0, 800e9a0 <_dtoa_r+0x168>
 800e99e:	3f01      	subs	r7, #1
 800e9a0:	2f16      	cmp	r7, #22
 800e9a2:	d851      	bhi.n	800ea48 <_dtoa_r+0x210>
 800e9a4:	4b5b      	ldr	r3, [pc, #364]	@ (800eb14 <_dtoa_r+0x2dc>)
 800e9a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e9b2:	f7f2 f89b 	bl	8000aec <__aeabi_dcmplt>
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	d048      	beq.n	800ea4c <_dtoa_r+0x214>
 800e9ba:	3f01      	subs	r7, #1
 800e9bc:	2300      	movs	r3, #0
 800e9be:	9312      	str	r3, [sp, #72]	@ 0x48
 800e9c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e9c2:	1b9b      	subs	r3, r3, r6
 800e9c4:	1e5a      	subs	r2, r3, #1
 800e9c6:	bf44      	itt	mi
 800e9c8:	f1c3 0801 	rsbmi	r8, r3, #1
 800e9cc:	2300      	movmi	r3, #0
 800e9ce:	9208      	str	r2, [sp, #32]
 800e9d0:	bf54      	ite	pl
 800e9d2:	f04f 0800 	movpl.w	r8, #0
 800e9d6:	9308      	strmi	r3, [sp, #32]
 800e9d8:	2f00      	cmp	r7, #0
 800e9da:	db39      	blt.n	800ea50 <_dtoa_r+0x218>
 800e9dc:	9b08      	ldr	r3, [sp, #32]
 800e9de:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e9e0:	443b      	add	r3, r7
 800e9e2:	9308      	str	r3, [sp, #32]
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ea:	2b09      	cmp	r3, #9
 800e9ec:	d864      	bhi.n	800eab8 <_dtoa_r+0x280>
 800e9ee:	2b05      	cmp	r3, #5
 800e9f0:	bfc4      	itt	gt
 800e9f2:	3b04      	subgt	r3, #4
 800e9f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9f8:	f1a3 0302 	sub.w	r3, r3, #2
 800e9fc:	bfcc      	ite	gt
 800e9fe:	2400      	movgt	r4, #0
 800ea00:	2401      	movle	r4, #1
 800ea02:	2b03      	cmp	r3, #3
 800ea04:	d863      	bhi.n	800eace <_dtoa_r+0x296>
 800ea06:	e8df f003 	tbb	[pc, r3]
 800ea0a:	372a      	.short	0x372a
 800ea0c:	5535      	.short	0x5535
 800ea0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ea12:	441e      	add	r6, r3
 800ea14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ea18:	2b20      	cmp	r3, #32
 800ea1a:	bfc1      	itttt	gt
 800ea1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ea20:	409f      	lslgt	r7, r3
 800ea22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ea26:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ea2a:	bfd6      	itet	le
 800ea2c:	f1c3 0320 	rsble	r3, r3, #32
 800ea30:	ea47 0003 	orrgt.w	r0, r7, r3
 800ea34:	fa04 f003 	lslle.w	r0, r4, r3
 800ea38:	f7f1 fd6c 	bl	8000514 <__aeabi_ui2d>
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ea42:	3e01      	subs	r6, #1
 800ea44:	9214      	str	r2, [sp, #80]	@ 0x50
 800ea46:	e777      	b.n	800e938 <_dtoa_r+0x100>
 800ea48:	2301      	movs	r3, #1
 800ea4a:	e7b8      	b.n	800e9be <_dtoa_r+0x186>
 800ea4c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ea4e:	e7b7      	b.n	800e9c0 <_dtoa_r+0x188>
 800ea50:	427b      	negs	r3, r7
 800ea52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea54:	2300      	movs	r3, #0
 800ea56:	eba8 0807 	sub.w	r8, r8, r7
 800ea5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea5c:	e7c4      	b.n	800e9e8 <_dtoa_r+0x1b0>
 800ea5e:	2300      	movs	r3, #0
 800ea60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	dc35      	bgt.n	800ead4 <_dtoa_r+0x29c>
 800ea68:	2301      	movs	r3, #1
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	9307      	str	r3, [sp, #28]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea72:	e00b      	b.n	800ea8c <_dtoa_r+0x254>
 800ea74:	2301      	movs	r3, #1
 800ea76:	e7f3      	b.n	800ea60 <_dtoa_r+0x228>
 800ea78:	2300      	movs	r3, #0
 800ea7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea7e:	18fb      	adds	r3, r7, r3
 800ea80:	9300      	str	r3, [sp, #0]
 800ea82:	3301      	adds	r3, #1
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	9307      	str	r3, [sp, #28]
 800ea88:	bfb8      	it	lt
 800ea8a:	2301      	movlt	r3, #1
 800ea8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ea90:	2100      	movs	r1, #0
 800ea92:	2204      	movs	r2, #4
 800ea94:	f102 0514 	add.w	r5, r2, #20
 800ea98:	429d      	cmp	r5, r3
 800ea9a:	d91f      	bls.n	800eadc <_dtoa_r+0x2a4>
 800ea9c:	6041      	str	r1, [r0, #4]
 800ea9e:	4658      	mov	r0, fp
 800eaa0:	f001 f824 	bl	800faec <_Balloc>
 800eaa4:	4682      	mov	sl, r0
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	d13c      	bne.n	800eb24 <_dtoa_r+0x2ec>
 800eaaa:	4b1b      	ldr	r3, [pc, #108]	@ (800eb18 <_dtoa_r+0x2e0>)
 800eaac:	4602      	mov	r2, r0
 800eaae:	f240 11af 	movw	r1, #431	@ 0x1af
 800eab2:	e6d8      	b.n	800e866 <_dtoa_r+0x2e>
 800eab4:	2301      	movs	r3, #1
 800eab6:	e7e0      	b.n	800ea7a <_dtoa_r+0x242>
 800eab8:	2401      	movs	r4, #1
 800eaba:	2300      	movs	r3, #0
 800eabc:	9309      	str	r3, [sp, #36]	@ 0x24
 800eabe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eac0:	f04f 33ff 	mov.w	r3, #4294967295
 800eac4:	9300      	str	r3, [sp, #0]
 800eac6:	9307      	str	r3, [sp, #28]
 800eac8:	2200      	movs	r2, #0
 800eaca:	2312      	movs	r3, #18
 800eacc:	e7d0      	b.n	800ea70 <_dtoa_r+0x238>
 800eace:	2301      	movs	r3, #1
 800ead0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ead2:	e7f5      	b.n	800eac0 <_dtoa_r+0x288>
 800ead4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	9307      	str	r3, [sp, #28]
 800eada:	e7d7      	b.n	800ea8c <_dtoa_r+0x254>
 800eadc:	3101      	adds	r1, #1
 800eade:	0052      	lsls	r2, r2, #1
 800eae0:	e7d8      	b.n	800ea94 <_dtoa_r+0x25c>
 800eae2:	bf00      	nop
 800eae4:	f3af 8000 	nop.w
 800eae8:	636f4361 	.word	0x636f4361
 800eaec:	3fd287a7 	.word	0x3fd287a7
 800eaf0:	8b60c8b3 	.word	0x8b60c8b3
 800eaf4:	3fc68a28 	.word	0x3fc68a28
 800eaf8:	509f79fb 	.word	0x509f79fb
 800eafc:	3fd34413 	.word	0x3fd34413
 800eb00:	08012f4d 	.word	0x08012f4d
 800eb04:	0801300f 	.word	0x0801300f
 800eb08:	7ff00000 	.word	0x7ff00000
 800eb0c:	08012f2a 	.word	0x08012f2a
 800eb10:	3ff80000 	.word	0x3ff80000
 800eb14:	08013168 	.word	0x08013168
 800eb18:	08013067 	.word	0x08013067
 800eb1c:	0801300b 	.word	0x0801300b
 800eb20:	08012f29 	.word	0x08012f29
 800eb24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800eb28:	6018      	str	r0, [r3, #0]
 800eb2a:	9b07      	ldr	r3, [sp, #28]
 800eb2c:	2b0e      	cmp	r3, #14
 800eb2e:	f200 80a4 	bhi.w	800ec7a <_dtoa_r+0x442>
 800eb32:	2c00      	cmp	r4, #0
 800eb34:	f000 80a1 	beq.w	800ec7a <_dtoa_r+0x442>
 800eb38:	2f00      	cmp	r7, #0
 800eb3a:	dd33      	ble.n	800eba4 <_dtoa_r+0x36c>
 800eb3c:	4bad      	ldr	r3, [pc, #692]	@ (800edf4 <_dtoa_r+0x5bc>)
 800eb3e:	f007 020f 	and.w	r2, r7, #15
 800eb42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb46:	ed93 7b00 	vldr	d7, [r3]
 800eb4a:	05f8      	lsls	r0, r7, #23
 800eb4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800eb50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800eb54:	d516      	bpl.n	800eb84 <_dtoa_r+0x34c>
 800eb56:	4ba8      	ldr	r3, [pc, #672]	@ (800edf8 <_dtoa_r+0x5c0>)
 800eb58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eb60:	f7f1 fe7c 	bl	800085c <__aeabi_ddiv>
 800eb64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb68:	f004 040f 	and.w	r4, r4, #15
 800eb6c:	2603      	movs	r6, #3
 800eb6e:	4da2      	ldr	r5, [pc, #648]	@ (800edf8 <_dtoa_r+0x5c0>)
 800eb70:	b954      	cbnz	r4, 800eb88 <_dtoa_r+0x350>
 800eb72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb7a:	f7f1 fe6f 	bl	800085c <__aeabi_ddiv>
 800eb7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb82:	e028      	b.n	800ebd6 <_dtoa_r+0x39e>
 800eb84:	2602      	movs	r6, #2
 800eb86:	e7f2      	b.n	800eb6e <_dtoa_r+0x336>
 800eb88:	07e1      	lsls	r1, r4, #31
 800eb8a:	d508      	bpl.n	800eb9e <_dtoa_r+0x366>
 800eb8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eb94:	f7f1 fd38 	bl	8000608 <__aeabi_dmul>
 800eb98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb9c:	3601      	adds	r6, #1
 800eb9e:	1064      	asrs	r4, r4, #1
 800eba0:	3508      	adds	r5, #8
 800eba2:	e7e5      	b.n	800eb70 <_dtoa_r+0x338>
 800eba4:	f000 80d2 	beq.w	800ed4c <_dtoa_r+0x514>
 800eba8:	427c      	negs	r4, r7
 800ebaa:	4b92      	ldr	r3, [pc, #584]	@ (800edf4 <_dtoa_r+0x5bc>)
 800ebac:	4d92      	ldr	r5, [pc, #584]	@ (800edf8 <_dtoa_r+0x5c0>)
 800ebae:	f004 020f 	and.w	r2, r4, #15
 800ebb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ebbe:	f7f1 fd23 	bl	8000608 <__aeabi_dmul>
 800ebc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebc6:	1124      	asrs	r4, r4, #4
 800ebc8:	2300      	movs	r3, #0
 800ebca:	2602      	movs	r6, #2
 800ebcc:	2c00      	cmp	r4, #0
 800ebce:	f040 80b2 	bne.w	800ed36 <_dtoa_r+0x4fe>
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d1d3      	bne.n	800eb7e <_dtoa_r+0x346>
 800ebd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ebd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f000 80b7 	beq.w	800ed50 <_dtoa_r+0x518>
 800ebe2:	4b86      	ldr	r3, [pc, #536]	@ (800edfc <_dtoa_r+0x5c4>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	4629      	mov	r1, r5
 800ebea:	f7f1 ff7f 	bl	8000aec <__aeabi_dcmplt>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	f000 80ae 	beq.w	800ed50 <_dtoa_r+0x518>
 800ebf4:	9b07      	ldr	r3, [sp, #28]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	f000 80aa 	beq.w	800ed50 <_dtoa_r+0x518>
 800ebfc:	9b00      	ldr	r3, [sp, #0]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	dd37      	ble.n	800ec72 <_dtoa_r+0x43a>
 800ec02:	1e7b      	subs	r3, r7, #1
 800ec04:	9304      	str	r3, [sp, #16]
 800ec06:	4620      	mov	r0, r4
 800ec08:	4b7d      	ldr	r3, [pc, #500]	@ (800ee00 <_dtoa_r+0x5c8>)
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	4629      	mov	r1, r5
 800ec0e:	f7f1 fcfb 	bl	8000608 <__aeabi_dmul>
 800ec12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec16:	9c00      	ldr	r4, [sp, #0]
 800ec18:	3601      	adds	r6, #1
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	f7f1 fc8a 	bl	8000534 <__aeabi_i2d>
 800ec20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec24:	f7f1 fcf0 	bl	8000608 <__aeabi_dmul>
 800ec28:	4b76      	ldr	r3, [pc, #472]	@ (800ee04 <_dtoa_r+0x5cc>)
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	f7f1 fb36 	bl	800029c <__adddf3>
 800ec30:	4605      	mov	r5, r0
 800ec32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ec36:	2c00      	cmp	r4, #0
 800ec38:	f040 808d 	bne.w	800ed56 <_dtoa_r+0x51e>
 800ec3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec40:	4b71      	ldr	r3, [pc, #452]	@ (800ee08 <_dtoa_r+0x5d0>)
 800ec42:	2200      	movs	r2, #0
 800ec44:	f7f1 fb28 	bl	8000298 <__aeabi_dsub>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	460b      	mov	r3, r1
 800ec4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ec50:	462a      	mov	r2, r5
 800ec52:	4633      	mov	r3, r6
 800ec54:	f7f1 ff68 	bl	8000b28 <__aeabi_dcmpgt>
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	f040 828b 	bne.w	800f174 <_dtoa_r+0x93c>
 800ec5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec62:	462a      	mov	r2, r5
 800ec64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ec68:	f7f1 ff40 	bl	8000aec <__aeabi_dcmplt>
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	f040 8128 	bne.w	800eec2 <_dtoa_r+0x68a>
 800ec72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ec76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ec7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f2c0 815a 	blt.w	800ef36 <_dtoa_r+0x6fe>
 800ec82:	2f0e      	cmp	r7, #14
 800ec84:	f300 8157 	bgt.w	800ef36 <_dtoa_r+0x6fe>
 800ec88:	4b5a      	ldr	r3, [pc, #360]	@ (800edf4 <_dtoa_r+0x5bc>)
 800ec8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ec8e:	ed93 7b00 	vldr	d7, [r3]
 800ec92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	ed8d 7b00 	vstr	d7, [sp]
 800ec9a:	da03      	bge.n	800eca4 <_dtoa_r+0x46c>
 800ec9c:	9b07      	ldr	r3, [sp, #28]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f340 8101 	ble.w	800eea6 <_dtoa_r+0x66e>
 800eca4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800eca8:	4656      	mov	r6, sl
 800ecaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecae:	4620      	mov	r0, r4
 800ecb0:	4629      	mov	r1, r5
 800ecb2:	f7f1 fdd3 	bl	800085c <__aeabi_ddiv>
 800ecb6:	f7f1 ff57 	bl	8000b68 <__aeabi_d2iz>
 800ecba:	4680      	mov	r8, r0
 800ecbc:	f7f1 fc3a 	bl	8000534 <__aeabi_i2d>
 800ecc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecc4:	f7f1 fca0 	bl	8000608 <__aeabi_dmul>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	460b      	mov	r3, r1
 800eccc:	4620      	mov	r0, r4
 800ecce:	4629      	mov	r1, r5
 800ecd0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ecd4:	f7f1 fae0 	bl	8000298 <__aeabi_dsub>
 800ecd8:	f806 4b01 	strb.w	r4, [r6], #1
 800ecdc:	9d07      	ldr	r5, [sp, #28]
 800ecde:	eba6 040a 	sub.w	r4, r6, sl
 800ece2:	42a5      	cmp	r5, r4
 800ece4:	4602      	mov	r2, r0
 800ece6:	460b      	mov	r3, r1
 800ece8:	f040 8117 	bne.w	800ef1a <_dtoa_r+0x6e2>
 800ecec:	f7f1 fad6 	bl	800029c <__adddf3>
 800ecf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecf4:	4604      	mov	r4, r0
 800ecf6:	460d      	mov	r5, r1
 800ecf8:	f7f1 ff16 	bl	8000b28 <__aeabi_dcmpgt>
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	f040 80f9 	bne.w	800eef4 <_dtoa_r+0x6bc>
 800ed02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed06:	4620      	mov	r0, r4
 800ed08:	4629      	mov	r1, r5
 800ed0a:	f7f1 fee5 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed0e:	b118      	cbz	r0, 800ed18 <_dtoa_r+0x4e0>
 800ed10:	f018 0f01 	tst.w	r8, #1
 800ed14:	f040 80ee 	bne.w	800eef4 <_dtoa_r+0x6bc>
 800ed18:	4649      	mov	r1, r9
 800ed1a:	4658      	mov	r0, fp
 800ed1c:	f000 ff26 	bl	800fb6c <_Bfree>
 800ed20:	2300      	movs	r3, #0
 800ed22:	7033      	strb	r3, [r6, #0]
 800ed24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed26:	3701      	adds	r7, #1
 800ed28:	601f      	str	r7, [r3, #0]
 800ed2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	f000 831d 	beq.w	800f36c <_dtoa_r+0xb34>
 800ed32:	601e      	str	r6, [r3, #0]
 800ed34:	e31a      	b.n	800f36c <_dtoa_r+0xb34>
 800ed36:	07e2      	lsls	r2, r4, #31
 800ed38:	d505      	bpl.n	800ed46 <_dtoa_r+0x50e>
 800ed3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed3e:	f7f1 fc63 	bl	8000608 <__aeabi_dmul>
 800ed42:	3601      	adds	r6, #1
 800ed44:	2301      	movs	r3, #1
 800ed46:	1064      	asrs	r4, r4, #1
 800ed48:	3508      	adds	r5, #8
 800ed4a:	e73f      	b.n	800ebcc <_dtoa_r+0x394>
 800ed4c:	2602      	movs	r6, #2
 800ed4e:	e742      	b.n	800ebd6 <_dtoa_r+0x39e>
 800ed50:	9c07      	ldr	r4, [sp, #28]
 800ed52:	9704      	str	r7, [sp, #16]
 800ed54:	e761      	b.n	800ec1a <_dtoa_r+0x3e2>
 800ed56:	4b27      	ldr	r3, [pc, #156]	@ (800edf4 <_dtoa_r+0x5bc>)
 800ed58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ed5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed62:	4454      	add	r4, sl
 800ed64:	2900      	cmp	r1, #0
 800ed66:	d053      	beq.n	800ee10 <_dtoa_r+0x5d8>
 800ed68:	4928      	ldr	r1, [pc, #160]	@ (800ee0c <_dtoa_r+0x5d4>)
 800ed6a:	2000      	movs	r0, #0
 800ed6c:	f7f1 fd76 	bl	800085c <__aeabi_ddiv>
 800ed70:	4633      	mov	r3, r6
 800ed72:	462a      	mov	r2, r5
 800ed74:	f7f1 fa90 	bl	8000298 <__aeabi_dsub>
 800ed78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ed7c:	4656      	mov	r6, sl
 800ed7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed82:	f7f1 fef1 	bl	8000b68 <__aeabi_d2iz>
 800ed86:	4605      	mov	r5, r0
 800ed88:	f7f1 fbd4 	bl	8000534 <__aeabi_i2d>
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	460b      	mov	r3, r1
 800ed90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed94:	f7f1 fa80 	bl	8000298 <__aeabi_dsub>
 800ed98:	3530      	adds	r5, #48	@ 0x30
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eda2:	f806 5b01 	strb.w	r5, [r6], #1
 800eda6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800edaa:	f7f1 fe9f 	bl	8000aec <__aeabi_dcmplt>
 800edae:	2800      	cmp	r0, #0
 800edb0:	d171      	bne.n	800ee96 <_dtoa_r+0x65e>
 800edb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edb6:	4911      	ldr	r1, [pc, #68]	@ (800edfc <_dtoa_r+0x5c4>)
 800edb8:	2000      	movs	r0, #0
 800edba:	f7f1 fa6d 	bl	8000298 <__aeabi_dsub>
 800edbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800edc2:	f7f1 fe93 	bl	8000aec <__aeabi_dcmplt>
 800edc6:	2800      	cmp	r0, #0
 800edc8:	f040 8095 	bne.w	800eef6 <_dtoa_r+0x6be>
 800edcc:	42a6      	cmp	r6, r4
 800edce:	f43f af50 	beq.w	800ec72 <_dtoa_r+0x43a>
 800edd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800edd6:	4b0a      	ldr	r3, [pc, #40]	@ (800ee00 <_dtoa_r+0x5c8>)
 800edd8:	2200      	movs	r2, #0
 800edda:	f7f1 fc15 	bl	8000608 <__aeabi_dmul>
 800edde:	4b08      	ldr	r3, [pc, #32]	@ (800ee00 <_dtoa_r+0x5c8>)
 800ede0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ede4:	2200      	movs	r2, #0
 800ede6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edea:	f7f1 fc0d 	bl	8000608 <__aeabi_dmul>
 800edee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edf2:	e7c4      	b.n	800ed7e <_dtoa_r+0x546>
 800edf4:	08013168 	.word	0x08013168
 800edf8:	08013140 	.word	0x08013140
 800edfc:	3ff00000 	.word	0x3ff00000
 800ee00:	40240000 	.word	0x40240000
 800ee04:	401c0000 	.word	0x401c0000
 800ee08:	40140000 	.word	0x40140000
 800ee0c:	3fe00000 	.word	0x3fe00000
 800ee10:	4631      	mov	r1, r6
 800ee12:	4628      	mov	r0, r5
 800ee14:	f7f1 fbf8 	bl	8000608 <__aeabi_dmul>
 800ee18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ee1c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ee1e:	4656      	mov	r6, sl
 800ee20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee24:	f7f1 fea0 	bl	8000b68 <__aeabi_d2iz>
 800ee28:	4605      	mov	r5, r0
 800ee2a:	f7f1 fb83 	bl	8000534 <__aeabi_i2d>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	460b      	mov	r3, r1
 800ee32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee36:	f7f1 fa2f 	bl	8000298 <__aeabi_dsub>
 800ee3a:	3530      	adds	r5, #48	@ 0x30
 800ee3c:	f806 5b01 	strb.w	r5, [r6], #1
 800ee40:	4602      	mov	r2, r0
 800ee42:	460b      	mov	r3, r1
 800ee44:	42a6      	cmp	r6, r4
 800ee46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ee4a:	f04f 0200 	mov.w	r2, #0
 800ee4e:	d124      	bne.n	800ee9a <_dtoa_r+0x662>
 800ee50:	4bac      	ldr	r3, [pc, #688]	@ (800f104 <_dtoa_r+0x8cc>)
 800ee52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ee56:	f7f1 fa21 	bl	800029c <__adddf3>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee62:	f7f1 fe61 	bl	8000b28 <__aeabi_dcmpgt>
 800ee66:	2800      	cmp	r0, #0
 800ee68:	d145      	bne.n	800eef6 <_dtoa_r+0x6be>
 800ee6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ee6e:	49a5      	ldr	r1, [pc, #660]	@ (800f104 <_dtoa_r+0x8cc>)
 800ee70:	2000      	movs	r0, #0
 800ee72:	f7f1 fa11 	bl	8000298 <__aeabi_dsub>
 800ee76:	4602      	mov	r2, r0
 800ee78:	460b      	mov	r3, r1
 800ee7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee7e:	f7f1 fe35 	bl	8000aec <__aeabi_dcmplt>
 800ee82:	2800      	cmp	r0, #0
 800ee84:	f43f aef5 	beq.w	800ec72 <_dtoa_r+0x43a>
 800ee88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ee8a:	1e73      	subs	r3, r6, #1
 800ee8c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ee8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ee92:	2b30      	cmp	r3, #48	@ 0x30
 800ee94:	d0f8      	beq.n	800ee88 <_dtoa_r+0x650>
 800ee96:	9f04      	ldr	r7, [sp, #16]
 800ee98:	e73e      	b.n	800ed18 <_dtoa_r+0x4e0>
 800ee9a:	4b9b      	ldr	r3, [pc, #620]	@ (800f108 <_dtoa_r+0x8d0>)
 800ee9c:	f7f1 fbb4 	bl	8000608 <__aeabi_dmul>
 800eea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eea4:	e7bc      	b.n	800ee20 <_dtoa_r+0x5e8>
 800eea6:	d10c      	bne.n	800eec2 <_dtoa_r+0x68a>
 800eea8:	4b98      	ldr	r3, [pc, #608]	@ (800f10c <_dtoa_r+0x8d4>)
 800eeaa:	2200      	movs	r2, #0
 800eeac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eeb0:	f7f1 fbaa 	bl	8000608 <__aeabi_dmul>
 800eeb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eeb8:	f7f1 fe2c 	bl	8000b14 <__aeabi_dcmpge>
 800eebc:	2800      	cmp	r0, #0
 800eebe:	f000 8157 	beq.w	800f170 <_dtoa_r+0x938>
 800eec2:	2400      	movs	r4, #0
 800eec4:	4625      	mov	r5, r4
 800eec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eec8:	43db      	mvns	r3, r3
 800eeca:	9304      	str	r3, [sp, #16]
 800eecc:	4656      	mov	r6, sl
 800eece:	2700      	movs	r7, #0
 800eed0:	4621      	mov	r1, r4
 800eed2:	4658      	mov	r0, fp
 800eed4:	f000 fe4a 	bl	800fb6c <_Bfree>
 800eed8:	2d00      	cmp	r5, #0
 800eeda:	d0dc      	beq.n	800ee96 <_dtoa_r+0x65e>
 800eedc:	b12f      	cbz	r7, 800eeea <_dtoa_r+0x6b2>
 800eede:	42af      	cmp	r7, r5
 800eee0:	d003      	beq.n	800eeea <_dtoa_r+0x6b2>
 800eee2:	4639      	mov	r1, r7
 800eee4:	4658      	mov	r0, fp
 800eee6:	f000 fe41 	bl	800fb6c <_Bfree>
 800eeea:	4629      	mov	r1, r5
 800eeec:	4658      	mov	r0, fp
 800eeee:	f000 fe3d 	bl	800fb6c <_Bfree>
 800eef2:	e7d0      	b.n	800ee96 <_dtoa_r+0x65e>
 800eef4:	9704      	str	r7, [sp, #16]
 800eef6:	4633      	mov	r3, r6
 800eef8:	461e      	mov	r6, r3
 800eefa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eefe:	2a39      	cmp	r2, #57	@ 0x39
 800ef00:	d107      	bne.n	800ef12 <_dtoa_r+0x6da>
 800ef02:	459a      	cmp	sl, r3
 800ef04:	d1f8      	bne.n	800eef8 <_dtoa_r+0x6c0>
 800ef06:	9a04      	ldr	r2, [sp, #16]
 800ef08:	3201      	adds	r2, #1
 800ef0a:	9204      	str	r2, [sp, #16]
 800ef0c:	2230      	movs	r2, #48	@ 0x30
 800ef0e:	f88a 2000 	strb.w	r2, [sl]
 800ef12:	781a      	ldrb	r2, [r3, #0]
 800ef14:	3201      	adds	r2, #1
 800ef16:	701a      	strb	r2, [r3, #0]
 800ef18:	e7bd      	b.n	800ee96 <_dtoa_r+0x65e>
 800ef1a:	4b7b      	ldr	r3, [pc, #492]	@ (800f108 <_dtoa_r+0x8d0>)
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f7f1 fb73 	bl	8000608 <__aeabi_dmul>
 800ef22:	2200      	movs	r2, #0
 800ef24:	2300      	movs	r3, #0
 800ef26:	4604      	mov	r4, r0
 800ef28:	460d      	mov	r5, r1
 800ef2a:	f7f1 fdd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	f43f aebb 	beq.w	800ecaa <_dtoa_r+0x472>
 800ef34:	e6f0      	b.n	800ed18 <_dtoa_r+0x4e0>
 800ef36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ef38:	2a00      	cmp	r2, #0
 800ef3a:	f000 80db 	beq.w	800f0f4 <_dtoa_r+0x8bc>
 800ef3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef40:	2a01      	cmp	r2, #1
 800ef42:	f300 80bf 	bgt.w	800f0c4 <_dtoa_r+0x88c>
 800ef46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ef48:	2a00      	cmp	r2, #0
 800ef4a:	f000 80b7 	beq.w	800f0bc <_dtoa_r+0x884>
 800ef4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ef52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ef54:	4646      	mov	r6, r8
 800ef56:	9a08      	ldr	r2, [sp, #32]
 800ef58:	2101      	movs	r1, #1
 800ef5a:	441a      	add	r2, r3
 800ef5c:	4658      	mov	r0, fp
 800ef5e:	4498      	add	r8, r3
 800ef60:	9208      	str	r2, [sp, #32]
 800ef62:	f000 ff01 	bl	800fd68 <__i2b>
 800ef66:	4605      	mov	r5, r0
 800ef68:	b15e      	cbz	r6, 800ef82 <_dtoa_r+0x74a>
 800ef6a:	9b08      	ldr	r3, [sp, #32]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	dd08      	ble.n	800ef82 <_dtoa_r+0x74a>
 800ef70:	42b3      	cmp	r3, r6
 800ef72:	9a08      	ldr	r2, [sp, #32]
 800ef74:	bfa8      	it	ge
 800ef76:	4633      	movge	r3, r6
 800ef78:	eba8 0803 	sub.w	r8, r8, r3
 800ef7c:	1af6      	subs	r6, r6, r3
 800ef7e:	1ad3      	subs	r3, r2, r3
 800ef80:	9308      	str	r3, [sp, #32]
 800ef82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef84:	b1f3      	cbz	r3, 800efc4 <_dtoa_r+0x78c>
 800ef86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	f000 80b7 	beq.w	800f0fc <_dtoa_r+0x8c4>
 800ef8e:	b18c      	cbz	r4, 800efb4 <_dtoa_r+0x77c>
 800ef90:	4629      	mov	r1, r5
 800ef92:	4622      	mov	r2, r4
 800ef94:	4658      	mov	r0, fp
 800ef96:	f000 ffa7 	bl	800fee8 <__pow5mult>
 800ef9a:	464a      	mov	r2, r9
 800ef9c:	4601      	mov	r1, r0
 800ef9e:	4605      	mov	r5, r0
 800efa0:	4658      	mov	r0, fp
 800efa2:	f000 fef7 	bl	800fd94 <__multiply>
 800efa6:	4649      	mov	r1, r9
 800efa8:	9004      	str	r0, [sp, #16]
 800efaa:	4658      	mov	r0, fp
 800efac:	f000 fdde 	bl	800fb6c <_Bfree>
 800efb0:	9b04      	ldr	r3, [sp, #16]
 800efb2:	4699      	mov	r9, r3
 800efb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efb6:	1b1a      	subs	r2, r3, r4
 800efb8:	d004      	beq.n	800efc4 <_dtoa_r+0x78c>
 800efba:	4649      	mov	r1, r9
 800efbc:	4658      	mov	r0, fp
 800efbe:	f000 ff93 	bl	800fee8 <__pow5mult>
 800efc2:	4681      	mov	r9, r0
 800efc4:	2101      	movs	r1, #1
 800efc6:	4658      	mov	r0, fp
 800efc8:	f000 fece 	bl	800fd68 <__i2b>
 800efcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efce:	4604      	mov	r4, r0
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f000 81cf 	beq.w	800f374 <_dtoa_r+0xb3c>
 800efd6:	461a      	mov	r2, r3
 800efd8:	4601      	mov	r1, r0
 800efda:	4658      	mov	r0, fp
 800efdc:	f000 ff84 	bl	800fee8 <__pow5mult>
 800efe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	4604      	mov	r4, r0
 800efe6:	f300 8095 	bgt.w	800f114 <_dtoa_r+0x8dc>
 800efea:	9b02      	ldr	r3, [sp, #8]
 800efec:	2b00      	cmp	r3, #0
 800efee:	f040 8087 	bne.w	800f100 <_dtoa_r+0x8c8>
 800eff2:	9b03      	ldr	r3, [sp, #12]
 800eff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f040 8089 	bne.w	800f110 <_dtoa_r+0x8d8>
 800effe:	9b03      	ldr	r3, [sp, #12]
 800f000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f004:	0d1b      	lsrs	r3, r3, #20
 800f006:	051b      	lsls	r3, r3, #20
 800f008:	b12b      	cbz	r3, 800f016 <_dtoa_r+0x7de>
 800f00a:	9b08      	ldr	r3, [sp, #32]
 800f00c:	3301      	adds	r3, #1
 800f00e:	9308      	str	r3, [sp, #32]
 800f010:	f108 0801 	add.w	r8, r8, #1
 800f014:	2301      	movs	r3, #1
 800f016:	930a      	str	r3, [sp, #40]	@ 0x28
 800f018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f000 81b0 	beq.w	800f380 <_dtoa_r+0xb48>
 800f020:	6923      	ldr	r3, [r4, #16]
 800f022:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f026:	6918      	ldr	r0, [r3, #16]
 800f028:	f000 fe52 	bl	800fcd0 <__hi0bits>
 800f02c:	f1c0 0020 	rsb	r0, r0, #32
 800f030:	9b08      	ldr	r3, [sp, #32]
 800f032:	4418      	add	r0, r3
 800f034:	f010 001f 	ands.w	r0, r0, #31
 800f038:	d077      	beq.n	800f12a <_dtoa_r+0x8f2>
 800f03a:	f1c0 0320 	rsb	r3, r0, #32
 800f03e:	2b04      	cmp	r3, #4
 800f040:	dd6b      	ble.n	800f11a <_dtoa_r+0x8e2>
 800f042:	9b08      	ldr	r3, [sp, #32]
 800f044:	f1c0 001c 	rsb	r0, r0, #28
 800f048:	4403      	add	r3, r0
 800f04a:	4480      	add	r8, r0
 800f04c:	4406      	add	r6, r0
 800f04e:	9308      	str	r3, [sp, #32]
 800f050:	f1b8 0f00 	cmp.w	r8, #0
 800f054:	dd05      	ble.n	800f062 <_dtoa_r+0x82a>
 800f056:	4649      	mov	r1, r9
 800f058:	4642      	mov	r2, r8
 800f05a:	4658      	mov	r0, fp
 800f05c:	f000 ff9e 	bl	800ff9c <__lshift>
 800f060:	4681      	mov	r9, r0
 800f062:	9b08      	ldr	r3, [sp, #32]
 800f064:	2b00      	cmp	r3, #0
 800f066:	dd05      	ble.n	800f074 <_dtoa_r+0x83c>
 800f068:	4621      	mov	r1, r4
 800f06a:	461a      	mov	r2, r3
 800f06c:	4658      	mov	r0, fp
 800f06e:	f000 ff95 	bl	800ff9c <__lshift>
 800f072:	4604      	mov	r4, r0
 800f074:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f076:	2b00      	cmp	r3, #0
 800f078:	d059      	beq.n	800f12e <_dtoa_r+0x8f6>
 800f07a:	4621      	mov	r1, r4
 800f07c:	4648      	mov	r0, r9
 800f07e:	f000 fff9 	bl	8010074 <__mcmp>
 800f082:	2800      	cmp	r0, #0
 800f084:	da53      	bge.n	800f12e <_dtoa_r+0x8f6>
 800f086:	1e7b      	subs	r3, r7, #1
 800f088:	9304      	str	r3, [sp, #16]
 800f08a:	4649      	mov	r1, r9
 800f08c:	2300      	movs	r3, #0
 800f08e:	220a      	movs	r2, #10
 800f090:	4658      	mov	r0, fp
 800f092:	f000 fd8d 	bl	800fbb0 <__multadd>
 800f096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f098:	4681      	mov	r9, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	f000 8172 	beq.w	800f384 <_dtoa_r+0xb4c>
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	4629      	mov	r1, r5
 800f0a4:	220a      	movs	r2, #10
 800f0a6:	4658      	mov	r0, fp
 800f0a8:	f000 fd82 	bl	800fbb0 <__multadd>
 800f0ac:	9b00      	ldr	r3, [sp, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	4605      	mov	r5, r0
 800f0b2:	dc67      	bgt.n	800f184 <_dtoa_r+0x94c>
 800f0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0b6:	2b02      	cmp	r3, #2
 800f0b8:	dc41      	bgt.n	800f13e <_dtoa_r+0x906>
 800f0ba:	e063      	b.n	800f184 <_dtoa_r+0x94c>
 800f0bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f0be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f0c2:	e746      	b.n	800ef52 <_dtoa_r+0x71a>
 800f0c4:	9b07      	ldr	r3, [sp, #28]
 800f0c6:	1e5c      	subs	r4, r3, #1
 800f0c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0ca:	42a3      	cmp	r3, r4
 800f0cc:	bfbf      	itttt	lt
 800f0ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f0d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f0d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f0d4:	1ae3      	sublt	r3, r4, r3
 800f0d6:	bfb4      	ite	lt
 800f0d8:	18d2      	addlt	r2, r2, r3
 800f0da:	1b1c      	subge	r4, r3, r4
 800f0dc:	9b07      	ldr	r3, [sp, #28]
 800f0de:	bfbc      	itt	lt
 800f0e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f0e2:	2400      	movlt	r4, #0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	bfb5      	itete	lt
 800f0e8:	eba8 0603 	sublt.w	r6, r8, r3
 800f0ec:	9b07      	ldrge	r3, [sp, #28]
 800f0ee:	2300      	movlt	r3, #0
 800f0f0:	4646      	movge	r6, r8
 800f0f2:	e730      	b.n	800ef56 <_dtoa_r+0x71e>
 800f0f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f0f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f0f8:	4646      	mov	r6, r8
 800f0fa:	e735      	b.n	800ef68 <_dtoa_r+0x730>
 800f0fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f0fe:	e75c      	b.n	800efba <_dtoa_r+0x782>
 800f100:	2300      	movs	r3, #0
 800f102:	e788      	b.n	800f016 <_dtoa_r+0x7de>
 800f104:	3fe00000 	.word	0x3fe00000
 800f108:	40240000 	.word	0x40240000
 800f10c:	40140000 	.word	0x40140000
 800f110:	9b02      	ldr	r3, [sp, #8]
 800f112:	e780      	b.n	800f016 <_dtoa_r+0x7de>
 800f114:	2300      	movs	r3, #0
 800f116:	930a      	str	r3, [sp, #40]	@ 0x28
 800f118:	e782      	b.n	800f020 <_dtoa_r+0x7e8>
 800f11a:	d099      	beq.n	800f050 <_dtoa_r+0x818>
 800f11c:	9a08      	ldr	r2, [sp, #32]
 800f11e:	331c      	adds	r3, #28
 800f120:	441a      	add	r2, r3
 800f122:	4498      	add	r8, r3
 800f124:	441e      	add	r6, r3
 800f126:	9208      	str	r2, [sp, #32]
 800f128:	e792      	b.n	800f050 <_dtoa_r+0x818>
 800f12a:	4603      	mov	r3, r0
 800f12c:	e7f6      	b.n	800f11c <_dtoa_r+0x8e4>
 800f12e:	9b07      	ldr	r3, [sp, #28]
 800f130:	9704      	str	r7, [sp, #16]
 800f132:	2b00      	cmp	r3, #0
 800f134:	dc20      	bgt.n	800f178 <_dtoa_r+0x940>
 800f136:	9300      	str	r3, [sp, #0]
 800f138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f13a:	2b02      	cmp	r3, #2
 800f13c:	dd1e      	ble.n	800f17c <_dtoa_r+0x944>
 800f13e:	9b00      	ldr	r3, [sp, #0]
 800f140:	2b00      	cmp	r3, #0
 800f142:	f47f aec0 	bne.w	800eec6 <_dtoa_r+0x68e>
 800f146:	4621      	mov	r1, r4
 800f148:	2205      	movs	r2, #5
 800f14a:	4658      	mov	r0, fp
 800f14c:	f000 fd30 	bl	800fbb0 <__multadd>
 800f150:	4601      	mov	r1, r0
 800f152:	4604      	mov	r4, r0
 800f154:	4648      	mov	r0, r9
 800f156:	f000 ff8d 	bl	8010074 <__mcmp>
 800f15a:	2800      	cmp	r0, #0
 800f15c:	f77f aeb3 	ble.w	800eec6 <_dtoa_r+0x68e>
 800f160:	4656      	mov	r6, sl
 800f162:	2331      	movs	r3, #49	@ 0x31
 800f164:	f806 3b01 	strb.w	r3, [r6], #1
 800f168:	9b04      	ldr	r3, [sp, #16]
 800f16a:	3301      	adds	r3, #1
 800f16c:	9304      	str	r3, [sp, #16]
 800f16e:	e6ae      	b.n	800eece <_dtoa_r+0x696>
 800f170:	9c07      	ldr	r4, [sp, #28]
 800f172:	9704      	str	r7, [sp, #16]
 800f174:	4625      	mov	r5, r4
 800f176:	e7f3      	b.n	800f160 <_dtoa_r+0x928>
 800f178:	9b07      	ldr	r3, [sp, #28]
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f17e:	2b00      	cmp	r3, #0
 800f180:	f000 8104 	beq.w	800f38c <_dtoa_r+0xb54>
 800f184:	2e00      	cmp	r6, #0
 800f186:	dd05      	ble.n	800f194 <_dtoa_r+0x95c>
 800f188:	4629      	mov	r1, r5
 800f18a:	4632      	mov	r2, r6
 800f18c:	4658      	mov	r0, fp
 800f18e:	f000 ff05 	bl	800ff9c <__lshift>
 800f192:	4605      	mov	r5, r0
 800f194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f196:	2b00      	cmp	r3, #0
 800f198:	d05a      	beq.n	800f250 <_dtoa_r+0xa18>
 800f19a:	6869      	ldr	r1, [r5, #4]
 800f19c:	4658      	mov	r0, fp
 800f19e:	f000 fca5 	bl	800faec <_Balloc>
 800f1a2:	4606      	mov	r6, r0
 800f1a4:	b928      	cbnz	r0, 800f1b2 <_dtoa_r+0x97a>
 800f1a6:	4b84      	ldr	r3, [pc, #528]	@ (800f3b8 <_dtoa_r+0xb80>)
 800f1a8:	4602      	mov	r2, r0
 800f1aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f1ae:	f7ff bb5a 	b.w	800e866 <_dtoa_r+0x2e>
 800f1b2:	692a      	ldr	r2, [r5, #16]
 800f1b4:	3202      	adds	r2, #2
 800f1b6:	0092      	lsls	r2, r2, #2
 800f1b8:	f105 010c 	add.w	r1, r5, #12
 800f1bc:	300c      	adds	r0, #12
 800f1be:	f7ff fa78 	bl	800e6b2 <memcpy>
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	4631      	mov	r1, r6
 800f1c6:	4658      	mov	r0, fp
 800f1c8:	f000 fee8 	bl	800ff9c <__lshift>
 800f1cc:	f10a 0301 	add.w	r3, sl, #1
 800f1d0:	9307      	str	r3, [sp, #28]
 800f1d2:	9b00      	ldr	r3, [sp, #0]
 800f1d4:	4453      	add	r3, sl
 800f1d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f1d8:	9b02      	ldr	r3, [sp, #8]
 800f1da:	f003 0301 	and.w	r3, r3, #1
 800f1de:	462f      	mov	r7, r5
 800f1e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1e2:	4605      	mov	r5, r0
 800f1e4:	9b07      	ldr	r3, [sp, #28]
 800f1e6:	4621      	mov	r1, r4
 800f1e8:	3b01      	subs	r3, #1
 800f1ea:	4648      	mov	r0, r9
 800f1ec:	9300      	str	r3, [sp, #0]
 800f1ee:	f7ff fa9b 	bl	800e728 <quorem>
 800f1f2:	4639      	mov	r1, r7
 800f1f4:	9002      	str	r0, [sp, #8]
 800f1f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f1fa:	4648      	mov	r0, r9
 800f1fc:	f000 ff3a 	bl	8010074 <__mcmp>
 800f200:	462a      	mov	r2, r5
 800f202:	9008      	str	r0, [sp, #32]
 800f204:	4621      	mov	r1, r4
 800f206:	4658      	mov	r0, fp
 800f208:	f000 ff50 	bl	80100ac <__mdiff>
 800f20c:	68c2      	ldr	r2, [r0, #12]
 800f20e:	4606      	mov	r6, r0
 800f210:	bb02      	cbnz	r2, 800f254 <_dtoa_r+0xa1c>
 800f212:	4601      	mov	r1, r0
 800f214:	4648      	mov	r0, r9
 800f216:	f000 ff2d 	bl	8010074 <__mcmp>
 800f21a:	4602      	mov	r2, r0
 800f21c:	4631      	mov	r1, r6
 800f21e:	4658      	mov	r0, fp
 800f220:	920e      	str	r2, [sp, #56]	@ 0x38
 800f222:	f000 fca3 	bl	800fb6c <_Bfree>
 800f226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f228:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f22a:	9e07      	ldr	r6, [sp, #28]
 800f22c:	ea43 0102 	orr.w	r1, r3, r2
 800f230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f232:	4319      	orrs	r1, r3
 800f234:	d110      	bne.n	800f258 <_dtoa_r+0xa20>
 800f236:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f23a:	d029      	beq.n	800f290 <_dtoa_r+0xa58>
 800f23c:	9b08      	ldr	r3, [sp, #32]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	dd02      	ble.n	800f248 <_dtoa_r+0xa10>
 800f242:	9b02      	ldr	r3, [sp, #8]
 800f244:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f248:	9b00      	ldr	r3, [sp, #0]
 800f24a:	f883 8000 	strb.w	r8, [r3]
 800f24e:	e63f      	b.n	800eed0 <_dtoa_r+0x698>
 800f250:	4628      	mov	r0, r5
 800f252:	e7bb      	b.n	800f1cc <_dtoa_r+0x994>
 800f254:	2201      	movs	r2, #1
 800f256:	e7e1      	b.n	800f21c <_dtoa_r+0x9e4>
 800f258:	9b08      	ldr	r3, [sp, #32]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	db04      	blt.n	800f268 <_dtoa_r+0xa30>
 800f25e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f260:	430b      	orrs	r3, r1
 800f262:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f264:	430b      	orrs	r3, r1
 800f266:	d120      	bne.n	800f2aa <_dtoa_r+0xa72>
 800f268:	2a00      	cmp	r2, #0
 800f26a:	dded      	ble.n	800f248 <_dtoa_r+0xa10>
 800f26c:	4649      	mov	r1, r9
 800f26e:	2201      	movs	r2, #1
 800f270:	4658      	mov	r0, fp
 800f272:	f000 fe93 	bl	800ff9c <__lshift>
 800f276:	4621      	mov	r1, r4
 800f278:	4681      	mov	r9, r0
 800f27a:	f000 fefb 	bl	8010074 <__mcmp>
 800f27e:	2800      	cmp	r0, #0
 800f280:	dc03      	bgt.n	800f28a <_dtoa_r+0xa52>
 800f282:	d1e1      	bne.n	800f248 <_dtoa_r+0xa10>
 800f284:	f018 0f01 	tst.w	r8, #1
 800f288:	d0de      	beq.n	800f248 <_dtoa_r+0xa10>
 800f28a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f28e:	d1d8      	bne.n	800f242 <_dtoa_r+0xa0a>
 800f290:	9a00      	ldr	r2, [sp, #0]
 800f292:	2339      	movs	r3, #57	@ 0x39
 800f294:	7013      	strb	r3, [r2, #0]
 800f296:	4633      	mov	r3, r6
 800f298:	461e      	mov	r6, r3
 800f29a:	3b01      	subs	r3, #1
 800f29c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f2a0:	2a39      	cmp	r2, #57	@ 0x39
 800f2a2:	d052      	beq.n	800f34a <_dtoa_r+0xb12>
 800f2a4:	3201      	adds	r2, #1
 800f2a6:	701a      	strb	r2, [r3, #0]
 800f2a8:	e612      	b.n	800eed0 <_dtoa_r+0x698>
 800f2aa:	2a00      	cmp	r2, #0
 800f2ac:	dd07      	ble.n	800f2be <_dtoa_r+0xa86>
 800f2ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f2b2:	d0ed      	beq.n	800f290 <_dtoa_r+0xa58>
 800f2b4:	9a00      	ldr	r2, [sp, #0]
 800f2b6:	f108 0301 	add.w	r3, r8, #1
 800f2ba:	7013      	strb	r3, [r2, #0]
 800f2bc:	e608      	b.n	800eed0 <_dtoa_r+0x698>
 800f2be:	9b07      	ldr	r3, [sp, #28]
 800f2c0:	9a07      	ldr	r2, [sp, #28]
 800f2c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f2c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d028      	beq.n	800f31e <_dtoa_r+0xae6>
 800f2cc:	4649      	mov	r1, r9
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	220a      	movs	r2, #10
 800f2d2:	4658      	mov	r0, fp
 800f2d4:	f000 fc6c 	bl	800fbb0 <__multadd>
 800f2d8:	42af      	cmp	r7, r5
 800f2da:	4681      	mov	r9, r0
 800f2dc:	f04f 0300 	mov.w	r3, #0
 800f2e0:	f04f 020a 	mov.w	r2, #10
 800f2e4:	4639      	mov	r1, r7
 800f2e6:	4658      	mov	r0, fp
 800f2e8:	d107      	bne.n	800f2fa <_dtoa_r+0xac2>
 800f2ea:	f000 fc61 	bl	800fbb0 <__multadd>
 800f2ee:	4607      	mov	r7, r0
 800f2f0:	4605      	mov	r5, r0
 800f2f2:	9b07      	ldr	r3, [sp, #28]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	9307      	str	r3, [sp, #28]
 800f2f8:	e774      	b.n	800f1e4 <_dtoa_r+0x9ac>
 800f2fa:	f000 fc59 	bl	800fbb0 <__multadd>
 800f2fe:	4629      	mov	r1, r5
 800f300:	4607      	mov	r7, r0
 800f302:	2300      	movs	r3, #0
 800f304:	220a      	movs	r2, #10
 800f306:	4658      	mov	r0, fp
 800f308:	f000 fc52 	bl	800fbb0 <__multadd>
 800f30c:	4605      	mov	r5, r0
 800f30e:	e7f0      	b.n	800f2f2 <_dtoa_r+0xaba>
 800f310:	9b00      	ldr	r3, [sp, #0]
 800f312:	2b00      	cmp	r3, #0
 800f314:	bfcc      	ite	gt
 800f316:	461e      	movgt	r6, r3
 800f318:	2601      	movle	r6, #1
 800f31a:	4456      	add	r6, sl
 800f31c:	2700      	movs	r7, #0
 800f31e:	4649      	mov	r1, r9
 800f320:	2201      	movs	r2, #1
 800f322:	4658      	mov	r0, fp
 800f324:	f000 fe3a 	bl	800ff9c <__lshift>
 800f328:	4621      	mov	r1, r4
 800f32a:	4681      	mov	r9, r0
 800f32c:	f000 fea2 	bl	8010074 <__mcmp>
 800f330:	2800      	cmp	r0, #0
 800f332:	dcb0      	bgt.n	800f296 <_dtoa_r+0xa5e>
 800f334:	d102      	bne.n	800f33c <_dtoa_r+0xb04>
 800f336:	f018 0f01 	tst.w	r8, #1
 800f33a:	d1ac      	bne.n	800f296 <_dtoa_r+0xa5e>
 800f33c:	4633      	mov	r3, r6
 800f33e:	461e      	mov	r6, r3
 800f340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f344:	2a30      	cmp	r2, #48	@ 0x30
 800f346:	d0fa      	beq.n	800f33e <_dtoa_r+0xb06>
 800f348:	e5c2      	b.n	800eed0 <_dtoa_r+0x698>
 800f34a:	459a      	cmp	sl, r3
 800f34c:	d1a4      	bne.n	800f298 <_dtoa_r+0xa60>
 800f34e:	9b04      	ldr	r3, [sp, #16]
 800f350:	3301      	adds	r3, #1
 800f352:	9304      	str	r3, [sp, #16]
 800f354:	2331      	movs	r3, #49	@ 0x31
 800f356:	f88a 3000 	strb.w	r3, [sl]
 800f35a:	e5b9      	b.n	800eed0 <_dtoa_r+0x698>
 800f35c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f35e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f3bc <_dtoa_r+0xb84>
 800f362:	b11b      	cbz	r3, 800f36c <_dtoa_r+0xb34>
 800f364:	f10a 0308 	add.w	r3, sl, #8
 800f368:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f36a:	6013      	str	r3, [r2, #0]
 800f36c:	4650      	mov	r0, sl
 800f36e:	b019      	add	sp, #100	@ 0x64
 800f370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f376:	2b01      	cmp	r3, #1
 800f378:	f77f ae37 	ble.w	800efea <_dtoa_r+0x7b2>
 800f37c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f37e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f380:	2001      	movs	r0, #1
 800f382:	e655      	b.n	800f030 <_dtoa_r+0x7f8>
 800f384:	9b00      	ldr	r3, [sp, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	f77f aed6 	ble.w	800f138 <_dtoa_r+0x900>
 800f38c:	4656      	mov	r6, sl
 800f38e:	4621      	mov	r1, r4
 800f390:	4648      	mov	r0, r9
 800f392:	f7ff f9c9 	bl	800e728 <quorem>
 800f396:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f39a:	f806 8b01 	strb.w	r8, [r6], #1
 800f39e:	9b00      	ldr	r3, [sp, #0]
 800f3a0:	eba6 020a 	sub.w	r2, r6, sl
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	ddb3      	ble.n	800f310 <_dtoa_r+0xad8>
 800f3a8:	4649      	mov	r1, r9
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	220a      	movs	r2, #10
 800f3ae:	4658      	mov	r0, fp
 800f3b0:	f000 fbfe 	bl	800fbb0 <__multadd>
 800f3b4:	4681      	mov	r9, r0
 800f3b6:	e7ea      	b.n	800f38e <_dtoa_r+0xb56>
 800f3b8:	08013067 	.word	0x08013067
 800f3bc:	08013002 	.word	0x08013002

0800f3c0 <_free_r>:
 800f3c0:	b538      	push	{r3, r4, r5, lr}
 800f3c2:	4605      	mov	r5, r0
 800f3c4:	2900      	cmp	r1, #0
 800f3c6:	d041      	beq.n	800f44c <_free_r+0x8c>
 800f3c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3cc:	1f0c      	subs	r4, r1, #4
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	bfb8      	it	lt
 800f3d2:	18e4      	addlt	r4, r4, r3
 800f3d4:	f7fd fb92 	bl	800cafc <__malloc_lock>
 800f3d8:	4a1d      	ldr	r2, [pc, #116]	@ (800f450 <_free_r+0x90>)
 800f3da:	6813      	ldr	r3, [r2, #0]
 800f3dc:	b933      	cbnz	r3, 800f3ec <_free_r+0x2c>
 800f3de:	6063      	str	r3, [r4, #4]
 800f3e0:	6014      	str	r4, [r2, #0]
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3e8:	f7fd bb8e 	b.w	800cb08 <__malloc_unlock>
 800f3ec:	42a3      	cmp	r3, r4
 800f3ee:	d908      	bls.n	800f402 <_free_r+0x42>
 800f3f0:	6820      	ldr	r0, [r4, #0]
 800f3f2:	1821      	adds	r1, r4, r0
 800f3f4:	428b      	cmp	r3, r1
 800f3f6:	bf01      	itttt	eq
 800f3f8:	6819      	ldreq	r1, [r3, #0]
 800f3fa:	685b      	ldreq	r3, [r3, #4]
 800f3fc:	1809      	addeq	r1, r1, r0
 800f3fe:	6021      	streq	r1, [r4, #0]
 800f400:	e7ed      	b.n	800f3de <_free_r+0x1e>
 800f402:	461a      	mov	r2, r3
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	b10b      	cbz	r3, 800f40c <_free_r+0x4c>
 800f408:	42a3      	cmp	r3, r4
 800f40a:	d9fa      	bls.n	800f402 <_free_r+0x42>
 800f40c:	6811      	ldr	r1, [r2, #0]
 800f40e:	1850      	adds	r0, r2, r1
 800f410:	42a0      	cmp	r0, r4
 800f412:	d10b      	bne.n	800f42c <_free_r+0x6c>
 800f414:	6820      	ldr	r0, [r4, #0]
 800f416:	4401      	add	r1, r0
 800f418:	1850      	adds	r0, r2, r1
 800f41a:	4283      	cmp	r3, r0
 800f41c:	6011      	str	r1, [r2, #0]
 800f41e:	d1e0      	bne.n	800f3e2 <_free_r+0x22>
 800f420:	6818      	ldr	r0, [r3, #0]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	6053      	str	r3, [r2, #4]
 800f426:	4408      	add	r0, r1
 800f428:	6010      	str	r0, [r2, #0]
 800f42a:	e7da      	b.n	800f3e2 <_free_r+0x22>
 800f42c:	d902      	bls.n	800f434 <_free_r+0x74>
 800f42e:	230c      	movs	r3, #12
 800f430:	602b      	str	r3, [r5, #0]
 800f432:	e7d6      	b.n	800f3e2 <_free_r+0x22>
 800f434:	6820      	ldr	r0, [r4, #0]
 800f436:	1821      	adds	r1, r4, r0
 800f438:	428b      	cmp	r3, r1
 800f43a:	bf04      	itt	eq
 800f43c:	6819      	ldreq	r1, [r3, #0]
 800f43e:	685b      	ldreq	r3, [r3, #4]
 800f440:	6063      	str	r3, [r4, #4]
 800f442:	bf04      	itt	eq
 800f444:	1809      	addeq	r1, r1, r0
 800f446:	6021      	streq	r1, [r4, #0]
 800f448:	6054      	str	r4, [r2, #4]
 800f44a:	e7ca      	b.n	800f3e2 <_free_r+0x22>
 800f44c:	bd38      	pop	{r3, r4, r5, pc}
 800f44e:	bf00      	nop
 800f450:	20001cf4 	.word	0x20001cf4

0800f454 <rshift>:
 800f454:	6903      	ldr	r3, [r0, #16]
 800f456:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f45a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f45e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f462:	f100 0414 	add.w	r4, r0, #20
 800f466:	dd45      	ble.n	800f4f4 <rshift+0xa0>
 800f468:	f011 011f 	ands.w	r1, r1, #31
 800f46c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f470:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f474:	d10c      	bne.n	800f490 <rshift+0x3c>
 800f476:	f100 0710 	add.w	r7, r0, #16
 800f47a:	4629      	mov	r1, r5
 800f47c:	42b1      	cmp	r1, r6
 800f47e:	d334      	bcc.n	800f4ea <rshift+0x96>
 800f480:	1a9b      	subs	r3, r3, r2
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	1eea      	subs	r2, r5, #3
 800f486:	4296      	cmp	r6, r2
 800f488:	bf38      	it	cc
 800f48a:	2300      	movcc	r3, #0
 800f48c:	4423      	add	r3, r4
 800f48e:	e015      	b.n	800f4bc <rshift+0x68>
 800f490:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f494:	f1c1 0820 	rsb	r8, r1, #32
 800f498:	40cf      	lsrs	r7, r1
 800f49a:	f105 0e04 	add.w	lr, r5, #4
 800f49e:	46a1      	mov	r9, r4
 800f4a0:	4576      	cmp	r6, lr
 800f4a2:	46f4      	mov	ip, lr
 800f4a4:	d815      	bhi.n	800f4d2 <rshift+0x7e>
 800f4a6:	1a9a      	subs	r2, r3, r2
 800f4a8:	0092      	lsls	r2, r2, #2
 800f4aa:	3a04      	subs	r2, #4
 800f4ac:	3501      	adds	r5, #1
 800f4ae:	42ae      	cmp	r6, r5
 800f4b0:	bf38      	it	cc
 800f4b2:	2200      	movcc	r2, #0
 800f4b4:	18a3      	adds	r3, r4, r2
 800f4b6:	50a7      	str	r7, [r4, r2]
 800f4b8:	b107      	cbz	r7, 800f4bc <rshift+0x68>
 800f4ba:	3304      	adds	r3, #4
 800f4bc:	1b1a      	subs	r2, r3, r4
 800f4be:	42a3      	cmp	r3, r4
 800f4c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f4c4:	bf08      	it	eq
 800f4c6:	2300      	moveq	r3, #0
 800f4c8:	6102      	str	r2, [r0, #16]
 800f4ca:	bf08      	it	eq
 800f4cc:	6143      	streq	r3, [r0, #20]
 800f4ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4d2:	f8dc c000 	ldr.w	ip, [ip]
 800f4d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800f4da:	ea4c 0707 	orr.w	r7, ip, r7
 800f4de:	f849 7b04 	str.w	r7, [r9], #4
 800f4e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f4e6:	40cf      	lsrs	r7, r1
 800f4e8:	e7da      	b.n	800f4a0 <rshift+0x4c>
 800f4ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800f4ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800f4f2:	e7c3      	b.n	800f47c <rshift+0x28>
 800f4f4:	4623      	mov	r3, r4
 800f4f6:	e7e1      	b.n	800f4bc <rshift+0x68>

0800f4f8 <__hexdig_fun>:
 800f4f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f4fc:	2b09      	cmp	r3, #9
 800f4fe:	d802      	bhi.n	800f506 <__hexdig_fun+0xe>
 800f500:	3820      	subs	r0, #32
 800f502:	b2c0      	uxtb	r0, r0
 800f504:	4770      	bx	lr
 800f506:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f50a:	2b05      	cmp	r3, #5
 800f50c:	d801      	bhi.n	800f512 <__hexdig_fun+0x1a>
 800f50e:	3847      	subs	r0, #71	@ 0x47
 800f510:	e7f7      	b.n	800f502 <__hexdig_fun+0xa>
 800f512:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f516:	2b05      	cmp	r3, #5
 800f518:	d801      	bhi.n	800f51e <__hexdig_fun+0x26>
 800f51a:	3827      	subs	r0, #39	@ 0x27
 800f51c:	e7f1      	b.n	800f502 <__hexdig_fun+0xa>
 800f51e:	2000      	movs	r0, #0
 800f520:	4770      	bx	lr
	...

0800f524 <__gethex>:
 800f524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f528:	b085      	sub	sp, #20
 800f52a:	468a      	mov	sl, r1
 800f52c:	9302      	str	r3, [sp, #8]
 800f52e:	680b      	ldr	r3, [r1, #0]
 800f530:	9001      	str	r0, [sp, #4]
 800f532:	4690      	mov	r8, r2
 800f534:	1c9c      	adds	r4, r3, #2
 800f536:	46a1      	mov	r9, r4
 800f538:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f53c:	2830      	cmp	r0, #48	@ 0x30
 800f53e:	d0fa      	beq.n	800f536 <__gethex+0x12>
 800f540:	eba9 0303 	sub.w	r3, r9, r3
 800f544:	f1a3 0b02 	sub.w	fp, r3, #2
 800f548:	f7ff ffd6 	bl	800f4f8 <__hexdig_fun>
 800f54c:	4605      	mov	r5, r0
 800f54e:	2800      	cmp	r0, #0
 800f550:	d168      	bne.n	800f624 <__gethex+0x100>
 800f552:	49a0      	ldr	r1, [pc, #640]	@ (800f7d4 <__gethex+0x2b0>)
 800f554:	2201      	movs	r2, #1
 800f556:	4648      	mov	r0, r9
 800f558:	f7fe ff8c 	bl	800e474 <strncmp>
 800f55c:	4607      	mov	r7, r0
 800f55e:	2800      	cmp	r0, #0
 800f560:	d167      	bne.n	800f632 <__gethex+0x10e>
 800f562:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f566:	4626      	mov	r6, r4
 800f568:	f7ff ffc6 	bl	800f4f8 <__hexdig_fun>
 800f56c:	2800      	cmp	r0, #0
 800f56e:	d062      	beq.n	800f636 <__gethex+0x112>
 800f570:	4623      	mov	r3, r4
 800f572:	7818      	ldrb	r0, [r3, #0]
 800f574:	2830      	cmp	r0, #48	@ 0x30
 800f576:	4699      	mov	r9, r3
 800f578:	f103 0301 	add.w	r3, r3, #1
 800f57c:	d0f9      	beq.n	800f572 <__gethex+0x4e>
 800f57e:	f7ff ffbb 	bl	800f4f8 <__hexdig_fun>
 800f582:	fab0 f580 	clz	r5, r0
 800f586:	096d      	lsrs	r5, r5, #5
 800f588:	f04f 0b01 	mov.w	fp, #1
 800f58c:	464a      	mov	r2, r9
 800f58e:	4616      	mov	r6, r2
 800f590:	3201      	adds	r2, #1
 800f592:	7830      	ldrb	r0, [r6, #0]
 800f594:	f7ff ffb0 	bl	800f4f8 <__hexdig_fun>
 800f598:	2800      	cmp	r0, #0
 800f59a:	d1f8      	bne.n	800f58e <__gethex+0x6a>
 800f59c:	498d      	ldr	r1, [pc, #564]	@ (800f7d4 <__gethex+0x2b0>)
 800f59e:	2201      	movs	r2, #1
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	f7fe ff67 	bl	800e474 <strncmp>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	d13f      	bne.n	800f62a <__gethex+0x106>
 800f5aa:	b944      	cbnz	r4, 800f5be <__gethex+0x9a>
 800f5ac:	1c74      	adds	r4, r6, #1
 800f5ae:	4622      	mov	r2, r4
 800f5b0:	4616      	mov	r6, r2
 800f5b2:	3201      	adds	r2, #1
 800f5b4:	7830      	ldrb	r0, [r6, #0]
 800f5b6:	f7ff ff9f 	bl	800f4f8 <__hexdig_fun>
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	d1f8      	bne.n	800f5b0 <__gethex+0x8c>
 800f5be:	1ba4      	subs	r4, r4, r6
 800f5c0:	00a7      	lsls	r7, r4, #2
 800f5c2:	7833      	ldrb	r3, [r6, #0]
 800f5c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f5c8:	2b50      	cmp	r3, #80	@ 0x50
 800f5ca:	d13e      	bne.n	800f64a <__gethex+0x126>
 800f5cc:	7873      	ldrb	r3, [r6, #1]
 800f5ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800f5d0:	d033      	beq.n	800f63a <__gethex+0x116>
 800f5d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800f5d4:	d034      	beq.n	800f640 <__gethex+0x11c>
 800f5d6:	1c71      	adds	r1, r6, #1
 800f5d8:	2400      	movs	r4, #0
 800f5da:	7808      	ldrb	r0, [r1, #0]
 800f5dc:	f7ff ff8c 	bl	800f4f8 <__hexdig_fun>
 800f5e0:	1e43      	subs	r3, r0, #1
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	2b18      	cmp	r3, #24
 800f5e6:	d830      	bhi.n	800f64a <__gethex+0x126>
 800f5e8:	f1a0 0210 	sub.w	r2, r0, #16
 800f5ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f5f0:	f7ff ff82 	bl	800f4f8 <__hexdig_fun>
 800f5f4:	f100 3cff 	add.w	ip, r0, #4294967295
 800f5f8:	fa5f fc8c 	uxtb.w	ip, ip
 800f5fc:	f1bc 0f18 	cmp.w	ip, #24
 800f600:	f04f 030a 	mov.w	r3, #10
 800f604:	d91e      	bls.n	800f644 <__gethex+0x120>
 800f606:	b104      	cbz	r4, 800f60a <__gethex+0xe6>
 800f608:	4252      	negs	r2, r2
 800f60a:	4417      	add	r7, r2
 800f60c:	f8ca 1000 	str.w	r1, [sl]
 800f610:	b1ed      	cbz	r5, 800f64e <__gethex+0x12a>
 800f612:	f1bb 0f00 	cmp.w	fp, #0
 800f616:	bf0c      	ite	eq
 800f618:	2506      	moveq	r5, #6
 800f61a:	2500      	movne	r5, #0
 800f61c:	4628      	mov	r0, r5
 800f61e:	b005      	add	sp, #20
 800f620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f624:	2500      	movs	r5, #0
 800f626:	462c      	mov	r4, r5
 800f628:	e7b0      	b.n	800f58c <__gethex+0x68>
 800f62a:	2c00      	cmp	r4, #0
 800f62c:	d1c7      	bne.n	800f5be <__gethex+0x9a>
 800f62e:	4627      	mov	r7, r4
 800f630:	e7c7      	b.n	800f5c2 <__gethex+0x9e>
 800f632:	464e      	mov	r6, r9
 800f634:	462f      	mov	r7, r5
 800f636:	2501      	movs	r5, #1
 800f638:	e7c3      	b.n	800f5c2 <__gethex+0x9e>
 800f63a:	2400      	movs	r4, #0
 800f63c:	1cb1      	adds	r1, r6, #2
 800f63e:	e7cc      	b.n	800f5da <__gethex+0xb6>
 800f640:	2401      	movs	r4, #1
 800f642:	e7fb      	b.n	800f63c <__gethex+0x118>
 800f644:	fb03 0002 	mla	r0, r3, r2, r0
 800f648:	e7ce      	b.n	800f5e8 <__gethex+0xc4>
 800f64a:	4631      	mov	r1, r6
 800f64c:	e7de      	b.n	800f60c <__gethex+0xe8>
 800f64e:	eba6 0309 	sub.w	r3, r6, r9
 800f652:	3b01      	subs	r3, #1
 800f654:	4629      	mov	r1, r5
 800f656:	2b07      	cmp	r3, #7
 800f658:	dc0a      	bgt.n	800f670 <__gethex+0x14c>
 800f65a:	9801      	ldr	r0, [sp, #4]
 800f65c:	f000 fa46 	bl	800faec <_Balloc>
 800f660:	4604      	mov	r4, r0
 800f662:	b940      	cbnz	r0, 800f676 <__gethex+0x152>
 800f664:	4b5c      	ldr	r3, [pc, #368]	@ (800f7d8 <__gethex+0x2b4>)
 800f666:	4602      	mov	r2, r0
 800f668:	21e4      	movs	r1, #228	@ 0xe4
 800f66a:	485c      	ldr	r0, [pc, #368]	@ (800f7dc <__gethex+0x2b8>)
 800f66c:	f7ff f83e 	bl	800e6ec <__assert_func>
 800f670:	3101      	adds	r1, #1
 800f672:	105b      	asrs	r3, r3, #1
 800f674:	e7ef      	b.n	800f656 <__gethex+0x132>
 800f676:	f100 0a14 	add.w	sl, r0, #20
 800f67a:	2300      	movs	r3, #0
 800f67c:	4655      	mov	r5, sl
 800f67e:	469b      	mov	fp, r3
 800f680:	45b1      	cmp	r9, r6
 800f682:	d337      	bcc.n	800f6f4 <__gethex+0x1d0>
 800f684:	f845 bb04 	str.w	fp, [r5], #4
 800f688:	eba5 050a 	sub.w	r5, r5, sl
 800f68c:	10ad      	asrs	r5, r5, #2
 800f68e:	6125      	str	r5, [r4, #16]
 800f690:	4658      	mov	r0, fp
 800f692:	f000 fb1d 	bl	800fcd0 <__hi0bits>
 800f696:	016d      	lsls	r5, r5, #5
 800f698:	f8d8 6000 	ldr.w	r6, [r8]
 800f69c:	1a2d      	subs	r5, r5, r0
 800f69e:	42b5      	cmp	r5, r6
 800f6a0:	dd54      	ble.n	800f74c <__gethex+0x228>
 800f6a2:	1bad      	subs	r5, r5, r6
 800f6a4:	4629      	mov	r1, r5
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	f000 feb1 	bl	801040e <__any_on>
 800f6ac:	4681      	mov	r9, r0
 800f6ae:	b178      	cbz	r0, 800f6d0 <__gethex+0x1ac>
 800f6b0:	1e6b      	subs	r3, r5, #1
 800f6b2:	1159      	asrs	r1, r3, #5
 800f6b4:	f003 021f 	and.w	r2, r3, #31
 800f6b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f6bc:	f04f 0901 	mov.w	r9, #1
 800f6c0:	fa09 f202 	lsl.w	r2, r9, r2
 800f6c4:	420a      	tst	r2, r1
 800f6c6:	d003      	beq.n	800f6d0 <__gethex+0x1ac>
 800f6c8:	454b      	cmp	r3, r9
 800f6ca:	dc36      	bgt.n	800f73a <__gethex+0x216>
 800f6cc:	f04f 0902 	mov.w	r9, #2
 800f6d0:	4629      	mov	r1, r5
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	f7ff febe 	bl	800f454 <rshift>
 800f6d8:	442f      	add	r7, r5
 800f6da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6de:	42bb      	cmp	r3, r7
 800f6e0:	da42      	bge.n	800f768 <__gethex+0x244>
 800f6e2:	9801      	ldr	r0, [sp, #4]
 800f6e4:	4621      	mov	r1, r4
 800f6e6:	f000 fa41 	bl	800fb6c <_Bfree>
 800f6ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	6013      	str	r3, [r2, #0]
 800f6f0:	25a3      	movs	r5, #163	@ 0xa3
 800f6f2:	e793      	b.n	800f61c <__gethex+0xf8>
 800f6f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f6f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800f6fa:	d012      	beq.n	800f722 <__gethex+0x1fe>
 800f6fc:	2b20      	cmp	r3, #32
 800f6fe:	d104      	bne.n	800f70a <__gethex+0x1e6>
 800f700:	f845 bb04 	str.w	fp, [r5], #4
 800f704:	f04f 0b00 	mov.w	fp, #0
 800f708:	465b      	mov	r3, fp
 800f70a:	7830      	ldrb	r0, [r6, #0]
 800f70c:	9303      	str	r3, [sp, #12]
 800f70e:	f7ff fef3 	bl	800f4f8 <__hexdig_fun>
 800f712:	9b03      	ldr	r3, [sp, #12]
 800f714:	f000 000f 	and.w	r0, r0, #15
 800f718:	4098      	lsls	r0, r3
 800f71a:	ea4b 0b00 	orr.w	fp, fp, r0
 800f71e:	3304      	adds	r3, #4
 800f720:	e7ae      	b.n	800f680 <__gethex+0x15c>
 800f722:	45b1      	cmp	r9, r6
 800f724:	d8ea      	bhi.n	800f6fc <__gethex+0x1d8>
 800f726:	492b      	ldr	r1, [pc, #172]	@ (800f7d4 <__gethex+0x2b0>)
 800f728:	9303      	str	r3, [sp, #12]
 800f72a:	2201      	movs	r2, #1
 800f72c:	4630      	mov	r0, r6
 800f72e:	f7fe fea1 	bl	800e474 <strncmp>
 800f732:	9b03      	ldr	r3, [sp, #12]
 800f734:	2800      	cmp	r0, #0
 800f736:	d1e1      	bne.n	800f6fc <__gethex+0x1d8>
 800f738:	e7a2      	b.n	800f680 <__gethex+0x15c>
 800f73a:	1ea9      	subs	r1, r5, #2
 800f73c:	4620      	mov	r0, r4
 800f73e:	f000 fe66 	bl	801040e <__any_on>
 800f742:	2800      	cmp	r0, #0
 800f744:	d0c2      	beq.n	800f6cc <__gethex+0x1a8>
 800f746:	f04f 0903 	mov.w	r9, #3
 800f74a:	e7c1      	b.n	800f6d0 <__gethex+0x1ac>
 800f74c:	da09      	bge.n	800f762 <__gethex+0x23e>
 800f74e:	1b75      	subs	r5, r6, r5
 800f750:	4621      	mov	r1, r4
 800f752:	9801      	ldr	r0, [sp, #4]
 800f754:	462a      	mov	r2, r5
 800f756:	f000 fc21 	bl	800ff9c <__lshift>
 800f75a:	1b7f      	subs	r7, r7, r5
 800f75c:	4604      	mov	r4, r0
 800f75e:	f100 0a14 	add.w	sl, r0, #20
 800f762:	f04f 0900 	mov.w	r9, #0
 800f766:	e7b8      	b.n	800f6da <__gethex+0x1b6>
 800f768:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f76c:	42bd      	cmp	r5, r7
 800f76e:	dd6f      	ble.n	800f850 <__gethex+0x32c>
 800f770:	1bed      	subs	r5, r5, r7
 800f772:	42ae      	cmp	r6, r5
 800f774:	dc34      	bgt.n	800f7e0 <__gethex+0x2bc>
 800f776:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f77a:	2b02      	cmp	r3, #2
 800f77c:	d022      	beq.n	800f7c4 <__gethex+0x2a0>
 800f77e:	2b03      	cmp	r3, #3
 800f780:	d024      	beq.n	800f7cc <__gethex+0x2a8>
 800f782:	2b01      	cmp	r3, #1
 800f784:	d115      	bne.n	800f7b2 <__gethex+0x28e>
 800f786:	42ae      	cmp	r6, r5
 800f788:	d113      	bne.n	800f7b2 <__gethex+0x28e>
 800f78a:	2e01      	cmp	r6, #1
 800f78c:	d10b      	bne.n	800f7a6 <__gethex+0x282>
 800f78e:	9a02      	ldr	r2, [sp, #8]
 800f790:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f794:	6013      	str	r3, [r2, #0]
 800f796:	2301      	movs	r3, #1
 800f798:	6123      	str	r3, [r4, #16]
 800f79a:	f8ca 3000 	str.w	r3, [sl]
 800f79e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7a0:	2562      	movs	r5, #98	@ 0x62
 800f7a2:	601c      	str	r4, [r3, #0]
 800f7a4:	e73a      	b.n	800f61c <__gethex+0xf8>
 800f7a6:	1e71      	subs	r1, r6, #1
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	f000 fe30 	bl	801040e <__any_on>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	d1ed      	bne.n	800f78e <__gethex+0x26a>
 800f7b2:	9801      	ldr	r0, [sp, #4]
 800f7b4:	4621      	mov	r1, r4
 800f7b6:	f000 f9d9 	bl	800fb6c <_Bfree>
 800f7ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7bc:	2300      	movs	r3, #0
 800f7be:	6013      	str	r3, [r2, #0]
 800f7c0:	2550      	movs	r5, #80	@ 0x50
 800f7c2:	e72b      	b.n	800f61c <__gethex+0xf8>
 800f7c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d1f3      	bne.n	800f7b2 <__gethex+0x28e>
 800f7ca:	e7e0      	b.n	800f78e <__gethex+0x26a>
 800f7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1dd      	bne.n	800f78e <__gethex+0x26a>
 800f7d2:	e7ee      	b.n	800f7b2 <__gethex+0x28e>
 800f7d4:	08012dc4 	.word	0x08012dc4
 800f7d8:	08013067 	.word	0x08013067
 800f7dc:	08013078 	.word	0x08013078
 800f7e0:	1e6f      	subs	r7, r5, #1
 800f7e2:	f1b9 0f00 	cmp.w	r9, #0
 800f7e6:	d130      	bne.n	800f84a <__gethex+0x326>
 800f7e8:	b127      	cbz	r7, 800f7f4 <__gethex+0x2d0>
 800f7ea:	4639      	mov	r1, r7
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	f000 fe0e 	bl	801040e <__any_on>
 800f7f2:	4681      	mov	r9, r0
 800f7f4:	117a      	asrs	r2, r7, #5
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f7fc:	f007 071f 	and.w	r7, r7, #31
 800f800:	40bb      	lsls	r3, r7
 800f802:	4213      	tst	r3, r2
 800f804:	4629      	mov	r1, r5
 800f806:	4620      	mov	r0, r4
 800f808:	bf18      	it	ne
 800f80a:	f049 0902 	orrne.w	r9, r9, #2
 800f80e:	f7ff fe21 	bl	800f454 <rshift>
 800f812:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f816:	1b76      	subs	r6, r6, r5
 800f818:	2502      	movs	r5, #2
 800f81a:	f1b9 0f00 	cmp.w	r9, #0
 800f81e:	d047      	beq.n	800f8b0 <__gethex+0x38c>
 800f820:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f824:	2b02      	cmp	r3, #2
 800f826:	d015      	beq.n	800f854 <__gethex+0x330>
 800f828:	2b03      	cmp	r3, #3
 800f82a:	d017      	beq.n	800f85c <__gethex+0x338>
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d109      	bne.n	800f844 <__gethex+0x320>
 800f830:	f019 0f02 	tst.w	r9, #2
 800f834:	d006      	beq.n	800f844 <__gethex+0x320>
 800f836:	f8da 3000 	ldr.w	r3, [sl]
 800f83a:	ea49 0903 	orr.w	r9, r9, r3
 800f83e:	f019 0f01 	tst.w	r9, #1
 800f842:	d10e      	bne.n	800f862 <__gethex+0x33e>
 800f844:	f045 0510 	orr.w	r5, r5, #16
 800f848:	e032      	b.n	800f8b0 <__gethex+0x38c>
 800f84a:	f04f 0901 	mov.w	r9, #1
 800f84e:	e7d1      	b.n	800f7f4 <__gethex+0x2d0>
 800f850:	2501      	movs	r5, #1
 800f852:	e7e2      	b.n	800f81a <__gethex+0x2f6>
 800f854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f856:	f1c3 0301 	rsb	r3, r3, #1
 800f85a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f85c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d0f0      	beq.n	800f844 <__gethex+0x320>
 800f862:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f866:	f104 0314 	add.w	r3, r4, #20
 800f86a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f86e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f872:	f04f 0c00 	mov.w	ip, #0
 800f876:	4618      	mov	r0, r3
 800f878:	f853 2b04 	ldr.w	r2, [r3], #4
 800f87c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f880:	d01b      	beq.n	800f8ba <__gethex+0x396>
 800f882:	3201      	adds	r2, #1
 800f884:	6002      	str	r2, [r0, #0]
 800f886:	2d02      	cmp	r5, #2
 800f888:	f104 0314 	add.w	r3, r4, #20
 800f88c:	d13c      	bne.n	800f908 <__gethex+0x3e4>
 800f88e:	f8d8 2000 	ldr.w	r2, [r8]
 800f892:	3a01      	subs	r2, #1
 800f894:	42b2      	cmp	r2, r6
 800f896:	d109      	bne.n	800f8ac <__gethex+0x388>
 800f898:	1171      	asrs	r1, r6, #5
 800f89a:	2201      	movs	r2, #1
 800f89c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f8a0:	f006 061f 	and.w	r6, r6, #31
 800f8a4:	fa02 f606 	lsl.w	r6, r2, r6
 800f8a8:	421e      	tst	r6, r3
 800f8aa:	d13a      	bne.n	800f922 <__gethex+0x3fe>
 800f8ac:	f045 0520 	orr.w	r5, r5, #32
 800f8b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8b2:	601c      	str	r4, [r3, #0]
 800f8b4:	9b02      	ldr	r3, [sp, #8]
 800f8b6:	601f      	str	r7, [r3, #0]
 800f8b8:	e6b0      	b.n	800f61c <__gethex+0xf8>
 800f8ba:	4299      	cmp	r1, r3
 800f8bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800f8c0:	d8d9      	bhi.n	800f876 <__gethex+0x352>
 800f8c2:	68a3      	ldr	r3, [r4, #8]
 800f8c4:	459b      	cmp	fp, r3
 800f8c6:	db17      	blt.n	800f8f8 <__gethex+0x3d4>
 800f8c8:	6861      	ldr	r1, [r4, #4]
 800f8ca:	9801      	ldr	r0, [sp, #4]
 800f8cc:	3101      	adds	r1, #1
 800f8ce:	f000 f90d 	bl	800faec <_Balloc>
 800f8d2:	4681      	mov	r9, r0
 800f8d4:	b918      	cbnz	r0, 800f8de <__gethex+0x3ba>
 800f8d6:	4b1a      	ldr	r3, [pc, #104]	@ (800f940 <__gethex+0x41c>)
 800f8d8:	4602      	mov	r2, r0
 800f8da:	2184      	movs	r1, #132	@ 0x84
 800f8dc:	e6c5      	b.n	800f66a <__gethex+0x146>
 800f8de:	6922      	ldr	r2, [r4, #16]
 800f8e0:	3202      	adds	r2, #2
 800f8e2:	f104 010c 	add.w	r1, r4, #12
 800f8e6:	0092      	lsls	r2, r2, #2
 800f8e8:	300c      	adds	r0, #12
 800f8ea:	f7fe fee2 	bl	800e6b2 <memcpy>
 800f8ee:	4621      	mov	r1, r4
 800f8f0:	9801      	ldr	r0, [sp, #4]
 800f8f2:	f000 f93b 	bl	800fb6c <_Bfree>
 800f8f6:	464c      	mov	r4, r9
 800f8f8:	6923      	ldr	r3, [r4, #16]
 800f8fa:	1c5a      	adds	r2, r3, #1
 800f8fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f900:	6122      	str	r2, [r4, #16]
 800f902:	2201      	movs	r2, #1
 800f904:	615a      	str	r2, [r3, #20]
 800f906:	e7be      	b.n	800f886 <__gethex+0x362>
 800f908:	6922      	ldr	r2, [r4, #16]
 800f90a:	455a      	cmp	r2, fp
 800f90c:	dd0b      	ble.n	800f926 <__gethex+0x402>
 800f90e:	2101      	movs	r1, #1
 800f910:	4620      	mov	r0, r4
 800f912:	f7ff fd9f 	bl	800f454 <rshift>
 800f916:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f91a:	3701      	adds	r7, #1
 800f91c:	42bb      	cmp	r3, r7
 800f91e:	f6ff aee0 	blt.w	800f6e2 <__gethex+0x1be>
 800f922:	2501      	movs	r5, #1
 800f924:	e7c2      	b.n	800f8ac <__gethex+0x388>
 800f926:	f016 061f 	ands.w	r6, r6, #31
 800f92a:	d0fa      	beq.n	800f922 <__gethex+0x3fe>
 800f92c:	4453      	add	r3, sl
 800f92e:	f1c6 0620 	rsb	r6, r6, #32
 800f932:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f936:	f000 f9cb 	bl	800fcd0 <__hi0bits>
 800f93a:	42b0      	cmp	r0, r6
 800f93c:	dbe7      	blt.n	800f90e <__gethex+0x3ea>
 800f93e:	e7f0      	b.n	800f922 <__gethex+0x3fe>
 800f940:	08013067 	.word	0x08013067

0800f944 <L_shift>:
 800f944:	f1c2 0208 	rsb	r2, r2, #8
 800f948:	0092      	lsls	r2, r2, #2
 800f94a:	b570      	push	{r4, r5, r6, lr}
 800f94c:	f1c2 0620 	rsb	r6, r2, #32
 800f950:	6843      	ldr	r3, [r0, #4]
 800f952:	6804      	ldr	r4, [r0, #0]
 800f954:	fa03 f506 	lsl.w	r5, r3, r6
 800f958:	432c      	orrs	r4, r5
 800f95a:	40d3      	lsrs	r3, r2
 800f95c:	6004      	str	r4, [r0, #0]
 800f95e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f962:	4288      	cmp	r0, r1
 800f964:	d3f4      	bcc.n	800f950 <L_shift+0xc>
 800f966:	bd70      	pop	{r4, r5, r6, pc}

0800f968 <__match>:
 800f968:	b530      	push	{r4, r5, lr}
 800f96a:	6803      	ldr	r3, [r0, #0]
 800f96c:	3301      	adds	r3, #1
 800f96e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f972:	b914      	cbnz	r4, 800f97a <__match+0x12>
 800f974:	6003      	str	r3, [r0, #0]
 800f976:	2001      	movs	r0, #1
 800f978:	bd30      	pop	{r4, r5, pc}
 800f97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f97e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f982:	2d19      	cmp	r5, #25
 800f984:	bf98      	it	ls
 800f986:	3220      	addls	r2, #32
 800f988:	42a2      	cmp	r2, r4
 800f98a:	d0f0      	beq.n	800f96e <__match+0x6>
 800f98c:	2000      	movs	r0, #0
 800f98e:	e7f3      	b.n	800f978 <__match+0x10>

0800f990 <__hexnan>:
 800f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f994:	680b      	ldr	r3, [r1, #0]
 800f996:	6801      	ldr	r1, [r0, #0]
 800f998:	115e      	asrs	r6, r3, #5
 800f99a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f99e:	f013 031f 	ands.w	r3, r3, #31
 800f9a2:	b087      	sub	sp, #28
 800f9a4:	bf18      	it	ne
 800f9a6:	3604      	addne	r6, #4
 800f9a8:	2500      	movs	r5, #0
 800f9aa:	1f37      	subs	r7, r6, #4
 800f9ac:	4682      	mov	sl, r0
 800f9ae:	4690      	mov	r8, r2
 800f9b0:	9301      	str	r3, [sp, #4]
 800f9b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f9b6:	46b9      	mov	r9, r7
 800f9b8:	463c      	mov	r4, r7
 800f9ba:	9502      	str	r5, [sp, #8]
 800f9bc:	46ab      	mov	fp, r5
 800f9be:	784a      	ldrb	r2, [r1, #1]
 800f9c0:	1c4b      	adds	r3, r1, #1
 800f9c2:	9303      	str	r3, [sp, #12]
 800f9c4:	b342      	cbz	r2, 800fa18 <__hexnan+0x88>
 800f9c6:	4610      	mov	r0, r2
 800f9c8:	9105      	str	r1, [sp, #20]
 800f9ca:	9204      	str	r2, [sp, #16]
 800f9cc:	f7ff fd94 	bl	800f4f8 <__hexdig_fun>
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	d151      	bne.n	800fa78 <__hexnan+0xe8>
 800f9d4:	9a04      	ldr	r2, [sp, #16]
 800f9d6:	9905      	ldr	r1, [sp, #20]
 800f9d8:	2a20      	cmp	r2, #32
 800f9da:	d818      	bhi.n	800fa0e <__hexnan+0x7e>
 800f9dc:	9b02      	ldr	r3, [sp, #8]
 800f9de:	459b      	cmp	fp, r3
 800f9e0:	dd13      	ble.n	800fa0a <__hexnan+0x7a>
 800f9e2:	454c      	cmp	r4, r9
 800f9e4:	d206      	bcs.n	800f9f4 <__hexnan+0x64>
 800f9e6:	2d07      	cmp	r5, #7
 800f9e8:	dc04      	bgt.n	800f9f4 <__hexnan+0x64>
 800f9ea:	462a      	mov	r2, r5
 800f9ec:	4649      	mov	r1, r9
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f7ff ffa8 	bl	800f944 <L_shift>
 800f9f4:	4544      	cmp	r4, r8
 800f9f6:	d952      	bls.n	800fa9e <__hexnan+0x10e>
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	f1a4 0904 	sub.w	r9, r4, #4
 800f9fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa02:	f8cd b008 	str.w	fp, [sp, #8]
 800fa06:	464c      	mov	r4, r9
 800fa08:	461d      	mov	r5, r3
 800fa0a:	9903      	ldr	r1, [sp, #12]
 800fa0c:	e7d7      	b.n	800f9be <__hexnan+0x2e>
 800fa0e:	2a29      	cmp	r2, #41	@ 0x29
 800fa10:	d157      	bne.n	800fac2 <__hexnan+0x132>
 800fa12:	3102      	adds	r1, #2
 800fa14:	f8ca 1000 	str.w	r1, [sl]
 800fa18:	f1bb 0f00 	cmp.w	fp, #0
 800fa1c:	d051      	beq.n	800fac2 <__hexnan+0x132>
 800fa1e:	454c      	cmp	r4, r9
 800fa20:	d206      	bcs.n	800fa30 <__hexnan+0xa0>
 800fa22:	2d07      	cmp	r5, #7
 800fa24:	dc04      	bgt.n	800fa30 <__hexnan+0xa0>
 800fa26:	462a      	mov	r2, r5
 800fa28:	4649      	mov	r1, r9
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	f7ff ff8a 	bl	800f944 <L_shift>
 800fa30:	4544      	cmp	r4, r8
 800fa32:	d936      	bls.n	800faa2 <__hexnan+0x112>
 800fa34:	f1a8 0204 	sub.w	r2, r8, #4
 800fa38:	4623      	mov	r3, r4
 800fa3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800fa3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800fa42:	429f      	cmp	r7, r3
 800fa44:	d2f9      	bcs.n	800fa3a <__hexnan+0xaa>
 800fa46:	1b3b      	subs	r3, r7, r4
 800fa48:	f023 0303 	bic.w	r3, r3, #3
 800fa4c:	3304      	adds	r3, #4
 800fa4e:	3401      	adds	r4, #1
 800fa50:	3e03      	subs	r6, #3
 800fa52:	42b4      	cmp	r4, r6
 800fa54:	bf88      	it	hi
 800fa56:	2304      	movhi	r3, #4
 800fa58:	4443      	add	r3, r8
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	f843 2b04 	str.w	r2, [r3], #4
 800fa60:	429f      	cmp	r7, r3
 800fa62:	d2fb      	bcs.n	800fa5c <__hexnan+0xcc>
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	b91b      	cbnz	r3, 800fa70 <__hexnan+0xe0>
 800fa68:	4547      	cmp	r7, r8
 800fa6a:	d128      	bne.n	800fabe <__hexnan+0x12e>
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	603b      	str	r3, [r7, #0]
 800fa70:	2005      	movs	r0, #5
 800fa72:	b007      	add	sp, #28
 800fa74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa78:	3501      	adds	r5, #1
 800fa7a:	2d08      	cmp	r5, #8
 800fa7c:	f10b 0b01 	add.w	fp, fp, #1
 800fa80:	dd06      	ble.n	800fa90 <__hexnan+0x100>
 800fa82:	4544      	cmp	r4, r8
 800fa84:	d9c1      	bls.n	800fa0a <__hexnan+0x7a>
 800fa86:	2300      	movs	r3, #0
 800fa88:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa8c:	2501      	movs	r5, #1
 800fa8e:	3c04      	subs	r4, #4
 800fa90:	6822      	ldr	r2, [r4, #0]
 800fa92:	f000 000f 	and.w	r0, r0, #15
 800fa96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fa9a:	6020      	str	r0, [r4, #0]
 800fa9c:	e7b5      	b.n	800fa0a <__hexnan+0x7a>
 800fa9e:	2508      	movs	r5, #8
 800faa0:	e7b3      	b.n	800fa0a <__hexnan+0x7a>
 800faa2:	9b01      	ldr	r3, [sp, #4]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d0dd      	beq.n	800fa64 <__hexnan+0xd4>
 800faa8:	f1c3 0320 	rsb	r3, r3, #32
 800faac:	f04f 32ff 	mov.w	r2, #4294967295
 800fab0:	40da      	lsrs	r2, r3
 800fab2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fab6:	4013      	ands	r3, r2
 800fab8:	f846 3c04 	str.w	r3, [r6, #-4]
 800fabc:	e7d2      	b.n	800fa64 <__hexnan+0xd4>
 800fabe:	3f04      	subs	r7, #4
 800fac0:	e7d0      	b.n	800fa64 <__hexnan+0xd4>
 800fac2:	2004      	movs	r0, #4
 800fac4:	e7d5      	b.n	800fa72 <__hexnan+0xe2>

0800fac6 <__ascii_mbtowc>:
 800fac6:	b082      	sub	sp, #8
 800fac8:	b901      	cbnz	r1, 800facc <__ascii_mbtowc+0x6>
 800faca:	a901      	add	r1, sp, #4
 800facc:	b142      	cbz	r2, 800fae0 <__ascii_mbtowc+0x1a>
 800face:	b14b      	cbz	r3, 800fae4 <__ascii_mbtowc+0x1e>
 800fad0:	7813      	ldrb	r3, [r2, #0]
 800fad2:	600b      	str	r3, [r1, #0]
 800fad4:	7812      	ldrb	r2, [r2, #0]
 800fad6:	1e10      	subs	r0, r2, #0
 800fad8:	bf18      	it	ne
 800fada:	2001      	movne	r0, #1
 800fadc:	b002      	add	sp, #8
 800fade:	4770      	bx	lr
 800fae0:	4610      	mov	r0, r2
 800fae2:	e7fb      	b.n	800fadc <__ascii_mbtowc+0x16>
 800fae4:	f06f 0001 	mvn.w	r0, #1
 800fae8:	e7f8      	b.n	800fadc <__ascii_mbtowc+0x16>
	...

0800faec <_Balloc>:
 800faec:	b570      	push	{r4, r5, r6, lr}
 800faee:	69c6      	ldr	r6, [r0, #28]
 800faf0:	4604      	mov	r4, r0
 800faf2:	460d      	mov	r5, r1
 800faf4:	b976      	cbnz	r6, 800fb14 <_Balloc+0x28>
 800faf6:	2010      	movs	r0, #16
 800faf8:	f7fc ff4e 	bl	800c998 <malloc>
 800fafc:	4602      	mov	r2, r0
 800fafe:	61e0      	str	r0, [r4, #28]
 800fb00:	b920      	cbnz	r0, 800fb0c <_Balloc+0x20>
 800fb02:	4b18      	ldr	r3, [pc, #96]	@ (800fb64 <_Balloc+0x78>)
 800fb04:	4818      	ldr	r0, [pc, #96]	@ (800fb68 <_Balloc+0x7c>)
 800fb06:	216b      	movs	r1, #107	@ 0x6b
 800fb08:	f7fe fdf0 	bl	800e6ec <__assert_func>
 800fb0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb10:	6006      	str	r6, [r0, #0]
 800fb12:	60c6      	str	r6, [r0, #12]
 800fb14:	69e6      	ldr	r6, [r4, #28]
 800fb16:	68f3      	ldr	r3, [r6, #12]
 800fb18:	b183      	cbz	r3, 800fb3c <_Balloc+0x50>
 800fb1a:	69e3      	ldr	r3, [r4, #28]
 800fb1c:	68db      	ldr	r3, [r3, #12]
 800fb1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb22:	b9b8      	cbnz	r0, 800fb54 <_Balloc+0x68>
 800fb24:	2101      	movs	r1, #1
 800fb26:	fa01 f605 	lsl.w	r6, r1, r5
 800fb2a:	1d72      	adds	r2, r6, #5
 800fb2c:	0092      	lsls	r2, r2, #2
 800fb2e:	4620      	mov	r0, r4
 800fb30:	f000 fed1 	bl	80108d6 <_calloc_r>
 800fb34:	b160      	cbz	r0, 800fb50 <_Balloc+0x64>
 800fb36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb3a:	e00e      	b.n	800fb5a <_Balloc+0x6e>
 800fb3c:	2221      	movs	r2, #33	@ 0x21
 800fb3e:	2104      	movs	r1, #4
 800fb40:	4620      	mov	r0, r4
 800fb42:	f000 fec8 	bl	80108d6 <_calloc_r>
 800fb46:	69e3      	ldr	r3, [r4, #28]
 800fb48:	60f0      	str	r0, [r6, #12]
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d1e4      	bne.n	800fb1a <_Balloc+0x2e>
 800fb50:	2000      	movs	r0, #0
 800fb52:	bd70      	pop	{r4, r5, r6, pc}
 800fb54:	6802      	ldr	r2, [r0, #0]
 800fb56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb60:	e7f7      	b.n	800fb52 <_Balloc+0x66>
 800fb62:	bf00      	nop
 800fb64:	08012f4d 	.word	0x08012f4d
 800fb68:	080130d8 	.word	0x080130d8

0800fb6c <_Bfree>:
 800fb6c:	b570      	push	{r4, r5, r6, lr}
 800fb6e:	69c6      	ldr	r6, [r0, #28]
 800fb70:	4605      	mov	r5, r0
 800fb72:	460c      	mov	r4, r1
 800fb74:	b976      	cbnz	r6, 800fb94 <_Bfree+0x28>
 800fb76:	2010      	movs	r0, #16
 800fb78:	f7fc ff0e 	bl	800c998 <malloc>
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	61e8      	str	r0, [r5, #28]
 800fb80:	b920      	cbnz	r0, 800fb8c <_Bfree+0x20>
 800fb82:	4b09      	ldr	r3, [pc, #36]	@ (800fba8 <_Bfree+0x3c>)
 800fb84:	4809      	ldr	r0, [pc, #36]	@ (800fbac <_Bfree+0x40>)
 800fb86:	218f      	movs	r1, #143	@ 0x8f
 800fb88:	f7fe fdb0 	bl	800e6ec <__assert_func>
 800fb8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb90:	6006      	str	r6, [r0, #0]
 800fb92:	60c6      	str	r6, [r0, #12]
 800fb94:	b13c      	cbz	r4, 800fba6 <_Bfree+0x3a>
 800fb96:	69eb      	ldr	r3, [r5, #28]
 800fb98:	6862      	ldr	r2, [r4, #4]
 800fb9a:	68db      	ldr	r3, [r3, #12]
 800fb9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fba0:	6021      	str	r1, [r4, #0]
 800fba2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fba6:	bd70      	pop	{r4, r5, r6, pc}
 800fba8:	08012f4d 	.word	0x08012f4d
 800fbac:	080130d8 	.word	0x080130d8

0800fbb0 <__multadd>:
 800fbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb4:	690d      	ldr	r5, [r1, #16]
 800fbb6:	4607      	mov	r7, r0
 800fbb8:	460c      	mov	r4, r1
 800fbba:	461e      	mov	r6, r3
 800fbbc:	f101 0c14 	add.w	ip, r1, #20
 800fbc0:	2000      	movs	r0, #0
 800fbc2:	f8dc 3000 	ldr.w	r3, [ip]
 800fbc6:	b299      	uxth	r1, r3
 800fbc8:	fb02 6101 	mla	r1, r2, r1, r6
 800fbcc:	0c1e      	lsrs	r6, r3, #16
 800fbce:	0c0b      	lsrs	r3, r1, #16
 800fbd0:	fb02 3306 	mla	r3, r2, r6, r3
 800fbd4:	b289      	uxth	r1, r1
 800fbd6:	3001      	adds	r0, #1
 800fbd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fbdc:	4285      	cmp	r5, r0
 800fbde:	f84c 1b04 	str.w	r1, [ip], #4
 800fbe2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fbe6:	dcec      	bgt.n	800fbc2 <__multadd+0x12>
 800fbe8:	b30e      	cbz	r6, 800fc2e <__multadd+0x7e>
 800fbea:	68a3      	ldr	r3, [r4, #8]
 800fbec:	42ab      	cmp	r3, r5
 800fbee:	dc19      	bgt.n	800fc24 <__multadd+0x74>
 800fbf0:	6861      	ldr	r1, [r4, #4]
 800fbf2:	4638      	mov	r0, r7
 800fbf4:	3101      	adds	r1, #1
 800fbf6:	f7ff ff79 	bl	800faec <_Balloc>
 800fbfa:	4680      	mov	r8, r0
 800fbfc:	b928      	cbnz	r0, 800fc0a <__multadd+0x5a>
 800fbfe:	4602      	mov	r2, r0
 800fc00:	4b0c      	ldr	r3, [pc, #48]	@ (800fc34 <__multadd+0x84>)
 800fc02:	480d      	ldr	r0, [pc, #52]	@ (800fc38 <__multadd+0x88>)
 800fc04:	21ba      	movs	r1, #186	@ 0xba
 800fc06:	f7fe fd71 	bl	800e6ec <__assert_func>
 800fc0a:	6922      	ldr	r2, [r4, #16]
 800fc0c:	3202      	adds	r2, #2
 800fc0e:	f104 010c 	add.w	r1, r4, #12
 800fc12:	0092      	lsls	r2, r2, #2
 800fc14:	300c      	adds	r0, #12
 800fc16:	f7fe fd4c 	bl	800e6b2 <memcpy>
 800fc1a:	4621      	mov	r1, r4
 800fc1c:	4638      	mov	r0, r7
 800fc1e:	f7ff ffa5 	bl	800fb6c <_Bfree>
 800fc22:	4644      	mov	r4, r8
 800fc24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc28:	3501      	adds	r5, #1
 800fc2a:	615e      	str	r6, [r3, #20]
 800fc2c:	6125      	str	r5, [r4, #16]
 800fc2e:	4620      	mov	r0, r4
 800fc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc34:	08013067 	.word	0x08013067
 800fc38:	080130d8 	.word	0x080130d8

0800fc3c <__s2b>:
 800fc3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc40:	460c      	mov	r4, r1
 800fc42:	4615      	mov	r5, r2
 800fc44:	461f      	mov	r7, r3
 800fc46:	2209      	movs	r2, #9
 800fc48:	3308      	adds	r3, #8
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc50:	2100      	movs	r1, #0
 800fc52:	2201      	movs	r2, #1
 800fc54:	429a      	cmp	r2, r3
 800fc56:	db09      	blt.n	800fc6c <__s2b+0x30>
 800fc58:	4630      	mov	r0, r6
 800fc5a:	f7ff ff47 	bl	800faec <_Balloc>
 800fc5e:	b940      	cbnz	r0, 800fc72 <__s2b+0x36>
 800fc60:	4602      	mov	r2, r0
 800fc62:	4b19      	ldr	r3, [pc, #100]	@ (800fcc8 <__s2b+0x8c>)
 800fc64:	4819      	ldr	r0, [pc, #100]	@ (800fccc <__s2b+0x90>)
 800fc66:	21d3      	movs	r1, #211	@ 0xd3
 800fc68:	f7fe fd40 	bl	800e6ec <__assert_func>
 800fc6c:	0052      	lsls	r2, r2, #1
 800fc6e:	3101      	adds	r1, #1
 800fc70:	e7f0      	b.n	800fc54 <__s2b+0x18>
 800fc72:	9b08      	ldr	r3, [sp, #32]
 800fc74:	6143      	str	r3, [r0, #20]
 800fc76:	2d09      	cmp	r5, #9
 800fc78:	f04f 0301 	mov.w	r3, #1
 800fc7c:	6103      	str	r3, [r0, #16]
 800fc7e:	dd16      	ble.n	800fcae <__s2b+0x72>
 800fc80:	f104 0909 	add.w	r9, r4, #9
 800fc84:	46c8      	mov	r8, r9
 800fc86:	442c      	add	r4, r5
 800fc88:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fc8c:	4601      	mov	r1, r0
 800fc8e:	3b30      	subs	r3, #48	@ 0x30
 800fc90:	220a      	movs	r2, #10
 800fc92:	4630      	mov	r0, r6
 800fc94:	f7ff ff8c 	bl	800fbb0 <__multadd>
 800fc98:	45a0      	cmp	r8, r4
 800fc9a:	d1f5      	bne.n	800fc88 <__s2b+0x4c>
 800fc9c:	f1a5 0408 	sub.w	r4, r5, #8
 800fca0:	444c      	add	r4, r9
 800fca2:	1b2d      	subs	r5, r5, r4
 800fca4:	1963      	adds	r3, r4, r5
 800fca6:	42bb      	cmp	r3, r7
 800fca8:	db04      	blt.n	800fcb4 <__s2b+0x78>
 800fcaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcae:	340a      	adds	r4, #10
 800fcb0:	2509      	movs	r5, #9
 800fcb2:	e7f6      	b.n	800fca2 <__s2b+0x66>
 800fcb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fcb8:	4601      	mov	r1, r0
 800fcba:	3b30      	subs	r3, #48	@ 0x30
 800fcbc:	220a      	movs	r2, #10
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	f7ff ff76 	bl	800fbb0 <__multadd>
 800fcc4:	e7ee      	b.n	800fca4 <__s2b+0x68>
 800fcc6:	bf00      	nop
 800fcc8:	08013067 	.word	0x08013067
 800fccc:	080130d8 	.word	0x080130d8

0800fcd0 <__hi0bits>:
 800fcd0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	bf36      	itet	cc
 800fcd8:	0403      	lslcc	r3, r0, #16
 800fcda:	2000      	movcs	r0, #0
 800fcdc:	2010      	movcc	r0, #16
 800fcde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fce2:	bf3c      	itt	cc
 800fce4:	021b      	lslcc	r3, r3, #8
 800fce6:	3008      	addcc	r0, #8
 800fce8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fcec:	bf3c      	itt	cc
 800fcee:	011b      	lslcc	r3, r3, #4
 800fcf0:	3004      	addcc	r0, #4
 800fcf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcf6:	bf3c      	itt	cc
 800fcf8:	009b      	lslcc	r3, r3, #2
 800fcfa:	3002      	addcc	r0, #2
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	db05      	blt.n	800fd0c <__hi0bits+0x3c>
 800fd00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fd04:	f100 0001 	add.w	r0, r0, #1
 800fd08:	bf08      	it	eq
 800fd0a:	2020      	moveq	r0, #32
 800fd0c:	4770      	bx	lr

0800fd0e <__lo0bits>:
 800fd0e:	6803      	ldr	r3, [r0, #0]
 800fd10:	4602      	mov	r2, r0
 800fd12:	f013 0007 	ands.w	r0, r3, #7
 800fd16:	d00b      	beq.n	800fd30 <__lo0bits+0x22>
 800fd18:	07d9      	lsls	r1, r3, #31
 800fd1a:	d421      	bmi.n	800fd60 <__lo0bits+0x52>
 800fd1c:	0798      	lsls	r0, r3, #30
 800fd1e:	bf49      	itett	mi
 800fd20:	085b      	lsrmi	r3, r3, #1
 800fd22:	089b      	lsrpl	r3, r3, #2
 800fd24:	2001      	movmi	r0, #1
 800fd26:	6013      	strmi	r3, [r2, #0]
 800fd28:	bf5c      	itt	pl
 800fd2a:	6013      	strpl	r3, [r2, #0]
 800fd2c:	2002      	movpl	r0, #2
 800fd2e:	4770      	bx	lr
 800fd30:	b299      	uxth	r1, r3
 800fd32:	b909      	cbnz	r1, 800fd38 <__lo0bits+0x2a>
 800fd34:	0c1b      	lsrs	r3, r3, #16
 800fd36:	2010      	movs	r0, #16
 800fd38:	b2d9      	uxtb	r1, r3
 800fd3a:	b909      	cbnz	r1, 800fd40 <__lo0bits+0x32>
 800fd3c:	3008      	adds	r0, #8
 800fd3e:	0a1b      	lsrs	r3, r3, #8
 800fd40:	0719      	lsls	r1, r3, #28
 800fd42:	bf04      	itt	eq
 800fd44:	091b      	lsreq	r3, r3, #4
 800fd46:	3004      	addeq	r0, #4
 800fd48:	0799      	lsls	r1, r3, #30
 800fd4a:	bf04      	itt	eq
 800fd4c:	089b      	lsreq	r3, r3, #2
 800fd4e:	3002      	addeq	r0, #2
 800fd50:	07d9      	lsls	r1, r3, #31
 800fd52:	d403      	bmi.n	800fd5c <__lo0bits+0x4e>
 800fd54:	085b      	lsrs	r3, r3, #1
 800fd56:	f100 0001 	add.w	r0, r0, #1
 800fd5a:	d003      	beq.n	800fd64 <__lo0bits+0x56>
 800fd5c:	6013      	str	r3, [r2, #0]
 800fd5e:	4770      	bx	lr
 800fd60:	2000      	movs	r0, #0
 800fd62:	4770      	bx	lr
 800fd64:	2020      	movs	r0, #32
 800fd66:	4770      	bx	lr

0800fd68 <__i2b>:
 800fd68:	b510      	push	{r4, lr}
 800fd6a:	460c      	mov	r4, r1
 800fd6c:	2101      	movs	r1, #1
 800fd6e:	f7ff febd 	bl	800faec <_Balloc>
 800fd72:	4602      	mov	r2, r0
 800fd74:	b928      	cbnz	r0, 800fd82 <__i2b+0x1a>
 800fd76:	4b05      	ldr	r3, [pc, #20]	@ (800fd8c <__i2b+0x24>)
 800fd78:	4805      	ldr	r0, [pc, #20]	@ (800fd90 <__i2b+0x28>)
 800fd7a:	f240 1145 	movw	r1, #325	@ 0x145
 800fd7e:	f7fe fcb5 	bl	800e6ec <__assert_func>
 800fd82:	2301      	movs	r3, #1
 800fd84:	6144      	str	r4, [r0, #20]
 800fd86:	6103      	str	r3, [r0, #16]
 800fd88:	bd10      	pop	{r4, pc}
 800fd8a:	bf00      	nop
 800fd8c:	08013067 	.word	0x08013067
 800fd90:	080130d8 	.word	0x080130d8

0800fd94 <__multiply>:
 800fd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd98:	4614      	mov	r4, r2
 800fd9a:	690a      	ldr	r2, [r1, #16]
 800fd9c:	6923      	ldr	r3, [r4, #16]
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	bfa8      	it	ge
 800fda2:	4623      	movge	r3, r4
 800fda4:	460f      	mov	r7, r1
 800fda6:	bfa4      	itt	ge
 800fda8:	460c      	movge	r4, r1
 800fdaa:	461f      	movge	r7, r3
 800fdac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fdb0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fdb4:	68a3      	ldr	r3, [r4, #8]
 800fdb6:	6861      	ldr	r1, [r4, #4]
 800fdb8:	eb0a 0609 	add.w	r6, sl, r9
 800fdbc:	42b3      	cmp	r3, r6
 800fdbe:	b085      	sub	sp, #20
 800fdc0:	bfb8      	it	lt
 800fdc2:	3101      	addlt	r1, #1
 800fdc4:	f7ff fe92 	bl	800faec <_Balloc>
 800fdc8:	b930      	cbnz	r0, 800fdd8 <__multiply+0x44>
 800fdca:	4602      	mov	r2, r0
 800fdcc:	4b44      	ldr	r3, [pc, #272]	@ (800fee0 <__multiply+0x14c>)
 800fdce:	4845      	ldr	r0, [pc, #276]	@ (800fee4 <__multiply+0x150>)
 800fdd0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fdd4:	f7fe fc8a 	bl	800e6ec <__assert_func>
 800fdd8:	f100 0514 	add.w	r5, r0, #20
 800fddc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fde0:	462b      	mov	r3, r5
 800fde2:	2200      	movs	r2, #0
 800fde4:	4543      	cmp	r3, r8
 800fde6:	d321      	bcc.n	800fe2c <__multiply+0x98>
 800fde8:	f107 0114 	add.w	r1, r7, #20
 800fdec:	f104 0214 	add.w	r2, r4, #20
 800fdf0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fdf4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fdf8:	9302      	str	r3, [sp, #8]
 800fdfa:	1b13      	subs	r3, r2, r4
 800fdfc:	3b15      	subs	r3, #21
 800fdfe:	f023 0303 	bic.w	r3, r3, #3
 800fe02:	3304      	adds	r3, #4
 800fe04:	f104 0715 	add.w	r7, r4, #21
 800fe08:	42ba      	cmp	r2, r7
 800fe0a:	bf38      	it	cc
 800fe0c:	2304      	movcc	r3, #4
 800fe0e:	9301      	str	r3, [sp, #4]
 800fe10:	9b02      	ldr	r3, [sp, #8]
 800fe12:	9103      	str	r1, [sp, #12]
 800fe14:	428b      	cmp	r3, r1
 800fe16:	d80c      	bhi.n	800fe32 <__multiply+0x9e>
 800fe18:	2e00      	cmp	r6, #0
 800fe1a:	dd03      	ble.n	800fe24 <__multiply+0x90>
 800fe1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d05b      	beq.n	800fedc <__multiply+0x148>
 800fe24:	6106      	str	r6, [r0, #16]
 800fe26:	b005      	add	sp, #20
 800fe28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe2c:	f843 2b04 	str.w	r2, [r3], #4
 800fe30:	e7d8      	b.n	800fde4 <__multiply+0x50>
 800fe32:	f8b1 a000 	ldrh.w	sl, [r1]
 800fe36:	f1ba 0f00 	cmp.w	sl, #0
 800fe3a:	d024      	beq.n	800fe86 <__multiply+0xf2>
 800fe3c:	f104 0e14 	add.w	lr, r4, #20
 800fe40:	46a9      	mov	r9, r5
 800fe42:	f04f 0c00 	mov.w	ip, #0
 800fe46:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe4a:	f8d9 3000 	ldr.w	r3, [r9]
 800fe4e:	fa1f fb87 	uxth.w	fp, r7
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	fb0a 330b 	mla	r3, sl, fp, r3
 800fe58:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fe5c:	f8d9 7000 	ldr.w	r7, [r9]
 800fe60:	4463      	add	r3, ip
 800fe62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe66:	fb0a c70b 	mla	r7, sl, fp, ip
 800fe6a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fe74:	4572      	cmp	r2, lr
 800fe76:	f849 3b04 	str.w	r3, [r9], #4
 800fe7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe7e:	d8e2      	bhi.n	800fe46 <__multiply+0xb2>
 800fe80:	9b01      	ldr	r3, [sp, #4]
 800fe82:	f845 c003 	str.w	ip, [r5, r3]
 800fe86:	9b03      	ldr	r3, [sp, #12]
 800fe88:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fe8c:	3104      	adds	r1, #4
 800fe8e:	f1b9 0f00 	cmp.w	r9, #0
 800fe92:	d021      	beq.n	800fed8 <__multiply+0x144>
 800fe94:	682b      	ldr	r3, [r5, #0]
 800fe96:	f104 0c14 	add.w	ip, r4, #20
 800fe9a:	46ae      	mov	lr, r5
 800fe9c:	f04f 0a00 	mov.w	sl, #0
 800fea0:	f8bc b000 	ldrh.w	fp, [ip]
 800fea4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fea8:	fb09 770b 	mla	r7, r9, fp, r7
 800feac:	4457      	add	r7, sl
 800feae:	b29b      	uxth	r3, r3
 800feb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800feb4:	f84e 3b04 	str.w	r3, [lr], #4
 800feb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800febc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fec0:	f8be 3000 	ldrh.w	r3, [lr]
 800fec4:	fb09 330a 	mla	r3, r9, sl, r3
 800fec8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fecc:	4562      	cmp	r2, ip
 800fece:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fed2:	d8e5      	bhi.n	800fea0 <__multiply+0x10c>
 800fed4:	9f01      	ldr	r7, [sp, #4]
 800fed6:	51eb      	str	r3, [r5, r7]
 800fed8:	3504      	adds	r5, #4
 800feda:	e799      	b.n	800fe10 <__multiply+0x7c>
 800fedc:	3e01      	subs	r6, #1
 800fede:	e79b      	b.n	800fe18 <__multiply+0x84>
 800fee0:	08013067 	.word	0x08013067
 800fee4:	080130d8 	.word	0x080130d8

0800fee8 <__pow5mult>:
 800fee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feec:	4615      	mov	r5, r2
 800feee:	f012 0203 	ands.w	r2, r2, #3
 800fef2:	4607      	mov	r7, r0
 800fef4:	460e      	mov	r6, r1
 800fef6:	d007      	beq.n	800ff08 <__pow5mult+0x20>
 800fef8:	4c25      	ldr	r4, [pc, #148]	@ (800ff90 <__pow5mult+0xa8>)
 800fefa:	3a01      	subs	r2, #1
 800fefc:	2300      	movs	r3, #0
 800fefe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff02:	f7ff fe55 	bl	800fbb0 <__multadd>
 800ff06:	4606      	mov	r6, r0
 800ff08:	10ad      	asrs	r5, r5, #2
 800ff0a:	d03d      	beq.n	800ff88 <__pow5mult+0xa0>
 800ff0c:	69fc      	ldr	r4, [r7, #28]
 800ff0e:	b97c      	cbnz	r4, 800ff30 <__pow5mult+0x48>
 800ff10:	2010      	movs	r0, #16
 800ff12:	f7fc fd41 	bl	800c998 <malloc>
 800ff16:	4602      	mov	r2, r0
 800ff18:	61f8      	str	r0, [r7, #28]
 800ff1a:	b928      	cbnz	r0, 800ff28 <__pow5mult+0x40>
 800ff1c:	4b1d      	ldr	r3, [pc, #116]	@ (800ff94 <__pow5mult+0xac>)
 800ff1e:	481e      	ldr	r0, [pc, #120]	@ (800ff98 <__pow5mult+0xb0>)
 800ff20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ff24:	f7fe fbe2 	bl	800e6ec <__assert_func>
 800ff28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff2c:	6004      	str	r4, [r0, #0]
 800ff2e:	60c4      	str	r4, [r0, #12]
 800ff30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ff34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff38:	b94c      	cbnz	r4, 800ff4e <__pow5mult+0x66>
 800ff3a:	f240 2171 	movw	r1, #625	@ 0x271
 800ff3e:	4638      	mov	r0, r7
 800ff40:	f7ff ff12 	bl	800fd68 <__i2b>
 800ff44:	2300      	movs	r3, #0
 800ff46:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	6003      	str	r3, [r0, #0]
 800ff4e:	f04f 0900 	mov.w	r9, #0
 800ff52:	07eb      	lsls	r3, r5, #31
 800ff54:	d50a      	bpl.n	800ff6c <__pow5mult+0x84>
 800ff56:	4631      	mov	r1, r6
 800ff58:	4622      	mov	r2, r4
 800ff5a:	4638      	mov	r0, r7
 800ff5c:	f7ff ff1a 	bl	800fd94 <__multiply>
 800ff60:	4631      	mov	r1, r6
 800ff62:	4680      	mov	r8, r0
 800ff64:	4638      	mov	r0, r7
 800ff66:	f7ff fe01 	bl	800fb6c <_Bfree>
 800ff6a:	4646      	mov	r6, r8
 800ff6c:	106d      	asrs	r5, r5, #1
 800ff6e:	d00b      	beq.n	800ff88 <__pow5mult+0xa0>
 800ff70:	6820      	ldr	r0, [r4, #0]
 800ff72:	b938      	cbnz	r0, 800ff84 <__pow5mult+0x9c>
 800ff74:	4622      	mov	r2, r4
 800ff76:	4621      	mov	r1, r4
 800ff78:	4638      	mov	r0, r7
 800ff7a:	f7ff ff0b 	bl	800fd94 <__multiply>
 800ff7e:	6020      	str	r0, [r4, #0]
 800ff80:	f8c0 9000 	str.w	r9, [r0]
 800ff84:	4604      	mov	r4, r0
 800ff86:	e7e4      	b.n	800ff52 <__pow5mult+0x6a>
 800ff88:	4630      	mov	r0, r6
 800ff8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff8e:	bf00      	nop
 800ff90:	08013134 	.word	0x08013134
 800ff94:	08012f4d 	.word	0x08012f4d
 800ff98:	080130d8 	.word	0x080130d8

0800ff9c <__lshift>:
 800ff9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa0:	460c      	mov	r4, r1
 800ffa2:	6849      	ldr	r1, [r1, #4]
 800ffa4:	6923      	ldr	r3, [r4, #16]
 800ffa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ffaa:	68a3      	ldr	r3, [r4, #8]
 800ffac:	4607      	mov	r7, r0
 800ffae:	4691      	mov	r9, r2
 800ffb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ffb4:	f108 0601 	add.w	r6, r8, #1
 800ffb8:	42b3      	cmp	r3, r6
 800ffba:	db0b      	blt.n	800ffd4 <__lshift+0x38>
 800ffbc:	4638      	mov	r0, r7
 800ffbe:	f7ff fd95 	bl	800faec <_Balloc>
 800ffc2:	4605      	mov	r5, r0
 800ffc4:	b948      	cbnz	r0, 800ffda <__lshift+0x3e>
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	4b28      	ldr	r3, [pc, #160]	@ (801006c <__lshift+0xd0>)
 800ffca:	4829      	ldr	r0, [pc, #164]	@ (8010070 <__lshift+0xd4>)
 800ffcc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ffd0:	f7fe fb8c 	bl	800e6ec <__assert_func>
 800ffd4:	3101      	adds	r1, #1
 800ffd6:	005b      	lsls	r3, r3, #1
 800ffd8:	e7ee      	b.n	800ffb8 <__lshift+0x1c>
 800ffda:	2300      	movs	r3, #0
 800ffdc:	f100 0114 	add.w	r1, r0, #20
 800ffe0:	f100 0210 	add.w	r2, r0, #16
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	4553      	cmp	r3, sl
 800ffe8:	db33      	blt.n	8010052 <__lshift+0xb6>
 800ffea:	6920      	ldr	r0, [r4, #16]
 800ffec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fff0:	f104 0314 	add.w	r3, r4, #20
 800fff4:	f019 091f 	ands.w	r9, r9, #31
 800fff8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fffc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010000:	d02b      	beq.n	801005a <__lshift+0xbe>
 8010002:	f1c9 0e20 	rsb	lr, r9, #32
 8010006:	468a      	mov	sl, r1
 8010008:	2200      	movs	r2, #0
 801000a:	6818      	ldr	r0, [r3, #0]
 801000c:	fa00 f009 	lsl.w	r0, r0, r9
 8010010:	4310      	orrs	r0, r2
 8010012:	f84a 0b04 	str.w	r0, [sl], #4
 8010016:	f853 2b04 	ldr.w	r2, [r3], #4
 801001a:	459c      	cmp	ip, r3
 801001c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010020:	d8f3      	bhi.n	801000a <__lshift+0x6e>
 8010022:	ebac 0304 	sub.w	r3, ip, r4
 8010026:	3b15      	subs	r3, #21
 8010028:	f023 0303 	bic.w	r3, r3, #3
 801002c:	3304      	adds	r3, #4
 801002e:	f104 0015 	add.w	r0, r4, #21
 8010032:	4584      	cmp	ip, r0
 8010034:	bf38      	it	cc
 8010036:	2304      	movcc	r3, #4
 8010038:	50ca      	str	r2, [r1, r3]
 801003a:	b10a      	cbz	r2, 8010040 <__lshift+0xa4>
 801003c:	f108 0602 	add.w	r6, r8, #2
 8010040:	3e01      	subs	r6, #1
 8010042:	4638      	mov	r0, r7
 8010044:	612e      	str	r6, [r5, #16]
 8010046:	4621      	mov	r1, r4
 8010048:	f7ff fd90 	bl	800fb6c <_Bfree>
 801004c:	4628      	mov	r0, r5
 801004e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010052:	f842 0f04 	str.w	r0, [r2, #4]!
 8010056:	3301      	adds	r3, #1
 8010058:	e7c5      	b.n	800ffe6 <__lshift+0x4a>
 801005a:	3904      	subs	r1, #4
 801005c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010060:	f841 2f04 	str.w	r2, [r1, #4]!
 8010064:	459c      	cmp	ip, r3
 8010066:	d8f9      	bhi.n	801005c <__lshift+0xc0>
 8010068:	e7ea      	b.n	8010040 <__lshift+0xa4>
 801006a:	bf00      	nop
 801006c:	08013067 	.word	0x08013067
 8010070:	080130d8 	.word	0x080130d8

08010074 <__mcmp>:
 8010074:	690a      	ldr	r2, [r1, #16]
 8010076:	4603      	mov	r3, r0
 8010078:	6900      	ldr	r0, [r0, #16]
 801007a:	1a80      	subs	r0, r0, r2
 801007c:	b530      	push	{r4, r5, lr}
 801007e:	d10e      	bne.n	801009e <__mcmp+0x2a>
 8010080:	3314      	adds	r3, #20
 8010082:	3114      	adds	r1, #20
 8010084:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010088:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801008c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010090:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010094:	4295      	cmp	r5, r2
 8010096:	d003      	beq.n	80100a0 <__mcmp+0x2c>
 8010098:	d205      	bcs.n	80100a6 <__mcmp+0x32>
 801009a:	f04f 30ff 	mov.w	r0, #4294967295
 801009e:	bd30      	pop	{r4, r5, pc}
 80100a0:	42a3      	cmp	r3, r4
 80100a2:	d3f3      	bcc.n	801008c <__mcmp+0x18>
 80100a4:	e7fb      	b.n	801009e <__mcmp+0x2a>
 80100a6:	2001      	movs	r0, #1
 80100a8:	e7f9      	b.n	801009e <__mcmp+0x2a>
	...

080100ac <__mdiff>:
 80100ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b0:	4689      	mov	r9, r1
 80100b2:	4606      	mov	r6, r0
 80100b4:	4611      	mov	r1, r2
 80100b6:	4648      	mov	r0, r9
 80100b8:	4614      	mov	r4, r2
 80100ba:	f7ff ffdb 	bl	8010074 <__mcmp>
 80100be:	1e05      	subs	r5, r0, #0
 80100c0:	d112      	bne.n	80100e8 <__mdiff+0x3c>
 80100c2:	4629      	mov	r1, r5
 80100c4:	4630      	mov	r0, r6
 80100c6:	f7ff fd11 	bl	800faec <_Balloc>
 80100ca:	4602      	mov	r2, r0
 80100cc:	b928      	cbnz	r0, 80100da <__mdiff+0x2e>
 80100ce:	4b3f      	ldr	r3, [pc, #252]	@ (80101cc <__mdiff+0x120>)
 80100d0:	f240 2137 	movw	r1, #567	@ 0x237
 80100d4:	483e      	ldr	r0, [pc, #248]	@ (80101d0 <__mdiff+0x124>)
 80100d6:	f7fe fb09 	bl	800e6ec <__assert_func>
 80100da:	2301      	movs	r3, #1
 80100dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80100e0:	4610      	mov	r0, r2
 80100e2:	b003      	add	sp, #12
 80100e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e8:	bfbc      	itt	lt
 80100ea:	464b      	movlt	r3, r9
 80100ec:	46a1      	movlt	r9, r4
 80100ee:	4630      	mov	r0, r6
 80100f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80100f4:	bfba      	itte	lt
 80100f6:	461c      	movlt	r4, r3
 80100f8:	2501      	movlt	r5, #1
 80100fa:	2500      	movge	r5, #0
 80100fc:	f7ff fcf6 	bl	800faec <_Balloc>
 8010100:	4602      	mov	r2, r0
 8010102:	b918      	cbnz	r0, 801010c <__mdiff+0x60>
 8010104:	4b31      	ldr	r3, [pc, #196]	@ (80101cc <__mdiff+0x120>)
 8010106:	f240 2145 	movw	r1, #581	@ 0x245
 801010a:	e7e3      	b.n	80100d4 <__mdiff+0x28>
 801010c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010110:	6926      	ldr	r6, [r4, #16]
 8010112:	60c5      	str	r5, [r0, #12]
 8010114:	f109 0310 	add.w	r3, r9, #16
 8010118:	f109 0514 	add.w	r5, r9, #20
 801011c:	f104 0e14 	add.w	lr, r4, #20
 8010120:	f100 0b14 	add.w	fp, r0, #20
 8010124:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010128:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801012c:	9301      	str	r3, [sp, #4]
 801012e:	46d9      	mov	r9, fp
 8010130:	f04f 0c00 	mov.w	ip, #0
 8010134:	9b01      	ldr	r3, [sp, #4]
 8010136:	f85e 0b04 	ldr.w	r0, [lr], #4
 801013a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801013e:	9301      	str	r3, [sp, #4]
 8010140:	fa1f f38a 	uxth.w	r3, sl
 8010144:	4619      	mov	r1, r3
 8010146:	b283      	uxth	r3, r0
 8010148:	1acb      	subs	r3, r1, r3
 801014a:	0c00      	lsrs	r0, r0, #16
 801014c:	4463      	add	r3, ip
 801014e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010152:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010156:	b29b      	uxth	r3, r3
 8010158:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801015c:	4576      	cmp	r6, lr
 801015e:	f849 3b04 	str.w	r3, [r9], #4
 8010162:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010166:	d8e5      	bhi.n	8010134 <__mdiff+0x88>
 8010168:	1b33      	subs	r3, r6, r4
 801016a:	3b15      	subs	r3, #21
 801016c:	f023 0303 	bic.w	r3, r3, #3
 8010170:	3415      	adds	r4, #21
 8010172:	3304      	adds	r3, #4
 8010174:	42a6      	cmp	r6, r4
 8010176:	bf38      	it	cc
 8010178:	2304      	movcc	r3, #4
 801017a:	441d      	add	r5, r3
 801017c:	445b      	add	r3, fp
 801017e:	461e      	mov	r6, r3
 8010180:	462c      	mov	r4, r5
 8010182:	4544      	cmp	r4, r8
 8010184:	d30e      	bcc.n	80101a4 <__mdiff+0xf8>
 8010186:	f108 0103 	add.w	r1, r8, #3
 801018a:	1b49      	subs	r1, r1, r5
 801018c:	f021 0103 	bic.w	r1, r1, #3
 8010190:	3d03      	subs	r5, #3
 8010192:	45a8      	cmp	r8, r5
 8010194:	bf38      	it	cc
 8010196:	2100      	movcc	r1, #0
 8010198:	440b      	add	r3, r1
 801019a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801019e:	b191      	cbz	r1, 80101c6 <__mdiff+0x11a>
 80101a0:	6117      	str	r7, [r2, #16]
 80101a2:	e79d      	b.n	80100e0 <__mdiff+0x34>
 80101a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80101a8:	46e6      	mov	lr, ip
 80101aa:	0c08      	lsrs	r0, r1, #16
 80101ac:	fa1c fc81 	uxtah	ip, ip, r1
 80101b0:	4471      	add	r1, lr
 80101b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80101b6:	b289      	uxth	r1, r1
 80101b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80101bc:	f846 1b04 	str.w	r1, [r6], #4
 80101c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80101c4:	e7dd      	b.n	8010182 <__mdiff+0xd6>
 80101c6:	3f01      	subs	r7, #1
 80101c8:	e7e7      	b.n	801019a <__mdiff+0xee>
 80101ca:	bf00      	nop
 80101cc:	08013067 	.word	0x08013067
 80101d0:	080130d8 	.word	0x080130d8

080101d4 <__ulp>:
 80101d4:	b082      	sub	sp, #8
 80101d6:	ed8d 0b00 	vstr	d0, [sp]
 80101da:	9a01      	ldr	r2, [sp, #4]
 80101dc:	4b0f      	ldr	r3, [pc, #60]	@ (801021c <__ulp+0x48>)
 80101de:	4013      	ands	r3, r2
 80101e0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	dc08      	bgt.n	80101fa <__ulp+0x26>
 80101e8:	425b      	negs	r3, r3
 80101ea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80101ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 80101f2:	da04      	bge.n	80101fe <__ulp+0x2a>
 80101f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80101f8:	4113      	asrs	r3, r2
 80101fa:	2200      	movs	r2, #0
 80101fc:	e008      	b.n	8010210 <__ulp+0x3c>
 80101fe:	f1a2 0314 	sub.w	r3, r2, #20
 8010202:	2b1e      	cmp	r3, #30
 8010204:	bfda      	itte	le
 8010206:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801020a:	40da      	lsrle	r2, r3
 801020c:	2201      	movgt	r2, #1
 801020e:	2300      	movs	r3, #0
 8010210:	4619      	mov	r1, r3
 8010212:	4610      	mov	r0, r2
 8010214:	ec41 0b10 	vmov	d0, r0, r1
 8010218:	b002      	add	sp, #8
 801021a:	4770      	bx	lr
 801021c:	7ff00000 	.word	0x7ff00000

08010220 <__b2d>:
 8010220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010224:	6906      	ldr	r6, [r0, #16]
 8010226:	f100 0814 	add.w	r8, r0, #20
 801022a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801022e:	1f37      	subs	r7, r6, #4
 8010230:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010234:	4610      	mov	r0, r2
 8010236:	f7ff fd4b 	bl	800fcd0 <__hi0bits>
 801023a:	f1c0 0320 	rsb	r3, r0, #32
 801023e:	280a      	cmp	r0, #10
 8010240:	600b      	str	r3, [r1, #0]
 8010242:	491b      	ldr	r1, [pc, #108]	@ (80102b0 <__b2d+0x90>)
 8010244:	dc15      	bgt.n	8010272 <__b2d+0x52>
 8010246:	f1c0 0c0b 	rsb	ip, r0, #11
 801024a:	fa22 f30c 	lsr.w	r3, r2, ip
 801024e:	45b8      	cmp	r8, r7
 8010250:	ea43 0501 	orr.w	r5, r3, r1
 8010254:	bf34      	ite	cc
 8010256:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801025a:	2300      	movcs	r3, #0
 801025c:	3015      	adds	r0, #21
 801025e:	fa02 f000 	lsl.w	r0, r2, r0
 8010262:	fa23 f30c 	lsr.w	r3, r3, ip
 8010266:	4303      	orrs	r3, r0
 8010268:	461c      	mov	r4, r3
 801026a:	ec45 4b10 	vmov	d0, r4, r5
 801026e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010272:	45b8      	cmp	r8, r7
 8010274:	bf3a      	itte	cc
 8010276:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801027a:	f1a6 0708 	subcc.w	r7, r6, #8
 801027e:	2300      	movcs	r3, #0
 8010280:	380b      	subs	r0, #11
 8010282:	d012      	beq.n	80102aa <__b2d+0x8a>
 8010284:	f1c0 0120 	rsb	r1, r0, #32
 8010288:	fa23 f401 	lsr.w	r4, r3, r1
 801028c:	4082      	lsls	r2, r0
 801028e:	4322      	orrs	r2, r4
 8010290:	4547      	cmp	r7, r8
 8010292:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010296:	bf8c      	ite	hi
 8010298:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801029c:	2200      	movls	r2, #0
 801029e:	4083      	lsls	r3, r0
 80102a0:	40ca      	lsrs	r2, r1
 80102a2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80102a6:	4313      	orrs	r3, r2
 80102a8:	e7de      	b.n	8010268 <__b2d+0x48>
 80102aa:	ea42 0501 	orr.w	r5, r2, r1
 80102ae:	e7db      	b.n	8010268 <__b2d+0x48>
 80102b0:	3ff00000 	.word	0x3ff00000

080102b4 <__d2b>:
 80102b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80102b8:	460f      	mov	r7, r1
 80102ba:	2101      	movs	r1, #1
 80102bc:	ec59 8b10 	vmov	r8, r9, d0
 80102c0:	4616      	mov	r6, r2
 80102c2:	f7ff fc13 	bl	800faec <_Balloc>
 80102c6:	4604      	mov	r4, r0
 80102c8:	b930      	cbnz	r0, 80102d8 <__d2b+0x24>
 80102ca:	4602      	mov	r2, r0
 80102cc:	4b23      	ldr	r3, [pc, #140]	@ (801035c <__d2b+0xa8>)
 80102ce:	4824      	ldr	r0, [pc, #144]	@ (8010360 <__d2b+0xac>)
 80102d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80102d4:	f7fe fa0a 	bl	800e6ec <__assert_func>
 80102d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80102dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80102e0:	b10d      	cbz	r5, 80102e6 <__d2b+0x32>
 80102e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80102e6:	9301      	str	r3, [sp, #4]
 80102e8:	f1b8 0300 	subs.w	r3, r8, #0
 80102ec:	d023      	beq.n	8010336 <__d2b+0x82>
 80102ee:	4668      	mov	r0, sp
 80102f0:	9300      	str	r3, [sp, #0]
 80102f2:	f7ff fd0c 	bl	800fd0e <__lo0bits>
 80102f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80102fa:	b1d0      	cbz	r0, 8010332 <__d2b+0x7e>
 80102fc:	f1c0 0320 	rsb	r3, r0, #32
 8010300:	fa02 f303 	lsl.w	r3, r2, r3
 8010304:	430b      	orrs	r3, r1
 8010306:	40c2      	lsrs	r2, r0
 8010308:	6163      	str	r3, [r4, #20]
 801030a:	9201      	str	r2, [sp, #4]
 801030c:	9b01      	ldr	r3, [sp, #4]
 801030e:	61a3      	str	r3, [r4, #24]
 8010310:	2b00      	cmp	r3, #0
 8010312:	bf0c      	ite	eq
 8010314:	2201      	moveq	r2, #1
 8010316:	2202      	movne	r2, #2
 8010318:	6122      	str	r2, [r4, #16]
 801031a:	b1a5      	cbz	r5, 8010346 <__d2b+0x92>
 801031c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010320:	4405      	add	r5, r0
 8010322:	603d      	str	r5, [r7, #0]
 8010324:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010328:	6030      	str	r0, [r6, #0]
 801032a:	4620      	mov	r0, r4
 801032c:	b003      	add	sp, #12
 801032e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010332:	6161      	str	r1, [r4, #20]
 8010334:	e7ea      	b.n	801030c <__d2b+0x58>
 8010336:	a801      	add	r0, sp, #4
 8010338:	f7ff fce9 	bl	800fd0e <__lo0bits>
 801033c:	9b01      	ldr	r3, [sp, #4]
 801033e:	6163      	str	r3, [r4, #20]
 8010340:	3020      	adds	r0, #32
 8010342:	2201      	movs	r2, #1
 8010344:	e7e8      	b.n	8010318 <__d2b+0x64>
 8010346:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801034a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801034e:	6038      	str	r0, [r7, #0]
 8010350:	6918      	ldr	r0, [r3, #16]
 8010352:	f7ff fcbd 	bl	800fcd0 <__hi0bits>
 8010356:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801035a:	e7e5      	b.n	8010328 <__d2b+0x74>
 801035c:	08013067 	.word	0x08013067
 8010360:	080130d8 	.word	0x080130d8

08010364 <__ratio>:
 8010364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010368:	b085      	sub	sp, #20
 801036a:	e9cd 1000 	strd	r1, r0, [sp]
 801036e:	a902      	add	r1, sp, #8
 8010370:	f7ff ff56 	bl	8010220 <__b2d>
 8010374:	9800      	ldr	r0, [sp, #0]
 8010376:	a903      	add	r1, sp, #12
 8010378:	ec55 4b10 	vmov	r4, r5, d0
 801037c:	f7ff ff50 	bl	8010220 <__b2d>
 8010380:	9b01      	ldr	r3, [sp, #4]
 8010382:	6919      	ldr	r1, [r3, #16]
 8010384:	9b00      	ldr	r3, [sp, #0]
 8010386:	691b      	ldr	r3, [r3, #16]
 8010388:	1ac9      	subs	r1, r1, r3
 801038a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801038e:	1a9b      	subs	r3, r3, r2
 8010390:	ec5b ab10 	vmov	sl, fp, d0
 8010394:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010398:	2b00      	cmp	r3, #0
 801039a:	bfce      	itee	gt
 801039c:	462a      	movgt	r2, r5
 801039e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80103a2:	465a      	movle	r2, fp
 80103a4:	462f      	mov	r7, r5
 80103a6:	46d9      	mov	r9, fp
 80103a8:	bfcc      	ite	gt
 80103aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80103ae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80103b2:	464b      	mov	r3, r9
 80103b4:	4652      	mov	r2, sl
 80103b6:	4620      	mov	r0, r4
 80103b8:	4639      	mov	r1, r7
 80103ba:	f7f0 fa4f 	bl	800085c <__aeabi_ddiv>
 80103be:	ec41 0b10 	vmov	d0, r0, r1
 80103c2:	b005      	add	sp, #20
 80103c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103c8 <__copybits>:
 80103c8:	3901      	subs	r1, #1
 80103ca:	b570      	push	{r4, r5, r6, lr}
 80103cc:	1149      	asrs	r1, r1, #5
 80103ce:	6914      	ldr	r4, [r2, #16]
 80103d0:	3101      	adds	r1, #1
 80103d2:	f102 0314 	add.w	r3, r2, #20
 80103d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80103da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80103de:	1f05      	subs	r5, r0, #4
 80103e0:	42a3      	cmp	r3, r4
 80103e2:	d30c      	bcc.n	80103fe <__copybits+0x36>
 80103e4:	1aa3      	subs	r3, r4, r2
 80103e6:	3b11      	subs	r3, #17
 80103e8:	f023 0303 	bic.w	r3, r3, #3
 80103ec:	3211      	adds	r2, #17
 80103ee:	42a2      	cmp	r2, r4
 80103f0:	bf88      	it	hi
 80103f2:	2300      	movhi	r3, #0
 80103f4:	4418      	add	r0, r3
 80103f6:	2300      	movs	r3, #0
 80103f8:	4288      	cmp	r0, r1
 80103fa:	d305      	bcc.n	8010408 <__copybits+0x40>
 80103fc:	bd70      	pop	{r4, r5, r6, pc}
 80103fe:	f853 6b04 	ldr.w	r6, [r3], #4
 8010402:	f845 6f04 	str.w	r6, [r5, #4]!
 8010406:	e7eb      	b.n	80103e0 <__copybits+0x18>
 8010408:	f840 3b04 	str.w	r3, [r0], #4
 801040c:	e7f4      	b.n	80103f8 <__copybits+0x30>

0801040e <__any_on>:
 801040e:	f100 0214 	add.w	r2, r0, #20
 8010412:	6900      	ldr	r0, [r0, #16]
 8010414:	114b      	asrs	r3, r1, #5
 8010416:	4298      	cmp	r0, r3
 8010418:	b510      	push	{r4, lr}
 801041a:	db11      	blt.n	8010440 <__any_on+0x32>
 801041c:	dd0a      	ble.n	8010434 <__any_on+0x26>
 801041e:	f011 011f 	ands.w	r1, r1, #31
 8010422:	d007      	beq.n	8010434 <__any_on+0x26>
 8010424:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010428:	fa24 f001 	lsr.w	r0, r4, r1
 801042c:	fa00 f101 	lsl.w	r1, r0, r1
 8010430:	428c      	cmp	r4, r1
 8010432:	d10b      	bne.n	801044c <__any_on+0x3e>
 8010434:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010438:	4293      	cmp	r3, r2
 801043a:	d803      	bhi.n	8010444 <__any_on+0x36>
 801043c:	2000      	movs	r0, #0
 801043e:	bd10      	pop	{r4, pc}
 8010440:	4603      	mov	r3, r0
 8010442:	e7f7      	b.n	8010434 <__any_on+0x26>
 8010444:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010448:	2900      	cmp	r1, #0
 801044a:	d0f5      	beq.n	8010438 <__any_on+0x2a>
 801044c:	2001      	movs	r0, #1
 801044e:	e7f6      	b.n	801043e <__any_on+0x30>

08010450 <__ascii_wctomb>:
 8010450:	4603      	mov	r3, r0
 8010452:	4608      	mov	r0, r1
 8010454:	b141      	cbz	r1, 8010468 <__ascii_wctomb+0x18>
 8010456:	2aff      	cmp	r2, #255	@ 0xff
 8010458:	d904      	bls.n	8010464 <__ascii_wctomb+0x14>
 801045a:	228a      	movs	r2, #138	@ 0x8a
 801045c:	601a      	str	r2, [r3, #0]
 801045e:	f04f 30ff 	mov.w	r0, #4294967295
 8010462:	4770      	bx	lr
 8010464:	700a      	strb	r2, [r1, #0]
 8010466:	2001      	movs	r0, #1
 8010468:	4770      	bx	lr

0801046a <__ssputs_r>:
 801046a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801046e:	688e      	ldr	r6, [r1, #8]
 8010470:	461f      	mov	r7, r3
 8010472:	42be      	cmp	r6, r7
 8010474:	680b      	ldr	r3, [r1, #0]
 8010476:	4682      	mov	sl, r0
 8010478:	460c      	mov	r4, r1
 801047a:	4690      	mov	r8, r2
 801047c:	d82d      	bhi.n	80104da <__ssputs_r+0x70>
 801047e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010482:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010486:	d026      	beq.n	80104d6 <__ssputs_r+0x6c>
 8010488:	6965      	ldr	r5, [r4, #20]
 801048a:	6909      	ldr	r1, [r1, #16]
 801048c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010490:	eba3 0901 	sub.w	r9, r3, r1
 8010494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010498:	1c7b      	adds	r3, r7, #1
 801049a:	444b      	add	r3, r9
 801049c:	106d      	asrs	r5, r5, #1
 801049e:	429d      	cmp	r5, r3
 80104a0:	bf38      	it	cc
 80104a2:	461d      	movcc	r5, r3
 80104a4:	0553      	lsls	r3, r2, #21
 80104a6:	d527      	bpl.n	80104f8 <__ssputs_r+0x8e>
 80104a8:	4629      	mov	r1, r5
 80104aa:	f7fc faa7 	bl	800c9fc <_malloc_r>
 80104ae:	4606      	mov	r6, r0
 80104b0:	b360      	cbz	r0, 801050c <__ssputs_r+0xa2>
 80104b2:	6921      	ldr	r1, [r4, #16]
 80104b4:	464a      	mov	r2, r9
 80104b6:	f7fe f8fc 	bl	800e6b2 <memcpy>
 80104ba:	89a3      	ldrh	r3, [r4, #12]
 80104bc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80104c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104c4:	81a3      	strh	r3, [r4, #12]
 80104c6:	6126      	str	r6, [r4, #16]
 80104c8:	6165      	str	r5, [r4, #20]
 80104ca:	444e      	add	r6, r9
 80104cc:	eba5 0509 	sub.w	r5, r5, r9
 80104d0:	6026      	str	r6, [r4, #0]
 80104d2:	60a5      	str	r5, [r4, #8]
 80104d4:	463e      	mov	r6, r7
 80104d6:	42be      	cmp	r6, r7
 80104d8:	d900      	bls.n	80104dc <__ssputs_r+0x72>
 80104da:	463e      	mov	r6, r7
 80104dc:	6820      	ldr	r0, [r4, #0]
 80104de:	4632      	mov	r2, r6
 80104e0:	4641      	mov	r1, r8
 80104e2:	f000 f9d7 	bl	8010894 <memmove>
 80104e6:	68a3      	ldr	r3, [r4, #8]
 80104e8:	1b9b      	subs	r3, r3, r6
 80104ea:	60a3      	str	r3, [r4, #8]
 80104ec:	6823      	ldr	r3, [r4, #0]
 80104ee:	4433      	add	r3, r6
 80104f0:	6023      	str	r3, [r4, #0]
 80104f2:	2000      	movs	r0, #0
 80104f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104f8:	462a      	mov	r2, r5
 80104fa:	f000 fa00 	bl	80108fe <_realloc_r>
 80104fe:	4606      	mov	r6, r0
 8010500:	2800      	cmp	r0, #0
 8010502:	d1e0      	bne.n	80104c6 <__ssputs_r+0x5c>
 8010504:	6921      	ldr	r1, [r4, #16]
 8010506:	4650      	mov	r0, sl
 8010508:	f7fe ff5a 	bl	800f3c0 <_free_r>
 801050c:	230c      	movs	r3, #12
 801050e:	f8ca 3000 	str.w	r3, [sl]
 8010512:	89a3      	ldrh	r3, [r4, #12]
 8010514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010518:	81a3      	strh	r3, [r4, #12]
 801051a:	f04f 30ff 	mov.w	r0, #4294967295
 801051e:	e7e9      	b.n	80104f4 <__ssputs_r+0x8a>

08010520 <_svfiprintf_r>:
 8010520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010524:	4698      	mov	r8, r3
 8010526:	898b      	ldrh	r3, [r1, #12]
 8010528:	061b      	lsls	r3, r3, #24
 801052a:	b09d      	sub	sp, #116	@ 0x74
 801052c:	4607      	mov	r7, r0
 801052e:	460d      	mov	r5, r1
 8010530:	4614      	mov	r4, r2
 8010532:	d510      	bpl.n	8010556 <_svfiprintf_r+0x36>
 8010534:	690b      	ldr	r3, [r1, #16]
 8010536:	b973      	cbnz	r3, 8010556 <_svfiprintf_r+0x36>
 8010538:	2140      	movs	r1, #64	@ 0x40
 801053a:	f7fc fa5f 	bl	800c9fc <_malloc_r>
 801053e:	6028      	str	r0, [r5, #0]
 8010540:	6128      	str	r0, [r5, #16]
 8010542:	b930      	cbnz	r0, 8010552 <_svfiprintf_r+0x32>
 8010544:	230c      	movs	r3, #12
 8010546:	603b      	str	r3, [r7, #0]
 8010548:	f04f 30ff 	mov.w	r0, #4294967295
 801054c:	b01d      	add	sp, #116	@ 0x74
 801054e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010552:	2340      	movs	r3, #64	@ 0x40
 8010554:	616b      	str	r3, [r5, #20]
 8010556:	2300      	movs	r3, #0
 8010558:	9309      	str	r3, [sp, #36]	@ 0x24
 801055a:	2320      	movs	r3, #32
 801055c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010560:	f8cd 800c 	str.w	r8, [sp, #12]
 8010564:	2330      	movs	r3, #48	@ 0x30
 8010566:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010704 <_svfiprintf_r+0x1e4>
 801056a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801056e:	f04f 0901 	mov.w	r9, #1
 8010572:	4623      	mov	r3, r4
 8010574:	469a      	mov	sl, r3
 8010576:	f813 2b01 	ldrb.w	r2, [r3], #1
 801057a:	b10a      	cbz	r2, 8010580 <_svfiprintf_r+0x60>
 801057c:	2a25      	cmp	r2, #37	@ 0x25
 801057e:	d1f9      	bne.n	8010574 <_svfiprintf_r+0x54>
 8010580:	ebba 0b04 	subs.w	fp, sl, r4
 8010584:	d00b      	beq.n	801059e <_svfiprintf_r+0x7e>
 8010586:	465b      	mov	r3, fp
 8010588:	4622      	mov	r2, r4
 801058a:	4629      	mov	r1, r5
 801058c:	4638      	mov	r0, r7
 801058e:	f7ff ff6c 	bl	801046a <__ssputs_r>
 8010592:	3001      	adds	r0, #1
 8010594:	f000 80a7 	beq.w	80106e6 <_svfiprintf_r+0x1c6>
 8010598:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801059a:	445a      	add	r2, fp
 801059c:	9209      	str	r2, [sp, #36]	@ 0x24
 801059e:	f89a 3000 	ldrb.w	r3, [sl]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	f000 809f 	beq.w	80106e6 <_svfiprintf_r+0x1c6>
 80105a8:	2300      	movs	r3, #0
 80105aa:	f04f 32ff 	mov.w	r2, #4294967295
 80105ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105b2:	f10a 0a01 	add.w	sl, sl, #1
 80105b6:	9304      	str	r3, [sp, #16]
 80105b8:	9307      	str	r3, [sp, #28]
 80105ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105be:	931a      	str	r3, [sp, #104]	@ 0x68
 80105c0:	4654      	mov	r4, sl
 80105c2:	2205      	movs	r2, #5
 80105c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105c8:	484e      	ldr	r0, [pc, #312]	@ (8010704 <_svfiprintf_r+0x1e4>)
 80105ca:	f7ef fe09 	bl	80001e0 <memchr>
 80105ce:	9a04      	ldr	r2, [sp, #16]
 80105d0:	b9d8      	cbnz	r0, 801060a <_svfiprintf_r+0xea>
 80105d2:	06d0      	lsls	r0, r2, #27
 80105d4:	bf44      	itt	mi
 80105d6:	2320      	movmi	r3, #32
 80105d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105dc:	0711      	lsls	r1, r2, #28
 80105de:	bf44      	itt	mi
 80105e0:	232b      	movmi	r3, #43	@ 0x2b
 80105e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80105e6:	f89a 3000 	ldrb.w	r3, [sl]
 80105ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80105ec:	d015      	beq.n	801061a <_svfiprintf_r+0xfa>
 80105ee:	9a07      	ldr	r2, [sp, #28]
 80105f0:	4654      	mov	r4, sl
 80105f2:	2000      	movs	r0, #0
 80105f4:	f04f 0c0a 	mov.w	ip, #10
 80105f8:	4621      	mov	r1, r4
 80105fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105fe:	3b30      	subs	r3, #48	@ 0x30
 8010600:	2b09      	cmp	r3, #9
 8010602:	d94b      	bls.n	801069c <_svfiprintf_r+0x17c>
 8010604:	b1b0      	cbz	r0, 8010634 <_svfiprintf_r+0x114>
 8010606:	9207      	str	r2, [sp, #28]
 8010608:	e014      	b.n	8010634 <_svfiprintf_r+0x114>
 801060a:	eba0 0308 	sub.w	r3, r0, r8
 801060e:	fa09 f303 	lsl.w	r3, r9, r3
 8010612:	4313      	orrs	r3, r2
 8010614:	9304      	str	r3, [sp, #16]
 8010616:	46a2      	mov	sl, r4
 8010618:	e7d2      	b.n	80105c0 <_svfiprintf_r+0xa0>
 801061a:	9b03      	ldr	r3, [sp, #12]
 801061c:	1d19      	adds	r1, r3, #4
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	9103      	str	r1, [sp, #12]
 8010622:	2b00      	cmp	r3, #0
 8010624:	bfbb      	ittet	lt
 8010626:	425b      	neglt	r3, r3
 8010628:	f042 0202 	orrlt.w	r2, r2, #2
 801062c:	9307      	strge	r3, [sp, #28]
 801062e:	9307      	strlt	r3, [sp, #28]
 8010630:	bfb8      	it	lt
 8010632:	9204      	strlt	r2, [sp, #16]
 8010634:	7823      	ldrb	r3, [r4, #0]
 8010636:	2b2e      	cmp	r3, #46	@ 0x2e
 8010638:	d10a      	bne.n	8010650 <_svfiprintf_r+0x130>
 801063a:	7863      	ldrb	r3, [r4, #1]
 801063c:	2b2a      	cmp	r3, #42	@ 0x2a
 801063e:	d132      	bne.n	80106a6 <_svfiprintf_r+0x186>
 8010640:	9b03      	ldr	r3, [sp, #12]
 8010642:	1d1a      	adds	r2, r3, #4
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	9203      	str	r2, [sp, #12]
 8010648:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801064c:	3402      	adds	r4, #2
 801064e:	9305      	str	r3, [sp, #20]
 8010650:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010714 <_svfiprintf_r+0x1f4>
 8010654:	7821      	ldrb	r1, [r4, #0]
 8010656:	2203      	movs	r2, #3
 8010658:	4650      	mov	r0, sl
 801065a:	f7ef fdc1 	bl	80001e0 <memchr>
 801065e:	b138      	cbz	r0, 8010670 <_svfiprintf_r+0x150>
 8010660:	9b04      	ldr	r3, [sp, #16]
 8010662:	eba0 000a 	sub.w	r0, r0, sl
 8010666:	2240      	movs	r2, #64	@ 0x40
 8010668:	4082      	lsls	r2, r0
 801066a:	4313      	orrs	r3, r2
 801066c:	3401      	adds	r4, #1
 801066e:	9304      	str	r3, [sp, #16]
 8010670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010674:	4824      	ldr	r0, [pc, #144]	@ (8010708 <_svfiprintf_r+0x1e8>)
 8010676:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801067a:	2206      	movs	r2, #6
 801067c:	f7ef fdb0 	bl	80001e0 <memchr>
 8010680:	2800      	cmp	r0, #0
 8010682:	d036      	beq.n	80106f2 <_svfiprintf_r+0x1d2>
 8010684:	4b21      	ldr	r3, [pc, #132]	@ (801070c <_svfiprintf_r+0x1ec>)
 8010686:	bb1b      	cbnz	r3, 80106d0 <_svfiprintf_r+0x1b0>
 8010688:	9b03      	ldr	r3, [sp, #12]
 801068a:	3307      	adds	r3, #7
 801068c:	f023 0307 	bic.w	r3, r3, #7
 8010690:	3308      	adds	r3, #8
 8010692:	9303      	str	r3, [sp, #12]
 8010694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010696:	4433      	add	r3, r6
 8010698:	9309      	str	r3, [sp, #36]	@ 0x24
 801069a:	e76a      	b.n	8010572 <_svfiprintf_r+0x52>
 801069c:	fb0c 3202 	mla	r2, ip, r2, r3
 80106a0:	460c      	mov	r4, r1
 80106a2:	2001      	movs	r0, #1
 80106a4:	e7a8      	b.n	80105f8 <_svfiprintf_r+0xd8>
 80106a6:	2300      	movs	r3, #0
 80106a8:	3401      	adds	r4, #1
 80106aa:	9305      	str	r3, [sp, #20]
 80106ac:	4619      	mov	r1, r3
 80106ae:	f04f 0c0a 	mov.w	ip, #10
 80106b2:	4620      	mov	r0, r4
 80106b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106b8:	3a30      	subs	r2, #48	@ 0x30
 80106ba:	2a09      	cmp	r2, #9
 80106bc:	d903      	bls.n	80106c6 <_svfiprintf_r+0x1a6>
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d0c6      	beq.n	8010650 <_svfiprintf_r+0x130>
 80106c2:	9105      	str	r1, [sp, #20]
 80106c4:	e7c4      	b.n	8010650 <_svfiprintf_r+0x130>
 80106c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80106ca:	4604      	mov	r4, r0
 80106cc:	2301      	movs	r3, #1
 80106ce:	e7f0      	b.n	80106b2 <_svfiprintf_r+0x192>
 80106d0:	ab03      	add	r3, sp, #12
 80106d2:	9300      	str	r3, [sp, #0]
 80106d4:	462a      	mov	r2, r5
 80106d6:	4b0e      	ldr	r3, [pc, #56]	@ (8010710 <_svfiprintf_r+0x1f0>)
 80106d8:	a904      	add	r1, sp, #16
 80106da:	4638      	mov	r0, r7
 80106dc:	f7fd f9a4 	bl	800da28 <_printf_float>
 80106e0:	1c42      	adds	r2, r0, #1
 80106e2:	4606      	mov	r6, r0
 80106e4:	d1d6      	bne.n	8010694 <_svfiprintf_r+0x174>
 80106e6:	89ab      	ldrh	r3, [r5, #12]
 80106e8:	065b      	lsls	r3, r3, #25
 80106ea:	f53f af2d 	bmi.w	8010548 <_svfiprintf_r+0x28>
 80106ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80106f0:	e72c      	b.n	801054c <_svfiprintf_r+0x2c>
 80106f2:	ab03      	add	r3, sp, #12
 80106f4:	9300      	str	r3, [sp, #0]
 80106f6:	462a      	mov	r2, r5
 80106f8:	4b05      	ldr	r3, [pc, #20]	@ (8010710 <_svfiprintf_r+0x1f0>)
 80106fa:	a904      	add	r1, sp, #16
 80106fc:	4638      	mov	r0, r7
 80106fe:	f7fd fc2b 	bl	800df58 <_printf_i>
 8010702:	e7ed      	b.n	80106e0 <_svfiprintf_r+0x1c0>
 8010704:	08013230 	.word	0x08013230
 8010708:	0801323a 	.word	0x0801323a
 801070c:	0800da29 	.word	0x0800da29
 8010710:	0801046b 	.word	0x0801046b
 8010714:	08013236 	.word	0x08013236

08010718 <__sflush_r>:
 8010718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801071c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010720:	0716      	lsls	r6, r2, #28
 8010722:	4605      	mov	r5, r0
 8010724:	460c      	mov	r4, r1
 8010726:	d454      	bmi.n	80107d2 <__sflush_r+0xba>
 8010728:	684b      	ldr	r3, [r1, #4]
 801072a:	2b00      	cmp	r3, #0
 801072c:	dc02      	bgt.n	8010734 <__sflush_r+0x1c>
 801072e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010730:	2b00      	cmp	r3, #0
 8010732:	dd48      	ble.n	80107c6 <__sflush_r+0xae>
 8010734:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010736:	2e00      	cmp	r6, #0
 8010738:	d045      	beq.n	80107c6 <__sflush_r+0xae>
 801073a:	2300      	movs	r3, #0
 801073c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010740:	682f      	ldr	r7, [r5, #0]
 8010742:	6a21      	ldr	r1, [r4, #32]
 8010744:	602b      	str	r3, [r5, #0]
 8010746:	d030      	beq.n	80107aa <__sflush_r+0x92>
 8010748:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801074a:	89a3      	ldrh	r3, [r4, #12]
 801074c:	0759      	lsls	r1, r3, #29
 801074e:	d505      	bpl.n	801075c <__sflush_r+0x44>
 8010750:	6863      	ldr	r3, [r4, #4]
 8010752:	1ad2      	subs	r2, r2, r3
 8010754:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010756:	b10b      	cbz	r3, 801075c <__sflush_r+0x44>
 8010758:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801075a:	1ad2      	subs	r2, r2, r3
 801075c:	2300      	movs	r3, #0
 801075e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010760:	6a21      	ldr	r1, [r4, #32]
 8010762:	4628      	mov	r0, r5
 8010764:	47b0      	blx	r6
 8010766:	1c43      	adds	r3, r0, #1
 8010768:	89a3      	ldrh	r3, [r4, #12]
 801076a:	d106      	bne.n	801077a <__sflush_r+0x62>
 801076c:	6829      	ldr	r1, [r5, #0]
 801076e:	291d      	cmp	r1, #29
 8010770:	d82b      	bhi.n	80107ca <__sflush_r+0xb2>
 8010772:	4a2a      	ldr	r2, [pc, #168]	@ (801081c <__sflush_r+0x104>)
 8010774:	410a      	asrs	r2, r1
 8010776:	07d6      	lsls	r6, r2, #31
 8010778:	d427      	bmi.n	80107ca <__sflush_r+0xb2>
 801077a:	2200      	movs	r2, #0
 801077c:	6062      	str	r2, [r4, #4]
 801077e:	04d9      	lsls	r1, r3, #19
 8010780:	6922      	ldr	r2, [r4, #16]
 8010782:	6022      	str	r2, [r4, #0]
 8010784:	d504      	bpl.n	8010790 <__sflush_r+0x78>
 8010786:	1c42      	adds	r2, r0, #1
 8010788:	d101      	bne.n	801078e <__sflush_r+0x76>
 801078a:	682b      	ldr	r3, [r5, #0]
 801078c:	b903      	cbnz	r3, 8010790 <__sflush_r+0x78>
 801078e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010792:	602f      	str	r7, [r5, #0]
 8010794:	b1b9      	cbz	r1, 80107c6 <__sflush_r+0xae>
 8010796:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801079a:	4299      	cmp	r1, r3
 801079c:	d002      	beq.n	80107a4 <__sflush_r+0x8c>
 801079e:	4628      	mov	r0, r5
 80107a0:	f7fe fe0e 	bl	800f3c0 <_free_r>
 80107a4:	2300      	movs	r3, #0
 80107a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80107a8:	e00d      	b.n	80107c6 <__sflush_r+0xae>
 80107aa:	2301      	movs	r3, #1
 80107ac:	4628      	mov	r0, r5
 80107ae:	47b0      	blx	r6
 80107b0:	4602      	mov	r2, r0
 80107b2:	1c50      	adds	r0, r2, #1
 80107b4:	d1c9      	bne.n	801074a <__sflush_r+0x32>
 80107b6:	682b      	ldr	r3, [r5, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d0c6      	beq.n	801074a <__sflush_r+0x32>
 80107bc:	2b1d      	cmp	r3, #29
 80107be:	d001      	beq.n	80107c4 <__sflush_r+0xac>
 80107c0:	2b16      	cmp	r3, #22
 80107c2:	d11e      	bne.n	8010802 <__sflush_r+0xea>
 80107c4:	602f      	str	r7, [r5, #0]
 80107c6:	2000      	movs	r0, #0
 80107c8:	e022      	b.n	8010810 <__sflush_r+0xf8>
 80107ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107ce:	b21b      	sxth	r3, r3
 80107d0:	e01b      	b.n	801080a <__sflush_r+0xf2>
 80107d2:	690f      	ldr	r7, [r1, #16]
 80107d4:	2f00      	cmp	r7, #0
 80107d6:	d0f6      	beq.n	80107c6 <__sflush_r+0xae>
 80107d8:	0793      	lsls	r3, r2, #30
 80107da:	680e      	ldr	r6, [r1, #0]
 80107dc:	bf08      	it	eq
 80107de:	694b      	ldreq	r3, [r1, #20]
 80107e0:	600f      	str	r7, [r1, #0]
 80107e2:	bf18      	it	ne
 80107e4:	2300      	movne	r3, #0
 80107e6:	eba6 0807 	sub.w	r8, r6, r7
 80107ea:	608b      	str	r3, [r1, #8]
 80107ec:	f1b8 0f00 	cmp.w	r8, #0
 80107f0:	dde9      	ble.n	80107c6 <__sflush_r+0xae>
 80107f2:	6a21      	ldr	r1, [r4, #32]
 80107f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80107f6:	4643      	mov	r3, r8
 80107f8:	463a      	mov	r2, r7
 80107fa:	4628      	mov	r0, r5
 80107fc:	47b0      	blx	r6
 80107fe:	2800      	cmp	r0, #0
 8010800:	dc08      	bgt.n	8010814 <__sflush_r+0xfc>
 8010802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801080a:	81a3      	strh	r3, [r4, #12]
 801080c:	f04f 30ff 	mov.w	r0, #4294967295
 8010810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010814:	4407      	add	r7, r0
 8010816:	eba8 0800 	sub.w	r8, r8, r0
 801081a:	e7e7      	b.n	80107ec <__sflush_r+0xd4>
 801081c:	dfbffffe 	.word	0xdfbffffe

08010820 <_fflush_r>:
 8010820:	b538      	push	{r3, r4, r5, lr}
 8010822:	690b      	ldr	r3, [r1, #16]
 8010824:	4605      	mov	r5, r0
 8010826:	460c      	mov	r4, r1
 8010828:	b913      	cbnz	r3, 8010830 <_fflush_r+0x10>
 801082a:	2500      	movs	r5, #0
 801082c:	4628      	mov	r0, r5
 801082e:	bd38      	pop	{r3, r4, r5, pc}
 8010830:	b118      	cbz	r0, 801083a <_fflush_r+0x1a>
 8010832:	6a03      	ldr	r3, [r0, #32]
 8010834:	b90b      	cbnz	r3, 801083a <_fflush_r+0x1a>
 8010836:	f7fd fd3b 	bl	800e2b0 <__sinit>
 801083a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d0f3      	beq.n	801082a <_fflush_r+0xa>
 8010842:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010844:	07d0      	lsls	r0, r2, #31
 8010846:	d404      	bmi.n	8010852 <_fflush_r+0x32>
 8010848:	0599      	lsls	r1, r3, #22
 801084a:	d402      	bmi.n	8010852 <_fflush_r+0x32>
 801084c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801084e:	f7fd ff2e 	bl	800e6ae <__retarget_lock_acquire_recursive>
 8010852:	4628      	mov	r0, r5
 8010854:	4621      	mov	r1, r4
 8010856:	f7ff ff5f 	bl	8010718 <__sflush_r>
 801085a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801085c:	07da      	lsls	r2, r3, #31
 801085e:	4605      	mov	r5, r0
 8010860:	d4e4      	bmi.n	801082c <_fflush_r+0xc>
 8010862:	89a3      	ldrh	r3, [r4, #12]
 8010864:	059b      	lsls	r3, r3, #22
 8010866:	d4e1      	bmi.n	801082c <_fflush_r+0xc>
 8010868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801086a:	f7fd ff21 	bl	800e6b0 <__retarget_lock_release_recursive>
 801086e:	e7dd      	b.n	801082c <_fflush_r+0xc>

08010870 <fiprintf>:
 8010870:	b40e      	push	{r1, r2, r3}
 8010872:	b503      	push	{r0, r1, lr}
 8010874:	4601      	mov	r1, r0
 8010876:	ab03      	add	r3, sp, #12
 8010878:	4805      	ldr	r0, [pc, #20]	@ (8010890 <fiprintf+0x20>)
 801087a:	f853 2b04 	ldr.w	r2, [r3], #4
 801087e:	6800      	ldr	r0, [r0, #0]
 8010880:	9301      	str	r3, [sp, #4]
 8010882:	f000 f893 	bl	80109ac <_vfiprintf_r>
 8010886:	b002      	add	sp, #8
 8010888:	f85d eb04 	ldr.w	lr, [sp], #4
 801088c:	b003      	add	sp, #12
 801088e:	4770      	bx	lr
 8010890:	20000280 	.word	0x20000280

08010894 <memmove>:
 8010894:	4288      	cmp	r0, r1
 8010896:	b510      	push	{r4, lr}
 8010898:	eb01 0402 	add.w	r4, r1, r2
 801089c:	d902      	bls.n	80108a4 <memmove+0x10>
 801089e:	4284      	cmp	r4, r0
 80108a0:	4623      	mov	r3, r4
 80108a2:	d807      	bhi.n	80108b4 <memmove+0x20>
 80108a4:	1e43      	subs	r3, r0, #1
 80108a6:	42a1      	cmp	r1, r4
 80108a8:	d008      	beq.n	80108bc <memmove+0x28>
 80108aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80108ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80108b2:	e7f8      	b.n	80108a6 <memmove+0x12>
 80108b4:	4402      	add	r2, r0
 80108b6:	4601      	mov	r1, r0
 80108b8:	428a      	cmp	r2, r1
 80108ba:	d100      	bne.n	80108be <memmove+0x2a>
 80108bc:	bd10      	pop	{r4, pc}
 80108be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80108c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80108c6:	e7f7      	b.n	80108b8 <memmove+0x24>

080108c8 <abort>:
 80108c8:	b508      	push	{r3, lr}
 80108ca:	2006      	movs	r0, #6
 80108cc:	f000 fa42 	bl	8010d54 <raise>
 80108d0:	2001      	movs	r0, #1
 80108d2:	f7f2 fddf 	bl	8003494 <_exit>

080108d6 <_calloc_r>:
 80108d6:	b570      	push	{r4, r5, r6, lr}
 80108d8:	fba1 5402 	umull	r5, r4, r1, r2
 80108dc:	b93c      	cbnz	r4, 80108ee <_calloc_r+0x18>
 80108de:	4629      	mov	r1, r5
 80108e0:	f7fc f88c 	bl	800c9fc <_malloc_r>
 80108e4:	4606      	mov	r6, r0
 80108e6:	b928      	cbnz	r0, 80108f4 <_calloc_r+0x1e>
 80108e8:	2600      	movs	r6, #0
 80108ea:	4630      	mov	r0, r6
 80108ec:	bd70      	pop	{r4, r5, r6, pc}
 80108ee:	220c      	movs	r2, #12
 80108f0:	6002      	str	r2, [r0, #0]
 80108f2:	e7f9      	b.n	80108e8 <_calloc_r+0x12>
 80108f4:	462a      	mov	r2, r5
 80108f6:	4621      	mov	r1, r4
 80108f8:	f7fd fda7 	bl	800e44a <memset>
 80108fc:	e7f5      	b.n	80108ea <_calloc_r+0x14>

080108fe <_realloc_r>:
 80108fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010902:	4680      	mov	r8, r0
 8010904:	4615      	mov	r5, r2
 8010906:	460c      	mov	r4, r1
 8010908:	b921      	cbnz	r1, 8010914 <_realloc_r+0x16>
 801090a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801090e:	4611      	mov	r1, r2
 8010910:	f7fc b874 	b.w	800c9fc <_malloc_r>
 8010914:	b92a      	cbnz	r2, 8010922 <_realloc_r+0x24>
 8010916:	f7fe fd53 	bl	800f3c0 <_free_r>
 801091a:	2400      	movs	r4, #0
 801091c:	4620      	mov	r0, r4
 801091e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010922:	f000 fa33 	bl	8010d8c <_malloc_usable_size_r>
 8010926:	4285      	cmp	r5, r0
 8010928:	4606      	mov	r6, r0
 801092a:	d802      	bhi.n	8010932 <_realloc_r+0x34>
 801092c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010930:	d8f4      	bhi.n	801091c <_realloc_r+0x1e>
 8010932:	4629      	mov	r1, r5
 8010934:	4640      	mov	r0, r8
 8010936:	f7fc f861 	bl	800c9fc <_malloc_r>
 801093a:	4607      	mov	r7, r0
 801093c:	2800      	cmp	r0, #0
 801093e:	d0ec      	beq.n	801091a <_realloc_r+0x1c>
 8010940:	42b5      	cmp	r5, r6
 8010942:	462a      	mov	r2, r5
 8010944:	4621      	mov	r1, r4
 8010946:	bf28      	it	cs
 8010948:	4632      	movcs	r2, r6
 801094a:	f7fd feb2 	bl	800e6b2 <memcpy>
 801094e:	4621      	mov	r1, r4
 8010950:	4640      	mov	r0, r8
 8010952:	f7fe fd35 	bl	800f3c0 <_free_r>
 8010956:	463c      	mov	r4, r7
 8010958:	e7e0      	b.n	801091c <_realloc_r+0x1e>

0801095a <__sfputc_r>:
 801095a:	6893      	ldr	r3, [r2, #8]
 801095c:	3b01      	subs	r3, #1
 801095e:	2b00      	cmp	r3, #0
 8010960:	b410      	push	{r4}
 8010962:	6093      	str	r3, [r2, #8]
 8010964:	da08      	bge.n	8010978 <__sfputc_r+0x1e>
 8010966:	6994      	ldr	r4, [r2, #24]
 8010968:	42a3      	cmp	r3, r4
 801096a:	db01      	blt.n	8010970 <__sfputc_r+0x16>
 801096c:	290a      	cmp	r1, #10
 801096e:	d103      	bne.n	8010978 <__sfputc_r+0x1e>
 8010970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010974:	f000 b932 	b.w	8010bdc <__swbuf_r>
 8010978:	6813      	ldr	r3, [r2, #0]
 801097a:	1c58      	adds	r0, r3, #1
 801097c:	6010      	str	r0, [r2, #0]
 801097e:	7019      	strb	r1, [r3, #0]
 8010980:	4608      	mov	r0, r1
 8010982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010986:	4770      	bx	lr

08010988 <__sfputs_r>:
 8010988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801098a:	4606      	mov	r6, r0
 801098c:	460f      	mov	r7, r1
 801098e:	4614      	mov	r4, r2
 8010990:	18d5      	adds	r5, r2, r3
 8010992:	42ac      	cmp	r4, r5
 8010994:	d101      	bne.n	801099a <__sfputs_r+0x12>
 8010996:	2000      	movs	r0, #0
 8010998:	e007      	b.n	80109aa <__sfputs_r+0x22>
 801099a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801099e:	463a      	mov	r2, r7
 80109a0:	4630      	mov	r0, r6
 80109a2:	f7ff ffda 	bl	801095a <__sfputc_r>
 80109a6:	1c43      	adds	r3, r0, #1
 80109a8:	d1f3      	bne.n	8010992 <__sfputs_r+0xa>
 80109aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080109ac <_vfiprintf_r>:
 80109ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b0:	460d      	mov	r5, r1
 80109b2:	b09d      	sub	sp, #116	@ 0x74
 80109b4:	4614      	mov	r4, r2
 80109b6:	4698      	mov	r8, r3
 80109b8:	4606      	mov	r6, r0
 80109ba:	b118      	cbz	r0, 80109c4 <_vfiprintf_r+0x18>
 80109bc:	6a03      	ldr	r3, [r0, #32]
 80109be:	b90b      	cbnz	r3, 80109c4 <_vfiprintf_r+0x18>
 80109c0:	f7fd fc76 	bl	800e2b0 <__sinit>
 80109c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109c6:	07d9      	lsls	r1, r3, #31
 80109c8:	d405      	bmi.n	80109d6 <_vfiprintf_r+0x2a>
 80109ca:	89ab      	ldrh	r3, [r5, #12]
 80109cc:	059a      	lsls	r2, r3, #22
 80109ce:	d402      	bmi.n	80109d6 <_vfiprintf_r+0x2a>
 80109d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109d2:	f7fd fe6c 	bl	800e6ae <__retarget_lock_acquire_recursive>
 80109d6:	89ab      	ldrh	r3, [r5, #12]
 80109d8:	071b      	lsls	r3, r3, #28
 80109da:	d501      	bpl.n	80109e0 <_vfiprintf_r+0x34>
 80109dc:	692b      	ldr	r3, [r5, #16]
 80109de:	b99b      	cbnz	r3, 8010a08 <_vfiprintf_r+0x5c>
 80109e0:	4629      	mov	r1, r5
 80109e2:	4630      	mov	r0, r6
 80109e4:	f000 f938 	bl	8010c58 <__swsetup_r>
 80109e8:	b170      	cbz	r0, 8010a08 <_vfiprintf_r+0x5c>
 80109ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109ec:	07dc      	lsls	r4, r3, #31
 80109ee:	d504      	bpl.n	80109fa <_vfiprintf_r+0x4e>
 80109f0:	f04f 30ff 	mov.w	r0, #4294967295
 80109f4:	b01d      	add	sp, #116	@ 0x74
 80109f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109fa:	89ab      	ldrh	r3, [r5, #12]
 80109fc:	0598      	lsls	r0, r3, #22
 80109fe:	d4f7      	bmi.n	80109f0 <_vfiprintf_r+0x44>
 8010a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a02:	f7fd fe55 	bl	800e6b0 <__retarget_lock_release_recursive>
 8010a06:	e7f3      	b.n	80109f0 <_vfiprintf_r+0x44>
 8010a08:	2300      	movs	r3, #0
 8010a0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a0c:	2320      	movs	r3, #32
 8010a0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a16:	2330      	movs	r3, #48	@ 0x30
 8010a18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010bc8 <_vfiprintf_r+0x21c>
 8010a1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a20:	f04f 0901 	mov.w	r9, #1
 8010a24:	4623      	mov	r3, r4
 8010a26:	469a      	mov	sl, r3
 8010a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a2c:	b10a      	cbz	r2, 8010a32 <_vfiprintf_r+0x86>
 8010a2e:	2a25      	cmp	r2, #37	@ 0x25
 8010a30:	d1f9      	bne.n	8010a26 <_vfiprintf_r+0x7a>
 8010a32:	ebba 0b04 	subs.w	fp, sl, r4
 8010a36:	d00b      	beq.n	8010a50 <_vfiprintf_r+0xa4>
 8010a38:	465b      	mov	r3, fp
 8010a3a:	4622      	mov	r2, r4
 8010a3c:	4629      	mov	r1, r5
 8010a3e:	4630      	mov	r0, r6
 8010a40:	f7ff ffa2 	bl	8010988 <__sfputs_r>
 8010a44:	3001      	adds	r0, #1
 8010a46:	f000 80a7 	beq.w	8010b98 <_vfiprintf_r+0x1ec>
 8010a4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a4c:	445a      	add	r2, fp
 8010a4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a50:	f89a 3000 	ldrb.w	r3, [sl]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	f000 809f 	beq.w	8010b98 <_vfiprintf_r+0x1ec>
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a64:	f10a 0a01 	add.w	sl, sl, #1
 8010a68:	9304      	str	r3, [sp, #16]
 8010a6a:	9307      	str	r3, [sp, #28]
 8010a6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a70:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a72:	4654      	mov	r4, sl
 8010a74:	2205      	movs	r2, #5
 8010a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a7a:	4853      	ldr	r0, [pc, #332]	@ (8010bc8 <_vfiprintf_r+0x21c>)
 8010a7c:	f7ef fbb0 	bl	80001e0 <memchr>
 8010a80:	9a04      	ldr	r2, [sp, #16]
 8010a82:	b9d8      	cbnz	r0, 8010abc <_vfiprintf_r+0x110>
 8010a84:	06d1      	lsls	r1, r2, #27
 8010a86:	bf44      	itt	mi
 8010a88:	2320      	movmi	r3, #32
 8010a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a8e:	0713      	lsls	r3, r2, #28
 8010a90:	bf44      	itt	mi
 8010a92:	232b      	movmi	r3, #43	@ 0x2b
 8010a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a98:	f89a 3000 	ldrb.w	r3, [sl]
 8010a9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a9e:	d015      	beq.n	8010acc <_vfiprintf_r+0x120>
 8010aa0:	9a07      	ldr	r2, [sp, #28]
 8010aa2:	4654      	mov	r4, sl
 8010aa4:	2000      	movs	r0, #0
 8010aa6:	f04f 0c0a 	mov.w	ip, #10
 8010aaa:	4621      	mov	r1, r4
 8010aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ab0:	3b30      	subs	r3, #48	@ 0x30
 8010ab2:	2b09      	cmp	r3, #9
 8010ab4:	d94b      	bls.n	8010b4e <_vfiprintf_r+0x1a2>
 8010ab6:	b1b0      	cbz	r0, 8010ae6 <_vfiprintf_r+0x13a>
 8010ab8:	9207      	str	r2, [sp, #28]
 8010aba:	e014      	b.n	8010ae6 <_vfiprintf_r+0x13a>
 8010abc:	eba0 0308 	sub.w	r3, r0, r8
 8010ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8010ac4:	4313      	orrs	r3, r2
 8010ac6:	9304      	str	r3, [sp, #16]
 8010ac8:	46a2      	mov	sl, r4
 8010aca:	e7d2      	b.n	8010a72 <_vfiprintf_r+0xc6>
 8010acc:	9b03      	ldr	r3, [sp, #12]
 8010ace:	1d19      	adds	r1, r3, #4
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	9103      	str	r1, [sp, #12]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	bfbb      	ittet	lt
 8010ad8:	425b      	neglt	r3, r3
 8010ada:	f042 0202 	orrlt.w	r2, r2, #2
 8010ade:	9307      	strge	r3, [sp, #28]
 8010ae0:	9307      	strlt	r3, [sp, #28]
 8010ae2:	bfb8      	it	lt
 8010ae4:	9204      	strlt	r2, [sp, #16]
 8010ae6:	7823      	ldrb	r3, [r4, #0]
 8010ae8:	2b2e      	cmp	r3, #46	@ 0x2e
 8010aea:	d10a      	bne.n	8010b02 <_vfiprintf_r+0x156>
 8010aec:	7863      	ldrb	r3, [r4, #1]
 8010aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8010af0:	d132      	bne.n	8010b58 <_vfiprintf_r+0x1ac>
 8010af2:	9b03      	ldr	r3, [sp, #12]
 8010af4:	1d1a      	adds	r2, r3, #4
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	9203      	str	r2, [sp, #12]
 8010afa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010afe:	3402      	adds	r4, #2
 8010b00:	9305      	str	r3, [sp, #20]
 8010b02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010bd8 <_vfiprintf_r+0x22c>
 8010b06:	7821      	ldrb	r1, [r4, #0]
 8010b08:	2203      	movs	r2, #3
 8010b0a:	4650      	mov	r0, sl
 8010b0c:	f7ef fb68 	bl	80001e0 <memchr>
 8010b10:	b138      	cbz	r0, 8010b22 <_vfiprintf_r+0x176>
 8010b12:	9b04      	ldr	r3, [sp, #16]
 8010b14:	eba0 000a 	sub.w	r0, r0, sl
 8010b18:	2240      	movs	r2, #64	@ 0x40
 8010b1a:	4082      	lsls	r2, r0
 8010b1c:	4313      	orrs	r3, r2
 8010b1e:	3401      	adds	r4, #1
 8010b20:	9304      	str	r3, [sp, #16]
 8010b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b26:	4829      	ldr	r0, [pc, #164]	@ (8010bcc <_vfiprintf_r+0x220>)
 8010b28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b2c:	2206      	movs	r2, #6
 8010b2e:	f7ef fb57 	bl	80001e0 <memchr>
 8010b32:	2800      	cmp	r0, #0
 8010b34:	d03f      	beq.n	8010bb6 <_vfiprintf_r+0x20a>
 8010b36:	4b26      	ldr	r3, [pc, #152]	@ (8010bd0 <_vfiprintf_r+0x224>)
 8010b38:	bb1b      	cbnz	r3, 8010b82 <_vfiprintf_r+0x1d6>
 8010b3a:	9b03      	ldr	r3, [sp, #12]
 8010b3c:	3307      	adds	r3, #7
 8010b3e:	f023 0307 	bic.w	r3, r3, #7
 8010b42:	3308      	adds	r3, #8
 8010b44:	9303      	str	r3, [sp, #12]
 8010b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b48:	443b      	add	r3, r7
 8010b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b4c:	e76a      	b.n	8010a24 <_vfiprintf_r+0x78>
 8010b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b52:	460c      	mov	r4, r1
 8010b54:	2001      	movs	r0, #1
 8010b56:	e7a8      	b.n	8010aaa <_vfiprintf_r+0xfe>
 8010b58:	2300      	movs	r3, #0
 8010b5a:	3401      	adds	r4, #1
 8010b5c:	9305      	str	r3, [sp, #20]
 8010b5e:	4619      	mov	r1, r3
 8010b60:	f04f 0c0a 	mov.w	ip, #10
 8010b64:	4620      	mov	r0, r4
 8010b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b6a:	3a30      	subs	r2, #48	@ 0x30
 8010b6c:	2a09      	cmp	r2, #9
 8010b6e:	d903      	bls.n	8010b78 <_vfiprintf_r+0x1cc>
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d0c6      	beq.n	8010b02 <_vfiprintf_r+0x156>
 8010b74:	9105      	str	r1, [sp, #20]
 8010b76:	e7c4      	b.n	8010b02 <_vfiprintf_r+0x156>
 8010b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b7c:	4604      	mov	r4, r0
 8010b7e:	2301      	movs	r3, #1
 8010b80:	e7f0      	b.n	8010b64 <_vfiprintf_r+0x1b8>
 8010b82:	ab03      	add	r3, sp, #12
 8010b84:	9300      	str	r3, [sp, #0]
 8010b86:	462a      	mov	r2, r5
 8010b88:	4b12      	ldr	r3, [pc, #72]	@ (8010bd4 <_vfiprintf_r+0x228>)
 8010b8a:	a904      	add	r1, sp, #16
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	f7fc ff4b 	bl	800da28 <_printf_float>
 8010b92:	4607      	mov	r7, r0
 8010b94:	1c78      	adds	r0, r7, #1
 8010b96:	d1d6      	bne.n	8010b46 <_vfiprintf_r+0x19a>
 8010b98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b9a:	07d9      	lsls	r1, r3, #31
 8010b9c:	d405      	bmi.n	8010baa <_vfiprintf_r+0x1fe>
 8010b9e:	89ab      	ldrh	r3, [r5, #12]
 8010ba0:	059a      	lsls	r2, r3, #22
 8010ba2:	d402      	bmi.n	8010baa <_vfiprintf_r+0x1fe>
 8010ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ba6:	f7fd fd83 	bl	800e6b0 <__retarget_lock_release_recursive>
 8010baa:	89ab      	ldrh	r3, [r5, #12]
 8010bac:	065b      	lsls	r3, r3, #25
 8010bae:	f53f af1f 	bmi.w	80109f0 <_vfiprintf_r+0x44>
 8010bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010bb4:	e71e      	b.n	80109f4 <_vfiprintf_r+0x48>
 8010bb6:	ab03      	add	r3, sp, #12
 8010bb8:	9300      	str	r3, [sp, #0]
 8010bba:	462a      	mov	r2, r5
 8010bbc:	4b05      	ldr	r3, [pc, #20]	@ (8010bd4 <_vfiprintf_r+0x228>)
 8010bbe:	a904      	add	r1, sp, #16
 8010bc0:	4630      	mov	r0, r6
 8010bc2:	f7fd f9c9 	bl	800df58 <_printf_i>
 8010bc6:	e7e4      	b.n	8010b92 <_vfiprintf_r+0x1e6>
 8010bc8:	08013230 	.word	0x08013230
 8010bcc:	0801323a 	.word	0x0801323a
 8010bd0:	0800da29 	.word	0x0800da29
 8010bd4:	08010989 	.word	0x08010989
 8010bd8:	08013236 	.word	0x08013236

08010bdc <__swbuf_r>:
 8010bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bde:	460e      	mov	r6, r1
 8010be0:	4614      	mov	r4, r2
 8010be2:	4605      	mov	r5, r0
 8010be4:	b118      	cbz	r0, 8010bee <__swbuf_r+0x12>
 8010be6:	6a03      	ldr	r3, [r0, #32]
 8010be8:	b90b      	cbnz	r3, 8010bee <__swbuf_r+0x12>
 8010bea:	f7fd fb61 	bl	800e2b0 <__sinit>
 8010bee:	69a3      	ldr	r3, [r4, #24]
 8010bf0:	60a3      	str	r3, [r4, #8]
 8010bf2:	89a3      	ldrh	r3, [r4, #12]
 8010bf4:	071a      	lsls	r2, r3, #28
 8010bf6:	d501      	bpl.n	8010bfc <__swbuf_r+0x20>
 8010bf8:	6923      	ldr	r3, [r4, #16]
 8010bfa:	b943      	cbnz	r3, 8010c0e <__swbuf_r+0x32>
 8010bfc:	4621      	mov	r1, r4
 8010bfe:	4628      	mov	r0, r5
 8010c00:	f000 f82a 	bl	8010c58 <__swsetup_r>
 8010c04:	b118      	cbz	r0, 8010c0e <__swbuf_r+0x32>
 8010c06:	f04f 37ff 	mov.w	r7, #4294967295
 8010c0a:	4638      	mov	r0, r7
 8010c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c0e:	6823      	ldr	r3, [r4, #0]
 8010c10:	6922      	ldr	r2, [r4, #16]
 8010c12:	1a98      	subs	r0, r3, r2
 8010c14:	6963      	ldr	r3, [r4, #20]
 8010c16:	b2f6      	uxtb	r6, r6
 8010c18:	4283      	cmp	r3, r0
 8010c1a:	4637      	mov	r7, r6
 8010c1c:	dc05      	bgt.n	8010c2a <__swbuf_r+0x4e>
 8010c1e:	4621      	mov	r1, r4
 8010c20:	4628      	mov	r0, r5
 8010c22:	f7ff fdfd 	bl	8010820 <_fflush_r>
 8010c26:	2800      	cmp	r0, #0
 8010c28:	d1ed      	bne.n	8010c06 <__swbuf_r+0x2a>
 8010c2a:	68a3      	ldr	r3, [r4, #8]
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	60a3      	str	r3, [r4, #8]
 8010c30:	6823      	ldr	r3, [r4, #0]
 8010c32:	1c5a      	adds	r2, r3, #1
 8010c34:	6022      	str	r2, [r4, #0]
 8010c36:	701e      	strb	r6, [r3, #0]
 8010c38:	6962      	ldr	r2, [r4, #20]
 8010c3a:	1c43      	adds	r3, r0, #1
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d004      	beq.n	8010c4a <__swbuf_r+0x6e>
 8010c40:	89a3      	ldrh	r3, [r4, #12]
 8010c42:	07db      	lsls	r3, r3, #31
 8010c44:	d5e1      	bpl.n	8010c0a <__swbuf_r+0x2e>
 8010c46:	2e0a      	cmp	r6, #10
 8010c48:	d1df      	bne.n	8010c0a <__swbuf_r+0x2e>
 8010c4a:	4621      	mov	r1, r4
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	f7ff fde7 	bl	8010820 <_fflush_r>
 8010c52:	2800      	cmp	r0, #0
 8010c54:	d0d9      	beq.n	8010c0a <__swbuf_r+0x2e>
 8010c56:	e7d6      	b.n	8010c06 <__swbuf_r+0x2a>

08010c58 <__swsetup_r>:
 8010c58:	b538      	push	{r3, r4, r5, lr}
 8010c5a:	4b29      	ldr	r3, [pc, #164]	@ (8010d00 <__swsetup_r+0xa8>)
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	6818      	ldr	r0, [r3, #0]
 8010c60:	460c      	mov	r4, r1
 8010c62:	b118      	cbz	r0, 8010c6c <__swsetup_r+0x14>
 8010c64:	6a03      	ldr	r3, [r0, #32]
 8010c66:	b90b      	cbnz	r3, 8010c6c <__swsetup_r+0x14>
 8010c68:	f7fd fb22 	bl	800e2b0 <__sinit>
 8010c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c70:	0719      	lsls	r1, r3, #28
 8010c72:	d422      	bmi.n	8010cba <__swsetup_r+0x62>
 8010c74:	06da      	lsls	r2, r3, #27
 8010c76:	d407      	bmi.n	8010c88 <__swsetup_r+0x30>
 8010c78:	2209      	movs	r2, #9
 8010c7a:	602a      	str	r2, [r5, #0]
 8010c7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c80:	81a3      	strh	r3, [r4, #12]
 8010c82:	f04f 30ff 	mov.w	r0, #4294967295
 8010c86:	e033      	b.n	8010cf0 <__swsetup_r+0x98>
 8010c88:	0758      	lsls	r0, r3, #29
 8010c8a:	d512      	bpl.n	8010cb2 <__swsetup_r+0x5a>
 8010c8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c8e:	b141      	cbz	r1, 8010ca2 <__swsetup_r+0x4a>
 8010c90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c94:	4299      	cmp	r1, r3
 8010c96:	d002      	beq.n	8010c9e <__swsetup_r+0x46>
 8010c98:	4628      	mov	r0, r5
 8010c9a:	f7fe fb91 	bl	800f3c0 <_free_r>
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ca2:	89a3      	ldrh	r3, [r4, #12]
 8010ca4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010ca8:	81a3      	strh	r3, [r4, #12]
 8010caa:	2300      	movs	r3, #0
 8010cac:	6063      	str	r3, [r4, #4]
 8010cae:	6923      	ldr	r3, [r4, #16]
 8010cb0:	6023      	str	r3, [r4, #0]
 8010cb2:	89a3      	ldrh	r3, [r4, #12]
 8010cb4:	f043 0308 	orr.w	r3, r3, #8
 8010cb8:	81a3      	strh	r3, [r4, #12]
 8010cba:	6923      	ldr	r3, [r4, #16]
 8010cbc:	b94b      	cbnz	r3, 8010cd2 <__swsetup_r+0x7a>
 8010cbe:	89a3      	ldrh	r3, [r4, #12]
 8010cc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010cc8:	d003      	beq.n	8010cd2 <__swsetup_r+0x7a>
 8010cca:	4621      	mov	r1, r4
 8010ccc:	4628      	mov	r0, r5
 8010cce:	f000 f88b 	bl	8010de8 <__smakebuf_r>
 8010cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cd6:	f013 0201 	ands.w	r2, r3, #1
 8010cda:	d00a      	beq.n	8010cf2 <__swsetup_r+0x9a>
 8010cdc:	2200      	movs	r2, #0
 8010cde:	60a2      	str	r2, [r4, #8]
 8010ce0:	6962      	ldr	r2, [r4, #20]
 8010ce2:	4252      	negs	r2, r2
 8010ce4:	61a2      	str	r2, [r4, #24]
 8010ce6:	6922      	ldr	r2, [r4, #16]
 8010ce8:	b942      	cbnz	r2, 8010cfc <__swsetup_r+0xa4>
 8010cea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010cee:	d1c5      	bne.n	8010c7c <__swsetup_r+0x24>
 8010cf0:	bd38      	pop	{r3, r4, r5, pc}
 8010cf2:	0799      	lsls	r1, r3, #30
 8010cf4:	bf58      	it	pl
 8010cf6:	6962      	ldrpl	r2, [r4, #20]
 8010cf8:	60a2      	str	r2, [r4, #8]
 8010cfa:	e7f4      	b.n	8010ce6 <__swsetup_r+0x8e>
 8010cfc:	2000      	movs	r0, #0
 8010cfe:	e7f7      	b.n	8010cf0 <__swsetup_r+0x98>
 8010d00:	20000280 	.word	0x20000280

08010d04 <_raise_r>:
 8010d04:	291f      	cmp	r1, #31
 8010d06:	b538      	push	{r3, r4, r5, lr}
 8010d08:	4605      	mov	r5, r0
 8010d0a:	460c      	mov	r4, r1
 8010d0c:	d904      	bls.n	8010d18 <_raise_r+0x14>
 8010d0e:	2316      	movs	r3, #22
 8010d10:	6003      	str	r3, [r0, #0]
 8010d12:	f04f 30ff 	mov.w	r0, #4294967295
 8010d16:	bd38      	pop	{r3, r4, r5, pc}
 8010d18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010d1a:	b112      	cbz	r2, 8010d22 <_raise_r+0x1e>
 8010d1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d20:	b94b      	cbnz	r3, 8010d36 <_raise_r+0x32>
 8010d22:	4628      	mov	r0, r5
 8010d24:	f000 f830 	bl	8010d88 <_getpid_r>
 8010d28:	4622      	mov	r2, r4
 8010d2a:	4601      	mov	r1, r0
 8010d2c:	4628      	mov	r0, r5
 8010d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d32:	f000 b817 	b.w	8010d64 <_kill_r>
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d00a      	beq.n	8010d50 <_raise_r+0x4c>
 8010d3a:	1c59      	adds	r1, r3, #1
 8010d3c:	d103      	bne.n	8010d46 <_raise_r+0x42>
 8010d3e:	2316      	movs	r3, #22
 8010d40:	6003      	str	r3, [r0, #0]
 8010d42:	2001      	movs	r0, #1
 8010d44:	e7e7      	b.n	8010d16 <_raise_r+0x12>
 8010d46:	2100      	movs	r1, #0
 8010d48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	4798      	blx	r3
 8010d50:	2000      	movs	r0, #0
 8010d52:	e7e0      	b.n	8010d16 <_raise_r+0x12>

08010d54 <raise>:
 8010d54:	4b02      	ldr	r3, [pc, #8]	@ (8010d60 <raise+0xc>)
 8010d56:	4601      	mov	r1, r0
 8010d58:	6818      	ldr	r0, [r3, #0]
 8010d5a:	f7ff bfd3 	b.w	8010d04 <_raise_r>
 8010d5e:	bf00      	nop
 8010d60:	20000280 	.word	0x20000280

08010d64 <_kill_r>:
 8010d64:	b538      	push	{r3, r4, r5, lr}
 8010d66:	4d07      	ldr	r5, [pc, #28]	@ (8010d84 <_kill_r+0x20>)
 8010d68:	2300      	movs	r3, #0
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	4608      	mov	r0, r1
 8010d6e:	4611      	mov	r1, r2
 8010d70:	602b      	str	r3, [r5, #0]
 8010d72:	f7f2 fb7f 	bl	8003474 <_kill>
 8010d76:	1c43      	adds	r3, r0, #1
 8010d78:	d102      	bne.n	8010d80 <_kill_r+0x1c>
 8010d7a:	682b      	ldr	r3, [r5, #0]
 8010d7c:	b103      	cbz	r3, 8010d80 <_kill_r+0x1c>
 8010d7e:	6023      	str	r3, [r4, #0]
 8010d80:	bd38      	pop	{r3, r4, r5, pc}
 8010d82:	bf00      	nop
 8010d84:	20001e34 	.word	0x20001e34

08010d88 <_getpid_r>:
 8010d88:	f7f2 bb6c 	b.w	8003464 <_getpid>

08010d8c <_malloc_usable_size_r>:
 8010d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d90:	1f18      	subs	r0, r3, #4
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	bfbc      	itt	lt
 8010d96:	580b      	ldrlt	r3, [r1, r0]
 8010d98:	18c0      	addlt	r0, r0, r3
 8010d9a:	4770      	bx	lr

08010d9c <__swhatbuf_r>:
 8010d9c:	b570      	push	{r4, r5, r6, lr}
 8010d9e:	460c      	mov	r4, r1
 8010da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010da4:	2900      	cmp	r1, #0
 8010da6:	b096      	sub	sp, #88	@ 0x58
 8010da8:	4615      	mov	r5, r2
 8010daa:	461e      	mov	r6, r3
 8010dac:	da0d      	bge.n	8010dca <__swhatbuf_r+0x2e>
 8010dae:	89a3      	ldrh	r3, [r4, #12]
 8010db0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010db4:	f04f 0100 	mov.w	r1, #0
 8010db8:	bf14      	ite	ne
 8010dba:	2340      	movne	r3, #64	@ 0x40
 8010dbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010dc0:	2000      	movs	r0, #0
 8010dc2:	6031      	str	r1, [r6, #0]
 8010dc4:	602b      	str	r3, [r5, #0]
 8010dc6:	b016      	add	sp, #88	@ 0x58
 8010dc8:	bd70      	pop	{r4, r5, r6, pc}
 8010dca:	466a      	mov	r2, sp
 8010dcc:	f000 f848 	bl	8010e60 <_fstat_r>
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	dbec      	blt.n	8010dae <__swhatbuf_r+0x12>
 8010dd4:	9901      	ldr	r1, [sp, #4]
 8010dd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010dda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010dde:	4259      	negs	r1, r3
 8010de0:	4159      	adcs	r1, r3
 8010de2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010de6:	e7eb      	b.n	8010dc0 <__swhatbuf_r+0x24>

08010de8 <__smakebuf_r>:
 8010de8:	898b      	ldrh	r3, [r1, #12]
 8010dea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dec:	079d      	lsls	r5, r3, #30
 8010dee:	4606      	mov	r6, r0
 8010df0:	460c      	mov	r4, r1
 8010df2:	d507      	bpl.n	8010e04 <__smakebuf_r+0x1c>
 8010df4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010df8:	6023      	str	r3, [r4, #0]
 8010dfa:	6123      	str	r3, [r4, #16]
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	6163      	str	r3, [r4, #20]
 8010e00:	b003      	add	sp, #12
 8010e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e04:	ab01      	add	r3, sp, #4
 8010e06:	466a      	mov	r2, sp
 8010e08:	f7ff ffc8 	bl	8010d9c <__swhatbuf_r>
 8010e0c:	9f00      	ldr	r7, [sp, #0]
 8010e0e:	4605      	mov	r5, r0
 8010e10:	4639      	mov	r1, r7
 8010e12:	4630      	mov	r0, r6
 8010e14:	f7fb fdf2 	bl	800c9fc <_malloc_r>
 8010e18:	b948      	cbnz	r0, 8010e2e <__smakebuf_r+0x46>
 8010e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e1e:	059a      	lsls	r2, r3, #22
 8010e20:	d4ee      	bmi.n	8010e00 <__smakebuf_r+0x18>
 8010e22:	f023 0303 	bic.w	r3, r3, #3
 8010e26:	f043 0302 	orr.w	r3, r3, #2
 8010e2a:	81a3      	strh	r3, [r4, #12]
 8010e2c:	e7e2      	b.n	8010df4 <__smakebuf_r+0xc>
 8010e2e:	89a3      	ldrh	r3, [r4, #12]
 8010e30:	6020      	str	r0, [r4, #0]
 8010e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e36:	81a3      	strh	r3, [r4, #12]
 8010e38:	9b01      	ldr	r3, [sp, #4]
 8010e3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e3e:	b15b      	cbz	r3, 8010e58 <__smakebuf_r+0x70>
 8010e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e44:	4630      	mov	r0, r6
 8010e46:	f000 f81d 	bl	8010e84 <_isatty_r>
 8010e4a:	b128      	cbz	r0, 8010e58 <__smakebuf_r+0x70>
 8010e4c:	89a3      	ldrh	r3, [r4, #12]
 8010e4e:	f023 0303 	bic.w	r3, r3, #3
 8010e52:	f043 0301 	orr.w	r3, r3, #1
 8010e56:	81a3      	strh	r3, [r4, #12]
 8010e58:	89a3      	ldrh	r3, [r4, #12]
 8010e5a:	431d      	orrs	r5, r3
 8010e5c:	81a5      	strh	r5, [r4, #12]
 8010e5e:	e7cf      	b.n	8010e00 <__smakebuf_r+0x18>

08010e60 <_fstat_r>:
 8010e60:	b538      	push	{r3, r4, r5, lr}
 8010e62:	4d07      	ldr	r5, [pc, #28]	@ (8010e80 <_fstat_r+0x20>)
 8010e64:	2300      	movs	r3, #0
 8010e66:	4604      	mov	r4, r0
 8010e68:	4608      	mov	r0, r1
 8010e6a:	4611      	mov	r1, r2
 8010e6c:	602b      	str	r3, [r5, #0]
 8010e6e:	f7f2 fb61 	bl	8003534 <_fstat>
 8010e72:	1c43      	adds	r3, r0, #1
 8010e74:	d102      	bne.n	8010e7c <_fstat_r+0x1c>
 8010e76:	682b      	ldr	r3, [r5, #0]
 8010e78:	b103      	cbz	r3, 8010e7c <_fstat_r+0x1c>
 8010e7a:	6023      	str	r3, [r4, #0]
 8010e7c:	bd38      	pop	{r3, r4, r5, pc}
 8010e7e:	bf00      	nop
 8010e80:	20001e34 	.word	0x20001e34

08010e84 <_isatty_r>:
 8010e84:	b538      	push	{r3, r4, r5, lr}
 8010e86:	4d06      	ldr	r5, [pc, #24]	@ (8010ea0 <_isatty_r+0x1c>)
 8010e88:	2300      	movs	r3, #0
 8010e8a:	4604      	mov	r4, r0
 8010e8c:	4608      	mov	r0, r1
 8010e8e:	602b      	str	r3, [r5, #0]
 8010e90:	f7f2 fb60 	bl	8003554 <_isatty>
 8010e94:	1c43      	adds	r3, r0, #1
 8010e96:	d102      	bne.n	8010e9e <_isatty_r+0x1a>
 8010e98:	682b      	ldr	r3, [r5, #0]
 8010e9a:	b103      	cbz	r3, 8010e9e <_isatty_r+0x1a>
 8010e9c:	6023      	str	r3, [r4, #0]
 8010e9e:	bd38      	pop	{r3, r4, r5, pc}
 8010ea0:	20001e34 	.word	0x20001e34

08010ea4 <atan2>:
 8010ea4:	f000 bb34 	b.w	8011510 <__ieee754_atan2>

08010ea8 <sqrt>:
 8010ea8:	b538      	push	{r3, r4, r5, lr}
 8010eaa:	ed2d 8b02 	vpush	{d8}
 8010eae:	ec55 4b10 	vmov	r4, r5, d0
 8010eb2:	f000 f8cd 	bl	8011050 <__ieee754_sqrt>
 8010eb6:	4622      	mov	r2, r4
 8010eb8:	462b      	mov	r3, r5
 8010eba:	4620      	mov	r0, r4
 8010ebc:	4629      	mov	r1, r5
 8010ebe:	eeb0 8a40 	vmov.f32	s16, s0
 8010ec2:	eef0 8a60 	vmov.f32	s17, s1
 8010ec6:	f7ef fe39 	bl	8000b3c <__aeabi_dcmpun>
 8010eca:	b990      	cbnz	r0, 8010ef2 <sqrt+0x4a>
 8010ecc:	2200      	movs	r2, #0
 8010ece:	2300      	movs	r3, #0
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	4629      	mov	r1, r5
 8010ed4:	f7ef fe0a 	bl	8000aec <__aeabi_dcmplt>
 8010ed8:	b158      	cbz	r0, 8010ef2 <sqrt+0x4a>
 8010eda:	f7fd fbbd 	bl	800e658 <__errno>
 8010ede:	2321      	movs	r3, #33	@ 0x21
 8010ee0:	6003      	str	r3, [r0, #0]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	4610      	mov	r0, r2
 8010ee8:	4619      	mov	r1, r3
 8010eea:	f7ef fcb7 	bl	800085c <__aeabi_ddiv>
 8010eee:	ec41 0b18 	vmov	d8, r0, r1
 8010ef2:	eeb0 0a48 	vmov.f32	s0, s16
 8010ef6:	eef0 0a68 	vmov.f32	s1, s17
 8010efa:	ecbd 8b02 	vpop	{d8}
 8010efe:	bd38      	pop	{r3, r4, r5, pc}

08010f00 <cos>:
 8010f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f02:	ec53 2b10 	vmov	r2, r3, d0
 8010f06:	4826      	ldr	r0, [pc, #152]	@ (8010fa0 <cos+0xa0>)
 8010f08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010f0c:	4281      	cmp	r1, r0
 8010f0e:	d806      	bhi.n	8010f1e <cos+0x1e>
 8010f10:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010f98 <cos+0x98>
 8010f14:	b005      	add	sp, #20
 8010f16:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f1a:	f000 b975 	b.w	8011208 <__kernel_cos>
 8010f1e:	4821      	ldr	r0, [pc, #132]	@ (8010fa4 <cos+0xa4>)
 8010f20:	4281      	cmp	r1, r0
 8010f22:	d908      	bls.n	8010f36 <cos+0x36>
 8010f24:	4610      	mov	r0, r2
 8010f26:	4619      	mov	r1, r3
 8010f28:	f7ef f9b6 	bl	8000298 <__aeabi_dsub>
 8010f2c:	ec41 0b10 	vmov	d0, r0, r1
 8010f30:	b005      	add	sp, #20
 8010f32:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f36:	4668      	mov	r0, sp
 8010f38:	f000 fbb2 	bl	80116a0 <__ieee754_rem_pio2>
 8010f3c:	f000 0003 	and.w	r0, r0, #3
 8010f40:	2801      	cmp	r0, #1
 8010f42:	d00b      	beq.n	8010f5c <cos+0x5c>
 8010f44:	2802      	cmp	r0, #2
 8010f46:	d015      	beq.n	8010f74 <cos+0x74>
 8010f48:	b9d8      	cbnz	r0, 8010f82 <cos+0x82>
 8010f4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f4e:	ed9d 0b00 	vldr	d0, [sp]
 8010f52:	f000 f959 	bl	8011208 <__kernel_cos>
 8010f56:	ec51 0b10 	vmov	r0, r1, d0
 8010f5a:	e7e7      	b.n	8010f2c <cos+0x2c>
 8010f5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f60:	ed9d 0b00 	vldr	d0, [sp]
 8010f64:	f000 fa18 	bl	8011398 <__kernel_sin>
 8010f68:	ec53 2b10 	vmov	r2, r3, d0
 8010f6c:	4610      	mov	r0, r2
 8010f6e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010f72:	e7db      	b.n	8010f2c <cos+0x2c>
 8010f74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f78:	ed9d 0b00 	vldr	d0, [sp]
 8010f7c:	f000 f944 	bl	8011208 <__kernel_cos>
 8010f80:	e7f2      	b.n	8010f68 <cos+0x68>
 8010f82:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f86:	ed9d 0b00 	vldr	d0, [sp]
 8010f8a:	2001      	movs	r0, #1
 8010f8c:	f000 fa04 	bl	8011398 <__kernel_sin>
 8010f90:	e7e1      	b.n	8010f56 <cos+0x56>
 8010f92:	bf00      	nop
 8010f94:	f3af 8000 	nop.w
	...
 8010fa0:	3fe921fb 	.word	0x3fe921fb
 8010fa4:	7fefffff 	.word	0x7fefffff

08010fa8 <sin>:
 8010fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010faa:	ec53 2b10 	vmov	r2, r3, d0
 8010fae:	4826      	ldr	r0, [pc, #152]	@ (8011048 <sin+0xa0>)
 8010fb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010fb4:	4281      	cmp	r1, r0
 8010fb6:	d807      	bhi.n	8010fc8 <sin+0x20>
 8010fb8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011040 <sin+0x98>
 8010fbc:	2000      	movs	r0, #0
 8010fbe:	b005      	add	sp, #20
 8010fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fc4:	f000 b9e8 	b.w	8011398 <__kernel_sin>
 8010fc8:	4820      	ldr	r0, [pc, #128]	@ (801104c <sin+0xa4>)
 8010fca:	4281      	cmp	r1, r0
 8010fcc:	d908      	bls.n	8010fe0 <sin+0x38>
 8010fce:	4610      	mov	r0, r2
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	f7ef f961 	bl	8000298 <__aeabi_dsub>
 8010fd6:	ec41 0b10 	vmov	d0, r0, r1
 8010fda:	b005      	add	sp, #20
 8010fdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010fe0:	4668      	mov	r0, sp
 8010fe2:	f000 fb5d 	bl	80116a0 <__ieee754_rem_pio2>
 8010fe6:	f000 0003 	and.w	r0, r0, #3
 8010fea:	2801      	cmp	r0, #1
 8010fec:	d00c      	beq.n	8011008 <sin+0x60>
 8010fee:	2802      	cmp	r0, #2
 8010ff0:	d011      	beq.n	8011016 <sin+0x6e>
 8010ff2:	b9e8      	cbnz	r0, 8011030 <sin+0x88>
 8010ff4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ff8:	ed9d 0b00 	vldr	d0, [sp]
 8010ffc:	2001      	movs	r0, #1
 8010ffe:	f000 f9cb 	bl	8011398 <__kernel_sin>
 8011002:	ec51 0b10 	vmov	r0, r1, d0
 8011006:	e7e6      	b.n	8010fd6 <sin+0x2e>
 8011008:	ed9d 1b02 	vldr	d1, [sp, #8]
 801100c:	ed9d 0b00 	vldr	d0, [sp]
 8011010:	f000 f8fa 	bl	8011208 <__kernel_cos>
 8011014:	e7f5      	b.n	8011002 <sin+0x5a>
 8011016:	ed9d 1b02 	vldr	d1, [sp, #8]
 801101a:	ed9d 0b00 	vldr	d0, [sp]
 801101e:	2001      	movs	r0, #1
 8011020:	f000 f9ba 	bl	8011398 <__kernel_sin>
 8011024:	ec53 2b10 	vmov	r2, r3, d0
 8011028:	4610      	mov	r0, r2
 801102a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801102e:	e7d2      	b.n	8010fd6 <sin+0x2e>
 8011030:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011034:	ed9d 0b00 	vldr	d0, [sp]
 8011038:	f000 f8e6 	bl	8011208 <__kernel_cos>
 801103c:	e7f2      	b.n	8011024 <sin+0x7c>
 801103e:	bf00      	nop
	...
 8011048:	3fe921fb 	.word	0x3fe921fb
 801104c:	7fefffff 	.word	0x7fefffff

08011050 <__ieee754_sqrt>:
 8011050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011054:	4a68      	ldr	r2, [pc, #416]	@ (80111f8 <__ieee754_sqrt+0x1a8>)
 8011056:	ec55 4b10 	vmov	r4, r5, d0
 801105a:	43aa      	bics	r2, r5
 801105c:	462b      	mov	r3, r5
 801105e:	4621      	mov	r1, r4
 8011060:	d110      	bne.n	8011084 <__ieee754_sqrt+0x34>
 8011062:	4622      	mov	r2, r4
 8011064:	4620      	mov	r0, r4
 8011066:	4629      	mov	r1, r5
 8011068:	f7ef face 	bl	8000608 <__aeabi_dmul>
 801106c:	4602      	mov	r2, r0
 801106e:	460b      	mov	r3, r1
 8011070:	4620      	mov	r0, r4
 8011072:	4629      	mov	r1, r5
 8011074:	f7ef f912 	bl	800029c <__adddf3>
 8011078:	4604      	mov	r4, r0
 801107a:	460d      	mov	r5, r1
 801107c:	ec45 4b10 	vmov	d0, r4, r5
 8011080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011084:	2d00      	cmp	r5, #0
 8011086:	dc0e      	bgt.n	80110a6 <__ieee754_sqrt+0x56>
 8011088:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801108c:	4322      	orrs	r2, r4
 801108e:	d0f5      	beq.n	801107c <__ieee754_sqrt+0x2c>
 8011090:	b19d      	cbz	r5, 80110ba <__ieee754_sqrt+0x6a>
 8011092:	4622      	mov	r2, r4
 8011094:	4620      	mov	r0, r4
 8011096:	4629      	mov	r1, r5
 8011098:	f7ef f8fe 	bl	8000298 <__aeabi_dsub>
 801109c:	4602      	mov	r2, r0
 801109e:	460b      	mov	r3, r1
 80110a0:	f7ef fbdc 	bl	800085c <__aeabi_ddiv>
 80110a4:	e7e8      	b.n	8011078 <__ieee754_sqrt+0x28>
 80110a6:	152a      	asrs	r2, r5, #20
 80110a8:	d115      	bne.n	80110d6 <__ieee754_sqrt+0x86>
 80110aa:	2000      	movs	r0, #0
 80110ac:	e009      	b.n	80110c2 <__ieee754_sqrt+0x72>
 80110ae:	0acb      	lsrs	r3, r1, #11
 80110b0:	3a15      	subs	r2, #21
 80110b2:	0549      	lsls	r1, r1, #21
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d0fa      	beq.n	80110ae <__ieee754_sqrt+0x5e>
 80110b8:	e7f7      	b.n	80110aa <__ieee754_sqrt+0x5a>
 80110ba:	462a      	mov	r2, r5
 80110bc:	e7fa      	b.n	80110b4 <__ieee754_sqrt+0x64>
 80110be:	005b      	lsls	r3, r3, #1
 80110c0:	3001      	adds	r0, #1
 80110c2:	02dc      	lsls	r4, r3, #11
 80110c4:	d5fb      	bpl.n	80110be <__ieee754_sqrt+0x6e>
 80110c6:	1e44      	subs	r4, r0, #1
 80110c8:	1b12      	subs	r2, r2, r4
 80110ca:	f1c0 0420 	rsb	r4, r0, #32
 80110ce:	fa21 f404 	lsr.w	r4, r1, r4
 80110d2:	4323      	orrs	r3, r4
 80110d4:	4081      	lsls	r1, r0
 80110d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80110da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80110de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80110e2:	07d2      	lsls	r2, r2, #31
 80110e4:	bf5c      	itt	pl
 80110e6:	005b      	lslpl	r3, r3, #1
 80110e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80110ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80110f0:	bf58      	it	pl
 80110f2:	0049      	lslpl	r1, r1, #1
 80110f4:	2600      	movs	r6, #0
 80110f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80110fa:	106d      	asrs	r5, r5, #1
 80110fc:	0049      	lsls	r1, r1, #1
 80110fe:	2016      	movs	r0, #22
 8011100:	4632      	mov	r2, r6
 8011102:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8011106:	1917      	adds	r7, r2, r4
 8011108:	429f      	cmp	r7, r3
 801110a:	bfde      	ittt	le
 801110c:	193a      	addle	r2, r7, r4
 801110e:	1bdb      	suble	r3, r3, r7
 8011110:	1936      	addle	r6, r6, r4
 8011112:	0fcf      	lsrs	r7, r1, #31
 8011114:	3801      	subs	r0, #1
 8011116:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801111a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801111e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011122:	d1f0      	bne.n	8011106 <__ieee754_sqrt+0xb6>
 8011124:	4604      	mov	r4, r0
 8011126:	2720      	movs	r7, #32
 8011128:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801112c:	429a      	cmp	r2, r3
 801112e:	eb00 0e0c 	add.w	lr, r0, ip
 8011132:	db02      	blt.n	801113a <__ieee754_sqrt+0xea>
 8011134:	d113      	bne.n	801115e <__ieee754_sqrt+0x10e>
 8011136:	458e      	cmp	lr, r1
 8011138:	d811      	bhi.n	801115e <__ieee754_sqrt+0x10e>
 801113a:	f1be 0f00 	cmp.w	lr, #0
 801113e:	eb0e 000c 	add.w	r0, lr, ip
 8011142:	da42      	bge.n	80111ca <__ieee754_sqrt+0x17a>
 8011144:	2800      	cmp	r0, #0
 8011146:	db40      	blt.n	80111ca <__ieee754_sqrt+0x17a>
 8011148:	f102 0801 	add.w	r8, r2, #1
 801114c:	1a9b      	subs	r3, r3, r2
 801114e:	458e      	cmp	lr, r1
 8011150:	bf88      	it	hi
 8011152:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011156:	eba1 010e 	sub.w	r1, r1, lr
 801115a:	4464      	add	r4, ip
 801115c:	4642      	mov	r2, r8
 801115e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8011162:	3f01      	subs	r7, #1
 8011164:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011168:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801116c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011170:	d1dc      	bne.n	801112c <__ieee754_sqrt+0xdc>
 8011172:	4319      	orrs	r1, r3
 8011174:	d01b      	beq.n	80111ae <__ieee754_sqrt+0x15e>
 8011176:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80111fc <__ieee754_sqrt+0x1ac>
 801117a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8011200 <__ieee754_sqrt+0x1b0>
 801117e:	e9da 0100 	ldrd	r0, r1, [sl]
 8011182:	e9db 2300 	ldrd	r2, r3, [fp]
 8011186:	f7ef f887 	bl	8000298 <__aeabi_dsub>
 801118a:	e9da 8900 	ldrd	r8, r9, [sl]
 801118e:	4602      	mov	r2, r0
 8011190:	460b      	mov	r3, r1
 8011192:	4640      	mov	r0, r8
 8011194:	4649      	mov	r1, r9
 8011196:	f7ef fcb3 	bl	8000b00 <__aeabi_dcmple>
 801119a:	b140      	cbz	r0, 80111ae <__ieee754_sqrt+0x15e>
 801119c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80111a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80111a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80111a8:	d111      	bne.n	80111ce <__ieee754_sqrt+0x17e>
 80111aa:	3601      	adds	r6, #1
 80111ac:	463c      	mov	r4, r7
 80111ae:	1072      	asrs	r2, r6, #1
 80111b0:	0863      	lsrs	r3, r4, #1
 80111b2:	07f1      	lsls	r1, r6, #31
 80111b4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80111b8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80111bc:	bf48      	it	mi
 80111be:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80111c2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80111c6:	4618      	mov	r0, r3
 80111c8:	e756      	b.n	8011078 <__ieee754_sqrt+0x28>
 80111ca:	4690      	mov	r8, r2
 80111cc:	e7be      	b.n	801114c <__ieee754_sqrt+0xfc>
 80111ce:	f7ef f865 	bl	800029c <__adddf3>
 80111d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80111d6:	4602      	mov	r2, r0
 80111d8:	460b      	mov	r3, r1
 80111da:	4640      	mov	r0, r8
 80111dc:	4649      	mov	r1, r9
 80111de:	f7ef fc85 	bl	8000aec <__aeabi_dcmplt>
 80111e2:	b120      	cbz	r0, 80111ee <__ieee754_sqrt+0x19e>
 80111e4:	1ca0      	adds	r0, r4, #2
 80111e6:	bf08      	it	eq
 80111e8:	3601      	addeq	r6, #1
 80111ea:	3402      	adds	r4, #2
 80111ec:	e7df      	b.n	80111ae <__ieee754_sqrt+0x15e>
 80111ee:	1c63      	adds	r3, r4, #1
 80111f0:	f023 0401 	bic.w	r4, r3, #1
 80111f4:	e7db      	b.n	80111ae <__ieee754_sqrt+0x15e>
 80111f6:	bf00      	nop
 80111f8:	7ff00000 	.word	0x7ff00000
 80111fc:	200002d8 	.word	0x200002d8
 8011200:	200002d0 	.word	0x200002d0
 8011204:	00000000 	.word	0x00000000

08011208 <__kernel_cos>:
 8011208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120c:	ec57 6b10 	vmov	r6, r7, d0
 8011210:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011214:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8011218:	ed8d 1b00 	vstr	d1, [sp]
 801121c:	d206      	bcs.n	801122c <__kernel_cos+0x24>
 801121e:	4630      	mov	r0, r6
 8011220:	4639      	mov	r1, r7
 8011222:	f7ef fca1 	bl	8000b68 <__aeabi_d2iz>
 8011226:	2800      	cmp	r0, #0
 8011228:	f000 8088 	beq.w	801133c <__kernel_cos+0x134>
 801122c:	4632      	mov	r2, r6
 801122e:	463b      	mov	r3, r7
 8011230:	4630      	mov	r0, r6
 8011232:	4639      	mov	r1, r7
 8011234:	f7ef f9e8 	bl	8000608 <__aeabi_dmul>
 8011238:	4b51      	ldr	r3, [pc, #324]	@ (8011380 <__kernel_cos+0x178>)
 801123a:	2200      	movs	r2, #0
 801123c:	4604      	mov	r4, r0
 801123e:	460d      	mov	r5, r1
 8011240:	f7ef f9e2 	bl	8000608 <__aeabi_dmul>
 8011244:	a340      	add	r3, pc, #256	@ (adr r3, 8011348 <__kernel_cos+0x140>)
 8011246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801124a:	4682      	mov	sl, r0
 801124c:	468b      	mov	fp, r1
 801124e:	4620      	mov	r0, r4
 8011250:	4629      	mov	r1, r5
 8011252:	f7ef f9d9 	bl	8000608 <__aeabi_dmul>
 8011256:	a33e      	add	r3, pc, #248	@ (adr r3, 8011350 <__kernel_cos+0x148>)
 8011258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125c:	f7ef f81e 	bl	800029c <__adddf3>
 8011260:	4622      	mov	r2, r4
 8011262:	462b      	mov	r3, r5
 8011264:	f7ef f9d0 	bl	8000608 <__aeabi_dmul>
 8011268:	a33b      	add	r3, pc, #236	@ (adr r3, 8011358 <__kernel_cos+0x150>)
 801126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126e:	f7ef f813 	bl	8000298 <__aeabi_dsub>
 8011272:	4622      	mov	r2, r4
 8011274:	462b      	mov	r3, r5
 8011276:	f7ef f9c7 	bl	8000608 <__aeabi_dmul>
 801127a:	a339      	add	r3, pc, #228	@ (adr r3, 8011360 <__kernel_cos+0x158>)
 801127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011280:	f7ef f80c 	bl	800029c <__adddf3>
 8011284:	4622      	mov	r2, r4
 8011286:	462b      	mov	r3, r5
 8011288:	f7ef f9be 	bl	8000608 <__aeabi_dmul>
 801128c:	a336      	add	r3, pc, #216	@ (adr r3, 8011368 <__kernel_cos+0x160>)
 801128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011292:	f7ef f801 	bl	8000298 <__aeabi_dsub>
 8011296:	4622      	mov	r2, r4
 8011298:	462b      	mov	r3, r5
 801129a:	f7ef f9b5 	bl	8000608 <__aeabi_dmul>
 801129e:	a334      	add	r3, pc, #208	@ (adr r3, 8011370 <__kernel_cos+0x168>)
 80112a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a4:	f7ee fffa 	bl	800029c <__adddf3>
 80112a8:	4622      	mov	r2, r4
 80112aa:	462b      	mov	r3, r5
 80112ac:	f7ef f9ac 	bl	8000608 <__aeabi_dmul>
 80112b0:	4622      	mov	r2, r4
 80112b2:	462b      	mov	r3, r5
 80112b4:	f7ef f9a8 	bl	8000608 <__aeabi_dmul>
 80112b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112bc:	4604      	mov	r4, r0
 80112be:	460d      	mov	r5, r1
 80112c0:	4630      	mov	r0, r6
 80112c2:	4639      	mov	r1, r7
 80112c4:	f7ef f9a0 	bl	8000608 <__aeabi_dmul>
 80112c8:	460b      	mov	r3, r1
 80112ca:	4602      	mov	r2, r0
 80112cc:	4629      	mov	r1, r5
 80112ce:	4620      	mov	r0, r4
 80112d0:	f7ee ffe2 	bl	8000298 <__aeabi_dsub>
 80112d4:	4b2b      	ldr	r3, [pc, #172]	@ (8011384 <__kernel_cos+0x17c>)
 80112d6:	4598      	cmp	r8, r3
 80112d8:	4606      	mov	r6, r0
 80112da:	460f      	mov	r7, r1
 80112dc:	d810      	bhi.n	8011300 <__kernel_cos+0xf8>
 80112de:	4602      	mov	r2, r0
 80112e0:	460b      	mov	r3, r1
 80112e2:	4650      	mov	r0, sl
 80112e4:	4659      	mov	r1, fp
 80112e6:	f7ee ffd7 	bl	8000298 <__aeabi_dsub>
 80112ea:	460b      	mov	r3, r1
 80112ec:	4926      	ldr	r1, [pc, #152]	@ (8011388 <__kernel_cos+0x180>)
 80112ee:	4602      	mov	r2, r0
 80112f0:	2000      	movs	r0, #0
 80112f2:	f7ee ffd1 	bl	8000298 <__aeabi_dsub>
 80112f6:	ec41 0b10 	vmov	d0, r0, r1
 80112fa:	b003      	add	sp, #12
 80112fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011300:	4b22      	ldr	r3, [pc, #136]	@ (801138c <__kernel_cos+0x184>)
 8011302:	4921      	ldr	r1, [pc, #132]	@ (8011388 <__kernel_cos+0x180>)
 8011304:	4598      	cmp	r8, r3
 8011306:	bf8c      	ite	hi
 8011308:	4d21      	ldrhi	r5, [pc, #132]	@ (8011390 <__kernel_cos+0x188>)
 801130a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801130e:	2400      	movs	r4, #0
 8011310:	4622      	mov	r2, r4
 8011312:	462b      	mov	r3, r5
 8011314:	2000      	movs	r0, #0
 8011316:	f7ee ffbf 	bl	8000298 <__aeabi_dsub>
 801131a:	4622      	mov	r2, r4
 801131c:	4680      	mov	r8, r0
 801131e:	4689      	mov	r9, r1
 8011320:	462b      	mov	r3, r5
 8011322:	4650      	mov	r0, sl
 8011324:	4659      	mov	r1, fp
 8011326:	f7ee ffb7 	bl	8000298 <__aeabi_dsub>
 801132a:	4632      	mov	r2, r6
 801132c:	463b      	mov	r3, r7
 801132e:	f7ee ffb3 	bl	8000298 <__aeabi_dsub>
 8011332:	4602      	mov	r2, r0
 8011334:	460b      	mov	r3, r1
 8011336:	4640      	mov	r0, r8
 8011338:	4649      	mov	r1, r9
 801133a:	e7da      	b.n	80112f2 <__kernel_cos+0xea>
 801133c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8011378 <__kernel_cos+0x170>
 8011340:	e7db      	b.n	80112fa <__kernel_cos+0xf2>
 8011342:	bf00      	nop
 8011344:	f3af 8000 	nop.w
 8011348:	be8838d4 	.word	0xbe8838d4
 801134c:	bda8fae9 	.word	0xbda8fae9
 8011350:	bdb4b1c4 	.word	0xbdb4b1c4
 8011354:	3e21ee9e 	.word	0x3e21ee9e
 8011358:	809c52ad 	.word	0x809c52ad
 801135c:	3e927e4f 	.word	0x3e927e4f
 8011360:	19cb1590 	.word	0x19cb1590
 8011364:	3efa01a0 	.word	0x3efa01a0
 8011368:	16c15177 	.word	0x16c15177
 801136c:	3f56c16c 	.word	0x3f56c16c
 8011370:	5555554c 	.word	0x5555554c
 8011374:	3fa55555 	.word	0x3fa55555
 8011378:	00000000 	.word	0x00000000
 801137c:	3ff00000 	.word	0x3ff00000
 8011380:	3fe00000 	.word	0x3fe00000
 8011384:	3fd33332 	.word	0x3fd33332
 8011388:	3ff00000 	.word	0x3ff00000
 801138c:	3fe90000 	.word	0x3fe90000
 8011390:	3fd20000 	.word	0x3fd20000
 8011394:	00000000 	.word	0x00000000

08011398 <__kernel_sin>:
 8011398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801139c:	ec55 4b10 	vmov	r4, r5, d0
 80113a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80113a4:	b085      	sub	sp, #20
 80113a6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80113aa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80113ae:	4680      	mov	r8, r0
 80113b0:	d205      	bcs.n	80113be <__kernel_sin+0x26>
 80113b2:	4620      	mov	r0, r4
 80113b4:	4629      	mov	r1, r5
 80113b6:	f7ef fbd7 	bl	8000b68 <__aeabi_d2iz>
 80113ba:	2800      	cmp	r0, #0
 80113bc:	d052      	beq.n	8011464 <__kernel_sin+0xcc>
 80113be:	4622      	mov	r2, r4
 80113c0:	462b      	mov	r3, r5
 80113c2:	4620      	mov	r0, r4
 80113c4:	4629      	mov	r1, r5
 80113c6:	f7ef f91f 	bl	8000608 <__aeabi_dmul>
 80113ca:	4682      	mov	sl, r0
 80113cc:	468b      	mov	fp, r1
 80113ce:	4602      	mov	r2, r0
 80113d0:	460b      	mov	r3, r1
 80113d2:	4620      	mov	r0, r4
 80113d4:	4629      	mov	r1, r5
 80113d6:	f7ef f917 	bl	8000608 <__aeabi_dmul>
 80113da:	a342      	add	r3, pc, #264	@ (adr r3, 80114e4 <__kernel_sin+0x14c>)
 80113dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e0:	e9cd 0100 	strd	r0, r1, [sp]
 80113e4:	4650      	mov	r0, sl
 80113e6:	4659      	mov	r1, fp
 80113e8:	f7ef f90e 	bl	8000608 <__aeabi_dmul>
 80113ec:	a33f      	add	r3, pc, #252	@ (adr r3, 80114ec <__kernel_sin+0x154>)
 80113ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f2:	f7ee ff51 	bl	8000298 <__aeabi_dsub>
 80113f6:	4652      	mov	r2, sl
 80113f8:	465b      	mov	r3, fp
 80113fa:	f7ef f905 	bl	8000608 <__aeabi_dmul>
 80113fe:	a33d      	add	r3, pc, #244	@ (adr r3, 80114f4 <__kernel_sin+0x15c>)
 8011400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011404:	f7ee ff4a 	bl	800029c <__adddf3>
 8011408:	4652      	mov	r2, sl
 801140a:	465b      	mov	r3, fp
 801140c:	f7ef f8fc 	bl	8000608 <__aeabi_dmul>
 8011410:	a33a      	add	r3, pc, #232	@ (adr r3, 80114fc <__kernel_sin+0x164>)
 8011412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011416:	f7ee ff3f 	bl	8000298 <__aeabi_dsub>
 801141a:	4652      	mov	r2, sl
 801141c:	465b      	mov	r3, fp
 801141e:	f7ef f8f3 	bl	8000608 <__aeabi_dmul>
 8011422:	a338      	add	r3, pc, #224	@ (adr r3, 8011504 <__kernel_sin+0x16c>)
 8011424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011428:	f7ee ff38 	bl	800029c <__adddf3>
 801142c:	4606      	mov	r6, r0
 801142e:	460f      	mov	r7, r1
 8011430:	f1b8 0f00 	cmp.w	r8, #0
 8011434:	d11b      	bne.n	801146e <__kernel_sin+0xd6>
 8011436:	4602      	mov	r2, r0
 8011438:	460b      	mov	r3, r1
 801143a:	4650      	mov	r0, sl
 801143c:	4659      	mov	r1, fp
 801143e:	f7ef f8e3 	bl	8000608 <__aeabi_dmul>
 8011442:	a325      	add	r3, pc, #148	@ (adr r3, 80114d8 <__kernel_sin+0x140>)
 8011444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011448:	f7ee ff26 	bl	8000298 <__aeabi_dsub>
 801144c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011450:	f7ef f8da 	bl	8000608 <__aeabi_dmul>
 8011454:	4602      	mov	r2, r0
 8011456:	460b      	mov	r3, r1
 8011458:	4620      	mov	r0, r4
 801145a:	4629      	mov	r1, r5
 801145c:	f7ee ff1e 	bl	800029c <__adddf3>
 8011460:	4604      	mov	r4, r0
 8011462:	460d      	mov	r5, r1
 8011464:	ec45 4b10 	vmov	d0, r4, r5
 8011468:	b005      	add	sp, #20
 801146a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801146e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011472:	4b1b      	ldr	r3, [pc, #108]	@ (80114e0 <__kernel_sin+0x148>)
 8011474:	2200      	movs	r2, #0
 8011476:	f7ef f8c7 	bl	8000608 <__aeabi_dmul>
 801147a:	4632      	mov	r2, r6
 801147c:	4680      	mov	r8, r0
 801147e:	4689      	mov	r9, r1
 8011480:	463b      	mov	r3, r7
 8011482:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011486:	f7ef f8bf 	bl	8000608 <__aeabi_dmul>
 801148a:	4602      	mov	r2, r0
 801148c:	460b      	mov	r3, r1
 801148e:	4640      	mov	r0, r8
 8011490:	4649      	mov	r1, r9
 8011492:	f7ee ff01 	bl	8000298 <__aeabi_dsub>
 8011496:	4652      	mov	r2, sl
 8011498:	465b      	mov	r3, fp
 801149a:	f7ef f8b5 	bl	8000608 <__aeabi_dmul>
 801149e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80114a2:	f7ee fef9 	bl	8000298 <__aeabi_dsub>
 80114a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80114d8 <__kernel_sin+0x140>)
 80114a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ac:	4606      	mov	r6, r0
 80114ae:	460f      	mov	r7, r1
 80114b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114b4:	f7ef f8a8 	bl	8000608 <__aeabi_dmul>
 80114b8:	4602      	mov	r2, r0
 80114ba:	460b      	mov	r3, r1
 80114bc:	4630      	mov	r0, r6
 80114be:	4639      	mov	r1, r7
 80114c0:	f7ee feec 	bl	800029c <__adddf3>
 80114c4:	4602      	mov	r2, r0
 80114c6:	460b      	mov	r3, r1
 80114c8:	4620      	mov	r0, r4
 80114ca:	4629      	mov	r1, r5
 80114cc:	f7ee fee4 	bl	8000298 <__aeabi_dsub>
 80114d0:	e7c6      	b.n	8011460 <__kernel_sin+0xc8>
 80114d2:	bf00      	nop
 80114d4:	f3af 8000 	nop.w
 80114d8:	55555549 	.word	0x55555549
 80114dc:	3fc55555 	.word	0x3fc55555
 80114e0:	3fe00000 	.word	0x3fe00000
 80114e4:	5acfd57c 	.word	0x5acfd57c
 80114e8:	3de5d93a 	.word	0x3de5d93a
 80114ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80114f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80114f4:	57b1fe7d 	.word	0x57b1fe7d
 80114f8:	3ec71de3 	.word	0x3ec71de3
 80114fc:	19c161d5 	.word	0x19c161d5
 8011500:	3f2a01a0 	.word	0x3f2a01a0
 8011504:	1110f8a6 	.word	0x1110f8a6
 8011508:	3f811111 	.word	0x3f811111
 801150c:	00000000 	.word	0x00000000

08011510 <__ieee754_atan2>:
 8011510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011514:	ec57 6b11 	vmov	r6, r7, d1
 8011518:	4273      	negs	r3, r6
 801151a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8011698 <__ieee754_atan2+0x188>
 801151e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8011522:	4333      	orrs	r3, r6
 8011524:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011528:	4543      	cmp	r3, r8
 801152a:	ec51 0b10 	vmov	r0, r1, d0
 801152e:	4635      	mov	r5, r6
 8011530:	d809      	bhi.n	8011546 <__ieee754_atan2+0x36>
 8011532:	4244      	negs	r4, r0
 8011534:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011538:	4304      	orrs	r4, r0
 801153a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801153e:	4544      	cmp	r4, r8
 8011540:	468e      	mov	lr, r1
 8011542:	4681      	mov	r9, r0
 8011544:	d907      	bls.n	8011556 <__ieee754_atan2+0x46>
 8011546:	4632      	mov	r2, r6
 8011548:	463b      	mov	r3, r7
 801154a:	f7ee fea7 	bl	800029c <__adddf3>
 801154e:	ec41 0b10 	vmov	d0, r0, r1
 8011552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011556:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801155a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801155e:	4334      	orrs	r4, r6
 8011560:	d103      	bne.n	801156a <__ieee754_atan2+0x5a>
 8011562:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011566:	f000 ba97 	b.w	8011a98 <atan>
 801156a:	17bc      	asrs	r4, r7, #30
 801156c:	f004 0402 	and.w	r4, r4, #2
 8011570:	ea53 0909 	orrs.w	r9, r3, r9
 8011574:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011578:	d107      	bne.n	801158a <__ieee754_atan2+0x7a>
 801157a:	2c02      	cmp	r4, #2
 801157c:	d05f      	beq.n	801163e <__ieee754_atan2+0x12e>
 801157e:	2c03      	cmp	r4, #3
 8011580:	d1e5      	bne.n	801154e <__ieee754_atan2+0x3e>
 8011582:	a141      	add	r1, pc, #260	@ (adr r1, 8011688 <__ieee754_atan2+0x178>)
 8011584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011588:	e7e1      	b.n	801154e <__ieee754_atan2+0x3e>
 801158a:	4315      	orrs	r5, r2
 801158c:	d106      	bne.n	801159c <__ieee754_atan2+0x8c>
 801158e:	f1be 0f00 	cmp.w	lr, #0
 8011592:	da5f      	bge.n	8011654 <__ieee754_atan2+0x144>
 8011594:	a13e      	add	r1, pc, #248	@ (adr r1, 8011690 <__ieee754_atan2+0x180>)
 8011596:	e9d1 0100 	ldrd	r0, r1, [r1]
 801159a:	e7d8      	b.n	801154e <__ieee754_atan2+0x3e>
 801159c:	4542      	cmp	r2, r8
 801159e:	d10f      	bne.n	80115c0 <__ieee754_atan2+0xb0>
 80115a0:	4293      	cmp	r3, r2
 80115a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80115a6:	d107      	bne.n	80115b8 <__ieee754_atan2+0xa8>
 80115a8:	2c02      	cmp	r4, #2
 80115aa:	d84c      	bhi.n	8011646 <__ieee754_atan2+0x136>
 80115ac:	4b34      	ldr	r3, [pc, #208]	@ (8011680 <__ieee754_atan2+0x170>)
 80115ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80115b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80115b6:	e7ca      	b.n	801154e <__ieee754_atan2+0x3e>
 80115b8:	2c02      	cmp	r4, #2
 80115ba:	d848      	bhi.n	801164e <__ieee754_atan2+0x13e>
 80115bc:	4b31      	ldr	r3, [pc, #196]	@ (8011684 <__ieee754_atan2+0x174>)
 80115be:	e7f6      	b.n	80115ae <__ieee754_atan2+0x9e>
 80115c0:	4543      	cmp	r3, r8
 80115c2:	d0e4      	beq.n	801158e <__ieee754_atan2+0x7e>
 80115c4:	1a9b      	subs	r3, r3, r2
 80115c6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80115ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80115ce:	da1e      	bge.n	801160e <__ieee754_atan2+0xfe>
 80115d0:	2f00      	cmp	r7, #0
 80115d2:	da01      	bge.n	80115d8 <__ieee754_atan2+0xc8>
 80115d4:	323c      	adds	r2, #60	@ 0x3c
 80115d6:	db1e      	blt.n	8011616 <__ieee754_atan2+0x106>
 80115d8:	4632      	mov	r2, r6
 80115da:	463b      	mov	r3, r7
 80115dc:	f7ef f93e 	bl	800085c <__aeabi_ddiv>
 80115e0:	ec41 0b10 	vmov	d0, r0, r1
 80115e4:	f000 fbf0 	bl	8011dc8 <fabs>
 80115e8:	f000 fa56 	bl	8011a98 <atan>
 80115ec:	ec51 0b10 	vmov	r0, r1, d0
 80115f0:	2c01      	cmp	r4, #1
 80115f2:	d013      	beq.n	801161c <__ieee754_atan2+0x10c>
 80115f4:	2c02      	cmp	r4, #2
 80115f6:	d015      	beq.n	8011624 <__ieee754_atan2+0x114>
 80115f8:	2c00      	cmp	r4, #0
 80115fa:	d0a8      	beq.n	801154e <__ieee754_atan2+0x3e>
 80115fc:	a318      	add	r3, pc, #96	@ (adr r3, 8011660 <__ieee754_atan2+0x150>)
 80115fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011602:	f7ee fe49 	bl	8000298 <__aeabi_dsub>
 8011606:	a318      	add	r3, pc, #96	@ (adr r3, 8011668 <__ieee754_atan2+0x158>)
 8011608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160c:	e014      	b.n	8011638 <__ieee754_atan2+0x128>
 801160e:	a118      	add	r1, pc, #96	@ (adr r1, 8011670 <__ieee754_atan2+0x160>)
 8011610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011614:	e7ec      	b.n	80115f0 <__ieee754_atan2+0xe0>
 8011616:	2000      	movs	r0, #0
 8011618:	2100      	movs	r1, #0
 801161a:	e7e9      	b.n	80115f0 <__ieee754_atan2+0xe0>
 801161c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011620:	4619      	mov	r1, r3
 8011622:	e794      	b.n	801154e <__ieee754_atan2+0x3e>
 8011624:	a30e      	add	r3, pc, #56	@ (adr r3, 8011660 <__ieee754_atan2+0x150>)
 8011626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801162a:	f7ee fe35 	bl	8000298 <__aeabi_dsub>
 801162e:	4602      	mov	r2, r0
 8011630:	460b      	mov	r3, r1
 8011632:	a10d      	add	r1, pc, #52	@ (adr r1, 8011668 <__ieee754_atan2+0x158>)
 8011634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011638:	f7ee fe2e 	bl	8000298 <__aeabi_dsub>
 801163c:	e787      	b.n	801154e <__ieee754_atan2+0x3e>
 801163e:	a10a      	add	r1, pc, #40	@ (adr r1, 8011668 <__ieee754_atan2+0x158>)
 8011640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011644:	e783      	b.n	801154e <__ieee754_atan2+0x3e>
 8011646:	a10c      	add	r1, pc, #48	@ (adr r1, 8011678 <__ieee754_atan2+0x168>)
 8011648:	e9d1 0100 	ldrd	r0, r1, [r1]
 801164c:	e77f      	b.n	801154e <__ieee754_atan2+0x3e>
 801164e:	2000      	movs	r0, #0
 8011650:	2100      	movs	r1, #0
 8011652:	e77c      	b.n	801154e <__ieee754_atan2+0x3e>
 8011654:	a106      	add	r1, pc, #24	@ (adr r1, 8011670 <__ieee754_atan2+0x160>)
 8011656:	e9d1 0100 	ldrd	r0, r1, [r1]
 801165a:	e778      	b.n	801154e <__ieee754_atan2+0x3e>
 801165c:	f3af 8000 	nop.w
 8011660:	33145c07 	.word	0x33145c07
 8011664:	3ca1a626 	.word	0x3ca1a626
 8011668:	54442d18 	.word	0x54442d18
 801166c:	400921fb 	.word	0x400921fb
 8011670:	54442d18 	.word	0x54442d18
 8011674:	3ff921fb 	.word	0x3ff921fb
 8011678:	54442d18 	.word	0x54442d18
 801167c:	3fe921fb 	.word	0x3fe921fb
 8011680:	08013260 	.word	0x08013260
 8011684:	08013248 	.word	0x08013248
 8011688:	54442d18 	.word	0x54442d18
 801168c:	c00921fb 	.word	0xc00921fb
 8011690:	54442d18 	.word	0x54442d18
 8011694:	bff921fb 	.word	0xbff921fb
 8011698:	7ff00000 	.word	0x7ff00000
 801169c:	00000000 	.word	0x00000000

080116a0 <__ieee754_rem_pio2>:
 80116a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a4:	ec57 6b10 	vmov	r6, r7, d0
 80116a8:	4bc5      	ldr	r3, [pc, #788]	@ (80119c0 <__ieee754_rem_pio2+0x320>)
 80116aa:	b08d      	sub	sp, #52	@ 0x34
 80116ac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80116b0:	4598      	cmp	r8, r3
 80116b2:	4604      	mov	r4, r0
 80116b4:	9704      	str	r7, [sp, #16]
 80116b6:	d807      	bhi.n	80116c8 <__ieee754_rem_pio2+0x28>
 80116b8:	2200      	movs	r2, #0
 80116ba:	2300      	movs	r3, #0
 80116bc:	ed80 0b00 	vstr	d0, [r0]
 80116c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80116c4:	2500      	movs	r5, #0
 80116c6:	e028      	b.n	801171a <__ieee754_rem_pio2+0x7a>
 80116c8:	4bbe      	ldr	r3, [pc, #760]	@ (80119c4 <__ieee754_rem_pio2+0x324>)
 80116ca:	4598      	cmp	r8, r3
 80116cc:	d878      	bhi.n	80117c0 <__ieee754_rem_pio2+0x120>
 80116ce:	9b04      	ldr	r3, [sp, #16]
 80116d0:	4dbd      	ldr	r5, [pc, #756]	@ (80119c8 <__ieee754_rem_pio2+0x328>)
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	4630      	mov	r0, r6
 80116d6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8011988 <__ieee754_rem_pio2+0x2e8>)
 80116d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116dc:	4639      	mov	r1, r7
 80116de:	dd38      	ble.n	8011752 <__ieee754_rem_pio2+0xb2>
 80116e0:	f7ee fdda 	bl	8000298 <__aeabi_dsub>
 80116e4:	45a8      	cmp	r8, r5
 80116e6:	4606      	mov	r6, r0
 80116e8:	460f      	mov	r7, r1
 80116ea:	d01a      	beq.n	8011722 <__ieee754_rem_pio2+0x82>
 80116ec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8011990 <__ieee754_rem_pio2+0x2f0>)
 80116ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f2:	f7ee fdd1 	bl	8000298 <__aeabi_dsub>
 80116f6:	4602      	mov	r2, r0
 80116f8:	460b      	mov	r3, r1
 80116fa:	4680      	mov	r8, r0
 80116fc:	4689      	mov	r9, r1
 80116fe:	4630      	mov	r0, r6
 8011700:	4639      	mov	r1, r7
 8011702:	f7ee fdc9 	bl	8000298 <__aeabi_dsub>
 8011706:	a3a2      	add	r3, pc, #648	@ (adr r3, 8011990 <__ieee754_rem_pio2+0x2f0>)
 8011708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801170c:	f7ee fdc4 	bl	8000298 <__aeabi_dsub>
 8011710:	e9c4 8900 	strd	r8, r9, [r4]
 8011714:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011718:	2501      	movs	r5, #1
 801171a:	4628      	mov	r0, r5
 801171c:	b00d      	add	sp, #52	@ 0x34
 801171e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011722:	a39d      	add	r3, pc, #628	@ (adr r3, 8011998 <__ieee754_rem_pio2+0x2f8>)
 8011724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011728:	f7ee fdb6 	bl	8000298 <__aeabi_dsub>
 801172c:	a39c      	add	r3, pc, #624	@ (adr r3, 80119a0 <__ieee754_rem_pio2+0x300>)
 801172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011732:	4606      	mov	r6, r0
 8011734:	460f      	mov	r7, r1
 8011736:	f7ee fdaf 	bl	8000298 <__aeabi_dsub>
 801173a:	4602      	mov	r2, r0
 801173c:	460b      	mov	r3, r1
 801173e:	4680      	mov	r8, r0
 8011740:	4689      	mov	r9, r1
 8011742:	4630      	mov	r0, r6
 8011744:	4639      	mov	r1, r7
 8011746:	f7ee fda7 	bl	8000298 <__aeabi_dsub>
 801174a:	a395      	add	r3, pc, #596	@ (adr r3, 80119a0 <__ieee754_rem_pio2+0x300>)
 801174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011750:	e7dc      	b.n	801170c <__ieee754_rem_pio2+0x6c>
 8011752:	f7ee fda3 	bl	800029c <__adddf3>
 8011756:	45a8      	cmp	r8, r5
 8011758:	4606      	mov	r6, r0
 801175a:	460f      	mov	r7, r1
 801175c:	d018      	beq.n	8011790 <__ieee754_rem_pio2+0xf0>
 801175e:	a38c      	add	r3, pc, #560	@ (adr r3, 8011990 <__ieee754_rem_pio2+0x2f0>)
 8011760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011764:	f7ee fd9a 	bl	800029c <__adddf3>
 8011768:	4602      	mov	r2, r0
 801176a:	460b      	mov	r3, r1
 801176c:	4680      	mov	r8, r0
 801176e:	4689      	mov	r9, r1
 8011770:	4630      	mov	r0, r6
 8011772:	4639      	mov	r1, r7
 8011774:	f7ee fd90 	bl	8000298 <__aeabi_dsub>
 8011778:	a385      	add	r3, pc, #532	@ (adr r3, 8011990 <__ieee754_rem_pio2+0x2f0>)
 801177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177e:	f7ee fd8d 	bl	800029c <__adddf3>
 8011782:	f04f 35ff 	mov.w	r5, #4294967295
 8011786:	e9c4 8900 	strd	r8, r9, [r4]
 801178a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801178e:	e7c4      	b.n	801171a <__ieee754_rem_pio2+0x7a>
 8011790:	a381      	add	r3, pc, #516	@ (adr r3, 8011998 <__ieee754_rem_pio2+0x2f8>)
 8011792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011796:	f7ee fd81 	bl	800029c <__adddf3>
 801179a:	a381      	add	r3, pc, #516	@ (adr r3, 80119a0 <__ieee754_rem_pio2+0x300>)
 801179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a0:	4606      	mov	r6, r0
 80117a2:	460f      	mov	r7, r1
 80117a4:	f7ee fd7a 	bl	800029c <__adddf3>
 80117a8:	4602      	mov	r2, r0
 80117aa:	460b      	mov	r3, r1
 80117ac:	4680      	mov	r8, r0
 80117ae:	4689      	mov	r9, r1
 80117b0:	4630      	mov	r0, r6
 80117b2:	4639      	mov	r1, r7
 80117b4:	f7ee fd70 	bl	8000298 <__aeabi_dsub>
 80117b8:	a379      	add	r3, pc, #484	@ (adr r3, 80119a0 <__ieee754_rem_pio2+0x300>)
 80117ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117be:	e7de      	b.n	801177e <__ieee754_rem_pio2+0xde>
 80117c0:	4b82      	ldr	r3, [pc, #520]	@ (80119cc <__ieee754_rem_pio2+0x32c>)
 80117c2:	4598      	cmp	r8, r3
 80117c4:	f200 80d1 	bhi.w	801196a <__ieee754_rem_pio2+0x2ca>
 80117c8:	f000 fafe 	bl	8011dc8 <fabs>
 80117cc:	ec57 6b10 	vmov	r6, r7, d0
 80117d0:	a375      	add	r3, pc, #468	@ (adr r3, 80119a8 <__ieee754_rem_pio2+0x308>)
 80117d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d6:	4630      	mov	r0, r6
 80117d8:	4639      	mov	r1, r7
 80117da:	f7ee ff15 	bl	8000608 <__aeabi_dmul>
 80117de:	4b7c      	ldr	r3, [pc, #496]	@ (80119d0 <__ieee754_rem_pio2+0x330>)
 80117e0:	2200      	movs	r2, #0
 80117e2:	f7ee fd5b 	bl	800029c <__adddf3>
 80117e6:	f7ef f9bf 	bl	8000b68 <__aeabi_d2iz>
 80117ea:	4605      	mov	r5, r0
 80117ec:	f7ee fea2 	bl	8000534 <__aeabi_i2d>
 80117f0:	4602      	mov	r2, r0
 80117f2:	460b      	mov	r3, r1
 80117f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80117f8:	a363      	add	r3, pc, #396	@ (adr r3, 8011988 <__ieee754_rem_pio2+0x2e8>)
 80117fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fe:	f7ee ff03 	bl	8000608 <__aeabi_dmul>
 8011802:	4602      	mov	r2, r0
 8011804:	460b      	mov	r3, r1
 8011806:	4630      	mov	r0, r6
 8011808:	4639      	mov	r1, r7
 801180a:	f7ee fd45 	bl	8000298 <__aeabi_dsub>
 801180e:	a360      	add	r3, pc, #384	@ (adr r3, 8011990 <__ieee754_rem_pio2+0x2f0>)
 8011810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011814:	4682      	mov	sl, r0
 8011816:	468b      	mov	fp, r1
 8011818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801181c:	f7ee fef4 	bl	8000608 <__aeabi_dmul>
 8011820:	2d1f      	cmp	r5, #31
 8011822:	4606      	mov	r6, r0
 8011824:	460f      	mov	r7, r1
 8011826:	dc0c      	bgt.n	8011842 <__ieee754_rem_pio2+0x1a2>
 8011828:	4b6a      	ldr	r3, [pc, #424]	@ (80119d4 <__ieee754_rem_pio2+0x334>)
 801182a:	1e6a      	subs	r2, r5, #1
 801182c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011830:	4543      	cmp	r3, r8
 8011832:	d006      	beq.n	8011842 <__ieee754_rem_pio2+0x1a2>
 8011834:	4632      	mov	r2, r6
 8011836:	463b      	mov	r3, r7
 8011838:	4650      	mov	r0, sl
 801183a:	4659      	mov	r1, fp
 801183c:	f7ee fd2c 	bl	8000298 <__aeabi_dsub>
 8011840:	e00e      	b.n	8011860 <__ieee754_rem_pio2+0x1c0>
 8011842:	463b      	mov	r3, r7
 8011844:	4632      	mov	r2, r6
 8011846:	4650      	mov	r0, sl
 8011848:	4659      	mov	r1, fp
 801184a:	f7ee fd25 	bl	8000298 <__aeabi_dsub>
 801184e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011852:	9305      	str	r3, [sp, #20]
 8011854:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011858:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801185c:	2b10      	cmp	r3, #16
 801185e:	dc02      	bgt.n	8011866 <__ieee754_rem_pio2+0x1c6>
 8011860:	e9c4 0100 	strd	r0, r1, [r4]
 8011864:	e039      	b.n	80118da <__ieee754_rem_pio2+0x23a>
 8011866:	a34c      	add	r3, pc, #304	@ (adr r3, 8011998 <__ieee754_rem_pio2+0x2f8>)
 8011868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801186c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011870:	f7ee feca 	bl	8000608 <__aeabi_dmul>
 8011874:	4606      	mov	r6, r0
 8011876:	460f      	mov	r7, r1
 8011878:	4602      	mov	r2, r0
 801187a:	460b      	mov	r3, r1
 801187c:	4650      	mov	r0, sl
 801187e:	4659      	mov	r1, fp
 8011880:	f7ee fd0a 	bl	8000298 <__aeabi_dsub>
 8011884:	4602      	mov	r2, r0
 8011886:	460b      	mov	r3, r1
 8011888:	4680      	mov	r8, r0
 801188a:	4689      	mov	r9, r1
 801188c:	4650      	mov	r0, sl
 801188e:	4659      	mov	r1, fp
 8011890:	f7ee fd02 	bl	8000298 <__aeabi_dsub>
 8011894:	4632      	mov	r2, r6
 8011896:	463b      	mov	r3, r7
 8011898:	f7ee fcfe 	bl	8000298 <__aeabi_dsub>
 801189c:	a340      	add	r3, pc, #256	@ (adr r3, 80119a0 <__ieee754_rem_pio2+0x300>)
 801189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a2:	4606      	mov	r6, r0
 80118a4:	460f      	mov	r7, r1
 80118a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118aa:	f7ee fead 	bl	8000608 <__aeabi_dmul>
 80118ae:	4632      	mov	r2, r6
 80118b0:	463b      	mov	r3, r7
 80118b2:	f7ee fcf1 	bl	8000298 <__aeabi_dsub>
 80118b6:	4602      	mov	r2, r0
 80118b8:	460b      	mov	r3, r1
 80118ba:	4606      	mov	r6, r0
 80118bc:	460f      	mov	r7, r1
 80118be:	4640      	mov	r0, r8
 80118c0:	4649      	mov	r1, r9
 80118c2:	f7ee fce9 	bl	8000298 <__aeabi_dsub>
 80118c6:	9a05      	ldr	r2, [sp, #20]
 80118c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80118cc:	1ad3      	subs	r3, r2, r3
 80118ce:	2b31      	cmp	r3, #49	@ 0x31
 80118d0:	dc20      	bgt.n	8011914 <__ieee754_rem_pio2+0x274>
 80118d2:	e9c4 0100 	strd	r0, r1, [r4]
 80118d6:	46c2      	mov	sl, r8
 80118d8:	46cb      	mov	fp, r9
 80118da:	e9d4 8900 	ldrd	r8, r9, [r4]
 80118de:	4650      	mov	r0, sl
 80118e0:	4642      	mov	r2, r8
 80118e2:	464b      	mov	r3, r9
 80118e4:	4659      	mov	r1, fp
 80118e6:	f7ee fcd7 	bl	8000298 <__aeabi_dsub>
 80118ea:	463b      	mov	r3, r7
 80118ec:	4632      	mov	r2, r6
 80118ee:	f7ee fcd3 	bl	8000298 <__aeabi_dsub>
 80118f2:	9b04      	ldr	r3, [sp, #16]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80118fa:	f6bf af0e 	bge.w	801171a <__ieee754_rem_pio2+0x7a>
 80118fe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8011902:	6063      	str	r3, [r4, #4]
 8011904:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011908:	f8c4 8000 	str.w	r8, [r4]
 801190c:	60a0      	str	r0, [r4, #8]
 801190e:	60e3      	str	r3, [r4, #12]
 8011910:	426d      	negs	r5, r5
 8011912:	e702      	b.n	801171a <__ieee754_rem_pio2+0x7a>
 8011914:	a326      	add	r3, pc, #152	@ (adr r3, 80119b0 <__ieee754_rem_pio2+0x310>)
 8011916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801191e:	f7ee fe73 	bl	8000608 <__aeabi_dmul>
 8011922:	4606      	mov	r6, r0
 8011924:	460f      	mov	r7, r1
 8011926:	4602      	mov	r2, r0
 8011928:	460b      	mov	r3, r1
 801192a:	4640      	mov	r0, r8
 801192c:	4649      	mov	r1, r9
 801192e:	f7ee fcb3 	bl	8000298 <__aeabi_dsub>
 8011932:	4602      	mov	r2, r0
 8011934:	460b      	mov	r3, r1
 8011936:	4682      	mov	sl, r0
 8011938:	468b      	mov	fp, r1
 801193a:	4640      	mov	r0, r8
 801193c:	4649      	mov	r1, r9
 801193e:	f7ee fcab 	bl	8000298 <__aeabi_dsub>
 8011942:	4632      	mov	r2, r6
 8011944:	463b      	mov	r3, r7
 8011946:	f7ee fca7 	bl	8000298 <__aeabi_dsub>
 801194a:	a31b      	add	r3, pc, #108	@ (adr r3, 80119b8 <__ieee754_rem_pio2+0x318>)
 801194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011950:	4606      	mov	r6, r0
 8011952:	460f      	mov	r7, r1
 8011954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011958:	f7ee fe56 	bl	8000608 <__aeabi_dmul>
 801195c:	4632      	mov	r2, r6
 801195e:	463b      	mov	r3, r7
 8011960:	f7ee fc9a 	bl	8000298 <__aeabi_dsub>
 8011964:	4606      	mov	r6, r0
 8011966:	460f      	mov	r7, r1
 8011968:	e764      	b.n	8011834 <__ieee754_rem_pio2+0x194>
 801196a:	4b1b      	ldr	r3, [pc, #108]	@ (80119d8 <__ieee754_rem_pio2+0x338>)
 801196c:	4598      	cmp	r8, r3
 801196e:	d935      	bls.n	80119dc <__ieee754_rem_pio2+0x33c>
 8011970:	4632      	mov	r2, r6
 8011972:	463b      	mov	r3, r7
 8011974:	4630      	mov	r0, r6
 8011976:	4639      	mov	r1, r7
 8011978:	f7ee fc8e 	bl	8000298 <__aeabi_dsub>
 801197c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011980:	e9c4 0100 	strd	r0, r1, [r4]
 8011984:	e69e      	b.n	80116c4 <__ieee754_rem_pio2+0x24>
 8011986:	bf00      	nop
 8011988:	54400000 	.word	0x54400000
 801198c:	3ff921fb 	.word	0x3ff921fb
 8011990:	1a626331 	.word	0x1a626331
 8011994:	3dd0b461 	.word	0x3dd0b461
 8011998:	1a600000 	.word	0x1a600000
 801199c:	3dd0b461 	.word	0x3dd0b461
 80119a0:	2e037073 	.word	0x2e037073
 80119a4:	3ba3198a 	.word	0x3ba3198a
 80119a8:	6dc9c883 	.word	0x6dc9c883
 80119ac:	3fe45f30 	.word	0x3fe45f30
 80119b0:	2e000000 	.word	0x2e000000
 80119b4:	3ba3198a 	.word	0x3ba3198a
 80119b8:	252049c1 	.word	0x252049c1
 80119bc:	397b839a 	.word	0x397b839a
 80119c0:	3fe921fb 	.word	0x3fe921fb
 80119c4:	4002d97b 	.word	0x4002d97b
 80119c8:	3ff921fb 	.word	0x3ff921fb
 80119cc:	413921fb 	.word	0x413921fb
 80119d0:	3fe00000 	.word	0x3fe00000
 80119d4:	08013278 	.word	0x08013278
 80119d8:	7fefffff 	.word	0x7fefffff
 80119dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80119e0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80119e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80119e8:	4630      	mov	r0, r6
 80119ea:	460f      	mov	r7, r1
 80119ec:	f7ef f8bc 	bl	8000b68 <__aeabi_d2iz>
 80119f0:	f7ee fda0 	bl	8000534 <__aeabi_i2d>
 80119f4:	4602      	mov	r2, r0
 80119f6:	460b      	mov	r3, r1
 80119f8:	4630      	mov	r0, r6
 80119fa:	4639      	mov	r1, r7
 80119fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011a00:	f7ee fc4a 	bl	8000298 <__aeabi_dsub>
 8011a04:	4b22      	ldr	r3, [pc, #136]	@ (8011a90 <__ieee754_rem_pio2+0x3f0>)
 8011a06:	2200      	movs	r2, #0
 8011a08:	f7ee fdfe 	bl	8000608 <__aeabi_dmul>
 8011a0c:	460f      	mov	r7, r1
 8011a0e:	4606      	mov	r6, r0
 8011a10:	f7ef f8aa 	bl	8000b68 <__aeabi_d2iz>
 8011a14:	f7ee fd8e 	bl	8000534 <__aeabi_i2d>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	4639      	mov	r1, r7
 8011a20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011a24:	f7ee fc38 	bl	8000298 <__aeabi_dsub>
 8011a28:	4b19      	ldr	r3, [pc, #100]	@ (8011a90 <__ieee754_rem_pio2+0x3f0>)
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f7ee fdec 	bl	8000608 <__aeabi_dmul>
 8011a30:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8011a34:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8011a38:	f04f 0803 	mov.w	r8, #3
 8011a3c:	2600      	movs	r6, #0
 8011a3e:	2700      	movs	r7, #0
 8011a40:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011a44:	4632      	mov	r2, r6
 8011a46:	463b      	mov	r3, r7
 8011a48:	46c2      	mov	sl, r8
 8011a4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8011a4e:	f7ef f843 	bl	8000ad8 <__aeabi_dcmpeq>
 8011a52:	2800      	cmp	r0, #0
 8011a54:	d1f4      	bne.n	8011a40 <__ieee754_rem_pio2+0x3a0>
 8011a56:	4b0f      	ldr	r3, [pc, #60]	@ (8011a94 <__ieee754_rem_pio2+0x3f4>)
 8011a58:	9301      	str	r3, [sp, #4]
 8011a5a:	2302      	movs	r3, #2
 8011a5c:	9300      	str	r3, [sp, #0]
 8011a5e:	462a      	mov	r2, r5
 8011a60:	4653      	mov	r3, sl
 8011a62:	4621      	mov	r1, r4
 8011a64:	a806      	add	r0, sp, #24
 8011a66:	f000 f9b7 	bl	8011dd8 <__kernel_rem_pio2>
 8011a6a:	9b04      	ldr	r3, [sp, #16]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	4605      	mov	r5, r0
 8011a70:	f6bf ae53 	bge.w	801171a <__ieee754_rem_pio2+0x7a>
 8011a74:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011a78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011a7c:	e9c4 2300 	strd	r2, r3, [r4]
 8011a80:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8011a84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011a88:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8011a8c:	e740      	b.n	8011910 <__ieee754_rem_pio2+0x270>
 8011a8e:	bf00      	nop
 8011a90:	41700000 	.word	0x41700000
 8011a94:	080132f8 	.word	0x080132f8

08011a98 <atan>:
 8011a98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a9c:	ec55 4b10 	vmov	r4, r5, d0
 8011aa0:	4bbf      	ldr	r3, [pc, #764]	@ (8011da0 <atan+0x308>)
 8011aa2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8011aa6:	429e      	cmp	r6, r3
 8011aa8:	46ab      	mov	fp, r5
 8011aaa:	d918      	bls.n	8011ade <atan+0x46>
 8011aac:	4bbd      	ldr	r3, [pc, #756]	@ (8011da4 <atan+0x30c>)
 8011aae:	429e      	cmp	r6, r3
 8011ab0:	d801      	bhi.n	8011ab6 <atan+0x1e>
 8011ab2:	d109      	bne.n	8011ac8 <atan+0x30>
 8011ab4:	b144      	cbz	r4, 8011ac8 <atan+0x30>
 8011ab6:	4622      	mov	r2, r4
 8011ab8:	462b      	mov	r3, r5
 8011aba:	4620      	mov	r0, r4
 8011abc:	4629      	mov	r1, r5
 8011abe:	f7ee fbed 	bl	800029c <__adddf3>
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	460d      	mov	r5, r1
 8011ac6:	e006      	b.n	8011ad6 <atan+0x3e>
 8011ac8:	f1bb 0f00 	cmp.w	fp, #0
 8011acc:	f340 812b 	ble.w	8011d26 <atan+0x28e>
 8011ad0:	a597      	add	r5, pc, #604	@ (adr r5, 8011d30 <atan+0x298>)
 8011ad2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011ad6:	ec45 4b10 	vmov	d0, r4, r5
 8011ada:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ade:	4bb2      	ldr	r3, [pc, #712]	@ (8011da8 <atan+0x310>)
 8011ae0:	429e      	cmp	r6, r3
 8011ae2:	d813      	bhi.n	8011b0c <atan+0x74>
 8011ae4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8011ae8:	429e      	cmp	r6, r3
 8011aea:	d80c      	bhi.n	8011b06 <atan+0x6e>
 8011aec:	a392      	add	r3, pc, #584	@ (adr r3, 8011d38 <atan+0x2a0>)
 8011aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af2:	4620      	mov	r0, r4
 8011af4:	4629      	mov	r1, r5
 8011af6:	f7ee fbd1 	bl	800029c <__adddf3>
 8011afa:	4bac      	ldr	r3, [pc, #688]	@ (8011dac <atan+0x314>)
 8011afc:	2200      	movs	r2, #0
 8011afe:	f7ef f813 	bl	8000b28 <__aeabi_dcmpgt>
 8011b02:	2800      	cmp	r0, #0
 8011b04:	d1e7      	bne.n	8011ad6 <atan+0x3e>
 8011b06:	f04f 3aff 	mov.w	sl, #4294967295
 8011b0a:	e029      	b.n	8011b60 <atan+0xc8>
 8011b0c:	f000 f95c 	bl	8011dc8 <fabs>
 8011b10:	4ba7      	ldr	r3, [pc, #668]	@ (8011db0 <atan+0x318>)
 8011b12:	429e      	cmp	r6, r3
 8011b14:	ec55 4b10 	vmov	r4, r5, d0
 8011b18:	f200 80bc 	bhi.w	8011c94 <atan+0x1fc>
 8011b1c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8011b20:	429e      	cmp	r6, r3
 8011b22:	f200 809e 	bhi.w	8011c62 <atan+0x1ca>
 8011b26:	4622      	mov	r2, r4
 8011b28:	462b      	mov	r3, r5
 8011b2a:	4620      	mov	r0, r4
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	f7ee fbb5 	bl	800029c <__adddf3>
 8011b32:	4b9e      	ldr	r3, [pc, #632]	@ (8011dac <atan+0x314>)
 8011b34:	2200      	movs	r2, #0
 8011b36:	f7ee fbaf 	bl	8000298 <__aeabi_dsub>
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	4606      	mov	r6, r0
 8011b3e:	460f      	mov	r7, r1
 8011b40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011b44:	4620      	mov	r0, r4
 8011b46:	4629      	mov	r1, r5
 8011b48:	f7ee fba8 	bl	800029c <__adddf3>
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	460b      	mov	r3, r1
 8011b50:	4630      	mov	r0, r6
 8011b52:	4639      	mov	r1, r7
 8011b54:	f7ee fe82 	bl	800085c <__aeabi_ddiv>
 8011b58:	f04f 0a00 	mov.w	sl, #0
 8011b5c:	4604      	mov	r4, r0
 8011b5e:	460d      	mov	r5, r1
 8011b60:	4622      	mov	r2, r4
 8011b62:	462b      	mov	r3, r5
 8011b64:	4620      	mov	r0, r4
 8011b66:	4629      	mov	r1, r5
 8011b68:	f7ee fd4e 	bl	8000608 <__aeabi_dmul>
 8011b6c:	4602      	mov	r2, r0
 8011b6e:	460b      	mov	r3, r1
 8011b70:	4680      	mov	r8, r0
 8011b72:	4689      	mov	r9, r1
 8011b74:	f7ee fd48 	bl	8000608 <__aeabi_dmul>
 8011b78:	a371      	add	r3, pc, #452	@ (adr r3, 8011d40 <atan+0x2a8>)
 8011b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b7e:	4606      	mov	r6, r0
 8011b80:	460f      	mov	r7, r1
 8011b82:	f7ee fd41 	bl	8000608 <__aeabi_dmul>
 8011b86:	a370      	add	r3, pc, #448	@ (adr r3, 8011d48 <atan+0x2b0>)
 8011b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b8c:	f7ee fb86 	bl	800029c <__adddf3>
 8011b90:	4632      	mov	r2, r6
 8011b92:	463b      	mov	r3, r7
 8011b94:	f7ee fd38 	bl	8000608 <__aeabi_dmul>
 8011b98:	a36d      	add	r3, pc, #436	@ (adr r3, 8011d50 <atan+0x2b8>)
 8011b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9e:	f7ee fb7d 	bl	800029c <__adddf3>
 8011ba2:	4632      	mov	r2, r6
 8011ba4:	463b      	mov	r3, r7
 8011ba6:	f7ee fd2f 	bl	8000608 <__aeabi_dmul>
 8011baa:	a36b      	add	r3, pc, #428	@ (adr r3, 8011d58 <atan+0x2c0>)
 8011bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb0:	f7ee fb74 	bl	800029c <__adddf3>
 8011bb4:	4632      	mov	r2, r6
 8011bb6:	463b      	mov	r3, r7
 8011bb8:	f7ee fd26 	bl	8000608 <__aeabi_dmul>
 8011bbc:	a368      	add	r3, pc, #416	@ (adr r3, 8011d60 <atan+0x2c8>)
 8011bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc2:	f7ee fb6b 	bl	800029c <__adddf3>
 8011bc6:	4632      	mov	r2, r6
 8011bc8:	463b      	mov	r3, r7
 8011bca:	f7ee fd1d 	bl	8000608 <__aeabi_dmul>
 8011bce:	a366      	add	r3, pc, #408	@ (adr r3, 8011d68 <atan+0x2d0>)
 8011bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd4:	f7ee fb62 	bl	800029c <__adddf3>
 8011bd8:	4642      	mov	r2, r8
 8011bda:	464b      	mov	r3, r9
 8011bdc:	f7ee fd14 	bl	8000608 <__aeabi_dmul>
 8011be0:	a363      	add	r3, pc, #396	@ (adr r3, 8011d70 <atan+0x2d8>)
 8011be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be6:	4680      	mov	r8, r0
 8011be8:	4689      	mov	r9, r1
 8011bea:	4630      	mov	r0, r6
 8011bec:	4639      	mov	r1, r7
 8011bee:	f7ee fd0b 	bl	8000608 <__aeabi_dmul>
 8011bf2:	a361      	add	r3, pc, #388	@ (adr r3, 8011d78 <atan+0x2e0>)
 8011bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf8:	f7ee fb4e 	bl	8000298 <__aeabi_dsub>
 8011bfc:	4632      	mov	r2, r6
 8011bfe:	463b      	mov	r3, r7
 8011c00:	f7ee fd02 	bl	8000608 <__aeabi_dmul>
 8011c04:	a35e      	add	r3, pc, #376	@ (adr r3, 8011d80 <atan+0x2e8>)
 8011c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0a:	f7ee fb45 	bl	8000298 <__aeabi_dsub>
 8011c0e:	4632      	mov	r2, r6
 8011c10:	463b      	mov	r3, r7
 8011c12:	f7ee fcf9 	bl	8000608 <__aeabi_dmul>
 8011c16:	a35c      	add	r3, pc, #368	@ (adr r3, 8011d88 <atan+0x2f0>)
 8011c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1c:	f7ee fb3c 	bl	8000298 <__aeabi_dsub>
 8011c20:	4632      	mov	r2, r6
 8011c22:	463b      	mov	r3, r7
 8011c24:	f7ee fcf0 	bl	8000608 <__aeabi_dmul>
 8011c28:	a359      	add	r3, pc, #356	@ (adr r3, 8011d90 <atan+0x2f8>)
 8011c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2e:	f7ee fb33 	bl	8000298 <__aeabi_dsub>
 8011c32:	4632      	mov	r2, r6
 8011c34:	463b      	mov	r3, r7
 8011c36:	f7ee fce7 	bl	8000608 <__aeabi_dmul>
 8011c3a:	4602      	mov	r2, r0
 8011c3c:	460b      	mov	r3, r1
 8011c3e:	4640      	mov	r0, r8
 8011c40:	4649      	mov	r1, r9
 8011c42:	f7ee fb2b 	bl	800029c <__adddf3>
 8011c46:	4622      	mov	r2, r4
 8011c48:	462b      	mov	r3, r5
 8011c4a:	f7ee fcdd 	bl	8000608 <__aeabi_dmul>
 8011c4e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011c52:	4602      	mov	r2, r0
 8011c54:	460b      	mov	r3, r1
 8011c56:	d148      	bne.n	8011cea <atan+0x252>
 8011c58:	4620      	mov	r0, r4
 8011c5a:	4629      	mov	r1, r5
 8011c5c:	f7ee fb1c 	bl	8000298 <__aeabi_dsub>
 8011c60:	e72f      	b.n	8011ac2 <atan+0x2a>
 8011c62:	4b52      	ldr	r3, [pc, #328]	@ (8011dac <atan+0x314>)
 8011c64:	2200      	movs	r2, #0
 8011c66:	4620      	mov	r0, r4
 8011c68:	4629      	mov	r1, r5
 8011c6a:	f7ee fb15 	bl	8000298 <__aeabi_dsub>
 8011c6e:	4b4f      	ldr	r3, [pc, #316]	@ (8011dac <atan+0x314>)
 8011c70:	4606      	mov	r6, r0
 8011c72:	460f      	mov	r7, r1
 8011c74:	2200      	movs	r2, #0
 8011c76:	4620      	mov	r0, r4
 8011c78:	4629      	mov	r1, r5
 8011c7a:	f7ee fb0f 	bl	800029c <__adddf3>
 8011c7e:	4602      	mov	r2, r0
 8011c80:	460b      	mov	r3, r1
 8011c82:	4630      	mov	r0, r6
 8011c84:	4639      	mov	r1, r7
 8011c86:	f7ee fde9 	bl	800085c <__aeabi_ddiv>
 8011c8a:	f04f 0a01 	mov.w	sl, #1
 8011c8e:	4604      	mov	r4, r0
 8011c90:	460d      	mov	r5, r1
 8011c92:	e765      	b.n	8011b60 <atan+0xc8>
 8011c94:	4b47      	ldr	r3, [pc, #284]	@ (8011db4 <atan+0x31c>)
 8011c96:	429e      	cmp	r6, r3
 8011c98:	d21c      	bcs.n	8011cd4 <atan+0x23c>
 8011c9a:	4b47      	ldr	r3, [pc, #284]	@ (8011db8 <atan+0x320>)
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	f7ee faf9 	bl	8000298 <__aeabi_dsub>
 8011ca6:	4b44      	ldr	r3, [pc, #272]	@ (8011db8 <atan+0x320>)
 8011ca8:	4606      	mov	r6, r0
 8011caa:	460f      	mov	r7, r1
 8011cac:	2200      	movs	r2, #0
 8011cae:	4620      	mov	r0, r4
 8011cb0:	4629      	mov	r1, r5
 8011cb2:	f7ee fca9 	bl	8000608 <__aeabi_dmul>
 8011cb6:	4b3d      	ldr	r3, [pc, #244]	@ (8011dac <atan+0x314>)
 8011cb8:	2200      	movs	r2, #0
 8011cba:	f7ee faef 	bl	800029c <__adddf3>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	4639      	mov	r1, r7
 8011cc6:	f7ee fdc9 	bl	800085c <__aeabi_ddiv>
 8011cca:	f04f 0a02 	mov.w	sl, #2
 8011cce:	4604      	mov	r4, r0
 8011cd0:	460d      	mov	r5, r1
 8011cd2:	e745      	b.n	8011b60 <atan+0xc8>
 8011cd4:	4622      	mov	r2, r4
 8011cd6:	462b      	mov	r3, r5
 8011cd8:	4938      	ldr	r1, [pc, #224]	@ (8011dbc <atan+0x324>)
 8011cda:	2000      	movs	r0, #0
 8011cdc:	f7ee fdbe 	bl	800085c <__aeabi_ddiv>
 8011ce0:	f04f 0a03 	mov.w	sl, #3
 8011ce4:	4604      	mov	r4, r0
 8011ce6:	460d      	mov	r5, r1
 8011ce8:	e73a      	b.n	8011b60 <atan+0xc8>
 8011cea:	4b35      	ldr	r3, [pc, #212]	@ (8011dc0 <atan+0x328>)
 8011cec:	4e35      	ldr	r6, [pc, #212]	@ (8011dc4 <atan+0x32c>)
 8011cee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf6:	f7ee facf 	bl	8000298 <__aeabi_dsub>
 8011cfa:	4622      	mov	r2, r4
 8011cfc:	462b      	mov	r3, r5
 8011cfe:	f7ee facb 	bl	8000298 <__aeabi_dsub>
 8011d02:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8011d06:	4602      	mov	r2, r0
 8011d08:	460b      	mov	r3, r1
 8011d0a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011d0e:	f7ee fac3 	bl	8000298 <__aeabi_dsub>
 8011d12:	f1bb 0f00 	cmp.w	fp, #0
 8011d16:	4604      	mov	r4, r0
 8011d18:	460d      	mov	r5, r1
 8011d1a:	f6bf aedc 	bge.w	8011ad6 <atan+0x3e>
 8011d1e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011d22:	461d      	mov	r5, r3
 8011d24:	e6d7      	b.n	8011ad6 <atan+0x3e>
 8011d26:	a51c      	add	r5, pc, #112	@ (adr r5, 8011d98 <atan+0x300>)
 8011d28:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011d2c:	e6d3      	b.n	8011ad6 <atan+0x3e>
 8011d2e:	bf00      	nop
 8011d30:	54442d18 	.word	0x54442d18
 8011d34:	3ff921fb 	.word	0x3ff921fb
 8011d38:	8800759c 	.word	0x8800759c
 8011d3c:	7e37e43c 	.word	0x7e37e43c
 8011d40:	e322da11 	.word	0xe322da11
 8011d44:	3f90ad3a 	.word	0x3f90ad3a
 8011d48:	24760deb 	.word	0x24760deb
 8011d4c:	3fa97b4b 	.word	0x3fa97b4b
 8011d50:	a0d03d51 	.word	0xa0d03d51
 8011d54:	3fb10d66 	.word	0x3fb10d66
 8011d58:	c54c206e 	.word	0xc54c206e
 8011d5c:	3fb745cd 	.word	0x3fb745cd
 8011d60:	920083ff 	.word	0x920083ff
 8011d64:	3fc24924 	.word	0x3fc24924
 8011d68:	5555550d 	.word	0x5555550d
 8011d6c:	3fd55555 	.word	0x3fd55555
 8011d70:	2c6a6c2f 	.word	0x2c6a6c2f
 8011d74:	bfa2b444 	.word	0xbfa2b444
 8011d78:	52defd9a 	.word	0x52defd9a
 8011d7c:	3fadde2d 	.word	0x3fadde2d
 8011d80:	af749a6d 	.word	0xaf749a6d
 8011d84:	3fb3b0f2 	.word	0x3fb3b0f2
 8011d88:	fe231671 	.word	0xfe231671
 8011d8c:	3fbc71c6 	.word	0x3fbc71c6
 8011d90:	9998ebc4 	.word	0x9998ebc4
 8011d94:	3fc99999 	.word	0x3fc99999
 8011d98:	54442d18 	.word	0x54442d18
 8011d9c:	bff921fb 	.word	0xbff921fb
 8011da0:	440fffff 	.word	0x440fffff
 8011da4:	7ff00000 	.word	0x7ff00000
 8011da8:	3fdbffff 	.word	0x3fdbffff
 8011dac:	3ff00000 	.word	0x3ff00000
 8011db0:	3ff2ffff 	.word	0x3ff2ffff
 8011db4:	40038000 	.word	0x40038000
 8011db8:	3ff80000 	.word	0x3ff80000
 8011dbc:	bff00000 	.word	0xbff00000
 8011dc0:	08013400 	.word	0x08013400
 8011dc4:	08013420 	.word	0x08013420

08011dc8 <fabs>:
 8011dc8:	ec51 0b10 	vmov	r0, r1, d0
 8011dcc:	4602      	mov	r2, r0
 8011dce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011dd2:	ec43 2b10 	vmov	d0, r2, r3
 8011dd6:	4770      	bx	lr

08011dd8 <__kernel_rem_pio2>:
 8011dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ddc:	ed2d 8b02 	vpush	{d8}
 8011de0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8011de4:	f112 0f14 	cmn.w	r2, #20
 8011de8:	9306      	str	r3, [sp, #24]
 8011dea:	9104      	str	r1, [sp, #16]
 8011dec:	4bbe      	ldr	r3, [pc, #760]	@ (80120e8 <__kernel_rem_pio2+0x310>)
 8011dee:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8011df0:	9008      	str	r0, [sp, #32]
 8011df2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011df6:	9300      	str	r3, [sp, #0]
 8011df8:	9b06      	ldr	r3, [sp, #24]
 8011dfa:	f103 33ff 	add.w	r3, r3, #4294967295
 8011dfe:	bfa8      	it	ge
 8011e00:	1ed4      	subge	r4, r2, #3
 8011e02:	9305      	str	r3, [sp, #20]
 8011e04:	bfb2      	itee	lt
 8011e06:	2400      	movlt	r4, #0
 8011e08:	2318      	movge	r3, #24
 8011e0a:	fb94 f4f3 	sdivge	r4, r4, r3
 8011e0e:	f06f 0317 	mvn.w	r3, #23
 8011e12:	fb04 3303 	mla	r3, r4, r3, r3
 8011e16:	eb03 0b02 	add.w	fp, r3, r2
 8011e1a:	9b00      	ldr	r3, [sp, #0]
 8011e1c:	9a05      	ldr	r2, [sp, #20]
 8011e1e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80120d8 <__kernel_rem_pio2+0x300>
 8011e22:	eb03 0802 	add.w	r8, r3, r2
 8011e26:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011e28:	1aa7      	subs	r7, r4, r2
 8011e2a:	ae20      	add	r6, sp, #128	@ 0x80
 8011e2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011e30:	2500      	movs	r5, #0
 8011e32:	4545      	cmp	r5, r8
 8011e34:	dd13      	ble.n	8011e5e <__kernel_rem_pio2+0x86>
 8011e36:	9b06      	ldr	r3, [sp, #24]
 8011e38:	aa20      	add	r2, sp, #128	@ 0x80
 8011e3a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011e3e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8011e42:	f04f 0800 	mov.w	r8, #0
 8011e46:	9b00      	ldr	r3, [sp, #0]
 8011e48:	4598      	cmp	r8, r3
 8011e4a:	dc31      	bgt.n	8011eb0 <__kernel_rem_pio2+0xd8>
 8011e4c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80120d8 <__kernel_rem_pio2+0x300>
 8011e50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011e54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e58:	462f      	mov	r7, r5
 8011e5a:	2600      	movs	r6, #0
 8011e5c:	e01b      	b.n	8011e96 <__kernel_rem_pio2+0xbe>
 8011e5e:	42ef      	cmn	r7, r5
 8011e60:	d407      	bmi.n	8011e72 <__kernel_rem_pio2+0x9a>
 8011e62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011e66:	f7ee fb65 	bl	8000534 <__aeabi_i2d>
 8011e6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011e6e:	3501      	adds	r5, #1
 8011e70:	e7df      	b.n	8011e32 <__kernel_rem_pio2+0x5a>
 8011e72:	ec51 0b18 	vmov	r0, r1, d8
 8011e76:	e7f8      	b.n	8011e6a <__kernel_rem_pio2+0x92>
 8011e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011e80:	f7ee fbc2 	bl	8000608 <__aeabi_dmul>
 8011e84:	4602      	mov	r2, r0
 8011e86:	460b      	mov	r3, r1
 8011e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e8c:	f7ee fa06 	bl	800029c <__adddf3>
 8011e90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e94:	3601      	adds	r6, #1
 8011e96:	9b05      	ldr	r3, [sp, #20]
 8011e98:	429e      	cmp	r6, r3
 8011e9a:	f1a7 0708 	sub.w	r7, r7, #8
 8011e9e:	ddeb      	ble.n	8011e78 <__kernel_rem_pio2+0xa0>
 8011ea0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011ea4:	f108 0801 	add.w	r8, r8, #1
 8011ea8:	ecaa 7b02 	vstmia	sl!, {d7}
 8011eac:	3508      	adds	r5, #8
 8011eae:	e7ca      	b.n	8011e46 <__kernel_rem_pio2+0x6e>
 8011eb0:	9b00      	ldr	r3, [sp, #0]
 8011eb2:	f8dd 8000 	ldr.w	r8, [sp]
 8011eb6:	aa0c      	add	r2, sp, #48	@ 0x30
 8011eb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011ebc:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ebe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011ec0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ec6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011eca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ecc:	ab98      	add	r3, sp, #608	@ 0x260
 8011ece:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011ed2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8011ed6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011eda:	ac0c      	add	r4, sp, #48	@ 0x30
 8011edc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011ede:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8011ee2:	46a1      	mov	r9, r4
 8011ee4:	46c2      	mov	sl, r8
 8011ee6:	f1ba 0f00 	cmp.w	sl, #0
 8011eea:	f1a5 0508 	sub.w	r5, r5, #8
 8011eee:	dc77      	bgt.n	8011fe0 <__kernel_rem_pio2+0x208>
 8011ef0:	4658      	mov	r0, fp
 8011ef2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8011ef6:	f000 fac7 	bl	8012488 <scalbn>
 8011efa:	ec57 6b10 	vmov	r6, r7, d0
 8011efe:	2200      	movs	r2, #0
 8011f00:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011f04:	4630      	mov	r0, r6
 8011f06:	4639      	mov	r1, r7
 8011f08:	f7ee fb7e 	bl	8000608 <__aeabi_dmul>
 8011f0c:	ec41 0b10 	vmov	d0, r0, r1
 8011f10:	f000 fb3a 	bl	8012588 <floor>
 8011f14:	4b75      	ldr	r3, [pc, #468]	@ (80120ec <__kernel_rem_pio2+0x314>)
 8011f16:	ec51 0b10 	vmov	r0, r1, d0
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	f7ee fb74 	bl	8000608 <__aeabi_dmul>
 8011f20:	4602      	mov	r2, r0
 8011f22:	460b      	mov	r3, r1
 8011f24:	4630      	mov	r0, r6
 8011f26:	4639      	mov	r1, r7
 8011f28:	f7ee f9b6 	bl	8000298 <__aeabi_dsub>
 8011f2c:	460f      	mov	r7, r1
 8011f2e:	4606      	mov	r6, r0
 8011f30:	f7ee fe1a 	bl	8000b68 <__aeabi_d2iz>
 8011f34:	9002      	str	r0, [sp, #8]
 8011f36:	f7ee fafd 	bl	8000534 <__aeabi_i2d>
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	460b      	mov	r3, r1
 8011f3e:	4630      	mov	r0, r6
 8011f40:	4639      	mov	r1, r7
 8011f42:	f7ee f9a9 	bl	8000298 <__aeabi_dsub>
 8011f46:	f1bb 0f00 	cmp.w	fp, #0
 8011f4a:	4606      	mov	r6, r0
 8011f4c:	460f      	mov	r7, r1
 8011f4e:	dd6c      	ble.n	801202a <__kernel_rem_pio2+0x252>
 8011f50:	f108 31ff 	add.w	r1, r8, #4294967295
 8011f54:	ab0c      	add	r3, sp, #48	@ 0x30
 8011f56:	9d02      	ldr	r5, [sp, #8]
 8011f58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011f5c:	f1cb 0018 	rsb	r0, fp, #24
 8011f60:	fa43 f200 	asr.w	r2, r3, r0
 8011f64:	4415      	add	r5, r2
 8011f66:	4082      	lsls	r2, r0
 8011f68:	1a9b      	subs	r3, r3, r2
 8011f6a:	aa0c      	add	r2, sp, #48	@ 0x30
 8011f6c:	9502      	str	r5, [sp, #8]
 8011f6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011f72:	f1cb 0217 	rsb	r2, fp, #23
 8011f76:	fa43 f902 	asr.w	r9, r3, r2
 8011f7a:	f1b9 0f00 	cmp.w	r9, #0
 8011f7e:	dd64      	ble.n	801204a <__kernel_rem_pio2+0x272>
 8011f80:	9b02      	ldr	r3, [sp, #8]
 8011f82:	2200      	movs	r2, #0
 8011f84:	3301      	adds	r3, #1
 8011f86:	9302      	str	r3, [sp, #8]
 8011f88:	4615      	mov	r5, r2
 8011f8a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8011f8e:	4590      	cmp	r8, r2
 8011f90:	f300 80b8 	bgt.w	8012104 <__kernel_rem_pio2+0x32c>
 8011f94:	f1bb 0f00 	cmp.w	fp, #0
 8011f98:	dd07      	ble.n	8011faa <__kernel_rem_pio2+0x1d2>
 8011f9a:	f1bb 0f01 	cmp.w	fp, #1
 8011f9e:	f000 80bf 	beq.w	8012120 <__kernel_rem_pio2+0x348>
 8011fa2:	f1bb 0f02 	cmp.w	fp, #2
 8011fa6:	f000 80c6 	beq.w	8012136 <__kernel_rem_pio2+0x35e>
 8011faa:	f1b9 0f02 	cmp.w	r9, #2
 8011fae:	d14c      	bne.n	801204a <__kernel_rem_pio2+0x272>
 8011fb0:	4632      	mov	r2, r6
 8011fb2:	463b      	mov	r3, r7
 8011fb4:	494e      	ldr	r1, [pc, #312]	@ (80120f0 <__kernel_rem_pio2+0x318>)
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	f7ee f96e 	bl	8000298 <__aeabi_dsub>
 8011fbc:	4606      	mov	r6, r0
 8011fbe:	460f      	mov	r7, r1
 8011fc0:	2d00      	cmp	r5, #0
 8011fc2:	d042      	beq.n	801204a <__kernel_rem_pio2+0x272>
 8011fc4:	4658      	mov	r0, fp
 8011fc6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80120e0 <__kernel_rem_pio2+0x308>
 8011fca:	f000 fa5d 	bl	8012488 <scalbn>
 8011fce:	4630      	mov	r0, r6
 8011fd0:	4639      	mov	r1, r7
 8011fd2:	ec53 2b10 	vmov	r2, r3, d0
 8011fd6:	f7ee f95f 	bl	8000298 <__aeabi_dsub>
 8011fda:	4606      	mov	r6, r0
 8011fdc:	460f      	mov	r7, r1
 8011fde:	e034      	b.n	801204a <__kernel_rem_pio2+0x272>
 8011fe0:	4b44      	ldr	r3, [pc, #272]	@ (80120f4 <__kernel_rem_pio2+0x31c>)
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fe8:	f7ee fb0e 	bl	8000608 <__aeabi_dmul>
 8011fec:	f7ee fdbc 	bl	8000b68 <__aeabi_d2iz>
 8011ff0:	f7ee faa0 	bl	8000534 <__aeabi_i2d>
 8011ff4:	4b40      	ldr	r3, [pc, #256]	@ (80120f8 <__kernel_rem_pio2+0x320>)
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	4606      	mov	r6, r0
 8011ffa:	460f      	mov	r7, r1
 8011ffc:	f7ee fb04 	bl	8000608 <__aeabi_dmul>
 8012000:	4602      	mov	r2, r0
 8012002:	460b      	mov	r3, r1
 8012004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012008:	f7ee f946 	bl	8000298 <__aeabi_dsub>
 801200c:	f7ee fdac 	bl	8000b68 <__aeabi_d2iz>
 8012010:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012014:	f849 0b04 	str.w	r0, [r9], #4
 8012018:	4639      	mov	r1, r7
 801201a:	4630      	mov	r0, r6
 801201c:	f7ee f93e 	bl	800029c <__adddf3>
 8012020:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012028:	e75d      	b.n	8011ee6 <__kernel_rem_pio2+0x10e>
 801202a:	d107      	bne.n	801203c <__kernel_rem_pio2+0x264>
 801202c:	f108 33ff 	add.w	r3, r8, #4294967295
 8012030:	aa0c      	add	r2, sp, #48	@ 0x30
 8012032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012036:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801203a:	e79e      	b.n	8011f7a <__kernel_rem_pio2+0x1a2>
 801203c:	4b2f      	ldr	r3, [pc, #188]	@ (80120fc <__kernel_rem_pio2+0x324>)
 801203e:	2200      	movs	r2, #0
 8012040:	f7ee fd68 	bl	8000b14 <__aeabi_dcmpge>
 8012044:	2800      	cmp	r0, #0
 8012046:	d143      	bne.n	80120d0 <__kernel_rem_pio2+0x2f8>
 8012048:	4681      	mov	r9, r0
 801204a:	2200      	movs	r2, #0
 801204c:	2300      	movs	r3, #0
 801204e:	4630      	mov	r0, r6
 8012050:	4639      	mov	r1, r7
 8012052:	f7ee fd41 	bl	8000ad8 <__aeabi_dcmpeq>
 8012056:	2800      	cmp	r0, #0
 8012058:	f000 80bf 	beq.w	80121da <__kernel_rem_pio2+0x402>
 801205c:	f108 33ff 	add.w	r3, r8, #4294967295
 8012060:	2200      	movs	r2, #0
 8012062:	9900      	ldr	r1, [sp, #0]
 8012064:	428b      	cmp	r3, r1
 8012066:	da6e      	bge.n	8012146 <__kernel_rem_pio2+0x36e>
 8012068:	2a00      	cmp	r2, #0
 801206a:	f000 8089 	beq.w	8012180 <__kernel_rem_pio2+0x3a8>
 801206e:	f108 38ff 	add.w	r8, r8, #4294967295
 8012072:	ab0c      	add	r3, sp, #48	@ 0x30
 8012074:	f1ab 0b18 	sub.w	fp, fp, #24
 8012078:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d0f6      	beq.n	801206e <__kernel_rem_pio2+0x296>
 8012080:	4658      	mov	r0, fp
 8012082:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80120e0 <__kernel_rem_pio2+0x308>
 8012086:	f000 f9ff 	bl	8012488 <scalbn>
 801208a:	f108 0301 	add.w	r3, r8, #1
 801208e:	00da      	lsls	r2, r3, #3
 8012090:	9205      	str	r2, [sp, #20]
 8012092:	ec55 4b10 	vmov	r4, r5, d0
 8012096:	aa70      	add	r2, sp, #448	@ 0x1c0
 8012098:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80120f4 <__kernel_rem_pio2+0x31c>
 801209c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80120a0:	4646      	mov	r6, r8
 80120a2:	f04f 0a00 	mov.w	sl, #0
 80120a6:	2e00      	cmp	r6, #0
 80120a8:	f280 80cf 	bge.w	801224a <__kernel_rem_pio2+0x472>
 80120ac:	4644      	mov	r4, r8
 80120ae:	2c00      	cmp	r4, #0
 80120b0:	f2c0 80fd 	blt.w	80122ae <__kernel_rem_pio2+0x4d6>
 80120b4:	4b12      	ldr	r3, [pc, #72]	@ (8012100 <__kernel_rem_pio2+0x328>)
 80120b6:	461f      	mov	r7, r3
 80120b8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80120ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80120be:	9306      	str	r3, [sp, #24]
 80120c0:	f04f 0a00 	mov.w	sl, #0
 80120c4:	f04f 0b00 	mov.w	fp, #0
 80120c8:	2600      	movs	r6, #0
 80120ca:	eba8 0504 	sub.w	r5, r8, r4
 80120ce:	e0e2      	b.n	8012296 <__kernel_rem_pio2+0x4be>
 80120d0:	f04f 0902 	mov.w	r9, #2
 80120d4:	e754      	b.n	8011f80 <__kernel_rem_pio2+0x1a8>
 80120d6:	bf00      	nop
	...
 80120e4:	3ff00000 	.word	0x3ff00000
 80120e8:	08013480 	.word	0x08013480
 80120ec:	40200000 	.word	0x40200000
 80120f0:	3ff00000 	.word	0x3ff00000
 80120f4:	3e700000 	.word	0x3e700000
 80120f8:	41700000 	.word	0x41700000
 80120fc:	3fe00000 	.word	0x3fe00000
 8012100:	08013440 	.word	0x08013440
 8012104:	f854 3b04 	ldr.w	r3, [r4], #4
 8012108:	b945      	cbnz	r5, 801211c <__kernel_rem_pio2+0x344>
 801210a:	b123      	cbz	r3, 8012116 <__kernel_rem_pio2+0x33e>
 801210c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8012110:	f844 3c04 	str.w	r3, [r4, #-4]
 8012114:	2301      	movs	r3, #1
 8012116:	3201      	adds	r2, #1
 8012118:	461d      	mov	r5, r3
 801211a:	e738      	b.n	8011f8e <__kernel_rem_pio2+0x1b6>
 801211c:	1acb      	subs	r3, r1, r3
 801211e:	e7f7      	b.n	8012110 <__kernel_rem_pio2+0x338>
 8012120:	f108 32ff 	add.w	r2, r8, #4294967295
 8012124:	ab0c      	add	r3, sp, #48	@ 0x30
 8012126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801212a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801212e:	a90c      	add	r1, sp, #48	@ 0x30
 8012130:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012134:	e739      	b.n	8011faa <__kernel_rem_pio2+0x1d2>
 8012136:	f108 32ff 	add.w	r2, r8, #4294967295
 801213a:	ab0c      	add	r3, sp, #48	@ 0x30
 801213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012140:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012144:	e7f3      	b.n	801212e <__kernel_rem_pio2+0x356>
 8012146:	a90c      	add	r1, sp, #48	@ 0x30
 8012148:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801214c:	3b01      	subs	r3, #1
 801214e:	430a      	orrs	r2, r1
 8012150:	e787      	b.n	8012062 <__kernel_rem_pio2+0x28a>
 8012152:	3401      	adds	r4, #1
 8012154:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012158:	2a00      	cmp	r2, #0
 801215a:	d0fa      	beq.n	8012152 <__kernel_rem_pio2+0x37a>
 801215c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801215e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012162:	eb0d 0503 	add.w	r5, sp, r3
 8012166:	9b06      	ldr	r3, [sp, #24]
 8012168:	aa20      	add	r2, sp, #128	@ 0x80
 801216a:	4443      	add	r3, r8
 801216c:	f108 0701 	add.w	r7, r8, #1
 8012170:	3d98      	subs	r5, #152	@ 0x98
 8012172:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8012176:	4444      	add	r4, r8
 8012178:	42bc      	cmp	r4, r7
 801217a:	da04      	bge.n	8012186 <__kernel_rem_pio2+0x3ae>
 801217c:	46a0      	mov	r8, r4
 801217e:	e6a2      	b.n	8011ec6 <__kernel_rem_pio2+0xee>
 8012180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012182:	2401      	movs	r4, #1
 8012184:	e7e6      	b.n	8012154 <__kernel_rem_pio2+0x37c>
 8012186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012188:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801218c:	f7ee f9d2 	bl	8000534 <__aeabi_i2d>
 8012190:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8012458 <__kernel_rem_pio2+0x680>
 8012194:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012198:	ed8d 7b02 	vstr	d7, [sp, #8]
 801219c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80121a0:	46b2      	mov	sl, r6
 80121a2:	f04f 0800 	mov.w	r8, #0
 80121a6:	9b05      	ldr	r3, [sp, #20]
 80121a8:	4598      	cmp	r8, r3
 80121aa:	dd05      	ble.n	80121b8 <__kernel_rem_pio2+0x3e0>
 80121ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80121b0:	3701      	adds	r7, #1
 80121b2:	eca5 7b02 	vstmia	r5!, {d7}
 80121b6:	e7df      	b.n	8012178 <__kernel_rem_pio2+0x3a0>
 80121b8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80121bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80121c0:	f7ee fa22 	bl	8000608 <__aeabi_dmul>
 80121c4:	4602      	mov	r2, r0
 80121c6:	460b      	mov	r3, r1
 80121c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121cc:	f7ee f866 	bl	800029c <__adddf3>
 80121d0:	f108 0801 	add.w	r8, r8, #1
 80121d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121d8:	e7e5      	b.n	80121a6 <__kernel_rem_pio2+0x3ce>
 80121da:	f1cb 0000 	rsb	r0, fp, #0
 80121de:	ec47 6b10 	vmov	d0, r6, r7
 80121e2:	f000 f951 	bl	8012488 <scalbn>
 80121e6:	ec55 4b10 	vmov	r4, r5, d0
 80121ea:	4b9d      	ldr	r3, [pc, #628]	@ (8012460 <__kernel_rem_pio2+0x688>)
 80121ec:	2200      	movs	r2, #0
 80121ee:	4620      	mov	r0, r4
 80121f0:	4629      	mov	r1, r5
 80121f2:	f7ee fc8f 	bl	8000b14 <__aeabi_dcmpge>
 80121f6:	b300      	cbz	r0, 801223a <__kernel_rem_pio2+0x462>
 80121f8:	4b9a      	ldr	r3, [pc, #616]	@ (8012464 <__kernel_rem_pio2+0x68c>)
 80121fa:	2200      	movs	r2, #0
 80121fc:	4620      	mov	r0, r4
 80121fe:	4629      	mov	r1, r5
 8012200:	f7ee fa02 	bl	8000608 <__aeabi_dmul>
 8012204:	f7ee fcb0 	bl	8000b68 <__aeabi_d2iz>
 8012208:	4606      	mov	r6, r0
 801220a:	f7ee f993 	bl	8000534 <__aeabi_i2d>
 801220e:	4b94      	ldr	r3, [pc, #592]	@ (8012460 <__kernel_rem_pio2+0x688>)
 8012210:	2200      	movs	r2, #0
 8012212:	f7ee f9f9 	bl	8000608 <__aeabi_dmul>
 8012216:	460b      	mov	r3, r1
 8012218:	4602      	mov	r2, r0
 801221a:	4629      	mov	r1, r5
 801221c:	4620      	mov	r0, r4
 801221e:	f7ee f83b 	bl	8000298 <__aeabi_dsub>
 8012222:	f7ee fca1 	bl	8000b68 <__aeabi_d2iz>
 8012226:	ab0c      	add	r3, sp, #48	@ 0x30
 8012228:	f10b 0b18 	add.w	fp, fp, #24
 801222c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012230:	f108 0801 	add.w	r8, r8, #1
 8012234:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8012238:	e722      	b.n	8012080 <__kernel_rem_pio2+0x2a8>
 801223a:	4620      	mov	r0, r4
 801223c:	4629      	mov	r1, r5
 801223e:	f7ee fc93 	bl	8000b68 <__aeabi_d2iz>
 8012242:	ab0c      	add	r3, sp, #48	@ 0x30
 8012244:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012248:	e71a      	b.n	8012080 <__kernel_rem_pio2+0x2a8>
 801224a:	ab0c      	add	r3, sp, #48	@ 0x30
 801224c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012250:	f7ee f970 	bl	8000534 <__aeabi_i2d>
 8012254:	4622      	mov	r2, r4
 8012256:	462b      	mov	r3, r5
 8012258:	f7ee f9d6 	bl	8000608 <__aeabi_dmul>
 801225c:	4652      	mov	r2, sl
 801225e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8012262:	465b      	mov	r3, fp
 8012264:	4620      	mov	r0, r4
 8012266:	4629      	mov	r1, r5
 8012268:	f7ee f9ce 	bl	8000608 <__aeabi_dmul>
 801226c:	3e01      	subs	r6, #1
 801226e:	4604      	mov	r4, r0
 8012270:	460d      	mov	r5, r1
 8012272:	e718      	b.n	80120a6 <__kernel_rem_pio2+0x2ce>
 8012274:	9906      	ldr	r1, [sp, #24]
 8012276:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801227a:	9106      	str	r1, [sp, #24]
 801227c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8012280:	f7ee f9c2 	bl	8000608 <__aeabi_dmul>
 8012284:	4602      	mov	r2, r0
 8012286:	460b      	mov	r3, r1
 8012288:	4650      	mov	r0, sl
 801228a:	4659      	mov	r1, fp
 801228c:	f7ee f806 	bl	800029c <__adddf3>
 8012290:	3601      	adds	r6, #1
 8012292:	4682      	mov	sl, r0
 8012294:	468b      	mov	fp, r1
 8012296:	9b00      	ldr	r3, [sp, #0]
 8012298:	429e      	cmp	r6, r3
 801229a:	dc01      	bgt.n	80122a0 <__kernel_rem_pio2+0x4c8>
 801229c:	42b5      	cmp	r5, r6
 801229e:	dae9      	bge.n	8012274 <__kernel_rem_pio2+0x49c>
 80122a0:	ab48      	add	r3, sp, #288	@ 0x120
 80122a2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80122a6:	e9c5 ab00 	strd	sl, fp, [r5]
 80122aa:	3c01      	subs	r4, #1
 80122ac:	e6ff      	b.n	80120ae <__kernel_rem_pio2+0x2d6>
 80122ae:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80122b0:	2b02      	cmp	r3, #2
 80122b2:	dc0b      	bgt.n	80122cc <__kernel_rem_pio2+0x4f4>
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	dc39      	bgt.n	801232c <__kernel_rem_pio2+0x554>
 80122b8:	d05d      	beq.n	8012376 <__kernel_rem_pio2+0x59e>
 80122ba:	9b02      	ldr	r3, [sp, #8]
 80122bc:	f003 0007 	and.w	r0, r3, #7
 80122c0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80122c4:	ecbd 8b02 	vpop	{d8}
 80122c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122cc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80122ce:	2b03      	cmp	r3, #3
 80122d0:	d1f3      	bne.n	80122ba <__kernel_rem_pio2+0x4e2>
 80122d2:	9b05      	ldr	r3, [sp, #20]
 80122d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80122d8:	eb0d 0403 	add.w	r4, sp, r3
 80122dc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80122e0:	4625      	mov	r5, r4
 80122e2:	46c2      	mov	sl, r8
 80122e4:	f1ba 0f00 	cmp.w	sl, #0
 80122e8:	f1a5 0508 	sub.w	r5, r5, #8
 80122ec:	dc6b      	bgt.n	80123c6 <__kernel_rem_pio2+0x5ee>
 80122ee:	4645      	mov	r5, r8
 80122f0:	2d01      	cmp	r5, #1
 80122f2:	f1a4 0408 	sub.w	r4, r4, #8
 80122f6:	f300 8087 	bgt.w	8012408 <__kernel_rem_pio2+0x630>
 80122fa:	9c05      	ldr	r4, [sp, #20]
 80122fc:	ab48      	add	r3, sp, #288	@ 0x120
 80122fe:	441c      	add	r4, r3
 8012300:	2000      	movs	r0, #0
 8012302:	2100      	movs	r1, #0
 8012304:	f1b8 0f01 	cmp.w	r8, #1
 8012308:	f300 809c 	bgt.w	8012444 <__kernel_rem_pio2+0x66c>
 801230c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8012310:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8012314:	f1b9 0f00 	cmp.w	r9, #0
 8012318:	f040 80a6 	bne.w	8012468 <__kernel_rem_pio2+0x690>
 801231c:	9b04      	ldr	r3, [sp, #16]
 801231e:	e9c3 7800 	strd	r7, r8, [r3]
 8012322:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012326:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801232a:	e7c6      	b.n	80122ba <__kernel_rem_pio2+0x4e2>
 801232c:	9d05      	ldr	r5, [sp, #20]
 801232e:	ab48      	add	r3, sp, #288	@ 0x120
 8012330:	441d      	add	r5, r3
 8012332:	4644      	mov	r4, r8
 8012334:	2000      	movs	r0, #0
 8012336:	2100      	movs	r1, #0
 8012338:	2c00      	cmp	r4, #0
 801233a:	da35      	bge.n	80123a8 <__kernel_rem_pio2+0x5d0>
 801233c:	f1b9 0f00 	cmp.w	r9, #0
 8012340:	d038      	beq.n	80123b4 <__kernel_rem_pio2+0x5dc>
 8012342:	4602      	mov	r2, r0
 8012344:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012348:	9c04      	ldr	r4, [sp, #16]
 801234a:	e9c4 2300 	strd	r2, r3, [r4]
 801234e:	4602      	mov	r2, r0
 8012350:	460b      	mov	r3, r1
 8012352:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8012356:	f7ed ff9f 	bl	8000298 <__aeabi_dsub>
 801235a:	ad4a      	add	r5, sp, #296	@ 0x128
 801235c:	2401      	movs	r4, #1
 801235e:	45a0      	cmp	r8, r4
 8012360:	da2b      	bge.n	80123ba <__kernel_rem_pio2+0x5e2>
 8012362:	f1b9 0f00 	cmp.w	r9, #0
 8012366:	d002      	beq.n	801236e <__kernel_rem_pio2+0x596>
 8012368:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801236c:	4619      	mov	r1, r3
 801236e:	9b04      	ldr	r3, [sp, #16]
 8012370:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012374:	e7a1      	b.n	80122ba <__kernel_rem_pio2+0x4e2>
 8012376:	9c05      	ldr	r4, [sp, #20]
 8012378:	ab48      	add	r3, sp, #288	@ 0x120
 801237a:	441c      	add	r4, r3
 801237c:	2000      	movs	r0, #0
 801237e:	2100      	movs	r1, #0
 8012380:	f1b8 0f00 	cmp.w	r8, #0
 8012384:	da09      	bge.n	801239a <__kernel_rem_pio2+0x5c2>
 8012386:	f1b9 0f00 	cmp.w	r9, #0
 801238a:	d002      	beq.n	8012392 <__kernel_rem_pio2+0x5ba>
 801238c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012390:	4619      	mov	r1, r3
 8012392:	9b04      	ldr	r3, [sp, #16]
 8012394:	e9c3 0100 	strd	r0, r1, [r3]
 8012398:	e78f      	b.n	80122ba <__kernel_rem_pio2+0x4e2>
 801239a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801239e:	f7ed ff7d 	bl	800029c <__adddf3>
 80123a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80123a6:	e7eb      	b.n	8012380 <__kernel_rem_pio2+0x5a8>
 80123a8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80123ac:	f7ed ff76 	bl	800029c <__adddf3>
 80123b0:	3c01      	subs	r4, #1
 80123b2:	e7c1      	b.n	8012338 <__kernel_rem_pio2+0x560>
 80123b4:	4602      	mov	r2, r0
 80123b6:	460b      	mov	r3, r1
 80123b8:	e7c6      	b.n	8012348 <__kernel_rem_pio2+0x570>
 80123ba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80123be:	f7ed ff6d 	bl	800029c <__adddf3>
 80123c2:	3401      	adds	r4, #1
 80123c4:	e7cb      	b.n	801235e <__kernel_rem_pio2+0x586>
 80123c6:	ed95 7b00 	vldr	d7, [r5]
 80123ca:	ed8d 7b00 	vstr	d7, [sp]
 80123ce:	ed95 7b02 	vldr	d7, [r5, #8]
 80123d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123d6:	ec53 2b17 	vmov	r2, r3, d7
 80123da:	ed8d 7b06 	vstr	d7, [sp, #24]
 80123de:	f7ed ff5d 	bl	800029c <__adddf3>
 80123e2:	4602      	mov	r2, r0
 80123e4:	460b      	mov	r3, r1
 80123e6:	4606      	mov	r6, r0
 80123e8:	460f      	mov	r7, r1
 80123ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123ee:	f7ed ff53 	bl	8000298 <__aeabi_dsub>
 80123f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80123f6:	f7ed ff51 	bl	800029c <__adddf3>
 80123fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80123fe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8012402:	e9c5 6700 	strd	r6, r7, [r5]
 8012406:	e76d      	b.n	80122e4 <__kernel_rem_pio2+0x50c>
 8012408:	ed94 7b00 	vldr	d7, [r4]
 801240c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8012410:	ec51 0b17 	vmov	r0, r1, d7
 8012414:	4652      	mov	r2, sl
 8012416:	465b      	mov	r3, fp
 8012418:	ed8d 7b00 	vstr	d7, [sp]
 801241c:	f7ed ff3e 	bl	800029c <__adddf3>
 8012420:	4602      	mov	r2, r0
 8012422:	460b      	mov	r3, r1
 8012424:	4606      	mov	r6, r0
 8012426:	460f      	mov	r7, r1
 8012428:	e9dd 0100 	ldrd	r0, r1, [sp]
 801242c:	f7ed ff34 	bl	8000298 <__aeabi_dsub>
 8012430:	4652      	mov	r2, sl
 8012432:	465b      	mov	r3, fp
 8012434:	f7ed ff32 	bl	800029c <__adddf3>
 8012438:	3d01      	subs	r5, #1
 801243a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801243e:	e9c4 6700 	strd	r6, r7, [r4]
 8012442:	e755      	b.n	80122f0 <__kernel_rem_pio2+0x518>
 8012444:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012448:	f7ed ff28 	bl	800029c <__adddf3>
 801244c:	f108 38ff 	add.w	r8, r8, #4294967295
 8012450:	e758      	b.n	8012304 <__kernel_rem_pio2+0x52c>
 8012452:	bf00      	nop
 8012454:	f3af 8000 	nop.w
	...
 8012460:	41700000 	.word	0x41700000
 8012464:	3e700000 	.word	0x3e700000
 8012468:	9b04      	ldr	r3, [sp, #16]
 801246a:	9a04      	ldr	r2, [sp, #16]
 801246c:	601f      	str	r7, [r3, #0]
 801246e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8012472:	605c      	str	r4, [r3, #4]
 8012474:	609d      	str	r5, [r3, #8]
 8012476:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801247a:	60d3      	str	r3, [r2, #12]
 801247c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012480:	6110      	str	r0, [r2, #16]
 8012482:	6153      	str	r3, [r2, #20]
 8012484:	e719      	b.n	80122ba <__kernel_rem_pio2+0x4e2>
 8012486:	bf00      	nop

08012488 <scalbn>:
 8012488:	b570      	push	{r4, r5, r6, lr}
 801248a:	ec55 4b10 	vmov	r4, r5, d0
 801248e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012492:	4606      	mov	r6, r0
 8012494:	462b      	mov	r3, r5
 8012496:	b991      	cbnz	r1, 80124be <scalbn+0x36>
 8012498:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801249c:	4323      	orrs	r3, r4
 801249e:	d03d      	beq.n	801251c <scalbn+0x94>
 80124a0:	4b35      	ldr	r3, [pc, #212]	@ (8012578 <scalbn+0xf0>)
 80124a2:	4620      	mov	r0, r4
 80124a4:	4629      	mov	r1, r5
 80124a6:	2200      	movs	r2, #0
 80124a8:	f7ee f8ae 	bl	8000608 <__aeabi_dmul>
 80124ac:	4b33      	ldr	r3, [pc, #204]	@ (801257c <scalbn+0xf4>)
 80124ae:	429e      	cmp	r6, r3
 80124b0:	4604      	mov	r4, r0
 80124b2:	460d      	mov	r5, r1
 80124b4:	da0f      	bge.n	80124d6 <scalbn+0x4e>
 80124b6:	a328      	add	r3, pc, #160	@ (adr r3, 8012558 <scalbn+0xd0>)
 80124b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124bc:	e01e      	b.n	80124fc <scalbn+0x74>
 80124be:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80124c2:	4291      	cmp	r1, r2
 80124c4:	d10b      	bne.n	80124de <scalbn+0x56>
 80124c6:	4622      	mov	r2, r4
 80124c8:	4620      	mov	r0, r4
 80124ca:	4629      	mov	r1, r5
 80124cc:	f7ed fee6 	bl	800029c <__adddf3>
 80124d0:	4604      	mov	r4, r0
 80124d2:	460d      	mov	r5, r1
 80124d4:	e022      	b.n	801251c <scalbn+0x94>
 80124d6:	460b      	mov	r3, r1
 80124d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80124dc:	3936      	subs	r1, #54	@ 0x36
 80124de:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80124e2:	4296      	cmp	r6, r2
 80124e4:	dd0d      	ble.n	8012502 <scalbn+0x7a>
 80124e6:	2d00      	cmp	r5, #0
 80124e8:	a11d      	add	r1, pc, #116	@ (adr r1, 8012560 <scalbn+0xd8>)
 80124ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124ee:	da02      	bge.n	80124f6 <scalbn+0x6e>
 80124f0:	a11d      	add	r1, pc, #116	@ (adr r1, 8012568 <scalbn+0xe0>)
 80124f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124f6:	a31a      	add	r3, pc, #104	@ (adr r3, 8012560 <scalbn+0xd8>)
 80124f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124fc:	f7ee f884 	bl	8000608 <__aeabi_dmul>
 8012500:	e7e6      	b.n	80124d0 <scalbn+0x48>
 8012502:	1872      	adds	r2, r6, r1
 8012504:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012508:	428a      	cmp	r2, r1
 801250a:	dcec      	bgt.n	80124e6 <scalbn+0x5e>
 801250c:	2a00      	cmp	r2, #0
 801250e:	dd08      	ble.n	8012522 <scalbn+0x9a>
 8012510:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012514:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012518:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801251c:	ec45 4b10 	vmov	d0, r4, r5
 8012520:	bd70      	pop	{r4, r5, r6, pc}
 8012522:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8012526:	da08      	bge.n	801253a <scalbn+0xb2>
 8012528:	2d00      	cmp	r5, #0
 801252a:	a10b      	add	r1, pc, #44	@ (adr r1, 8012558 <scalbn+0xd0>)
 801252c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012530:	dac1      	bge.n	80124b6 <scalbn+0x2e>
 8012532:	a10f      	add	r1, pc, #60	@ (adr r1, 8012570 <scalbn+0xe8>)
 8012534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012538:	e7bd      	b.n	80124b6 <scalbn+0x2e>
 801253a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801253e:	3236      	adds	r2, #54	@ 0x36
 8012540:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012544:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012548:	4620      	mov	r0, r4
 801254a:	4b0d      	ldr	r3, [pc, #52]	@ (8012580 <scalbn+0xf8>)
 801254c:	4629      	mov	r1, r5
 801254e:	2200      	movs	r2, #0
 8012550:	e7d4      	b.n	80124fc <scalbn+0x74>
 8012552:	bf00      	nop
 8012554:	f3af 8000 	nop.w
 8012558:	c2f8f359 	.word	0xc2f8f359
 801255c:	01a56e1f 	.word	0x01a56e1f
 8012560:	8800759c 	.word	0x8800759c
 8012564:	7e37e43c 	.word	0x7e37e43c
 8012568:	8800759c 	.word	0x8800759c
 801256c:	fe37e43c 	.word	0xfe37e43c
 8012570:	c2f8f359 	.word	0xc2f8f359
 8012574:	81a56e1f 	.word	0x81a56e1f
 8012578:	43500000 	.word	0x43500000
 801257c:	ffff3cb0 	.word	0xffff3cb0
 8012580:	3c900000 	.word	0x3c900000
 8012584:	00000000 	.word	0x00000000

08012588 <floor>:
 8012588:	ec51 0b10 	vmov	r0, r1, d0
 801258c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012594:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8012598:	2e13      	cmp	r6, #19
 801259a:	460c      	mov	r4, r1
 801259c:	4605      	mov	r5, r0
 801259e:	4680      	mov	r8, r0
 80125a0:	dc34      	bgt.n	801260c <floor+0x84>
 80125a2:	2e00      	cmp	r6, #0
 80125a4:	da17      	bge.n	80125d6 <floor+0x4e>
 80125a6:	a332      	add	r3, pc, #200	@ (adr r3, 8012670 <floor+0xe8>)
 80125a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ac:	f7ed fe76 	bl	800029c <__adddf3>
 80125b0:	2200      	movs	r2, #0
 80125b2:	2300      	movs	r3, #0
 80125b4:	f7ee fab8 	bl	8000b28 <__aeabi_dcmpgt>
 80125b8:	b150      	cbz	r0, 80125d0 <floor+0x48>
 80125ba:	2c00      	cmp	r4, #0
 80125bc:	da55      	bge.n	801266a <floor+0xe2>
 80125be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80125c2:	432c      	orrs	r4, r5
 80125c4:	2500      	movs	r5, #0
 80125c6:	42ac      	cmp	r4, r5
 80125c8:	4c2b      	ldr	r4, [pc, #172]	@ (8012678 <floor+0xf0>)
 80125ca:	bf08      	it	eq
 80125cc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80125d0:	4621      	mov	r1, r4
 80125d2:	4628      	mov	r0, r5
 80125d4:	e023      	b.n	801261e <floor+0x96>
 80125d6:	4f29      	ldr	r7, [pc, #164]	@ (801267c <floor+0xf4>)
 80125d8:	4137      	asrs	r7, r6
 80125da:	ea01 0307 	and.w	r3, r1, r7
 80125de:	4303      	orrs	r3, r0
 80125e0:	d01d      	beq.n	801261e <floor+0x96>
 80125e2:	a323      	add	r3, pc, #140	@ (adr r3, 8012670 <floor+0xe8>)
 80125e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e8:	f7ed fe58 	bl	800029c <__adddf3>
 80125ec:	2200      	movs	r2, #0
 80125ee:	2300      	movs	r3, #0
 80125f0:	f7ee fa9a 	bl	8000b28 <__aeabi_dcmpgt>
 80125f4:	2800      	cmp	r0, #0
 80125f6:	d0eb      	beq.n	80125d0 <floor+0x48>
 80125f8:	2c00      	cmp	r4, #0
 80125fa:	bfbe      	ittt	lt
 80125fc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8012600:	4133      	asrlt	r3, r6
 8012602:	18e4      	addlt	r4, r4, r3
 8012604:	ea24 0407 	bic.w	r4, r4, r7
 8012608:	2500      	movs	r5, #0
 801260a:	e7e1      	b.n	80125d0 <floor+0x48>
 801260c:	2e33      	cmp	r6, #51	@ 0x33
 801260e:	dd0a      	ble.n	8012626 <floor+0x9e>
 8012610:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8012614:	d103      	bne.n	801261e <floor+0x96>
 8012616:	4602      	mov	r2, r0
 8012618:	460b      	mov	r3, r1
 801261a:	f7ed fe3f 	bl	800029c <__adddf3>
 801261e:	ec41 0b10 	vmov	d0, r0, r1
 8012622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012626:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801262a:	f04f 37ff 	mov.w	r7, #4294967295
 801262e:	40df      	lsrs	r7, r3
 8012630:	4207      	tst	r7, r0
 8012632:	d0f4      	beq.n	801261e <floor+0x96>
 8012634:	a30e      	add	r3, pc, #56	@ (adr r3, 8012670 <floor+0xe8>)
 8012636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263a:	f7ed fe2f 	bl	800029c <__adddf3>
 801263e:	2200      	movs	r2, #0
 8012640:	2300      	movs	r3, #0
 8012642:	f7ee fa71 	bl	8000b28 <__aeabi_dcmpgt>
 8012646:	2800      	cmp	r0, #0
 8012648:	d0c2      	beq.n	80125d0 <floor+0x48>
 801264a:	2c00      	cmp	r4, #0
 801264c:	da0a      	bge.n	8012664 <floor+0xdc>
 801264e:	2e14      	cmp	r6, #20
 8012650:	d101      	bne.n	8012656 <floor+0xce>
 8012652:	3401      	adds	r4, #1
 8012654:	e006      	b.n	8012664 <floor+0xdc>
 8012656:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801265a:	2301      	movs	r3, #1
 801265c:	40b3      	lsls	r3, r6
 801265e:	441d      	add	r5, r3
 8012660:	4545      	cmp	r5, r8
 8012662:	d3f6      	bcc.n	8012652 <floor+0xca>
 8012664:	ea25 0507 	bic.w	r5, r5, r7
 8012668:	e7b2      	b.n	80125d0 <floor+0x48>
 801266a:	2500      	movs	r5, #0
 801266c:	462c      	mov	r4, r5
 801266e:	e7af      	b.n	80125d0 <floor+0x48>
 8012670:	8800759c 	.word	0x8800759c
 8012674:	7e37e43c 	.word	0x7e37e43c
 8012678:	bff00000 	.word	0xbff00000
 801267c:	000fffff 	.word	0x000fffff

08012680 <_init>:
 8012680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012682:	bf00      	nop
 8012684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012686:	bc08      	pop	{r3}
 8012688:	469e      	mov	lr, r3
 801268a:	4770      	bx	lr

0801268c <_fini>:
 801268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801268e:	bf00      	nop
 8012690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012692:	bc08      	pop	{r3}
 8012694:	469e      	mov	lr, r3
 8012696:	4770      	bx	lr
