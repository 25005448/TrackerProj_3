
TrackerProj_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc78  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800de18  0800de18  0000ee18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e438  0800e438  000102c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e438  0800e438  0000f438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e440  0800e440  000102c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e440  0800e440  0000f440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e444  0800e444  0000f444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800e448  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017ec  200002c4  0800e70c  000102c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ab0  0800e70c  00010ab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183c2  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d03  00000000  00000000  000286b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  0002c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106a  00000000  00000000  0002d918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a674  00000000  00000000  0002e982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a81b  00000000  00000000  00048ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094555  00000000  00000000  00063811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7d66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ba4  00000000  00000000  000f7dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000fe950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800de00 	.word	0x0800de00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800de00 	.word	0x0800de00

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]

	if(huart->Instance == USART1){
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a19      	ldr	r2, [pc, #100]	@ (8000fc0 <HAL_UARTEx_RxEventCallback+0x78>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d12b      	bne.n	8000fb6 <HAL_UARTEx_RxEventCallback+0x6e>
		//char output[Size + 1];
		char* result = {0};
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
		result = strstr((char *)RX_BufferGPS,"$PMTK,001");
 8000f62:	4918      	ldr	r1, [pc, #96]	@ (8000fc4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000f64:	4818      	ldr	r0, [pc, #96]	@ (8000fc8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000f66:	f00a fe74 	bl	800bc52 <strstr>
 8000f6a:	60b8      	str	r0, [r7, #8]

		if(result == NULL){ //Prevents command responses from being NMEA processed
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d11c      	bne.n	8000fac <HAL_UARTEx_RxEventCallback+0x64>
			for(int i = 0; i < Size; i++ ){
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	e015      	b.n	8000fa4 <HAL_UARTEx_RxEventCallback+0x5c>
				if(RX_BufferGPS[i] == '\n'){
 8000f78:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b0a      	cmp	r3, #10
 8000f82:	d10c      	bne.n	8000f9e <HAL_UARTEx_RxEventCallback+0x56>
					//snprintf(output, i+2 ,"%s\r\n",RX_BufferGPS);//print gps incoming message
					//CDC_Transmit_FS((uint8_t*) output, strlen(output));
					gps_processNMEA(RX_BufferGPS, i+1);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480e      	ldr	r0, [pc, #56]	@ (8000fc8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000f90:	f000 fb56 	bl	8001640 <gps_processNMEA>
					memset(RX_BufferGPS,0,RX_BUFFER_SIZE_GPS);
 8000f94:	22c8      	movs	r2, #200	@ 0xc8
 8000f96:	2100      	movs	r1, #0
 8000f98:	480b      	ldr	r0, [pc, #44]	@ (8000fc8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000f9a:	f00a fe52 	bl	800bc42 <memset>
			for(int i = 0; i < Size; i++ ){
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbe5      	blt.n	8000f78 <HAL_UARTEx_RxEventCallback+0x30>
				}
			}
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 8000fac:	22c8      	movs	r2, #200	@ 0xc8
 8000fae:	4906      	ldr	r1, [pc, #24]	@ (8000fc8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000fb0:	4806      	ldr	r0, [pc, #24]	@ (8000fcc <HAL_UARTEx_RxEventCallback+0x84>)
 8000fb2:	f004 fec5 	bl	8005d40 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40011000 	.word	0x40011000
 8000fc4:	0800de18 	.word	0x0800de18
 8000fc8:	20000430 	.word	0x20000430
 8000fcc:	20000328 	.word	0x20000328

08000fd0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //GPS 10 minute status check
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

	char output[] = "Status Check:\r\n";
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000fda:	f107 0408 	add.w	r4, r7, #8
 8000fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CDC_Transmit_FS((uint8_t *)output, strlen(output));
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff f949 	bl	8000280 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f009 fbb7 	bl	800a76c <CDC_Transmit_FS>
			  if(gps_sleepFlag == 1 ){
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d107      	bne.n	8001016 <HAL_TIM_PeriodElapsedCallback+0x46>
				  gps_updateMode(1,0,0); //Message wakes up the gps module
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	2001      	movs	r0, #1
 800100c:	f000 fc3e 	bl	800188c <gps_updateMode>
				  HAL_Delay(50);
 8001010:	2032      	movs	r0, #50	@ 0x32
 8001012:	f001 fc1d 	bl	8002850 <HAL_Delay>
			  }

			  if (gps_command((uint8_t *)gps_Test, "PMTK001,0,3") == GpsError){//Double error check
 8001016:	4911      	ldr	r1, [pc, #68]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001018:	4811      	ldr	r0, [pc, #68]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800101a:	f000 fba5 	bl	8001768 <gps_command>
 800101e:	4603      	mov	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d108      	bne.n	8001036 <HAL_TIM_PeriodElapsedCallback+0x66>
				  if(gps_command((uint8_t *)gps_Test,"PMTK001,0,3") != Gpsok){
 8001024:	490d      	ldr	r1, [pc, #52]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001026:	480e      	ldr	r0, [pc, #56]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001028:	f000 fb9e 	bl	8001768 <gps_command>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_TIM_PeriodElapsedCallback+0x66>
				  				  gps_init(); //reset and initialize
 8001032:	f000 fb29 	bl	8001688 <gps_init>
				  			  }
			  }

			  if(gps_sleepFlag == 1){ //return to sleep mode
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d106      	bne.n	800104c <HAL_TIM_PeriodElapsedCallback+0x7c>
				  gps_updateMode(3,10000,30000);
 800103e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001042:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001046:	2003      	movs	r0, #3
 8001048:	f000 fc20 	bl	800188c <gps_updateMode>
			  }
}
 800104c:	bf00      	nop
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	0800de40 	.word	0x0800de40
 8001058:	20000500 	.word	0x20000500
 800105c:	0800de24 	.word	0x0800de24
 8001060:	0800de30 	.word	0x0800de30

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b0aa      	sub	sp, #168	@ 0xa8
 8001068:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106a:	f001 fb7f 	bl	800276c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106e:	f000 f943 	bl	80012f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001072:	f000 fa4b 	bl	800150c <MX_GPIO_Init>
  MX_DMA_Init();
 8001076:	f000 fa21 	bl	80014bc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800107a:	f000 f9f5 	bl	8001468 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800107e:	f009 fab7 	bl	800a5f0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001082:	f000 f9a3 	bl	80013cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8001086:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800108a:	f001 fbe1 	bl	8002850 <HAL_Delay>


  gps_init();
 800108e:	f000 fafb 	bl	8001688 <gps_init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001092:	488b      	ldr	r0, [pc, #556]	@ (80012c0 <main+0x25c>)
 8001094:	f004 f9aa 	bl	80053ec <HAL_TIM_Base_Start_IT>



  float latitude = 0;
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  float longitude = 0;
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  unsigned long fixAgeGPS = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //GPS Data code//****************************************************************
		  if(GPS_encode == 1){
 80010ae:	4b85      	ldr	r3, [pc, #532]	@ (80012c4 <main+0x260>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d13c      	bne.n	8001130 <main+0xcc>
			  if(_is_gps_data_good){ // update current coordinates if data is good
 80010b6:	4b84      	ldr	r3, [pc, #528]	@ (80012c8 <main+0x264>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d02e      	beq.n	800111c <main+0xb8>
			  	  gps_f_get_position(&latitude, &longitude,&fixAgeGPS );
 80010be:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80010c2:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80010c6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fad8 	bl	8002680 <gps_f_get_position>
			  	  char output[50];
			  	  snprintf(output, sizeof(output),"Latitude: %.6f, Longitude: %.6f \r\n",latitude,longitude);
 80010d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa3f 	bl	8000558 <__aeabi_f2d>
 80010da:	4604      	mov	r4, r0
 80010dc:	460d      	mov	r5, r1
 80010de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fa38 	bl	8000558 <__aeabi_f2d>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4638      	mov	r0, r7
 80010ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010f2:	e9cd 4500 	strd	r4, r5, [sp]
 80010f6:	4a75      	ldr	r2, [pc, #468]	@ (80012cc <main+0x268>)
 80010f8:	2132      	movs	r1, #50	@ 0x32
 80010fa:	f00a fd2b 	bl	800bb54 <sniprintf>
		 		  CDC_Transmit_FS((uint8_t *)output, strlen(output));
 80010fe:	463b      	mov	r3, r7
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f8bd 	bl	8000280 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	b29a      	uxth	r2, r3
 800110a:	463b      	mov	r3, r7
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f009 fb2c 	bl	800a76c <CDC_Transmit_FS>
		 		  GPS_encode = 0;
 8001114:	4b6b      	ldr	r3, [pc, #428]	@ (80012c4 <main+0x260>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	e009      	b.n	8001130 <main+0xcc>
		 	  }
		  else{
			  char output[25];
			  snprintf(output, sizeof(output),"GPS data is not good\r\n");
 800111c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001120:	4a6b      	ldr	r2, [pc, #428]	@ (80012d0 <main+0x26c>)
 8001122:	2119      	movs	r1, #25
 8001124:	4618      	mov	r0, r3
 8001126:	f00a fd15 	bl	800bb54 <sniprintf>
			  //CDC_Transmit_FS((uint8_t *)output, strlen(output));
			  GPS_encode = 0;
 800112a:	4b66      	ldr	r3, [pc, #408]	@ (80012c4 <main+0x260>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
		  	  }

		  }
		  //**************************************************************************
		      if(UserRxBufferFS[0] == '1'){
 8001130:	4b68      	ldr	r3, [pc, #416]	@ (80012d4 <main+0x270>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b31      	cmp	r3, #49	@ 0x31
 8001136:	d110      	bne.n	800115a <main+0xf6>
		    	  gps_command((uint8_t *) gps_Test, "PMTK001,0,3");
 8001138:	4967      	ldr	r1, [pc, #412]	@ (80012d8 <main+0x274>)
 800113a:	4868      	ldr	r0, [pc, #416]	@ (80012dc <main+0x278>)
 800113c:	f000 fb14 	bl	8001768 <gps_command>
		    	  gps_sleepFlag = 0;
 8001140:	4b67      	ldr	r3, [pc, #412]	@ (80012e0 <main+0x27c>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
		 		  memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 8001146:	4863      	ldr	r0, [pc, #396]	@ (80012d4 <main+0x270>)
 8001148:	f7ff f89a 	bl	8000280 <strlen>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	2100      	movs	r1, #0
 8001152:	4860      	ldr	r0, [pc, #384]	@ (80012d4 <main+0x270>)
 8001154:	f00a fd75 	bl	800bc42 <memset>
 8001158:	e7a9      	b.n	80010ae <main+0x4a>
		 	  }

		 	  else if(UserRxBufferFS[0] == '2'){
 800115a:	4b5e      	ldr	r3, [pc, #376]	@ (80012d4 <main+0x270>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b32      	cmp	r3, #50	@ 0x32
 8001160:	d113      	bne.n	800118a <main+0x126>
		 		 gps_updateMode(3,10000,30000);
 8001162:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001166:	f242 7110 	movw	r1, #10000	@ 0x2710
 800116a:	2003      	movs	r0, #3
 800116c:	f000 fb8e 	bl	800188c <gps_updateMode>
		 		 gps_sleepFlag = 1;
 8001170:	4b5b      	ldr	r3, [pc, #364]	@ (80012e0 <main+0x27c>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
		 		  memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 8001176:	4857      	ldr	r0, [pc, #348]	@ (80012d4 <main+0x270>)
 8001178:	f7ff f882 	bl	8000280 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	2100      	movs	r1, #0
 8001182:	4854      	ldr	r0, [pc, #336]	@ (80012d4 <main+0x270>)
 8001184:	f00a fd5d 	bl	800bc42 <memset>
 8001188:	e791      	b.n	80010ae <main+0x4a>
		 	  }

		 	  else if(UserRxBufferFS[0] == '3'){
 800118a:	4b52      	ldr	r3, [pc, #328]	@ (80012d4 <main+0x270>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b33      	cmp	r3, #51	@ 0x33
 8001190:	d11d      	bne.n	80011ce <main+0x16a>
		 		  uint8_t TEST[] = "$PMTK000*32\r\n"; //Message wakes up the gps module
 8001192:	4b52      	ldr	r3, [pc, #328]	@ (80012dc <main+0x278>)
 8001194:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8001198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800119a:	c407      	stmia	r4!, {r0, r1, r2}
 800119c:	8023      	strh	r3, [r4, #0]
		 		   gps_command(TEST,"PMTK001,0,3");
 800119e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011a2:	494d      	ldr	r1, [pc, #308]	@ (80012d8 <main+0x274>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fadf 	bl	8001768 <gps_command>
		 		   HAL_Delay(5000);
 80011aa:	f241 3088 	movw	r0, #5000	@ 0x1388
 80011ae:	f001 fb4f 	bl	8002850 <HAL_Delay>
		 		  gps_command((uint8_t *) LOW_UPDATE_RATE, "PMTK001,220,3");
 80011b2:	494c      	ldr	r1, [pc, #304]	@ (80012e4 <main+0x280>)
 80011b4:	484c      	ldr	r0, [pc, #304]	@ (80012e8 <main+0x284>)
 80011b6:	f000 fad7 	bl	8001768 <gps_command>
		 		   memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 80011ba:	4846      	ldr	r0, [pc, #280]	@ (80012d4 <main+0x270>)
 80011bc:	f7ff f860 	bl	8000280 <strlen>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	2100      	movs	r1, #0
 80011c6:	4843      	ldr	r0, [pc, #268]	@ (80012d4 <main+0x270>)
 80011c8:	f00a fd3b 	bl	800bc42 <memset>
 80011cc:	e76f      	b.n	80010ae <main+0x4a>
		 	  }

		 	  else if(UserRxBufferFS[0] == '4'){
 80011ce:	4b41      	ldr	r3, [pc, #260]	@ (80012d4 <main+0x270>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b34      	cmp	r3, #52	@ 0x34
 80011d4:	d115      	bne.n	8001202 <main+0x19e>
		 		  uint8_t rmcCommand[] = "$PMTK161,0*28\r\n"; //enable sleep mode only
 80011d6:	4b45      	ldr	r3, [pc, #276]	@ (80012ec <main+0x288>)
 80011d8:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80011dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 		  	gps_command(rmcCommand, "PMTK001,161,3");
 80011e2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80011e6:	4942      	ldr	r1, [pc, #264]	@ (80012f0 <main+0x28c>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fabd 	bl	8001768 <gps_command>
		 		  memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 80011ee:	4839      	ldr	r0, [pc, #228]	@ (80012d4 <main+0x270>)
 80011f0:	f7ff f846 	bl	8000280 <strlen>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	2100      	movs	r1, #0
 80011fa:	4836      	ldr	r0, [pc, #216]	@ (80012d4 <main+0x270>)
 80011fc:	f00a fd21 	bl	800bc42 <memset>
 8001200:	e755      	b.n	80010ae <main+0x4a>
		 	  }

		 	 else if(UserRxBufferFS[0] == '5'){
 8001202:	4b34      	ldr	r3, [pc, #208]	@ (80012d4 <main+0x270>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b35      	cmp	r3, #53	@ 0x35
 8001208:	d10e      	bne.n	8001228 <main+0x1c4>
		 		 	 gps_updateMode(1,0,0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2001      	movs	r0, #1
 8001210:	f000 fb3c 	bl	800188c <gps_updateMode>
		 			 memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 8001214:	482f      	ldr	r0, [pc, #188]	@ (80012d4 <main+0x270>)
 8001216:	f7ff f833 	bl	8000280 <strlen>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	2100      	movs	r1, #0
 8001220:	482c      	ldr	r0, [pc, #176]	@ (80012d4 <main+0x270>)
 8001222:	f00a fd0e 	bl	800bc42 <memset>
 8001226:	e742      	b.n	80010ae <main+0x4a>
		 			 }

		 	else if(UserRxBufferFS[0] == '6'){
 8001228:	4b2a      	ldr	r3, [pc, #168]	@ (80012d4 <main+0x270>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b36      	cmp	r3, #54	@ 0x36
 800122e:	d10d      	bne.n	800124c <main+0x1e8>
		 		        gps_command((uint8_t *) LOW_UPDATE_RATE, "PMTK001,220,3");
 8001230:	492c      	ldr	r1, [pc, #176]	@ (80012e4 <main+0x280>)
 8001232:	482d      	ldr	r0, [pc, #180]	@ (80012e8 <main+0x284>)
 8001234:	f000 fa98 	bl	8001768 <gps_command>
		 			 	memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 8001238:	4826      	ldr	r0, [pc, #152]	@ (80012d4 <main+0x270>)
 800123a:	f7ff f821 	bl	8000280 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	461a      	mov	r2, r3
 8001242:	2100      	movs	r1, #0
 8001244:	4823      	ldr	r0, [pc, #140]	@ (80012d4 <main+0x270>)
 8001246:	f00a fcfc 	bl	800bc42 <memset>
 800124a:	e730      	b.n	80010ae <main+0x4a>
		 			 }
		 	else if(UserRxBufferFS[0] == '7'){
 800124c:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <main+0x270>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b37      	cmp	r3, #55	@ 0x37
 8001252:	f47f af2c 	bne.w	80010ae <main+0x4a>
		 		  if(gps_sleepFlag == 1){
 8001256:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <main+0x27c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d125      	bne.n	80012aa <main+0x246>
		 						  char output[] = "Leaving periodic power mode";
 800125e:	4b25      	ldr	r3, [pc, #148]	@ (80012f4 <main+0x290>)
 8001260:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001264:	461d      	mov	r5, r3
 8001266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800126e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		 						  CDC_Transmit_FS((uint8_t *)output, strlen(output));
 8001272:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f802 	bl	8000280 <strlen>
 800127c:	4603      	mov	r3, r0
 800127e:	b29a      	uxth	r2, r3
 8001280:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f009 fa70 	bl	800a76c <CDC_Transmit_FS>
		 						  gps_command((uint8_t *) gps_Test, "PMTK001,0,3");
 800128c:	4912      	ldr	r1, [pc, #72]	@ (80012d8 <main+0x274>)
 800128e:	4813      	ldr	r0, [pc, #76]	@ (80012dc <main+0x278>)
 8001290:	f000 fa6a 	bl	8001768 <gps_command>
		 						  HAL_Delay(5000);
 8001294:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001298:	f001 fada 	bl	8002850 <HAL_Delay>
		 						  //gps_command((uint8_t *) gps_FullPower, "PMTK001,225,3");
		 						  gps_command((uint8_t *) LOW_UPDATE_RATE, "PMTK001,220,3");
 800129c:	4911      	ldr	r1, [pc, #68]	@ (80012e4 <main+0x280>)
 800129e:	4812      	ldr	r0, [pc, #72]	@ (80012e8 <main+0x284>)
 80012a0:	f000 fa62 	bl	8001768 <gps_command>
		 						  gps_sleepFlag = 0;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <main+0x27c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
		 					  }
		 		 memset(UserRxBufferFS,'\0',strlen((char *)UserRxBufferFS));
 80012aa:	480a      	ldr	r0, [pc, #40]	@ (80012d4 <main+0x270>)
 80012ac:	f7fe ffe8 	bl	8000280 <strlen>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	2100      	movs	r1, #0
 80012b6:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <main+0x270>)
 80012b8:	f00a fcc3 	bl	800bc42 <memset>
		  if(GPS_encode == 1){
 80012bc:	e6f7      	b.n	80010ae <main+0x4a>
 80012be:	bf00      	nop
 80012c0:	200002e0 	.word	0x200002e0
 80012c4:	200004f8 	.word	0x200004f8
 80012c8:	20000572 	.word	0x20000572
 80012cc:	0800de50 	.word	0x0800de50
 80012d0:	0800de74 	.word	0x0800de74
 80012d4:	20000860 	.word	0x20000860
 80012d8:	0800de24 	.word	0x0800de24
 80012dc:	0800de30 	.word	0x0800de30
 80012e0:	20000500 	.word	0x20000500
 80012e4:	0800de8c 	.word	0x0800de8c
 80012e8:	0800de9c 	.word	0x0800de9c
 80012ec:	0800dec0 	.word	0x0800dec0
 80012f0:	0800deb0 	.word	0x0800deb0
 80012f4:	0800ded0 	.word	0x0800ded0

080012f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b094      	sub	sp, #80	@ 0x50
 80012fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fe:	f107 0320 	add.w	r3, r7, #32
 8001302:	2230      	movs	r2, #48	@ 0x30
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f00a fc9b 	bl	800bc42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	4b28      	ldr	r3, [pc, #160]	@ (80013c4 <SystemClock_Config+0xcc>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	4a27      	ldr	r2, [pc, #156]	@ (80013c4 <SystemClock_Config+0xcc>)
 8001326:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132a:	6413      	str	r3, [r2, #64]	@ 0x40
 800132c:	4b25      	ldr	r3, [pc, #148]	@ (80013c4 <SystemClock_Config+0xcc>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	4b22      	ldr	r3, [pc, #136]	@ (80013c8 <SystemClock_Config+0xd0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001344:	4a20      	ldr	r2, [pc, #128]	@ (80013c8 <SystemClock_Config+0xd0>)
 8001346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b1e      	ldr	r3, [pc, #120]	@ (80013c8 <SystemClock_Config+0xd0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001358:	2301      	movs	r3, #1
 800135a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	2302      	movs	r3, #2
 8001364:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001366:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800136a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800136c:	230f      	movs	r3, #15
 800136e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001370:	2390      	movs	r3, #144	@ 0x90
 8001372:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001374:	2302      	movs	r3, #2
 8001376:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001378:	2305      	movs	r3, #5
 800137a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 0320 	add.w	r3, r7, #32
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fb8b 	bl	8004a9c <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800138c:	f000 fb4a 	bl	8001a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001390:	230f      	movs	r3, #15
 8001392:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001394:	2301      	movs	r3, #1
 8001396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 fdee 	bl	8004f8c <HAL_RCC_ClockConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013b6:	f000 fb35 	bl	8001a24 <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	3750      	adds	r7, #80	@ 0x50
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40007000 	.word	0x40007000

080013cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	463b      	mov	r3, r7
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001460 <MX_TIM2_Init+0x94>)
 80013ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 249;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <MX_TIM2_Init+0x94>)
 80013f2:	22f9      	movs	r2, #249	@ 0xf9
 80013f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <MX_TIM2_Init+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000000;
 80013fc:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <MX_TIM2_Init+0x94>)
 80013fe:	4a19      	ldr	r2, [pc, #100]	@ (8001464 <MX_TIM2_Init+0x98>)
 8001400:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001402:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <MX_TIM2_Init+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001408:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <MX_TIM2_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800140e:	4814      	ldr	r0, [pc, #80]	@ (8001460 <MX_TIM2_Init+0x94>)
 8001410:	f003 ff9c 	bl	800534c <HAL_TIM_Base_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800141a:	f000 fb03 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001422:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001424:	f107 0308 	add.w	r3, r7, #8
 8001428:	4619      	mov	r1, r3
 800142a:	480d      	ldr	r0, [pc, #52]	@ (8001460 <MX_TIM2_Init+0x94>)
 800142c:	f004 f930 	bl	8005690 <HAL_TIM_ConfigClockSource>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001436:	f000 faf5 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001442:	463b      	mov	r3, r7
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	@ (8001460 <MX_TIM2_Init+0x94>)
 8001448:	f004 fb38 	bl	8005abc <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001452:	f000 fae7 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200002e0 	.word	0x200002e0
 8001464:	03938700 	.word	0x03938700

08001468 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800146c:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <MX_USART1_UART_Init+0x4c>)
 800146e:	4a12      	ldr	r2, [pc, #72]	@ (80014b8 <MX_USART1_UART_Init+0x50>)
 8001470:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <MX_USART1_UART_Init+0x4c>)
 8001474:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001478:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <MX_USART1_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <MX_USART1_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <MX_USART1_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800148c:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <MX_USART1_UART_Init+0x4c>)
 800148e:	220c      	movs	r2, #12
 8001490:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <MX_USART1_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <MX_USART1_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800149e:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <MX_USART1_UART_Init+0x4c>)
 80014a0:	f004 fb8e 	bl	8005bc0 <HAL_UART_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014aa:	f000 fabb 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000328 	.word	0x20000328
 80014b8:	40011000 	.word	0x40011000

080014bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <MX_DMA_Init+0x4c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001508 <MX_DMA_Init+0x4c>)
 80014cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <MX_DMA_Init+0x4c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	203a      	movs	r0, #58	@ 0x3a
 80014e4:	f001 fab3 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014e8:	203a      	movs	r0, #58	@ 0x3a
 80014ea:	f001 facc 	bl	8002a86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	2046      	movs	r0, #70	@ 0x46
 80014f4:	f001 faab 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80014f8:	2046      	movs	r0, #70	@ 0x46
 80014fa:	f001 fac4 	bl	8002a86 <HAL_NVIC_EnableIRQ>

}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800

0800150c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b42      	ldr	r3, [pc, #264]	@ (8001630 <MX_GPIO_Init+0x124>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a41      	ldr	r2, [pc, #260]	@ (8001630 <MX_GPIO_Init+0x124>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b3f      	ldr	r3, [pc, #252]	@ (8001630 <MX_GPIO_Init+0x124>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <MX_GPIO_Init+0x124>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a3a      	ldr	r2, [pc, #232]	@ (8001630 <MX_GPIO_Init+0x124>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b38      	ldr	r3, [pc, #224]	@ (8001630 <MX_GPIO_Init+0x124>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b34      	ldr	r3, [pc, #208]	@ (8001630 <MX_GPIO_Init+0x124>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a33      	ldr	r2, [pc, #204]	@ (8001630 <MX_GPIO_Init+0x124>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b31      	ldr	r3, [pc, #196]	@ (8001630 <MX_GPIO_Init+0x124>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b2d      	ldr	r3, [pc, #180]	@ (8001630 <MX_GPIO_Init+0x124>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a2c      	ldr	r2, [pc, #176]	@ (8001630 <MX_GPIO_Init+0x124>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b2a      	ldr	r3, [pc, #168]	@ (8001630 <MX_GPIO_Init+0x124>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001598:	4826      	ldr	r0, [pc, #152]	@ (8001634 <MX_GPIO_Init+0x128>)
 800159a:	f002 f815 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015a4:	4824      	ldr	r0, [pc, #144]	@ (8001638 <MX_GPIO_Init+0x12c>)
 80015a6:	f002 f80f 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_PWX_GPIO_Port, GSM_PWX_Pin, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015b0:	4822      	ldr	r0, [pc, #136]	@ (800163c <MX_GPIO_Init+0x130>)
 80015b2:	f002 f809 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4819      	ldr	r0, [pc, #100]	@ (8001634 <MX_GPIO_Init+0x128>)
 80015d0:	f001 fe76 	bl	80032c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button___KEY_Pin */
  GPIO_InitStruct.Pin = User_Button___KEY_Pin;
 80015d4:	2301      	movs	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015dc:	2301      	movs	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Button___KEY_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4814      	ldr	r0, [pc, #80]	@ (8001638 <MX_GPIO_Init+0x12c>)
 80015e8:	f001 fe6a 	bl	80032c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 80015ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <MX_GPIO_Init+0x12c>)
 8001606:	f001 fe5b 	bl	80032c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_PWX_Pin */
  GPIO_InitStruct.Pin = GSM_PWX_Pin;
 800160a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GSM_PWX_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	@ (800163c <MX_GPIO_Init+0x130>)
 8001624:	f001 fe4c 	bl	80032c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	@ 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800
 8001634:	40020800 	.word	0x40020800
 8001638:	40020000 	.word	0x40020000
 800163c:	40020400 	.word	0x40020400

08001640 <gps_processNMEA>:

/* USER CODE BEGIN 4 */
void gps_processNMEA(char *buffer,uint16_t length){ //parse full message to gps encode
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]

	for(int j = 0; j<(length); j++){
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e00f      	b.n	8001672 <gps_processNMEA+0x32>
		if (gps_encode(buffer[j])){
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	4413      	add	r3, r2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fc5e 	bl	8001f1c <gps_encode>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <gps_processNMEA+0x2c>
			GPS_encode = 1;  //Get GPS information
 8001666:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <gps_processNMEA+0x44>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j<(length); j++){
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3301      	adds	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	429a      	cmp	r2, r3
 8001678:	dbeb      	blt.n	8001652 <gps_processNMEA+0x12>
		}
		}
	}
 800167a:	bf00      	nop
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200004f8 	.word	0x200004f8

08001688 <gps_init>:

void gps_init(){
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b092      	sub	sp, #72	@ 0x48
 800168c:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 800168e:	22c8      	movs	r2, #200	@ 0xc8
 8001690:	4928      	ldr	r1, [pc, #160]	@ (8001734 <gps_init+0xac>)
 8001692:	4829      	ldr	r0, [pc, #164]	@ (8001738 <gps_init+0xb0>)
 8001694:	f004 fb54 	bl	8005d40 <HAL_UARTEx_ReceiveToIdle_DMA>

	if(gps_command((uint8_t *) gps_Test, "PMTK001,0,3") != Gpsok){ //hard reset
 8001698:	4928      	ldr	r1, [pc, #160]	@ (800173c <gps_init+0xb4>)
 800169a:	4829      	ldr	r0, [pc, #164]	@ (8001740 <gps_init+0xb8>)
 800169c:	f000 f864 	bl	8001768 <gps_command>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00f      	beq.n	80016c6 <gps_init+0x3e>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016ac:	4825      	ldr	r0, [pc, #148]	@ (8001744 <gps_init+0xbc>)
 80016ae:	f001 ff8b 	bl	80035c8 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 80016b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016b6:	f001 f8cb 	bl	8002850 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 80016ba:	2201      	movs	r2, #1
 80016bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016c0:	4820      	ldr	r0, [pc, #128]	@ (8001744 <gps_init+0xbc>)
 80016c2:	f001 ff81 	bl	80035c8 <HAL_GPIO_WritePin>
			}

	gps_command((uint8_t *) gps_FullPower, "PMTK001,225,0,3");
 80016c6:	4920      	ldr	r1, [pc, #128]	@ (8001748 <gps_init+0xc0>)
 80016c8:	4820      	ldr	r0, [pc, #128]	@ (800174c <gps_init+0xc4>)
 80016ca:	f000 f84d 	bl	8001768 <gps_command>

	HAL_Delay(200);
 80016ce:	20c8      	movs	r0, #200	@ 0xc8
 80016d0:	f001 f8be 	bl	8002850 <HAL_Delay>

	uint8_t baudRateGPS[] = "$PMTK251,9600*17\r\n"; //set UART baud rate to 9600
 80016d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <gps_init+0xc8>)
 80016d6:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80016da:	461d      	mov	r5, r3
 80016dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e0:	682b      	ldr	r3, [r5, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	8022      	strh	r2, [r4, #0]
 80016e6:	3402      	adds	r4, #2
 80016e8:	0c1b      	lsrs	r3, r3, #16
 80016ea:	7023      	strb	r3, [r4, #0]
	gps_command(baudRateGPS,"PMTK001,251");
 80016ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016f0:	4918      	ldr	r1, [pc, #96]	@ (8001754 <gps_init+0xcc>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f838 	bl	8001768 <gps_command>

	HAL_Delay(200);
 80016f8:	20c8      	movs	r0, #200	@ 0xc8
 80016fa:	f001 f8a9 	bl	8002850 <HAL_Delay>

	//set update position report to every 10 seconds (works)
	gps_command((uint8_t *) LOW_UPDATE_RATE, "PMTK001,220,3");
 80016fe:	4916      	ldr	r1, [pc, #88]	@ (8001758 <gps_init+0xd0>)
 8001700:	4816      	ldr	r0, [pc, #88]	@ (800175c <gps_init+0xd4>)
 8001702:	f000 f831 	bl	8001768 <gps_command>

	HAL_Delay(200);
 8001706:	20c8      	movs	r0, #200	@ 0xc8
 8001708:	f001 f8a2 	bl	8002850 <HAL_Delay>

	uint8_t rmcCommand[] = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n"; //enable RMC mode only
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <gps_init+0xd8>)
 800170e:	463c      	mov	r4, r7
 8001710:	461d      	mov	r5, r3
 8001712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	6023      	str	r3, [r4, #0]
	gps_command(rmcCommand, "PMTK001,314,3");
 8001722:	463b      	mov	r3, r7
 8001724:	490f      	ldr	r1, [pc, #60]	@ (8001764 <gps_init+0xdc>)
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f81e 	bl	8001768 <gps_command>

}
 800172c:	bf00      	nop
 800172e:	3748      	adds	r7, #72	@ 0x48
 8001730:	46bd      	mov	sp, r7
 8001732:	bdb0      	pop	{r4, r5, r7, pc}
 8001734:	20000430 	.word	0x20000430
 8001738:	20000328 	.word	0x20000328
 800173c:	0800de24 	.word	0x0800de24
 8001740:	0800de30 	.word	0x0800de30
 8001744:	40020000 	.word	0x40020000
 8001748:	0800deec 	.word	0x0800deec
 800174c:	0800defc 	.word	0x0800defc
 8001750:	0800df28 	.word	0x0800df28
 8001754:	0800df0c 	.word	0x0800df0c
 8001758:	0800de8c 	.word	0x0800de8c
 800175c:	0800de9c 	.word	0x0800de9c
 8001760:	0800df3c 	.word	0x0800df3c
 8001764:	0800df18 	.word	0x0800df18

08001768 <gps_command>:


int gps_command(uint8_t *cmd, char *response) //Send Commands to GPS and check response
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_DMA(&huart1, (uint8_t *) cmd, strlen((char *)cmd));
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7fe fd84 	bl	8000280 <strlen>
 8001778:	4603      	mov	r3, r0
 800177a:	b29b      	uxth	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	483a      	ldr	r0, [pc, #232]	@ (800186c <gps_command+0x104>)
 8001782:	f004 fa6d 	bl	8005c60 <HAL_UART_Transmit_DMA>

    CDC_Transmit_FS((uint8_t *)cmd,  strlen((char *)cmd));
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7fe fd7a 	bl	8000280 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29b      	uxth	r3, r3
 8001790:	4619      	mov	r1, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f008 ffea 	bl	800a76c <CDC_Transmit_FS>

    char *P = NULL;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
    char *Failed = NULL;
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
    GPS_timer = HAL_GetTick();
 80017a0:	f001 f84a 	bl	8002838 <HAL_GetTick>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4a32      	ldr	r2, [pc, #200]	@ (8001870 <gps_command+0x108>)
 80017a8:	6013      	str	r3, [r2, #0]

    while(*P != response[0]){
 80017aa:	e040      	b.n	800182e <gps_command+0xc6>
    	P = strstr(RX_BufferGPS, response);
 80017ac:	6839      	ldr	r1, [r7, #0]
 80017ae:	4831      	ldr	r0, [pc, #196]	@ (8001874 <gps_command+0x10c>)
 80017b0:	f00a fa4f 	bl	800bc52 <strstr>
 80017b4:	60f8      	str	r0, [r7, #12]
    	Failed = strstr(RX_BufferGPS, ",2*");
 80017b6:	4930      	ldr	r1, [pc, #192]	@ (8001878 <gps_command+0x110>)
 80017b8:	482e      	ldr	r0, [pc, #184]	@ (8001874 <gps_command+0x10c>)
 80017ba:	f00a fa4a 	bl	800bc52 <strstr>
 80017be:	60b8      	str	r0, [r7, #8]
    	Failed = strstr(RX_BufferGPS, ",1*");
 80017c0:	492e      	ldr	r1, [pc, #184]	@ (800187c <gps_command+0x114>)
 80017c2:	482c      	ldr	r0, [pc, #176]	@ (8001874 <gps_command+0x10c>)
 80017c4:	f00a fa45 	bl	800bc52 <strstr>
 80017c8:	60b8      	str	r0, [r7, #8]
    	Failed = strstr(RX_BufferGPS, ",0*");
 80017ca:	492d      	ldr	r1, [pc, #180]	@ (8001880 <gps_command+0x118>)
 80017cc:	4829      	ldr	r0, [pc, #164]	@ (8001874 <gps_command+0x10c>)
 80017ce:	f00a fa40 	bl	800bc52 <strstr>
 80017d2:	60b8      	str	r0, [r7, #8]


    	if((HAL_GetTick() - GPS_timer) > 3000){ //3s time-out error
 80017d4:	f001 f830 	bl	8002838 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	4b25      	ldr	r3, [pc, #148]	@ (8001870 <gps_command+0x108>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d90f      	bls.n	8001808 <gps_command+0xa0>
    		memset(RX_BufferGPS, 0, RX_BUFFER_SIZE_GPS);
 80017e8:	22c8      	movs	r2, #200	@ 0xc8
 80017ea:	2100      	movs	r1, #0
 80017ec:	4821      	ldr	r0, [pc, #132]	@ (8001874 <gps_command+0x10c>)
 80017ee:	f00a fa28 	bl	800bc42 <memset>
    		CDC_Transmit_FS((uint8_t *)"Time Out Error\r\n", 15); //debug terminal
 80017f2:	210f      	movs	r1, #15
 80017f4:	4823      	ldr	r0, [pc, #140]	@ (8001884 <gps_command+0x11c>)
 80017f6:	f008 ffb9 	bl	800a76c <CDC_Transmit_FS>
    		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 80017fa:	22c8      	movs	r2, #200	@ 0xc8
 80017fc:	491d      	ldr	r1, [pc, #116]	@ (8001874 <gps_command+0x10c>)
 80017fe:	481b      	ldr	r0, [pc, #108]	@ (800186c <gps_command+0x104>)
 8001800:	f004 fa9e 	bl	8005d40 <HAL_UARTEx_ReceiveToIdle_DMA>
    		return GpsError;
 8001804:	2301      	movs	r3, #1
 8001806:	e02c      	b.n	8001862 <gps_command+0xfa>
    	}

    	if(Failed != NULL){
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00f      	beq.n	800182e <gps_command+0xc6>
    		memset(RX_BufferGPS, 0, RX_BUFFER_SIZE_GPS);
 800180e:	22c8      	movs	r2, #200	@ 0xc8
 8001810:	2100      	movs	r1, #0
 8001812:	4818      	ldr	r0, [pc, #96]	@ (8001874 <gps_command+0x10c>)
 8001814:	f00a fa15 	bl	800bc42 <memset>
    		CDC_Transmit_FS((uint8_t *)"Failed\r\n", 15); //debug terminal
 8001818:	210f      	movs	r1, #15
 800181a:	481b      	ldr	r0, [pc, #108]	@ (8001888 <gps_command+0x120>)
 800181c:	f008 ffa6 	bl	800a76c <CDC_Transmit_FS>
    		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 8001820:	22c8      	movs	r2, #200	@ 0xc8
 8001822:	4914      	ldr	r1, [pc, #80]	@ (8001874 <gps_command+0x10c>)
 8001824:	4811      	ldr	r0, [pc, #68]	@ (800186c <gps_command+0x104>)
 8001826:	f004 fa8b 	bl	8005d40 <HAL_UARTEx_ReceiveToIdle_DMA>
    		return GpsError;
 800182a:	2301      	movs	r3, #1
 800182c:	e019      	b.n	8001862 <gps_command+0xfa>
    while(*P != response[0]){
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	781a      	ldrb	r2, [r3, #0]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d1b8      	bne.n	80017ac <gps_command+0x44>
    	}

    }

    memset(RX_BufferGPS, 0, RX_BUFFER_SIZE_GPS);
 800183a:	22c8      	movs	r2, #200	@ 0xc8
 800183c:	2100      	movs	r1, #0
 800183e:	480d      	ldr	r0, [pc, #52]	@ (8001874 <gps_command+0x10c>)
 8001840:	f00a f9ff 	bl	800bc42 <memset>
    CDC_Transmit_FS((uint8_t *)response,  strlen(response));
 8001844:	6838      	ldr	r0, [r7, #0]
 8001846:	f7fe fd1b 	bl	8000280 <strlen>
 800184a:	4603      	mov	r3, r0
 800184c:	b29b      	uxth	r3, r3
 800184e:	4619      	mov	r1, r3
 8001850:	6838      	ldr	r0, [r7, #0]
 8001852:	f008 ff8b 	bl	800a76c <CDC_Transmit_FS>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) RX_BufferGPS, RX_BUFFER_SIZE_GPS);
 8001856:	22c8      	movs	r2, #200	@ 0xc8
 8001858:	4906      	ldr	r1, [pc, #24]	@ (8001874 <gps_command+0x10c>)
 800185a:	4804      	ldr	r0, [pc, #16]	@ (800186c <gps_command+0x104>)
 800185c:	f004 fa70 	bl	8005d40 <HAL_UARTEx_ReceiveToIdle_DMA>
	return Gpsok;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000328 	.word	0x20000328
 8001870:	200004fc 	.word	0x200004fc
 8001874:	20000430 	.word	0x20000430
 8001878:	0800df70 	.word	0x0800df70
 800187c:	0800df74 	.word	0x0800df74
 8001880:	0800df78 	.word	0x0800df78
 8001884:	0800df7c 	.word	0x0800df7c
 8001888:	0800df90 	.word	0x0800df90

0800188c <gps_updateMode>:


void gps_updateMode(uint8_t mode,uint16_t on, uint16_t off){ // implement mode changes from messages or timing
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b0b1      	sub	sp, #196	@ 0xc4
 8001890:	af04      	add	r7, sp, #16
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	460b      	mov	r3, r1
 8001898:	80bb      	strh	r3, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	807b      	strh	r3, [r7, #2]
	switch(mode){
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d873      	bhi.n	800198e <gps_updateMode+0x102>
 80018a6:	a201      	add	r2, pc, #4	@ (adr r2, 80018ac <gps_updateMode+0x20>)
 80018a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ac:	080018c1 	.word	0x080018c1
 80018b0:	080018db 	.word	0x080018db
 80018b4:	080018f5 	.word	0x080018f5
 80018b8:	0800198d 	.word	0x0800198d
 80018bc:	08001973 	.word	0x08001973
	case(1): //Full power continuous mode
	        gps_command((uint8_t *)gps_Test,"PMTK001,0,3");
 80018c0:	4935      	ldr	r1, [pc, #212]	@ (8001998 <gps_updateMode+0x10c>)
 80018c2:	4836      	ldr	r0, [pc, #216]	@ (800199c <gps_updateMode+0x110>)
 80018c4:	f7ff ff50 	bl	8001768 <gps_command>
	        HAL_Delay(1000);
 80018c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018cc:	f000 ffc0 	bl	8002850 <HAL_Delay>
			gps_command((uint8_t *)LOW_UPDATE_RATE, "PMTK001,220,3");
 80018d0:	4933      	ldr	r1, [pc, #204]	@ (80019a0 <gps_updateMode+0x114>)
 80018d2:	4834      	ldr	r0, [pc, #208]	@ (80019a4 <gps_updateMode+0x118>)
 80018d4:	f7ff ff48 	bl	8001768 <gps_command>
			break;
 80018d8:	e059      	b.n	800198e <gps_updateMode+0x102>
	case(2): //Standby low power mode
			uint8_t cmd2[] = "$PMTK161,0*28";
 80018da:	4b33      	ldr	r3, [pc, #204]	@ (80019a8 <gps_updateMode+0x11c>)
 80018dc:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 80018e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e2:	c407      	stmia	r4!, {r0, r1, r2}
 80018e4:	8023      	strh	r3, [r4, #0]
			gps_command(cmd2,"PMTK001,161,3");
 80018e6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80018ea:	4930      	ldr	r1, [pc, #192]	@ (80019ac <gps_updateMode+0x120>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff3b 	bl	8001768 <gps_command>
			break;
 80018f2:	e04c      	b.n	800198e <gps_updateMode+0x102>
	case(3): //Periodic on/off mode -> need to implement a function that handles timing length changes (maybe use presets)
			if((on < 65536) && (off < 65536)){//check under max limit
			char cmd3[60] = {0};
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	2238      	movs	r2, #56	@ 0x38
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f00a f99e 	bl	800bc42 <memset>
			snprintf(cmd3,sizeof(cmd3) ,"$PMTK225,2,%u,%u,%u,%d*", on, off, on, off);
 8001906:	88bc      	ldrh	r4, [r7, #4]
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	88ba      	ldrh	r2, [r7, #4]
 800190c:	8879      	ldrh	r1, [r7, #2]
 800190e:	f107 000c 	add.w	r0, r7, #12
 8001912:	9102      	str	r1, [sp, #8]
 8001914:	9201      	str	r2, [sp, #4]
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	4623      	mov	r3, r4
 800191a:	4a25      	ldr	r2, [pc, #148]	@ (80019b0 <gps_updateMode+0x124>)
 800191c:	213c      	movs	r1, #60	@ 0x3c
 800191e:	f00a f919 	bl	800bb54 <sniprintf>
			uint8_t checksum = get_checksum(cmd3);
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f84e 	bl	80019c8 <get_checksum>
 800192c:	4603      	mov	r3, r0
 800192e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
			char finalcmd3[70] = {0};
 8001932:	2300      	movs	r3, #0
 8001934:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001936:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800193a:	2242      	movs	r2, #66	@ 0x42
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f00a f97f 	bl	800bc42 <memset>
			snprintf(finalcmd3, sizeof(finalcmd3),"%s%X\r\n",cmd3,checksum);
 8001944:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001948:	f107 020c 	add.w	r2, r7, #12
 800194c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	4613      	mov	r3, r2
 8001954:	4a17      	ldr	r2, [pc, #92]	@ (80019b4 <gps_updateMode+0x128>)
 8001956:	2146      	movs	r1, #70	@ 0x46
 8001958:	f00a f8fc 	bl	800bb54 <sniprintf>
			gps_command((uint8_t *) HIGH_UPDATE_RATE,"PMTK001,220,3");
 800195c:	4910      	ldr	r1, [pc, #64]	@ (80019a0 <gps_updateMode+0x114>)
 800195e:	4816      	ldr	r0, [pc, #88]	@ (80019b8 <gps_updateMode+0x12c>)
 8001960:	f7ff ff02 	bl	8001768 <gps_command>
			gps_command((uint8_t *)finalcmd3,"PMTK001,225,3");
 8001964:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001968:	4914      	ldr	r1, [pc, #80]	@ (80019bc <gps_updateMode+0x130>)
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fefc 	bl	8001768 <gps_command>
			}
			break;
 8001970:	e00d      	b.n	800198e <gps_updateMode+0x102>
	case(4): //Standby mode -> deep power saving need to implement wake up pin

			break;
	case(5): //Always locate mode: advanced adaptive power periodic mode
			uint8_t cmd5[] = "$PMKT225,8*23";//Always locate standby
 8001972:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <gps_updateMode+0x134>)
 8001974:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800197a:	c407      	stmia	r4!, {r0, r1, r2}
 800197c:	8023      	strh	r3, [r4, #0]
			gps_command(cmd5,"$PMKT001,225,3");
 800197e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001982:	4910      	ldr	r1, [pc, #64]	@ (80019c4 <gps_updateMode+0x138>)
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff feef 	bl	8001768 <gps_command>
			break;
 800198a:	e000      	b.n	800198e <gps_updateMode+0x102>
			break;
 800198c:	bf00      	nop
	}

}
 800198e:	bf00      	nop
 8001990:	37b4      	adds	r7, #180	@ 0xb4
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}
 8001996:	bf00      	nop
 8001998:	0800de24 	.word	0x0800de24
 800199c:	0800de30 	.word	0x0800de30
 80019a0:	0800de8c 	.word	0x0800de8c
 80019a4:	0800de9c 	.word	0x0800de9c
 80019a8:	0800dff0 	.word	0x0800dff0
 80019ac:	0800deb0 	.word	0x0800deb0
 80019b0:	0800df9c 	.word	0x0800df9c
 80019b4:	0800dfb4 	.word	0x0800dfb4
 80019b8:	0800dfbc 	.word	0x0800dfbc
 80019bc:	0800dfd0 	.word	0x0800dfd0
 80019c0:	0800e000 	.word	0x0800e000
 80019c4:	0800dfe0 	.word	0x0800dfe0

080019c8 <get_checksum>:

uint8_t get_checksum(char *cmd){ // determines checksum of command and returns .
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	uint8_t checksum = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
	for(int j = 0; j < strlen((char *)cmd)+1; j++){
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	e017      	b.n	8001a0a <get_checksum+0x42>
		if(cmd[j] == '*' ){
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4413      	add	r3, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80019e4:	d101      	bne.n	80019ea <get_checksum+0x22>
			return(checksum);
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	e018      	b.n	8001a1c <get_checksum+0x54>
		}
		else if(cmd[j]!= '$'){
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b24      	cmp	r3, #36	@ 0x24
 80019f4:	d006      	beq.n	8001a04 <get_checksum+0x3c>
			checksum ^= cmd[j];
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	4053      	eors	r3, r2
 8001a02:	73fb      	strb	r3, [r7, #15]
	for(int j = 0; j < strlen((char *)cmd)+1; j++){
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	3301      	adds	r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7fe fc38 	bl	8000280 <strlen>
 8001a10:	4603      	mov	r3, r0
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d8df      	bhi.n	80019da <get_checksum+0x12>
		}
	}
	return(0);
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <Error_Handler+0x8>

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a90:	d115      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x48>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x48>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x48>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 14, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	210e      	movs	r1, #14
 8001ab2:	201c      	movs	r0, #28
 8001ab4:	f000 ffcb 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ab8:	201c      	movs	r0, #28
 8001aba:	f000 ffe4 	bl	8002a86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	@ 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8001c1c <HAL_UART_MspInit+0x150>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	f040 8091 	bne.w	8001c12 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001af0:	2300      	movs	r3, #0
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	4b4a      	ldr	r3, [pc, #296]	@ (8001c20 <HAL_UART_MspInit+0x154>)
 8001af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af8:	4a49      	ldr	r2, [pc, #292]	@ (8001c20 <HAL_UART_MspInit+0x154>)
 8001afa:	f043 0310 	orr.w	r3, r3, #16
 8001afe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b00:	4b47      	ldr	r3, [pc, #284]	@ (8001c20 <HAL_UART_MspInit+0x154>)
 8001b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	4b43      	ldr	r3, [pc, #268]	@ (8001c20 <HAL_UART_MspInit+0x154>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b14:	4a42      	ldr	r2, [pc, #264]	@ (8001c20 <HAL_UART_MspInit+0x154>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1c:	4b40      	ldr	r3, [pc, #256]	@ (8001c20 <HAL_UART_MspInit+0x154>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b28:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4837      	ldr	r0, [pc, #220]	@ (8001c24 <HAL_UART_MspInit+0x158>)
 8001b46:	f001 fbbb 	bl	80032c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001b4a:	4b37      	ldr	r3, [pc, #220]	@ (8001c28 <HAL_UART_MspInit+0x15c>)
 8001b4c:	4a37      	ldr	r2, [pc, #220]	@ (8001c2c <HAL_UART_MspInit+0x160>)
 8001b4e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001b50:	4b35      	ldr	r3, [pc, #212]	@ (8001c28 <HAL_UART_MspInit+0x15c>)
 8001b52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b56:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b58:	4b33      	ldr	r3, [pc, #204]	@ (8001c28 <HAL_UART_MspInit+0x15c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5e:	4b32      	ldr	r3, [pc, #200]	@ (8001c28 <HAL_UART_MspInit+0x15c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b64:	4b30      	ldr	r3, [pc, #192]	@ (8001c28 <HAL_UART_MspInit+0x15c>)
 8001b66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c28 <HAL_UART_MspInit+0x15c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b72:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <HAL_UART_MspInit+0x15c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b78:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <HAL_UART_MspInit+0x15c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <HAL_UART_MspInit+0x15c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <HAL_UART_MspInit+0x15c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b8a:	4827      	ldr	r0, [pc, #156]	@ (8001c28 <HAL_UART_MspInit+0x15c>)
 8001b8c:	f000 ff96 	bl	8002abc <HAL_DMA_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001b96:	f7ff ff45 	bl	8001a24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a22      	ldr	r2, [pc, #136]	@ (8001c28 <HAL_UART_MspInit+0x15c>)
 8001b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ba0:	4a21      	ldr	r2, [pc, #132]	@ (8001c28 <HAL_UART_MspInit+0x15c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001ba6:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <HAL_UART_MspInit+0x164>)
 8001ba8:	4a22      	ldr	r2, [pc, #136]	@ (8001c34 <HAL_UART_MspInit+0x168>)
 8001baa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001bac:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <HAL_UART_MspInit+0x164>)
 8001bae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bb2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <HAL_UART_MspInit+0x164>)
 8001bb6:	2240      	movs	r2, #64	@ 0x40
 8001bb8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bba:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <HAL_UART_MspInit+0x164>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c30 <HAL_UART_MspInit+0x164>)
 8001bc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bc6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bc8:	4b19      	ldr	r3, [pc, #100]	@ (8001c30 <HAL_UART_MspInit+0x164>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bce:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <HAL_UART_MspInit+0x164>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001bd4:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <HAL_UART_MspInit+0x164>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <HAL_UART_MspInit+0x164>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be0:	4b13      	ldr	r3, [pc, #76]	@ (8001c30 <HAL_UART_MspInit+0x164>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001be6:	4812      	ldr	r0, [pc, #72]	@ (8001c30 <HAL_UART_MspInit+0x164>)
 8001be8:	f000 ff68 	bl	8002abc <HAL_DMA_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001bf2:	f7ff ff17 	bl	8001a24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <HAL_UART_MspInit+0x164>)
 8001bfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c30 <HAL_UART_MspInit+0x164>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	2025      	movs	r0, #37	@ 0x25
 8001c08:	f000 ff21 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c0c:	2025      	movs	r0, #37	@ 0x25
 8001c0e:	f000 ff3a 	bl	8002a86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	@ 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40011000 	.word	0x40011000
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	20000370 	.word	0x20000370
 8001c2c:	40026440 	.word	0x40026440
 8001c30:	200003d0 	.word	0x200003d0
 8001c34:	400264b8 	.word	0x400264b8

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <NMI_Handler+0x4>

08001c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <MemManage_Handler+0x4>

08001c50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8e:	f000 fdbf 	bl	8002810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <TIM2_IRQHandler+0x10>)
 8001c9e:	f003 fc07 	bl	80054b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //HAL_TIM_PeriodElapsedCallback(&htim2);
  /* USER CODE END TIM2_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200002e0 	.word	0x200002e0

08001cac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	@ (8001cbc <USART1_IRQHandler+0x10>)
 8001cb2:	f004 f8a3 	bl	8005dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000328 	.word	0x20000328

08001cc0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cc6:	480d      	ldr	r0, [pc, #52]	@ (8001cfc <DMA2_Stream2_IRQHandler+0x3c>)
 8001cc8:	f001 f890 	bl	8002dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)){ //get message size as return to call back function
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <DMA2_Stream2_IRQHandler+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b10      	cmp	r3, #16
 8001cd8:	d10b      	bne.n	8001cf2 <DMA2_Stream2_IRQHandler+0x32>
     	  uint16_t size = RX_BUFFER_SIZE_GPS - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx); //#bytes in Buffer - #Bytes not received
 8001cda:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <DMA2_Stream2_IRQHandler+0x3c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001ce6:	80fb      	strh	r3, [r7, #6]
     	  HAL_UARTEx_RxEventCallback(&huart1, size);
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	4619      	mov	r1, r3
 8001cec:	4804      	ldr	r0, [pc, #16]	@ (8001d00 <DMA2_Stream2_IRQHandler+0x40>)
 8001cee:	f7ff f92b 	bl	8000f48 <HAL_UARTEx_RxEventCallback>

       }

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000370 	.word	0x20000370
 8001d00:	20000328 	.word	0x20000328

08001d04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d08:	4802      	ldr	r0, [pc, #8]	@ (8001d14 <OTG_FS_IRQHandler+0x10>)
 8001d0a:	f001 fdba 	bl	8003882 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20001260 	.word	0x20001260

08001d18 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d1c:	4802      	ldr	r0, [pc, #8]	@ (8001d28 <DMA2_Stream7_IRQHandler+0x10>)
 8001d1e:	f001 f865 	bl	8002dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200003d0 	.word	0x200003d0

08001d2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return 1;
 8001d30:	2301      	movs	r3, #1
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_kill>:

int _kill(int pid, int sig)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d46:	f009 ffe5 	bl	800bd14 <__errno>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2216      	movs	r2, #22
 8001d4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_exit>:

void _exit (int status)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ffe7 	bl	8001d3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d6e:	bf00      	nop
 8001d70:	e7fd      	b.n	8001d6e <_exit+0x12>

08001d72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e00a      	b.n	8001d9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d84:	f3af 8000 	nop.w
 8001d88:	4601      	mov	r1, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	60ba      	str	r2, [r7, #8]
 8001d90:	b2ca      	uxtb	r2, r1
 8001d92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3301      	adds	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	dbf0      	blt.n	8001d84 <_read+0x12>
  }

  return len;
 8001da2:	687b      	ldr	r3, [r7, #4]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	e009      	b.n	8001dd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	60ba      	str	r2, [r7, #8]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dbf1      	blt.n	8001dbe <_write+0x12>
  }
  return len;
 8001dda:	687b      	ldr	r3, [r7, #4]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_close>:

int _close(int file)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <_isatty>:

int _isatty(int file)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e24:	2301      	movs	r3, #1
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b085      	sub	sp, #20
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e54:	4a14      	ldr	r2, [pc, #80]	@ (8001ea8 <_sbrk+0x5c>)
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <_sbrk+0x60>)
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e60:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <_sbrk+0x64>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <_sbrk+0x64>)
 8001e6a:	4a12      	ldr	r2, [pc, #72]	@ (8001eb4 <_sbrk+0x68>)
 8001e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6e:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d207      	bcs.n	8001e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e7c:	f009 ff4a 	bl	800bd14 <__errno>
 8001e80:	4603      	mov	r3, r0
 8001e82:	220c      	movs	r2, #12
 8001e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8a:	e009      	b.n	8001ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <_sbrk+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	4a05      	ldr	r2, [pc, #20]	@ (8001eb0 <_sbrk+0x64>)
 8001e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20010000 	.word	0x20010000
 8001eac:	00000400 	.word	0x00000400
 8001eb0:	20000504 	.word	0x20000504
 8001eb4:	20001ab0 	.word	0x20001ab0

08001eb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <SystemInit+0x20>)
 8001ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec2:	4a05      	ldr	r2, [pc, #20]	@ (8001ed8 <SystemInit+0x20>)
 8001ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <gpsisdigit>:
//
// public methods
//

// verify is character is a digit
bool gpsisdigit(char c) { return c >= '0' && c <= '9'; }
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	2b2f      	cmp	r3, #47	@ 0x2f
 8001eea:	d904      	bls.n	8001ef6 <gpsisdigit+0x1a>
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	2b39      	cmp	r3, #57	@ 0x39
 8001ef0:	d801      	bhi.n	8001ef6 <gpsisdigit+0x1a>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <gpsisdigit+0x1c>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <uptime>:
// horizontal dilution of precision in 100ths
inline unsigned long gps_hdop() { return _hdop; }


clock_t uptime()
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
	unsigned long d = HAL_GetTick();
 8001f0c:	f000 fc94 	bl	8002838 <HAL_GetTick>
 8001f10:	6078      	str	r0, [r7, #4]
	return d;
 8001f12:	687b      	ldr	r3, [r7, #4]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <gps_encode>:
{
	return rad * (180/PI);
}

bool gps_encode(char c)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
  bool valid_sentence = true;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]

#ifndef GPS_NO_STATS
  _encoded_characters++;
 8001f2a:	4b57      	ldr	r3, [pc, #348]	@ (8002088 <gps_encode+0x16c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	4a55      	ldr	r2, [pc, #340]	@ (8002088 <gps_encode+0x16c>)
 8001f32:	6013      	str	r3, [r2, #0]
#endif
  switch(c)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	3b0a      	subs	r3, #10
 8001f38:	2b22      	cmp	r3, #34	@ 0x22
 8001f3a:	f200 8086 	bhi.w	800204a <gps_encode+0x12e>
 8001f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f44 <gps_encode+0x28>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001fdf 	.word	0x08001fdf
 8001f48:	0800204b 	.word	0x0800204b
 8001f4c:	0800204b 	.word	0x0800204b
 8001f50:	08001fdf 	.word	0x08001fdf
 8001f54:	0800204b 	.word	0x0800204b
 8001f58:	0800204b 	.word	0x0800204b
 8001f5c:	0800204b 	.word	0x0800204b
 8001f60:	0800204b 	.word	0x0800204b
 8001f64:	0800204b 	.word	0x0800204b
 8001f68:	0800204b 	.word	0x0800204b
 8001f6c:	0800204b 	.word	0x0800204b
 8001f70:	0800204b 	.word	0x0800204b
 8001f74:	0800204b 	.word	0x0800204b
 8001f78:	0800204b 	.word	0x0800204b
 8001f7c:	0800204b 	.word	0x0800204b
 8001f80:	0800204b 	.word	0x0800204b
 8001f84:	0800204b 	.word	0x0800204b
 8001f88:	0800204b 	.word	0x0800204b
 8001f8c:	0800204b 	.word	0x0800204b
 8001f90:	0800204b 	.word	0x0800204b
 8001f94:	0800204b 	.word	0x0800204b
 8001f98:	0800204b 	.word	0x0800204b
 8001f9c:	0800204b 	.word	0x0800204b
 8001fa0:	0800204b 	.word	0x0800204b
 8001fa4:	0800204b 	.word	0x0800204b
 8001fa8:	0800204b 	.word	0x0800204b
 8001fac:	08002023 	.word	0x08002023
 8001fb0:	0800204b 	.word	0x0800204b
 8001fb4:	0800204b 	.word	0x0800204b
 8001fb8:	0800204b 	.word	0x0800204b
 8001fbc:	0800204b 	.word	0x0800204b
 8001fc0:	0800204b 	.word	0x0800204b
 8001fc4:	08001fdf 	.word	0x08001fdf
 8001fc8:	0800204b 	.word	0x0800204b
 8001fcc:	08001fd1 	.word	0x08001fd1
  {
  case ',': // term terminators
    _parity ^= c;
 8001fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800208c <gps_encode+0x170>)
 8001fd2:	781a      	ldrb	r2, [r3, #0]
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	4053      	eors	r3, r2
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4b2c      	ldr	r3, [pc, #176]	@ (800208c <gps_encode+0x170>)
 8001fdc:	701a      	strb	r2, [r3, #0]
  case '\r':
  case '\n':
  case '*':
    if (_term_offset < sizeof(_term))
 8001fde:	4b2c      	ldr	r3, [pc, #176]	@ (8002090 <gps_encode+0x174>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b0e      	cmp	r3, #14
 8001fe4:	d809      	bhi.n	8001ffa <gps_encode+0xde>
    {
      _term[_term_offset] = 0;
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8002090 <gps_encode+0x174>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b29      	ldr	r3, [pc, #164]	@ (8002094 <gps_encode+0x178>)
 8001fee:	2100      	movs	r1, #0
 8001ff0:	5499      	strb	r1, [r3, r2]
      valid_sentence = gps_term_complete(); // process the term
 8001ff2:	f000 f93d 	bl	8002270 <gps_term_complete>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	73fb      	strb	r3, [r7, #15]
    }
    ++_term_number; // move to next term
 8001ffa:	4b27      	ldr	r3, [pc, #156]	@ (8002098 <gps_encode+0x17c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	3301      	adds	r3, #1
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b25      	ldr	r3, [pc, #148]	@ (8002098 <gps_encode+0x17c>)
 8002004:	701a      	strb	r2, [r3, #0]
    _term_offset = 0;  // reset the term buffer for next term
 8002006:	4b22      	ldr	r3, [pc, #136]	@ (8002090 <gps_encode+0x174>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
    _is_checksum_term = c == '*'; //If asterisk then the next term is a check sum
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002010:	bf0c      	ite	eq
 8002012:	2301      	moveq	r3, #1
 8002014:	2300      	movne	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	4b20      	ldr	r3, [pc, #128]	@ (800209c <gps_encode+0x180>)
 800201c:	701a      	strb	r2, [r3, #0]
    return valid_sentence;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	e02d      	b.n	800207e <gps_encode+0x162>

  case '$': // sentence begin
    _term_number = 0;
 8002022:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <gps_encode+0x17c>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
    _term_offset = 0;
 8002028:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <gps_encode+0x174>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
    _parity = 0;
 800202e:	4b17      	ldr	r3, [pc, #92]	@ (800208c <gps_encode+0x170>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
    _sentence_type = GPS_SENTENCE_OTHER;
 8002034:	4b1a      	ldr	r3, [pc, #104]	@ (80020a0 <gps_encode+0x184>)
 8002036:	2202      	movs	r2, #2
 8002038:	701a      	strb	r2, [r3, #0]
    _is_checksum_term = false;
 800203a:	4b18      	ldr	r3, [pc, #96]	@ (800209c <gps_encode+0x180>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
    _is_gps_data_good = false;
 8002040:	4b18      	ldr	r3, [pc, #96]	@ (80020a4 <gps_encode+0x188>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
    return valid_sentence;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	e019      	b.n	800207e <gps_encode+0x162>
  }

  // ordinary characters
  if (_term_offset < sizeof(_term) - 1)
 800204a:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <gps_encode+0x174>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b0d      	cmp	r3, #13
 8002050:	d809      	bhi.n	8002066 <gps_encode+0x14a>
    _term[_term_offset++] = c; //add character to current term buffer
 8002052:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <gps_encode+0x174>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	b2d1      	uxtb	r1, r2
 800205a:	4a0d      	ldr	r2, [pc, #52]	@ (8002090 <gps_encode+0x174>)
 800205c:	7011      	strb	r1, [r2, #0]
 800205e:	4619      	mov	r1, r3
 8002060:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <gps_encode+0x178>)
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	5453      	strb	r3, [r2, r1]
  if (!_is_checksum_term)
 8002066:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <gps_encode+0x180>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <gps_encode+0x160>
    _parity ^= c; // update the checksum
 800206e:	4b07      	ldr	r3, [pc, #28]	@ (800208c <gps_encode+0x170>)
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	4053      	eors	r3, r2
 8002076:	b2da      	uxtb	r2, r3
 8002078:	4b04      	ldr	r3, [pc, #16]	@ (800208c <gps_encode+0x170>)
 800207a:	701a      	strb	r2, [r3, #0]

  return valid_sentence;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000574 	.word	0x20000574
 800208c:	2000055c 	.word	0x2000055c
 8002090:	20000571 	.word	0x20000571
 8002094:	20000560 	.word	0x20000560
 8002098:	20000570 	.word	0x20000570
 800209c:	2000055d 	.word	0x2000055d
 80020a0:	2000056f 	.word	0x2000056f
 80020a4:	20000572 	.word	0x20000572

080020a8 <from_hex>:
/*
 * internal utilities
*/

int from_hex(char a)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  if (a >= 'A' && a <= 'F')
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	2b40      	cmp	r3, #64	@ 0x40
 80020b6:	d905      	bls.n	80020c4 <from_hex+0x1c>
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	2b46      	cmp	r3, #70	@ 0x46
 80020bc:	d802      	bhi.n	80020c4 <from_hex+0x1c>
    return a - 'A' + 10;
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	3b37      	subs	r3, #55	@ 0x37
 80020c2:	e00a      	b.n	80020da <from_hex+0x32>
  else if (a >= 'a' && a <= 'f')
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	2b60      	cmp	r3, #96	@ 0x60
 80020c8:	d905      	bls.n	80020d6 <from_hex+0x2e>
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	2b66      	cmp	r3, #102	@ 0x66
 80020ce:	d802      	bhi.n	80020d6 <from_hex+0x2e>
    return a - 'a' + 10;
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	3b57      	subs	r3, #87	@ 0x57
 80020d4:	e001      	b.n	80020da <from_hex+0x32>
  else
    return a - '0';
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	3b30      	subs	r3, #48	@ 0x30
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <gps_parse_decimal>:

unsigned long gps_parse_decimal()
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
  char *p;
  bool isneg;
  unsigned long ret;

  p = _term;
 80020ee:	4b2d      	ldr	r3, [pc, #180]	@ (80021a4 <gps_parse_decimal+0xbc>)
 80020f0:	60fb      	str	r3, [r7, #12]
  isneg = (*p == '-');
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	71fb      	strb	r3, [r7, #7]
  if (isneg)
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <gps_parse_decimal+0x26>
	++p;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3301      	adds	r3, #1
 800210c:	60fb      	str	r3, [r7, #12]

  ret = 100UL * gpsatol(p);
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fa42 	bl	8002598 <gpsatol>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	2364      	movs	r3, #100	@ 0x64
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	60bb      	str	r3, [r7, #8]

  while (gpsisdigit(*p))
 8002120:	e002      	b.n	8002128 <gps_parse_decimal+0x40>
	++p;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3301      	adds	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
  while (gpsisdigit(*p))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fed5 	bl	8001edc <gpsisdigit>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f4      	bne.n	8002122 <gps_parse_decimal+0x3a>

  if (*p == '.')
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b2e      	cmp	r3, #46	@ 0x2e
 800213e:	d126      	bne.n	800218e <gps_parse_decimal+0xa6>
  {
    if (gpsisdigit(p[1]))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3301      	adds	r3, #1
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fec8 	bl	8001edc <gpsisdigit>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01d      	beq.n	800218e <gps_parse_decimal+0xa6>
    {
      ret += 10 * (p[1] - '0');
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3301      	adds	r3, #1
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4413      	add	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
      if (gpsisdigit(p[2]))
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3302      	adds	r3, #2
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff feb2 	bl	8001edc <gpsisdigit>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <gps_parse_decimal+0xa6>
        ret += p[2] - '0';
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3302      	adds	r3, #2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4413      	add	r3, r2
 800218a:	3b30      	subs	r3, #48	@ 0x30
 800218c:	60bb      	str	r3, [r7, #8]
    }
  }
  return isneg ? -ret : ret;
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <gps_parse_decimal+0xb2>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	425b      	negs	r3, r3
 8002198:	e000      	b.n	800219c <gps_parse_decimal+0xb4>
 800219a:	68bb      	ldr	r3, [r7, #8]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000560 	.word	0x20000560

080021a8 <gps_parse_degrees>:

unsigned long gps_parse_degrees() //Get Decimal degrees from DMM
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
  char *p;
  unsigned long left;
  unsigned long tenk_minutes;

  left = gpsatol(_term);
 80021ae:	482b      	ldr	r0, [pc, #172]	@ (800225c <gps_parse_degrees+0xb4>)
 80021b0:	f000 f9f2 	bl	8002598 <gpsatol>
 80021b4:	4603      	mov	r3, r0
 80021b6:	603b      	str	r3, [r7, #0]
  tenk_minutes = (left % 100UL) * 10000UL;
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	4b29      	ldr	r3, [pc, #164]	@ (8002260 <gps_parse_degrees+0xb8>)
 80021bc:	fba3 1302 	umull	r1, r3, r3, r2
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	2164      	movs	r1, #100	@ 0x64
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	60bb      	str	r3, [r7, #8]

  for (p=_term; gpsisdigit(*p); ++p);
 80021d4:	4b21      	ldr	r3, [pc, #132]	@ (800225c <gps_parse_degrees+0xb4>)
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e002      	b.n	80021e0 <gps_parse_degrees+0x38>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3301      	adds	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fe79 	bl	8001edc <gpsisdigit>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f4      	bne.n	80021da <gps_parse_degrees+0x32>

  if (*p == '.')
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80021f6:	d11e      	bne.n	8002236 <gps_parse_degrees+0x8e>
  {
    unsigned long mult = 1000;
 80021f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fc:	607b      	str	r3, [r7, #4]
    while (gpsisdigit(*++p))
 80021fe:	e00f      	b.n	8002220 <gps_parse_degrees+0x78>
    {
      tenk_minutes += mult * (*p - '0');
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	3b30      	subs	r3, #48	@ 0x30
 8002206:	461a      	mov	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	4413      	add	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
      mult /= 10;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a13      	ldr	r2, [pc, #76]	@ (8002264 <gps_parse_degrees+0xbc>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	08db      	lsrs	r3, r3, #3
 800221e:	607b      	str	r3, [r7, #4]
    while (gpsisdigit(*++p))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3301      	adds	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fe56 	bl	8001edc <gpsisdigit>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1e4      	bne.n	8002200 <gps_parse_degrees+0x58>
    }
  }
  return (left / 100) * 100000 + tenk_minutes / 6;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	4a09      	ldr	r2, [pc, #36]	@ (8002260 <gps_parse_degrees+0xb8>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	4a09      	ldr	r2, [pc, #36]	@ (8002268 <gps_parse_degrees+0xc0>)
 8002242:	fb03 f202 	mul.w	r2, r3, r2
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4908      	ldr	r1, [pc, #32]	@ (800226c <gps_parse_degrees+0xc4>)
 800224a:	fba1 1303 	umull	r1, r3, r1, r3
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	4413      	add	r3, r2
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000560 	.word	0x20000560
 8002260:	51eb851f 	.word	0x51eb851f
 8002264:	cccccccd 	.word	0xcccccccd
 8002268:	000186a0 	.word	0x000186a0
 800226c:	aaaaaaab 	.word	0xaaaaaaab

08002270 <gps_term_complete>:

/* Processes a just-completed term
 * Returns true if new sentence has just passed checksum test and is validated
 */
bool gps_term_complete()
{
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
  if (_is_checksum_term)
 8002276:	4b9c      	ldr	r3, [pc, #624]	@ (80024e8 <gps_term_complete+0x278>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d06b      	beq.n	8002356 <gps_term_complete+0xe6>
  {
    uint8_t checksum;
    checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
 800227e:	4b9b      	ldr	r3, [pc, #620]	@ (80024ec <gps_term_complete+0x27c>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff10 	bl	80020a8 <from_hex>
 8002288:	4603      	mov	r3, r0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	b2dc      	uxtb	r4, r3
 8002290:	4b96      	ldr	r3, [pc, #600]	@ (80024ec <gps_term_complete+0x27c>)
 8002292:	785b      	ldrb	r3, [r3, #1]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff07 	bl	80020a8 <from_hex>
 800229a:	4603      	mov	r3, r0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4423      	add	r3, r4
 80022a0:	71fb      	strb	r3, [r7, #7]
    if (checksum == _parity)
 80022a2:	4b93      	ldr	r3, [pc, #588]	@ (80024f0 <gps_term_complete+0x280>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	79fa      	ldrb	r2, [r7, #7]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d14c      	bne.n	8002346 <gps_term_complete+0xd6>
    {
      if (_is_gps_data_good)
 80022ac:	4b91      	ldr	r3, [pc, #580]	@ (80024f4 <gps_term_complete+0x284>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d04d      	beq.n	8002352 <gps_term_complete+0xe2>
      {
#ifndef GPS_NO_STATS
        ++_good_sentences;
 80022b6:	4b90      	ldr	r3, [pc, #576]	@ (80024f8 <gps_term_complete+0x288>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	4b8e      	ldr	r3, [pc, #568]	@ (80024f8 <gps_term_complete+0x288>)
 80022c0:	801a      	strh	r2, [r3, #0]
#endif
        _last_time_fix = _new_time_fix;
 80022c2:	4b8e      	ldr	r3, [pc, #568]	@ (80024fc <gps_term_complete+0x28c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a8e      	ldr	r2, [pc, #568]	@ (8002500 <gps_term_complete+0x290>)
 80022c8:	6013      	str	r3, [r2, #0]
        _last_position_fix = _new_position_fix;
 80022ca:	4b8e      	ldr	r3, [pc, #568]	@ (8002504 <gps_term_complete+0x294>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a8e      	ldr	r2, [pc, #568]	@ (8002508 <gps_term_complete+0x298>)
 80022d0:	6013      	str	r3, [r2, #0]

        switch(_sentence_type)
 80022d2:	4b8e      	ldr	r3, [pc, #568]	@ (800250c <gps_term_complete+0x29c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01a      	beq.n	8002310 <gps_term_complete+0xa0>
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d131      	bne.n	8002342 <gps_term_complete+0xd2>
        {
        case GPS_SENTENCE_GNRMC:
          _time      = _new_time;
 80022de:	4b8c      	ldr	r3, [pc, #560]	@ (8002510 <gps_term_complete+0x2a0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a8c      	ldr	r2, [pc, #560]	@ (8002514 <gps_term_complete+0x2a4>)
 80022e4:	6013      	str	r3, [r2, #0]
          _date      = _new_date;
 80022e6:	4b8c      	ldr	r3, [pc, #560]	@ (8002518 <gps_term_complete+0x2a8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a8c      	ldr	r2, [pc, #560]	@ (800251c <gps_term_complete+0x2ac>)
 80022ec:	6013      	str	r3, [r2, #0]
          _latitude  = _new_latitude;
 80022ee:	4b8c      	ldr	r3, [pc, #560]	@ (8002520 <gps_term_complete+0x2b0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a8c      	ldr	r2, [pc, #560]	@ (8002524 <gps_term_complete+0x2b4>)
 80022f4:	6013      	str	r3, [r2, #0]
          _longitude = _new_longitude;
 80022f6:	4b8c      	ldr	r3, [pc, #560]	@ (8002528 <gps_term_complete+0x2b8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a8c      	ldr	r2, [pc, #560]	@ (800252c <gps_term_complete+0x2bc>)
 80022fc:	6013      	str	r3, [r2, #0]
          _speed     = _new_speed;
 80022fe:	4b8c      	ldr	r3, [pc, #560]	@ (8002530 <gps_term_complete+0x2c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a8c      	ldr	r2, [pc, #560]	@ (8002534 <gps_term_complete+0x2c4>)
 8002304:	6013      	str	r3, [r2, #0]
          _course    = _new_course;
 8002306:	4b8c      	ldr	r3, [pc, #560]	@ (8002538 <gps_term_complete+0x2c8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a8c      	ldr	r2, [pc, #560]	@ (800253c <gps_term_complete+0x2cc>)
 800230c:	6013      	str	r3, [r2, #0]
          break;
 800230e:	e018      	b.n	8002342 <gps_term_complete+0xd2>
        case GPS_SENTENCE_GNGGA:
          _altitude  = _new_altitude;
 8002310:	4b8b      	ldr	r3, [pc, #556]	@ (8002540 <gps_term_complete+0x2d0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a8b      	ldr	r2, [pc, #556]	@ (8002544 <gps_term_complete+0x2d4>)
 8002316:	6013      	str	r3, [r2, #0]
          _time      = _new_time;
 8002318:	4b7d      	ldr	r3, [pc, #500]	@ (8002510 <gps_term_complete+0x2a0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a7d      	ldr	r2, [pc, #500]	@ (8002514 <gps_term_complete+0x2a4>)
 800231e:	6013      	str	r3, [r2, #0]
          _latitude  = _new_latitude;
 8002320:	4b7f      	ldr	r3, [pc, #508]	@ (8002520 <gps_term_complete+0x2b0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a7f      	ldr	r2, [pc, #508]	@ (8002524 <gps_term_complete+0x2b4>)
 8002326:	6013      	str	r3, [r2, #0]
          _longitude = _new_longitude;
 8002328:	4b7f      	ldr	r3, [pc, #508]	@ (8002528 <gps_term_complete+0x2b8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a7f      	ldr	r2, [pc, #508]	@ (800252c <gps_term_complete+0x2bc>)
 800232e:	6013      	str	r3, [r2, #0]
          _numsats   = _new_numsats;
 8002330:	4b85      	ldr	r3, [pc, #532]	@ (8002548 <gps_term_complete+0x2d8>)
 8002332:	881a      	ldrh	r2, [r3, #0]
 8002334:	4b85      	ldr	r3, [pc, #532]	@ (800254c <gps_term_complete+0x2dc>)
 8002336:	801a      	strh	r2, [r3, #0]
          _hdop      = _new_hdop;
 8002338:	4b85      	ldr	r3, [pc, #532]	@ (8002550 <gps_term_complete+0x2e0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a85      	ldr	r2, [pc, #532]	@ (8002554 <gps_term_complete+0x2e4>)
 800233e:	6013      	str	r3, [r2, #0]
          break;
 8002340:	bf00      	nop
        }

        return true;
 8002342:	2301      	movs	r3, #1
 8002344:	e120      	b.n	8002588 <gps_term_complete+0x318>
      }
    }

#ifndef GPS_NO_STATS
    else
      ++_failed_checksum;
 8002346:	4b84      	ldr	r3, [pc, #528]	@ (8002558 <gps_term_complete+0x2e8>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	3301      	adds	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	4b82      	ldr	r3, [pc, #520]	@ (8002558 <gps_term_complete+0x2e8>)
 8002350:	801a      	strh	r2, [r3, #0]
#endif
    return false;
 8002352:	2300      	movs	r3, #0
 8002354:	e118      	b.n	8002588 <gps_term_complete+0x318>
  }

  // the first term determines the sentence type
  if (_term_number == 0)
 8002356:	4b81      	ldr	r3, [pc, #516]	@ (800255c <gps_term_complete+0x2ec>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d11a      	bne.n	8002394 <gps_term_complete+0x124>
  {
    if (!gpsstrcmp(_term, GNRMC_TERM))
 800235e:	4980      	ldr	r1, [pc, #512]	@ (8002560 <gps_term_complete+0x2f0>)
 8002360:	4862      	ldr	r0, [pc, #392]	@ (80024ec <gps_term_complete+0x27c>)
 8002362:	f000 f93a 	bl	80025da <gpsstrcmp>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d103      	bne.n	8002374 <gps_term_complete+0x104>
      _sentence_type = GPS_SENTENCE_GNRMC;
 800236c:	4b67      	ldr	r3, [pc, #412]	@ (800250c <gps_term_complete+0x29c>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e00d      	b.n	8002390 <gps_term_complete+0x120>
    else if (!gpsstrcmp(_term, GNGGA_TERM))
 8002374:	497b      	ldr	r1, [pc, #492]	@ (8002564 <gps_term_complete+0x2f4>)
 8002376:	485d      	ldr	r0, [pc, #372]	@ (80024ec <gps_term_complete+0x27c>)
 8002378:	f000 f92f 	bl	80025da <gpsstrcmp>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <gps_term_complete+0x11a>
      _sentence_type = GPS_SENTENCE_GNGGA;
 8002382:	4b62      	ldr	r3, [pc, #392]	@ (800250c <gps_term_complete+0x29c>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	e002      	b.n	8002390 <gps_term_complete+0x120>
    else
      _sentence_type = GPS_SENTENCE_OTHER;
 800238a:	4b60      	ldr	r3, [pc, #384]	@ (800250c <gps_term_complete+0x29c>)
 800238c:	2202      	movs	r2, #2
 800238e:	701a      	strb	r2, [r3, #0]
    return false;
 8002390:	2300      	movs	r3, #0
 8002392:	e0f9      	b.n	8002588 <gps_term_complete+0x318>
  }

  else if (_sentence_type != (GPS_SENTENCE_OTHER)){
 8002394:	4b5d      	ldr	r3, [pc, #372]	@ (800250c <gps_term_complete+0x29c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b02      	cmp	r3, #2
 800239a:	f000 80f4 	beq.w	8002586 <gps_term_complete+0x316>
    switch(COMBINE(_sentence_type, _term_number))
 800239e:	4b5b      	ldr	r3, [pc, #364]	@ (800250c <gps_term_complete+0x29c>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	4a6d      	ldr	r2, [pc, #436]	@ (800255c <gps_term_complete+0x2ec>)
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	3b01      	subs	r3, #1
 80023ac:	2b18      	cmp	r3, #24
 80023ae:	f200 80ea 	bhi.w	8002586 <gps_term_complete+0x316>
 80023b2:	a201      	add	r2, pc, #4	@ (adr r2, 80023b8 <gps_term_complete+0x148>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	0800241d 	.word	0x0800241d
 80023bc:	08002449 	.word	0x08002449
 80023c0:	08002461 	.word	0x08002461
 80023c4:	08002477 	.word	0x08002477
 80023c8:	08002485 	.word	0x08002485
 80023cc:	080024c1 	.word	0x080024c1
 80023d0:	080024d7 	.word	0x080024d7
 80023d4:	08002569 	.word	0x08002569
 80023d8:	08002573 	.word	0x08002573
 80023dc:	08002587 	.word	0x08002587
 80023e0:	08002587 	.word	0x08002587
 80023e4:	08002587 	.word	0x08002587
 80023e8:	08002587 	.word	0x08002587
 80023ec:	08002587 	.word	0x08002587
 80023f0:	08002587 	.word	0x08002587
 80023f4:	08002587 	.word	0x08002587
 80023f8:	0800241d 	.word	0x0800241d
 80023fc:	08002433 	.word	0x08002433
 8002400:	08002449 	.word	0x08002449
 8002404:	08002461 	.word	0x08002461
 8002408:	08002477 	.word	0x08002477
 800240c:	08002485 	.word	0x08002485
 8002410:	08002499 	.word	0x08002499
 8002414:	080024a5 	.word	0x080024a5
 8002418:	080024b1 	.word	0x080024b1
  {
    case COMBINE(GPS_SENTENCE_GNRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GNGGA, 1):
      _new_time = gps_parse_decimal();
 800241c:	f7ff fe64 	bl	80020e8 <gps_parse_decimal>
 8002420:	4603      	mov	r3, r0
 8002422:	4a3b      	ldr	r2, [pc, #236]	@ (8002510 <gps_term_complete+0x2a0>)
 8002424:	6013      	str	r3, [r2, #0]
      _new_time_fix = uptime();
 8002426:	f7ff fd6e 	bl	8001f06 <uptime>
 800242a:	4603      	mov	r3, r0
 800242c:	4a33      	ldr	r2, [pc, #204]	@ (80024fc <gps_term_complete+0x28c>)
 800242e:	6013      	str	r3, [r2, #0]
      break;
 8002430:	e0a9      	b.n	8002586 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 2): // GNRMC validity
      _is_gps_data_good = (_term[0] == 'A');
 8002432:	4b2e      	ldr	r3, [pc, #184]	@ (80024ec <gps_term_complete+0x27c>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b41      	cmp	r3, #65	@ 0x41
 8002438:	bf0c      	ite	eq
 800243a:	2301      	moveq	r3, #1
 800243c:	2300      	movne	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	4b2c      	ldr	r3, [pc, #176]	@ (80024f4 <gps_term_complete+0x284>)
 8002444:	701a      	strb	r2, [r3, #0]
      break;
 8002446:	e09e      	b.n	8002586 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 3): // Latitude
    case COMBINE(GPS_SENTENCE_GNGGA, 2):
      _new_latitude = gps_parse_degrees();
 8002448:	f7ff feae 	bl	80021a8 <gps_parse_degrees>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	4b33      	ldr	r3, [pc, #204]	@ (8002520 <gps_term_complete+0x2b0>)
 8002452:	601a      	str	r2, [r3, #0]
      _new_position_fix = uptime();
 8002454:	f7ff fd57 	bl	8001f06 <uptime>
 8002458:	4603      	mov	r3, r0
 800245a:	4a2a      	ldr	r2, [pc, #168]	@ (8002504 <gps_term_complete+0x294>)
 800245c:	6013      	str	r3, [r2, #0]
      break;
 800245e:	e092      	b.n	8002586 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GNGGA, 3):
      if (_term[0] == 'S')
 8002460:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <gps_term_complete+0x27c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b53      	cmp	r3, #83	@ 0x53
 8002466:	f040 808b 	bne.w	8002580 <gps_term_complete+0x310>
        _new_latitude = -_new_latitude;
 800246a:	4b2d      	ldr	r3, [pc, #180]	@ (8002520 <gps_term_complete+0x2b0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	425b      	negs	r3, r3
 8002470:	4a2b      	ldr	r2, [pc, #172]	@ (8002520 <gps_term_complete+0x2b0>)
 8002472:	6013      	str	r3, [r2, #0]
      break;
 8002474:	e084      	b.n	8002580 <gps_term_complete+0x310>
    case COMBINE(GPS_SENTENCE_GNRMC, 5): // Longitude
    case COMBINE(GPS_SENTENCE_GNGGA, 4):
      _new_longitude = gps_parse_degrees();
 8002476:	f7ff fe97 	bl	80021a8 <gps_parse_degrees>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	4b2a      	ldr	r3, [pc, #168]	@ (8002528 <gps_term_complete+0x2b8>)
 8002480:	601a      	str	r2, [r3, #0]
      break;
 8002482:	e080      	b.n	8002586 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GNGGA, 5):
      if (_term[0] == 'W')
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <gps_term_complete+0x27c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b57      	cmp	r3, #87	@ 0x57
 800248a:	d17b      	bne.n	8002584 <gps_term_complete+0x314>
        _new_longitude = -_new_longitude;
 800248c:	4b26      	ldr	r3, [pc, #152]	@ (8002528 <gps_term_complete+0x2b8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	425b      	negs	r3, r3
 8002492:	4a25      	ldr	r2, [pc, #148]	@ (8002528 <gps_term_complete+0x2b8>)
 8002494:	6013      	str	r3, [r2, #0]
      break;
 8002496:	e075      	b.n	8002584 <gps_term_complete+0x314>
    case COMBINE(GPS_SENTENCE_GNRMC, 7): // Speed (GNRMC)
      _new_speed = gps_parse_decimal();
 8002498:	f7ff fe26 	bl	80020e8 <gps_parse_decimal>
 800249c:	4603      	mov	r3, r0
 800249e:	4a24      	ldr	r2, [pc, #144]	@ (8002530 <gps_term_complete+0x2c0>)
 80024a0:	6013      	str	r3, [r2, #0]
      break;
 80024a2:	e070      	b.n	8002586 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 8): // Course (GNRMC)
      _new_course = gps_parse_decimal();
 80024a4:	f7ff fe20 	bl	80020e8 <gps_parse_decimal>
 80024a8:	4603      	mov	r3, r0
 80024aa:	4a23      	ldr	r2, [pc, #140]	@ (8002538 <gps_term_complete+0x2c8>)
 80024ac:	6013      	str	r3, [r2, #0]
      break;
 80024ae:	e06a      	b.n	8002586 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNRMC, 9): // Date (GNRMC)
      _new_date = gpsatol(_term);
 80024b0:	480e      	ldr	r0, [pc, #56]	@ (80024ec <gps_term_complete+0x27c>)
 80024b2:	f000 f871 	bl	8002598 <gpsatol>
 80024b6:	4603      	mov	r3, r0
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b17      	ldr	r3, [pc, #92]	@ (8002518 <gps_term_complete+0x2a8>)
 80024bc:	601a      	str	r2, [r3, #0]
      break;
 80024be:	e062      	b.n	8002586 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNGGA, 6): // Fix data (GPGGA)
      _is_gps_data_good = (_term[0] > '0');
 80024c0:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <gps_term_complete+0x27c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b30      	cmp	r3, #48	@ 0x30
 80024c6:	bf8c      	ite	hi
 80024c8:	2301      	movhi	r3, #1
 80024ca:	2300      	movls	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <gps_term_complete+0x284>)
 80024d2:	701a      	strb	r2, [r3, #0]
      break;
 80024d4:	e057      	b.n	8002586 <gps_term_complete+0x316>
    case COMBINE(GPS_SENTENCE_GNGGA, 7): // Satellites used (GPGGA)
      _new_numsats = (unsigned char)atoi(_term);
 80024d6:	4805      	ldr	r0, [pc, #20]	@ (80024ec <gps_term_complete+0x27c>)
 80024d8:	f008 fd9a 	bl	800b010 <atoi>
 80024dc:	4603      	mov	r3, r0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b19      	ldr	r3, [pc, #100]	@ (8002548 <gps_term_complete+0x2d8>)
 80024e4:	801a      	strh	r2, [r3, #0]
      break;
 80024e6:	e04e      	b.n	8002586 <gps_term_complete+0x316>
 80024e8:	2000055d 	.word	0x2000055d
 80024ec:	20000560 	.word	0x20000560
 80024f0:	2000055c 	.word	0x2000055c
 80024f4:	20000572 	.word	0x20000572
 80024f8:	20000578 	.word	0x20000578
 80024fc:	20000550 	.word	0x20000550
 8002500:	2000054c 	.word	0x2000054c
 8002504:	20000558 	.word	0x20000558
 8002508:	20000554 	.word	0x20000554
 800250c:	2000056f 	.word	0x2000056f
 8002510:	2000050c 	.word	0x2000050c
 8002514:	20000508 	.word	0x20000508
 8002518:	20000514 	.word	0x20000514
 800251c:	20000510 	.word	0x20000510
 8002520:	2000051c 	.word	0x2000051c
 8002524:	20000518 	.word	0x20000518
 8002528:	20000524 	.word	0x20000524
 800252c:	20000520 	.word	0x20000520
 8002530:	20000534 	.word	0x20000534
 8002534:	20000530 	.word	0x20000530
 8002538:	2000053c 	.word	0x2000053c
 800253c:	20000538 	.word	0x20000538
 8002540:	2000052c 	.word	0x2000052c
 8002544:	20000528 	.word	0x20000528
 8002548:	2000054a 	.word	0x2000054a
 800254c:	20000548 	.word	0x20000548
 8002550:	20000544 	.word	0x20000544
 8002554:	20000540 	.word	0x20000540
 8002558:	2000057a 	.word	0x2000057a
 800255c:	20000570 	.word	0x20000570
 8002560:	0800e010 	.word	0x0800e010
 8002564:	0800e018 	.word	0x0800e018
    case COMBINE(GPS_SENTENCE_GNGGA, 8): // HDOP
      _new_hdop = gps_parse_decimal();
 8002568:	f7ff fdbe 	bl	80020e8 <gps_parse_decimal>
 800256c:	4603      	mov	r3, r0
 800256e:	4a08      	ldr	r2, [pc, #32]	@ (8002590 <gps_term_complete+0x320>)
 8002570:	6013      	str	r3, [r2, #0]
//      break;
    case COMBINE(GPS_SENTENCE_GNGGA, 9): // Altitude (GPGGA)
      _new_altitude = gps_parse_decimal();
 8002572:	f7ff fdb9 	bl	80020e8 <gps_parse_decimal>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <gps_term_complete+0x324>)
 800257c:	601a      	str	r2, [r3, #0]
      break;
 800257e:	e002      	b.n	8002586 <gps_term_complete+0x316>
      break;
 8002580:	bf00      	nop
 8002582:	e000      	b.n	8002586 <gps_term_complete+0x316>
      break;
 8002584:	bf00      	nop
  }
  }
  return false;
 8002586:	2300      	movs	r3, #0

}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bd90      	pop	{r4, r7, pc}
 8002590:	20000544 	.word	0x20000544
 8002594:	2000052c 	.word	0x2000052c

08002598 <gpsatol>:

long gpsatol(const char *str)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  long ret = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
  while (gpsisdigit(*str))
 80025a4:	e00c      	b.n	80025c0 <gpsatol+0x28>
    ret = 10 * ret + *str++ - '0';
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4619      	mov	r1, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	440b      	add	r3, r1
 80025bc:	3b30      	subs	r3, #48	@ 0x30
 80025be:	60fb      	str	r3, [r7, #12]
  while (gpsisdigit(*str))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fc89 	bl	8001edc <gpsisdigit>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ea      	bne.n	80025a6 <gpsatol+0xe>
  return ret;
 80025d0:	68fb      	ldr	r3, [r7, #12]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <gpsstrcmp>:

int gpsstrcmp(const char *str1, const char *str2)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  while (*str1 && *str1 == *str2)
 80025e4:	e005      	b.n	80025f2 <gpsstrcmp+0x18>
    ++str1, ++str2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3301      	adds	r3, #1
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	603b      	str	r3, [r7, #0]
  while (*str1 && *str1 == *str2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <gpsstrcmp+0x2c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d0ef      	beq.n	80025e6 <gpsstrcmp+0xc>
  return *str1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	781b      	ldrb	r3, [r3, #0]
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <gps_get_position>:
  return directions[direction % 16];
}

// lat/long in hundred thousandths of a degree and age of fix in milliseconds
void gps_get_position(long *latitude, long *longitude, unsigned long *fix_age)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  if (latitude)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <gps_get_position+0x1a>
	*latitude = _latitude;
 800262a:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <gps_get_position+0x58>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	601a      	str	r2, [r3, #0]
  if (longitude)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <gps_get_position+0x28>
	*longitude = _longitude;
 8002638:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <gps_get_position+0x5c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	601a      	str	r2, [r3, #0]
  if (fix_age)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00f      	beq.n	8002666 <gps_get_position+0x4e>
	*fix_age = (_last_position_fix == GPS_INVALID_FIX_TIME) ?
 8002646:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <gps_get_position+0x60>)
 8002648:	681b      	ldr	r3, [r3, #0]
		GPS_INVALID_AGE : uptime() - _last_position_fix;
 800264a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264e:	d006      	beq.n	800265e <gps_get_position+0x46>
 8002650:	f7ff fc59 	bl	8001f06 <uptime>
 8002654:	4602      	mov	r2, r0
 8002656:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <gps_get_position+0x60>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	e001      	b.n	8002662 <gps_get_position+0x4a>
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
	*fix_age = (_last_position_fix == GPS_INVALID_FIX_TIME) ?
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6013      	str	r3, [r2, #0]
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000518 	.word	0x20000518
 8002674:	20000520 	.word	0x20000520
 8002678:	20000554 	.word	0x20000554
 800267c:	00000000 	.word	0x00000000

08002680 <gps_f_get_position>:
	*age = _last_time_fix == GPS_INVALID_FIX_TIME ?
		GPS_INVALID_AGE : uptime() - _last_time_fix;
}

void gps_f_get_position(float *latitude, float *longitude, unsigned long *fix_age)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  long lat, lon;
  gps_get_position(&lat, &lon, fix_age);
 800268c:	f107 0110 	add.w	r1, r7, #16
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ffbe 	bl	8002618 <gps_get_position>
  *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 100000.0);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	4a1c      	ldr	r2, [pc, #112]	@ (8002710 <gps_f_get_position+0x90>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d010      	beq.n	80026c6 <gps_f_get_position+0x46>
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ff44 	bl	8000534 <__aeabi_i2d>
 80026ac:	a316      	add	r3, pc, #88	@ (adr r3, 8002708 <gps_f_get_position+0x88>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fe f8d3 	bl	800085c <__aeabi_ddiv>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f7fe fa7b 	bl	8000bb8 <__aeabi_d2f>
 80026c2:	4603      	mov	r3, r0
 80026c4:	e000      	b.n	80026c8 <gps_f_get_position+0x48>
 80026c6:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <gps_f_get_position+0x94>)
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	6013      	str	r3, [r2, #0]
  *longitude = lon == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 100000.0);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4a10      	ldr	r2, [pc, #64]	@ (8002710 <gps_f_get_position+0x90>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d010      	beq.n	80026f6 <gps_f_get_position+0x76>
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd ff2c 	bl	8000534 <__aeabi_i2d>
 80026dc:	a30a      	add	r3, pc, #40	@ (adr r3, 8002708 <gps_f_get_position+0x88>)
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	f7fe f8bb 	bl	800085c <__aeabi_ddiv>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	f7fe fa63 	bl	8000bb8 <__aeabi_d2f>
 80026f2:	4603      	mov	r3, r0
 80026f4:	e000      	b.n	80026f8 <gps_f_get_position+0x78>
 80026f6:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <gps_f_get_position+0x94>)
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	f3af 8000 	nop.w
 8002708:	00000000 	.word	0x00000000
 800270c:	40f86a00 	.word	0x40f86a00
 8002710:	3b9ac9ff 	.word	0x3b9ac9ff
 8002714:	447a0000 	.word	0x447a0000

08002718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002718:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002750 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800271c:	f7ff fbcc 	bl	8001eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002720:	480c      	ldr	r0, [pc, #48]	@ (8002754 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002722:	490d      	ldr	r1, [pc, #52]	@ (8002758 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002724:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002728:	e002      	b.n	8002730 <LoopCopyDataInit>

0800272a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800272c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272e:	3304      	adds	r3, #4

08002730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002734:	d3f9      	bcc.n	800272a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002736:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002738:	4c0a      	ldr	r4, [pc, #40]	@ (8002764 <LoopFillZerobss+0x22>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800273c:	e001      	b.n	8002742 <LoopFillZerobss>

0800273e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002740:	3204      	adds	r2, #4

08002742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002744:	d3fb      	bcc.n	800273e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002746:	f009 faeb 	bl	800bd20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800274a:	f7fe fc8b 	bl	8001064 <main>
  bx  lr    
 800274e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002750:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 800275c:	0800e448 	.word	0x0800e448
  ldr r2, =_sbss
 8002760:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8002764:	20001ab0 	.word	0x20001ab0

08002768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC_IRQHandler>
	...

0800276c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002770:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <HAL_Init+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0d      	ldr	r2, [pc, #52]	@ (80027ac <HAL_Init+0x40>)
 8002776:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800277a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800277c:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_Init+0x40>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <HAL_Init+0x40>)
 8002782:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002786:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002788:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a07      	ldr	r2, [pc, #28]	@ (80027ac <HAL_Init+0x40>)
 800278e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002794:	2003      	movs	r0, #3
 8002796:	f000 f94f 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800279a:	200d      	movs	r0, #13
 800279c:	f000 f808 	bl	80027b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a0:	f7ff f946 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023c00 	.word	0x40023c00

080027b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b8:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <HAL_InitTick+0x54>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <HAL_InitTick+0x58>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f967 	bl	8002aa2 <HAL_SYSTICK_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e00e      	b.n	80027fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b0f      	cmp	r3, #15
 80027e2:	d80a      	bhi.n	80027fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e4:	2200      	movs	r2, #0
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f000 f92f 	bl	8002a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f0:	4a06      	ldr	r2, [pc, #24]	@ (800280c <HAL_InitTick+0x5c>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e000      	b.n	80027fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000000 	.word	0x20000000
 8002808:	20000008 	.word	0x20000008
 800280c:	20000004 	.word	0x20000004

08002810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_IncTick+0x20>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_IncTick+0x24>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4413      	add	r3, r2
 8002820:	4a04      	ldr	r2, [pc, #16]	@ (8002834 <HAL_IncTick+0x24>)
 8002822:	6013      	str	r3, [r2, #0]
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000008 	.word	0x20000008
 8002834:	2000057c 	.word	0x2000057c

08002838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return uwTick;
 800283c:	4b03      	ldr	r3, [pc, #12]	@ (800284c <HAL_GetTick+0x14>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	2000057c 	.word	0x2000057c

08002850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff ffee 	bl	8002838 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d005      	beq.n	8002876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800286a:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <HAL_Delay+0x44>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002876:	bf00      	nop
 8002878:	f7ff ffde 	bl	8002838 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	429a      	cmp	r2, r3
 8002886:	d8f7      	bhi.n	8002878 <HAL_Delay+0x28>
  {
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000008 	.word	0x20000008

08002898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a8:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028b4:	4013      	ands	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ca:	4a04      	ldr	r2, [pc, #16]	@ (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	60d3      	str	r3, [r2, #12]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e4:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <__NVIC_GetPriorityGrouping+0x18>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f003 0307 	and.w	r3, r3, #7
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	db0b      	blt.n	8002926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	4907      	ldr	r1, [pc, #28]	@ (8002934 <__NVIC_EnableIRQ+0x38>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2001      	movs	r0, #1
 800291e:	fa00 f202 	lsl.w	r2, r0, r2
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000e100 	.word	0xe000e100

08002938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db0a      	blt.n	8002962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	490c      	ldr	r1, [pc, #48]	@ (8002984 <__NVIC_SetPriority+0x4c>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	440b      	add	r3, r1
 800295c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002960:	e00a      	b.n	8002978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4908      	ldr	r1, [pc, #32]	@ (8002988 <__NVIC_SetPriority+0x50>)
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	3b04      	subs	r3, #4
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	440b      	add	r3, r1
 8002976:	761a      	strb	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	@ 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f1c3 0307 	rsb	r3, r3, #7
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	bf28      	it	cs
 80029aa:	2304      	movcs	r3, #4
 80029ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d902      	bls.n	80029bc <NVIC_EncodePriority+0x30>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3b03      	subs	r3, #3
 80029ba:	e000      	b.n	80029be <NVIC_EncodePriority+0x32>
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	401a      	ands	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43d9      	mvns	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	4313      	orrs	r3, r2
         );
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	@ 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a04:	d301      	bcc.n	8002a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a34 <SysTick_Config+0x40>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a12:	210f      	movs	r1, #15
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f7ff ff8e 	bl	8002938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <SysTick_Config+0x40>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a22:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <SysTick_Config+0x40>)
 8002a24:	2207      	movs	r2, #7
 8002a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e000e010 	.word	0xe000e010

08002a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff29 	bl	8002898 <__NVIC_SetPriorityGrouping>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a60:	f7ff ff3e 	bl	80028e0 <__NVIC_GetPriorityGrouping>
 8002a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f7ff ff8e 	bl	800298c <NVIC_EncodePriority>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff5d 	bl	8002938 <__NVIC_SetPriority>
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff31 	bl	80028fc <__NVIC_EnableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffa2 	bl	80029f4 <SysTick_Config>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff feb6 	bl	8002838 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e099      	b.n	8002c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af8:	e00f      	b.n	8002b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002afa:	f7ff fe9d 	bl	8002838 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b05      	cmp	r3, #5
 8002b06:	d908      	bls.n	8002b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2203      	movs	r2, #3
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e078      	b.n	8002c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e8      	bne.n	8002afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4b38      	ldr	r3, [pc, #224]	@ (8002c14 <HAL_DMA_Init+0x158>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d107      	bne.n	8002b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0307 	bic.w	r3, r3, #7
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d117      	bne.n	8002bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fb01 	bl	80031c8 <DMA_CheckFifoParam>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2240      	movs	r2, #64	@ 0x40
 8002bd0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e016      	b.n	8002c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fab8 	bl	800315c <DMA_CalcBaseAndBitshift>
 8002bec:	4603      	mov	r3, r0
 8002bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf4:	223f      	movs	r2, #63	@ 0x3f
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	f010803f 	.word	0xf010803f

08002c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_DMA_Start_IT+0x26>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e040      	b.n	8002cc0 <HAL_DMA_Start_IT+0xa8>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d12f      	bne.n	8002cb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2202      	movs	r2, #2
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fa4a 	bl	8003100 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c70:	223f      	movs	r2, #63	@ 0x3f
 8002c72:	409a      	lsls	r2, r3
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0216 	orr.w	r2, r2, #22
 8002c86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0208 	orr.w	r2, r2, #8
 8002c9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	e005      	b.n	8002cbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cd6:	f7ff fdaf 	bl	8002838 <HAL_GetTick>
 8002cda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d008      	beq.n	8002cfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2280      	movs	r2, #128	@ 0x80
 8002cec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e052      	b.n	8002da0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0216 	bic.w	r2, r2, #22
 8002d08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <HAL_DMA_Abort+0x62>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0208 	bic.w	r2, r2, #8
 8002d38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0201 	bic.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d4a:	e013      	b.n	8002d74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d4c:	f7ff fd74 	bl	8002838 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	d90c      	bls.n	8002d74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2203      	movs	r2, #3
 8002d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e015      	b.n	8002da0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1e4      	bne.n	8002d4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d86:	223f      	movs	r2, #63	@ 0x3f
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d004      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2280      	movs	r2, #128	@ 0x80
 8002dc0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00c      	b.n	8002de0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2205      	movs	r2, #5
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002df8:	4b8e      	ldr	r3, [pc, #568]	@ (8003034 <HAL_DMA_IRQHandler+0x248>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a8e      	ldr	r2, [pc, #568]	@ (8003038 <HAL_DMA_IRQHandler+0x24c>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0a9b      	lsrs	r3, r3, #10
 8002e04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	2208      	movs	r2, #8
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d01a      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0204 	bic.w	r2, r2, #4
 8002e3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e44:	2208      	movs	r2, #8
 8002e46:	409a      	lsls	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d012      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e86:	f043 0202 	orr.w	r2, r3, #2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e92:	2204      	movs	r2, #4
 8002e94:	409a      	lsls	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d012      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00b      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebc:	f043 0204 	orr.w	r2, r3, #4
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec8:	2210      	movs	r2, #16
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d043      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d03c      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d018      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d108      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d024      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
 8002f1a:	e01f      	b.n	8002f5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01b      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
 8002f2c:	e016      	b.n	8002f5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0208 	bic.w	r2, r2, #8
 8002f4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f60:	2220      	movs	r2, #32
 8002f62:	409a      	lsls	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 808f 	beq.w	800308c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 8087 	beq.w	800308c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	2220      	movs	r2, #32
 8002f84:	409a      	lsls	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d136      	bne.n	8003004 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0216 	bic.w	r2, r2, #22
 8002fa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d103      	bne.n	8002fc6 <HAL_DMA_IRQHandler+0x1da>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0208 	bic.w	r2, r2, #8
 8002fd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	223f      	movs	r2, #63	@ 0x3f
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d07e      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	4798      	blx	r3
        }
        return;
 8003002:	e079      	b.n	80030f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d01d      	beq.n	800304e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10d      	bne.n	800303c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003024:	2b00      	cmp	r3, #0
 8003026:	d031      	beq.n	800308c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
 8003030:	e02c      	b.n	800308c <HAL_DMA_IRQHandler+0x2a0>
 8003032:	bf00      	nop
 8003034:	20000000 	.word	0x20000000
 8003038:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d023      	beq.n	800308c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e01e      	b.n	800308c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10f      	bne.n	800307c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0210 	bic.w	r2, r2, #16
 800306a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003090:	2b00      	cmp	r3, #0
 8003092:	d032      	beq.n	80030fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d022      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2205      	movs	r2, #5
 80030a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3301      	adds	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d307      	bcc.n	80030d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f2      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x2cc>
 80030d2:	e000      	b.n	80030d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	4798      	blx	r3
 80030f6:	e000      	b.n	80030fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80030f8:	bf00      	nop
    }
  }
}
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800311c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b40      	cmp	r3, #64	@ 0x40
 800312c:	d108      	bne.n	8003140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800313e:	e007      	b.n	8003150 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	3b10      	subs	r3, #16
 800316c:	4a14      	ldr	r2, [pc, #80]	@ (80031c0 <DMA_CalcBaseAndBitshift+0x64>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003176:	4a13      	ldr	r2, [pc, #76]	@ (80031c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d909      	bls.n	800319e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003192:	f023 0303 	bic.w	r3, r3, #3
 8003196:	1d1a      	adds	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	659a      	str	r2, [r3, #88]	@ 0x58
 800319c:	e007      	b.n	80031ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031a6:	f023 0303 	bic.w	r3, r3, #3
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	aaaaaaab 	.word	0xaaaaaaab
 80031c4:	0800e0c0 	.word	0x0800e0c0

080031c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11f      	bne.n	8003222 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d856      	bhi.n	8003296 <DMA_CheckFifoParam+0xce>
 80031e8:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <DMA_CheckFifoParam+0x28>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003201 	.word	0x08003201
 80031f4:	08003213 	.word	0x08003213
 80031f8:	08003201 	.word	0x08003201
 80031fc:	08003297 	.word	0x08003297
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003204:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d046      	beq.n	800329a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003210:	e043      	b.n	800329a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800321a:	d140      	bne.n	800329e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003220:	e03d      	b.n	800329e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800322a:	d121      	bne.n	8003270 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b03      	cmp	r3, #3
 8003230:	d837      	bhi.n	80032a2 <DMA_CheckFifoParam+0xda>
 8003232:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <DMA_CheckFifoParam+0x70>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	08003249 	.word	0x08003249
 800323c:	0800324f 	.word	0x0800324f
 8003240:	08003249 	.word	0x08003249
 8003244:	08003261 	.word	0x08003261
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
      break;
 800324c:	e030      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003252:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d025      	beq.n	80032a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800325e:	e022      	b.n	80032a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003264:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003268:	d11f      	bne.n	80032aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800326e:	e01c      	b.n	80032aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d903      	bls.n	800327e <DMA_CheckFifoParam+0xb6>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d003      	beq.n	8003284 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800327c:	e018      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
      break;
 8003282:	e015      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00e      	beq.n	80032ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      break;
 8003294:	e00b      	b.n	80032ae <DMA_CheckFifoParam+0xe6>
      break;
 8003296:	bf00      	nop
 8003298:	e00a      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      break;
 800329a:	bf00      	nop
 800329c:	e008      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      break;
 800329e:	bf00      	nop
 80032a0:	e006      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      break;
 80032a2:	bf00      	nop
 80032a4:	e004      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      break;
 80032a6:	bf00      	nop
 80032a8:	e002      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80032aa:	bf00      	nop
 80032ac:	e000      	b.n	80032b0 <DMA_CheckFifoParam+0xe8>
      break;
 80032ae:	bf00      	nop
    }
  } 
  
  return status; 
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop

080032c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	@ 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	e159      	b.n	8003590 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032dc:	2201      	movs	r2, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	f040 8148 	bne.w	800358a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b01      	cmp	r3, #1
 8003304:	d005      	beq.n	8003312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330e:	2b02      	cmp	r3, #2
 8003310:	d130      	bne.n	8003374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	2203      	movs	r2, #3
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003348:	2201      	movs	r2, #1
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 0201 	and.w	r2, r3, #1
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b03      	cmp	r3, #3
 800337e:	d017      	beq.n	80033b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	2203      	movs	r2, #3
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d123      	bne.n	8003404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	08da      	lsrs	r2, r3, #3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3208      	adds	r2, #8
 80033c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	220f      	movs	r2, #15
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	08da      	lsrs	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3208      	adds	r2, #8
 80033fe:	69b9      	ldr	r1, [r7, #24]
 8003400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	2203      	movs	r2, #3
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0203 	and.w	r2, r3, #3
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80a2 	beq.w	800358a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	4b57      	ldr	r3, [pc, #348]	@ (80035a8 <HAL_GPIO_Init+0x2e8>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344e:	4a56      	ldr	r2, [pc, #344]	@ (80035a8 <HAL_GPIO_Init+0x2e8>)
 8003450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003454:	6453      	str	r3, [r2, #68]	@ 0x44
 8003456:	4b54      	ldr	r3, [pc, #336]	@ (80035a8 <HAL_GPIO_Init+0x2e8>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003462:	4a52      	ldr	r2, [pc, #328]	@ (80035ac <HAL_GPIO_Init+0x2ec>)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	3302      	adds	r3, #2
 800346a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	220f      	movs	r2, #15
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a49      	ldr	r2, [pc, #292]	@ (80035b0 <HAL_GPIO_Init+0x2f0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d019      	beq.n	80034c2 <HAL_GPIO_Init+0x202>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a48      	ldr	r2, [pc, #288]	@ (80035b4 <HAL_GPIO_Init+0x2f4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_GPIO_Init+0x1fe>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a47      	ldr	r2, [pc, #284]	@ (80035b8 <HAL_GPIO_Init+0x2f8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00d      	beq.n	80034ba <HAL_GPIO_Init+0x1fa>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a46      	ldr	r2, [pc, #280]	@ (80035bc <HAL_GPIO_Init+0x2fc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d007      	beq.n	80034b6 <HAL_GPIO_Init+0x1f6>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a45      	ldr	r2, [pc, #276]	@ (80035c0 <HAL_GPIO_Init+0x300>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_GPIO_Init+0x1f2>
 80034ae:	2304      	movs	r3, #4
 80034b0:	e008      	b.n	80034c4 <HAL_GPIO_Init+0x204>
 80034b2:	2307      	movs	r3, #7
 80034b4:	e006      	b.n	80034c4 <HAL_GPIO_Init+0x204>
 80034b6:	2303      	movs	r3, #3
 80034b8:	e004      	b.n	80034c4 <HAL_GPIO_Init+0x204>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e002      	b.n	80034c4 <HAL_GPIO_Init+0x204>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_GPIO_Init+0x204>
 80034c2:	2300      	movs	r3, #0
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	f002 0203 	and.w	r2, r2, #3
 80034ca:	0092      	lsls	r2, r2, #2
 80034cc:	4093      	lsls	r3, r2
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034d4:	4935      	ldr	r1, [pc, #212]	@ (80035ac <HAL_GPIO_Init+0x2ec>)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	089b      	lsrs	r3, r3, #2
 80034da:	3302      	adds	r3, #2
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034e2:	4b38      	ldr	r3, [pc, #224]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003506:	4a2f      	ldr	r2, [pc, #188]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800350c:	4b2d      	ldr	r3, [pc, #180]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003530:	4a24      	ldr	r2, [pc, #144]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003536:	4b23      	ldr	r3, [pc, #140]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800355a:	4a1a      	ldr	r2, [pc, #104]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003560:	4b18      	ldr	r3, [pc, #96]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003584:	4a0f      	ldr	r2, [pc, #60]	@ (80035c4 <HAL_GPIO_Init+0x304>)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3301      	adds	r3, #1
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b0f      	cmp	r3, #15
 8003594:	f67f aea2 	bls.w	80032dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3724      	adds	r7, #36	@ 0x24
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40013800 	.word	0x40013800
 80035b0:	40020000 	.word	0x40020000
 80035b4:	40020400 	.word	0x40020400
 80035b8:	40020800 	.word	0x40020800
 80035bc:	40020c00 	.word	0x40020c00
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40013c00 	.word	0x40013c00

080035c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
 80035d4:	4613      	mov	r3, r2
 80035d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d8:	787b      	ldrb	r3, [r7, #1]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e4:	e003      	b.n	80035ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035e6:	887b      	ldrh	r3, [r7, #2]
 80035e8:	041a      	lsls	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	619a      	str	r2, [r3, #24]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b086      	sub	sp, #24
 80035fe:	af02      	add	r7, sp, #8
 8003600:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e101      	b.n	8003810 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f007 f9e8 	bl	800a9fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2203      	movs	r2, #3
 8003630:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800363a:	d102      	bne.n	8003642 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f003 fde1 	bl	800720e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	7c1a      	ldrb	r2, [r3, #16]
 8003654:	f88d 2000 	strb.w	r2, [sp]
 8003658:	3304      	adds	r3, #4
 800365a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800365c:	f003 fcc0 	bl	8006fe0 <USB_CoreInit>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e0ce      	b.n	8003810 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2100      	movs	r1, #0
 8003678:	4618      	mov	r0, r3
 800367a:	f003 fdd9 	bl	8007230 <USB_SetCurrentMode>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0bf      	b.n	8003810 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e04a      	b.n	800372c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003696:	7bfa      	ldrb	r2, [r7, #15]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3315      	adds	r3, #21
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036aa:	7bfa      	ldrb	r2, [r7, #15]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	3314      	adds	r3, #20
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	b298      	uxth	r0, r3
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	332e      	adds	r3, #46	@ 0x2e
 80036d2:	4602      	mov	r2, r0
 80036d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	3318      	adds	r3, #24
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	331c      	adds	r3, #28
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	3320      	adds	r3, #32
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3324      	adds	r3, #36	@ 0x24
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	3301      	adds	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	791b      	ldrb	r3, [r3, #4]
 8003730:	7bfa      	ldrb	r2, [r7, #15]
 8003732:	429a      	cmp	r2, r3
 8003734:	d3af      	bcc.n	8003696 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003736:	2300      	movs	r3, #0
 8003738:	73fb      	strb	r3, [r7, #15]
 800373a:	e044      	b.n	80037c6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003764:	7bfa      	ldrb	r2, [r7, #15]
 8003766:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	3301      	adds	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	791b      	ldrb	r3, [r3, #4]
 80037ca:	7bfa      	ldrb	r2, [r7, #15]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d3b5      	bcc.n	800373c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7c1a      	ldrb	r2, [r3, #16]
 80037d8:	f88d 2000 	strb.w	r2, [sp]
 80037dc:	3304      	adds	r3, #4
 80037de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037e0:	f003 fd72 	bl	80072c8 <USB_DevInit>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e00c      	b.n	8003810 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f004 fdb6 	bl	800837a <USB_DevDisconnect>

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_PCD_Start+0x1c>
 8003830:	2302      	movs	r3, #2
 8003832:	e022      	b.n	800387a <HAL_PCD_Start+0x62>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800384c:	2b01      	cmp	r3, #1
 800384e:	d105      	bne.n	800385c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003854:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f003 fcc3 	bl	80071ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f004 fd64 	bl	8008338 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003882:	b590      	push	{r4, r7, lr}
 8003884:	b08d      	sub	sp, #52	@ 0x34
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f004 fe22 	bl	80084e2 <USB_GetMode>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 848c 	bne.w	80041be <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f004 fd86 	bl	80083bc <USB_ReadInterrupts>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 8482 	beq.w	80041bc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f004 fd73 	bl	80083bc <USB_ReadInterrupts>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d107      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f002 0202 	and.w	r2, r2, #2
 80038ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f004 fd61 	bl	80083bc <USB_ReadInterrupts>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b10      	cmp	r3, #16
 8003902:	d161      	bne.n	80039c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0210 	bic.w	r2, r2, #16
 8003912:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f003 020f 	and.w	r2, r3, #15
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4413      	add	r3, r2
 8003930:	3304      	adds	r3, #4
 8003932:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	0c5b      	lsrs	r3, r3, #17
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	2b02      	cmp	r3, #2
 800393e:	d124      	bne.n	800398a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d035      	beq.n	80039b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800395a:	b29b      	uxth	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	6a38      	ldr	r0, [r7, #32]
 8003960:	f004 fb98 	bl	8008094 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003970:	441a      	add	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003982:	441a      	add	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	615a      	str	r2, [r3, #20]
 8003988:	e016      	b.n	80039b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	0c5b      	lsrs	r3, r3, #17
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	2b06      	cmp	r3, #6
 8003994:	d110      	bne.n	80039b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800399c:	2208      	movs	r2, #8
 800399e:	4619      	mov	r1, r3
 80039a0:	6a38      	ldr	r0, [r7, #32]
 80039a2:	f004 fb77 	bl	8008094 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b2:	441a      	add	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0210 	orr.w	r2, r2, #16
 80039c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f004 fcf5 	bl	80083bc <USB_ReadInterrupts>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80039dc:	f040 80a7 	bne.w	8003b2e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f004 fcfa 	bl	80083e2 <USB_ReadDevAllOutEpInterrupt>
 80039ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80039f0:	e099      	b.n	8003b26 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 808e 	beq.w	8003b1a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f004 fd1e 	bl	800844a <USB_ReadDevOutEPInterrupt>
 8003a0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00c      	beq.n	8003a34 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a26:	461a      	mov	r2, r3
 8003a28:	2301      	movs	r3, #1
 8003a2a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fea2 	bl	8004778 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00c      	beq.n	8003a58 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2308      	movs	r3, #8
 8003a4e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 ff78 	bl	8004948 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2310      	movs	r3, #16
 8003a72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d030      	beq.n	8003ae0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a86:	2b80      	cmp	r3, #128	@ 0x80
 8003a88:	d109      	bne.n	8003a9e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a9c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	78db      	ldrb	r3, [r3, #3]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d108      	bne.n	8003ace <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f007 f893 	bl	800abf4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ada:	461a      	mov	r2, r3
 8003adc:	2302      	movs	r3, #2
 8003ade:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af6:	461a      	mov	r2, r3
 8003af8:	2320      	movs	r3, #32
 8003afa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b12:	461a      	mov	r2, r3
 8003b14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b18:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f47f af62 	bne.w	80039f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f004 fc42 	bl	80083bc <USB_ReadInterrupts>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b42:	f040 80db 	bne.w	8003cfc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f004 fc63 	bl	8008416 <USB_ReadDevAllInEpInterrupt>
 8003b50:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003b56:	e0cd      	b.n	8003cf4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80c2 	beq.w	8003ce8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f004 fc89 	bl	8008486 <USB_ReadDevInEPInterrupt>
 8003b74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d057      	beq.n	8003c30 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	2201      	movs	r2, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69f9      	ldr	r1, [r7, #28]
 8003b9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	799b      	ldrb	r3, [r3, #6]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d132      	bne.n	8003c24 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	3320      	adds	r3, #32
 8003bce:	6819      	ldr	r1, [r3, #0]
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4403      	add	r3, r0
 8003bde:	331c      	adds	r3, #28
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4419      	add	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4403      	add	r3, r0
 8003bf2:	3320      	adds	r3, #32
 8003bf4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d113      	bne.n	8003c24 <HAL_PCD_IRQHandler+0x3a2>
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	3324      	adds	r3, #36	@ 0x24
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d108      	bne.n	8003c24 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2101      	movs	r1, #1
 8003c20:	f004 fc90 	bl	8008544 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f006 ff67 	bl	800aafe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c46:	461a      	mov	r2, r3
 8003c48:	2308      	movs	r3, #8
 8003c4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c62:	461a      	mov	r2, r3
 8003c64:	2310      	movs	r3, #16
 8003c66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2340      	movs	r3, #64	@ 0x40
 8003c82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d023      	beq.n	8003cd6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c90:	6a38      	ldr	r0, [r7, #32]
 8003c92:	f003 fc7d 	bl	8007590 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	3310      	adds	r3, #16
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	78db      	ldrb	r3, [r3, #3]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d108      	bne.n	8003cc4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f006 ffaa 	bl	800ac18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ce0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fcbb 	bl	800465e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	3301      	adds	r3, #1
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f47f af2e 	bne.w	8003b58 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f004 fb5b 	bl	80083bc <USB_ReadInterrupts>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d10:	d122      	bne.n	8003d58 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d108      	bne.n	8003d42 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d38:	2100      	movs	r1, #0
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fea2 	bl	8004a84 <HAL_PCDEx_LPM_Callback>
 8003d40:	e002      	b.n	8003d48 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f006 ff48 	bl	800abd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f004 fb2d 	bl	80083bc <USB_ReadInterrupts>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d6c:	d112      	bne.n	8003d94 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d102      	bne.n	8003d84 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f006 ff04 	bl	800ab8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003d92:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f004 fb0f 	bl	80083bc <USB_ReadInterrupts>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003da4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da8:	f040 80b7 	bne.w	8003f1a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2110      	movs	r1, #16
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f003 fbe2 	bl	8007590 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dd0:	e046      	b.n	8003e60 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dde:	461a      	mov	r2, r3
 8003de0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003de4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003df6:	0151      	lsls	r1, r2, #5
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e12:	461a      	mov	r2, r3
 8003e14:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e18:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e2a:	0151      	lsls	r1, r2, #5
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	440a      	add	r2, r1
 8003e30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e4a:	0151      	lsls	r1, r2, #5
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	440a      	add	r2, r1
 8003e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e58:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	791b      	ldrb	r3, [r3, #4]
 8003e64:	461a      	mov	r2, r3
 8003e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d3b2      	bcc.n	8003dd2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e7a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003e7e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	7bdb      	ldrb	r3, [r3, #15]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d016      	beq.n	8003eb6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e98:	f043 030b 	orr.w	r3, r3, #11
 8003e9c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eae:	f043 030b 	orr.w	r3, r3, #11
 8003eb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eb4:	e015      	b.n	8003ee2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ec4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ec8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003ecc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003edc:	f043 030b 	orr.w	r3, r3, #11
 8003ee0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ef0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003ef4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f04:	461a      	mov	r2, r3
 8003f06:	f004 fb1d 	bl	8008544 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 fa4c 	bl	80083bc <USB_ReadInterrupts>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f2e:	d123      	bne.n	8003f78 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f004 fae2 	bl	80084fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f003 fb9f 	bl	8007682 <USB_GetDevSpeed>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681c      	ldr	r4, [r3, #0]
 8003f50:	f001 f9c8 	bl	80052e4 <HAL_RCC_GetHCLKFreq>
 8003f54:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f003 f8a3 	bl	80070a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f006 fdf3 	bl	800ab4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f004 fa1d 	bl	80083bc <USB_ReadInterrupts>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d10a      	bne.n	8003fa2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f006 fdd0 	bl	800ab32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695a      	ldr	r2, [r3, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f002 0208 	and.w	r2, r2, #8
 8003fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f004 fa08 	bl	80083bc <USB_ReadInterrupts>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb2:	2b80      	cmp	r3, #128	@ 0x80
 8003fb4:	d123      	bne.n	8003ffe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc6:	e014      	b.n	8003ff2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d105      	bne.n	8003fec <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fb08 	bl	80045fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	3301      	adds	r3, #1
 8003ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	791b      	ldrb	r3, [r3, #4]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d3e4      	bcc.n	8003fc8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f004 f9da 	bl	80083bc <USB_ReadInterrupts>
 8004008:	4603      	mov	r3, r0
 800400a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800400e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004012:	d13c      	bne.n	800408e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004014:	2301      	movs	r3, #1
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
 8004018:	e02b      	b.n	8004072 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	3318      	adds	r3, #24
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d115      	bne.n	800406c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004040:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004042:	2b00      	cmp	r3, #0
 8004044:	da12      	bge.n	800406c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800404a:	4613      	mov	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	3317      	adds	r3, #23
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004062:	b2db      	uxtb	r3, r3
 8004064:	4619      	mov	r1, r3
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fac8 	bl	80045fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	3301      	adds	r3, #1
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	791b      	ldrb	r3, [r3, #4]
 8004076:	461a      	mov	r2, r3
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	4293      	cmp	r3, r2
 800407c:	d3cd      	bcc.n	800401a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800408c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f004 f992 	bl	80083bc <USB_ReadInterrupts>
 8004098:	4603      	mov	r3, r0
 800409a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800409e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040a2:	d156      	bne.n	8004152 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040a4:	2301      	movs	r3, #1
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a8:	e045      	b.n	8004136 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d12e      	bne.n	8004130 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	da2b      	bge.n	8004130 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80040e4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d121      	bne.n	8004130 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004128:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800412c:	6053      	str	r3, [r2, #4]
            break;
 800412e:	e008      	b.n	8004142 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	3301      	adds	r3, #1
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	791b      	ldrb	r3, [r3, #4]
 800413a:	461a      	mov	r2, r3
 800413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413e:	4293      	cmp	r3, r2
 8004140:	d3b3      	bcc.n	80040aa <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f004 f930 	bl	80083bc <USB_ReadInterrupts>
 800415c:	4603      	mov	r3, r0
 800415e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004166:	d10a      	bne.n	800417e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f006 fd67 	bl	800ac3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800417c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f004 f91a 	bl	80083bc <USB_ReadInterrupts>
 8004188:	4603      	mov	r3, r0
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d115      	bne.n	80041be <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f006 fd57 	bl	800ac58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6859      	ldr	r1, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	e000      	b.n	80041be <HAL_PCD_IRQHandler+0x93c>
      return;
 80041bc:	bf00      	nop
    }
  }
}
 80041be:	3734      	adds	r7, #52	@ 0x34
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd90      	pop	{r4, r7, pc}

080041c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_PCD_SetAddress+0x1a>
 80041da:	2302      	movs	r3, #2
 80041dc:	e012      	b.n	8004204 <HAL_PCD_SetAddress+0x40>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	4611      	mov	r1, r2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f004 f879 	bl	80082ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	4608      	mov	r0, r1
 8004216:	4611      	mov	r1, r2
 8004218:	461a      	mov	r2, r3
 800421a:	4603      	mov	r3, r0
 800421c:	70fb      	strb	r3, [r7, #3]
 800421e:	460b      	mov	r3, r1
 8004220:	803b      	strh	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800422a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800422e:	2b00      	cmp	r3, #0
 8004230:	da0f      	bge.n	8004252 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	f003 020f 	and.w	r2, r3, #15
 8004238:	4613      	mov	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	3310      	adds	r3, #16
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	3304      	adds	r3, #4
 8004248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	705a      	strb	r2, [r3, #1]
 8004250:	e00f      	b.n	8004272 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	f003 020f 	and.w	r2, r3, #15
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	4413      	add	r3, r2
 8004268:	3304      	adds	r3, #4
 800426a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004272:	78fb      	ldrb	r3, [r7, #3]
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	b2da      	uxtb	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800427e:	883a      	ldrh	r2, [r7, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	78ba      	ldrb	r2, [r7, #2]
 8004288:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	785b      	ldrb	r3, [r3, #1]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800429c:	78bb      	ldrb	r3, [r7, #2]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d102      	bne.n	80042a8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_PCD_EP_Open+0xaa>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e00e      	b.n	80042d4 <HAL_PCD_EP_Open+0xc8>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f003 fa01 	bl	80076cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80042d2:	7afb      	ldrb	r3, [r7, #11]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	da0f      	bge.n	8004310 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	f003 020f 	and.w	r2, r3, #15
 80042f6:	4613      	mov	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	3310      	adds	r3, #16
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4413      	add	r3, r2
 8004304:	3304      	adds	r3, #4
 8004306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	705a      	strb	r2, [r3, #1]
 800430e:	e00f      	b.n	8004330 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	4413      	add	r3, r2
 8004326:	3304      	adds	r3, #4
 8004328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	b2da      	uxtb	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_PCD_EP_Close+0x6e>
 8004346:	2302      	movs	r3, #2
 8004348:	e00e      	b.n	8004368 <HAL_PCD_EP_Close+0x8c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68f9      	ldr	r1, [r7, #12]
 8004358:	4618      	mov	r0, r3
 800435a:	f003 fa3f 	bl	80077dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	460b      	mov	r3, r1
 800437e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004380:	7afb      	ldrb	r3, [r7, #11]
 8004382:	f003 020f 	and.w	r2, r3, #15
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4413      	add	r3, r2
 8004396:	3304      	adds	r3, #4
 8004398:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	2200      	movs	r2, #0
 80043aa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2200      	movs	r2, #0
 80043b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043b2:	7afb      	ldrb	r3, [r7, #11]
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	799b      	ldrb	r3, [r3, #6]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d102      	bne.n	80043cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	799b      	ldrb	r3, [r3, #6]
 80043d4:	461a      	mov	r2, r3
 80043d6:	6979      	ldr	r1, [r7, #20]
 80043d8:	f003 fadc 	bl	8007994 <USB_EPStartXfer>

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	460b      	mov	r3, r1
 80043f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	f003 020f 	and.w	r2, r3, #15
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004408:	681b      	ldr	r3, [r3, #0]
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b086      	sub	sp, #24
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
 8004422:	460b      	mov	r3, r1
 8004424:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004426:	7afb      	ldrb	r3, [r7, #11]
 8004428:	f003 020f 	and.w	r2, r3, #15
 800442c:	4613      	mov	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	3310      	adds	r3, #16
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4413      	add	r3, r2
 800443a:	3304      	adds	r3, #4
 800443c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2200      	movs	r2, #0
 800444e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2201      	movs	r2, #1
 8004454:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004456:	7afb      	ldrb	r3, [r7, #11]
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	b2da      	uxtb	r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	799b      	ldrb	r3, [r3, #6]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d102      	bne.n	8004470 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	799b      	ldrb	r3, [r3, #6]
 8004478:	461a      	mov	r2, r3
 800447a:	6979      	ldr	r1, [r7, #20]
 800447c:	f003 fa8a 	bl	8007994 <USB_EPStartXfer>

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	7912      	ldrb	r2, [r2, #4]
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d901      	bls.n	80044a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e04f      	b.n	8004548 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	da0f      	bge.n	80044d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	f003 020f 	and.w	r2, r3, #15
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	3310      	adds	r3, #16
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	3304      	adds	r3, #4
 80044c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	705a      	strb	r2, [r3, #1]
 80044ce:	e00d      	b.n	80044ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	4613      	mov	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	4413      	add	r3, r2
 80044e2:	3304      	adds	r3, #4
 80044e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_PCD_EP_SetStall+0x82>
 8004508:	2302      	movs	r3, #2
 800450a:	e01d      	b.n	8004548 <HAL_PCD_EP_SetStall+0xbe>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68f9      	ldr	r1, [r7, #12]
 800451a:	4618      	mov	r0, r3
 800451c:	f003 fe12 	bl	8008144 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	7999      	ldrb	r1, [r3, #6]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004538:	461a      	mov	r2, r3
 800453a:	f004 f803 	bl	8008544 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	7912      	ldrb	r2, [r2, #4]
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e042      	b.n	80045f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800456e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004572:	2b00      	cmp	r3, #0
 8004574:	da0f      	bge.n	8004596 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	f003 020f 	and.w	r2, r3, #15
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	3310      	adds	r3, #16
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	4413      	add	r3, r2
 800458a:	3304      	adds	r3, #4
 800458c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	705a      	strb	r2, [r3, #1]
 8004594:	e00f      	b.n	80045b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	f003 020f 	and.w	r2, r3, #15
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	4413      	add	r3, r2
 80045ac:	3304      	adds	r3, #4
 80045ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_PCD_EP_ClrStall+0x86>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e00e      	b.n	80045f4 <HAL_PCD_EP_ClrStall+0xa4>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68f9      	ldr	r1, [r7, #12]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f003 fe1b 	bl	8008220 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800460c:	2b00      	cmp	r3, #0
 800460e:	da0c      	bge.n	800462a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	f003 020f 	and.w	r2, r3, #15
 8004616:	4613      	mov	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	3310      	adds	r3, #16
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	4413      	add	r3, r2
 8004624:	3304      	adds	r3, #4
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e00c      	b.n	8004644 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	f003 020f 	and.w	r2, r3, #15
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4413      	add	r3, r2
 8004640:	3304      	adds	r3, #4
 8004642:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68f9      	ldr	r1, [r7, #12]
 800464a:	4618      	mov	r0, r3
 800464c:	f003 fc3a 	bl	8007ec4 <USB_EPStopXfer>
 8004650:	4603      	mov	r3, r0
 8004652:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004654:	7afb      	ldrb	r3, [r7, #11]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b08a      	sub	sp, #40	@ 0x28
 8004662:	af02      	add	r7, sp, #8
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	3310      	adds	r3, #16
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4413      	add	r3, r2
 8004682:	3304      	adds	r3, #4
 8004684:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	429a      	cmp	r2, r3
 8004690:	d901      	bls.n	8004696 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e06b      	b.n	800476e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691a      	ldr	r2, [r3, #16]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d902      	bls.n	80046b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	3303      	adds	r3, #3
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046ba:	e02a      	b.n	8004712 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d902      	bls.n	80046d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	3303      	adds	r3, #3
 80046dc:	089b      	lsrs	r3, r3, #2
 80046de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	68d9      	ldr	r1, [r3, #12]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	4603      	mov	r3, r0
 80046f4:	6978      	ldr	r0, [r7, #20]
 80046f6:	f003 fc8f 	bl	8008018 <USB_WritePacket>

    ep->xfer_buff  += len;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	441a      	add	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	441a      	add	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	429a      	cmp	r2, r3
 8004726:	d809      	bhi.n	800473c <PCD_WriteEmptyTxFifo+0xde>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004730:	429a      	cmp	r2, r3
 8004732:	d203      	bcs.n	800473c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1bf      	bne.n	80046bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	429a      	cmp	r2, r3
 8004746:	d811      	bhi.n	800476c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	2201      	movs	r2, #1
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800475c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	43db      	mvns	r3, r3
 8004762:	6939      	ldr	r1, [r7, #16]
 8004764:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004768:	4013      	ands	r3, r2
 800476a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	333c      	adds	r3, #60	@ 0x3c
 8004790:	3304      	adds	r3, #4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	799b      	ldrb	r3, [r3, #6]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d17b      	bne.n	80048a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d015      	beq.n	80047e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4a61      	ldr	r2, [pc, #388]	@ (8004940 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	f240 80b9 	bls.w	8004934 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80b3 	beq.w	8004934 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047da:	461a      	mov	r2, r3
 80047dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047e0:	6093      	str	r3, [r2, #8]
 80047e2:	e0a7      	b.n	8004934 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fa:	461a      	mov	r2, r3
 80047fc:	2320      	movs	r3, #32
 80047fe:	6093      	str	r3, [r2, #8]
 8004800:	e098      	b.n	8004934 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	f040 8093 	bne.w	8004934 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	4a4b      	ldr	r2, [pc, #300]	@ (8004940 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d90f      	bls.n	8004836 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800482c:	461a      	mov	r2, r3
 800482e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004832:	6093      	str	r3, [r2, #8]
 8004834:	e07e      	b.n	8004934 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	4413      	add	r3, r2
 8004848:	3304      	adds	r3, #4
 800484a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	0159      	lsls	r1, r3, #5
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	440b      	add	r3, r1
 8004858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004862:	1ad2      	subs	r2, r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d114      	bne.n	8004898 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004880:	461a      	mov	r2, r3
 8004882:	2101      	movs	r1, #1
 8004884:	f003 fe5e 	bl	8008544 <USB_EP0_OutStart>
 8004888:	e006      	b.n	8004898 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	441a      	add	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	4619      	mov	r1, r3
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f006 f912 	bl	800aac8 <HAL_PCD_DataOutStageCallback>
 80048a4:	e046      	b.n	8004934 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	4a26      	ldr	r2, [pc, #152]	@ (8004944 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d124      	bne.n	80048f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c4:	461a      	mov	r2, r3
 80048c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ca:	6093      	str	r3, [r2, #8]
 80048cc:	e032      	b.n	8004934 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e4:	461a      	mov	r2, r3
 80048e6:	2320      	movs	r3, #32
 80048e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f006 f8e9 	bl	800aac8 <HAL_PCD_DataOutStageCallback>
 80048f6:	e01d      	b.n	8004934 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d114      	bne.n	8004928 <PCD_EP_OutXfrComplete_int+0x1b0>
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	4613      	mov	r3, r2
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d108      	bne.n	8004928 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004920:	461a      	mov	r2, r3
 8004922:	2100      	movs	r1, #0
 8004924:	f003 fe0e 	bl	8008544 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	4619      	mov	r1, r3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f006 f8ca 	bl	800aac8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	4f54300a 	.word	0x4f54300a
 8004944:	4f54310a 	.word	0x4f54310a

08004948 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	333c      	adds	r3, #60	@ 0x3c
 8004960:	3304      	adds	r3, #4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4a15      	ldr	r2, [pc, #84]	@ (80049d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d90e      	bls.n	800499c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004984:	2b00      	cmp	r3, #0
 8004986:	d009      	beq.n	800499c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004994:	461a      	mov	r2, r3
 8004996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800499a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f006 f881 	bl	800aaa4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4a0a      	ldr	r2, [pc, #40]	@ (80049d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d90c      	bls.n	80049c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	799b      	ldrb	r3, [r3, #6]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d108      	bne.n	80049c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6818      	ldr	r0, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80049bc:	461a      	mov	r2, r3
 80049be:	2101      	movs	r1, #1
 80049c0:	f003 fdc0 	bl	8008544 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	4f54300a 	.word	0x4f54300a

080049d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
 80049e0:	4613      	mov	r3, r2
 80049e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d107      	bne.n	8004a02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049f2:	883b      	ldrh	r3, [r7, #0]
 80049f4:	0419      	lsls	r1, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a00:	e028      	b.n	8004a54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a08:	0c1b      	lsrs	r3, r3, #16
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a10:	2300      	movs	r3, #0
 8004a12:	73fb      	strb	r3, [r7, #15]
 8004a14:	e00d      	b.n	8004a32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	3340      	adds	r3, #64	@ 0x40
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	4413      	add	r3, r2
 8004a2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
 8004a32:	7bfa      	ldrb	r2, [r7, #15]
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d3ec      	bcc.n	8004a16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a3c:	883b      	ldrh	r3, [r7, #0]
 8004a3e:	0418      	lsls	r0, r3, #16
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6819      	ldr	r1, [r3, #0]
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	4302      	orrs	r2, r0
 8004a4c:	3340      	adds	r3, #64	@ 0x40
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	887a      	ldrh	r2, [r7, #2]
 8004a74:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e267      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d075      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aba:	4b88      	ldr	r3, [pc, #544]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d00c      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ac6:	4b85      	ldr	r3, [pc, #532]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d112      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ad2:	4b82      	ldr	r3, [pc, #520]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ade:	d10b      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	4b7e      	ldr	r3, [pc, #504]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05b      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x108>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d157      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e242      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b00:	d106      	bne.n	8004b10 <HAL_RCC_OscConfig+0x74>
 8004b02:	4b76      	ldr	r3, [pc, #472]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a75      	ldr	r2, [pc, #468]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e01d      	b.n	8004b4c <HAL_RCC_OscConfig+0xb0>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x98>
 8004b1a:	4b70      	ldr	r3, [pc, #448]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a6f      	ldr	r2, [pc, #444]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b6d      	ldr	r3, [pc, #436]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a6c      	ldr	r2, [pc, #432]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e00b      	b.n	8004b4c <HAL_RCC_OscConfig+0xb0>
 8004b34:	4b69      	ldr	r3, [pc, #420]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a68      	ldr	r2, [pc, #416]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4b66      	ldr	r3, [pc, #408]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a65      	ldr	r2, [pc, #404]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d013      	beq.n	8004b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fd fe70 	bl	8002838 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fd fe6c 	bl	8002838 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	@ 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e207      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0xc0>
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7fd fe5c 	bl	8002838 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fd fe58 	bl	8002838 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	@ 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e1f3      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	4b51      	ldr	r3, [pc, #324]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0xe8>
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d063      	beq.n	8004c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bbe:	4b47      	ldr	r3, [pc, #284]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d11c      	bne.n	8004c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bca:	4b44      	ldr	r3, [pc, #272]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d116      	bne.n	8004c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd6:	4b41      	ldr	r3, [pc, #260]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <HAL_RCC_OscConfig+0x152>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d001      	beq.n	8004bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e1c7      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	4b3b      	ldr	r3, [pc, #236]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4937      	ldr	r1, [pc, #220]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	e03a      	b.n	8004c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d020      	beq.n	8004c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c0c:	4b34      	ldr	r3, [pc, #208]	@ (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c12:	f7fd fe11 	bl	8002838 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c1a:	f7fd fe0d 	bl	8002838 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e1a8      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c38:	4b28      	ldr	r3, [pc, #160]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4925      	ldr	r1, [pc, #148]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	600b      	str	r3, [r1, #0]
 8004c4c:	e015      	b.n	8004c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fd fdf0 	bl	8002838 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c5c:	f7fd fdec 	bl	8002838 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e187      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d036      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d016      	beq.n	8004cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ce4 <HAL_RCC_OscConfig+0x248>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c94:	f7fd fdd0 	bl	8002838 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c9c:	f7fd fdcc 	bl	8002838 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e167      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cae:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x200>
 8004cba:	e01b      	b.n	8004cf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cbc:	4b09      	ldr	r3, [pc, #36]	@ (8004ce4 <HAL_RCC_OscConfig+0x248>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc2:	f7fd fdb9 	bl	8002838 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc8:	e00e      	b.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cca:	f7fd fdb5 	bl	8002838 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d907      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e150      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	42470000 	.word	0x42470000
 8004ce4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce8:	4b88      	ldr	r3, [pc, #544]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ea      	bne.n	8004cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8097 	beq.w	8004e30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d06:	4b81      	ldr	r3, [pc, #516]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	4b7d      	ldr	r3, [pc, #500]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d22:	4b7a      	ldr	r3, [pc, #488]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d32:	4b77      	ldr	r3, [pc, #476]	@ (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d118      	bne.n	8004d70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d3e:	4b74      	ldr	r3, [pc, #464]	@ (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a73      	ldr	r2, [pc, #460]	@ (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4a:	f7fd fd75 	bl	8002838 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d52:	f7fd fd71 	bl	8002838 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e10c      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	4b6a      	ldr	r3, [pc, #424]	@ (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d106      	bne.n	8004d86 <HAL_RCC_OscConfig+0x2ea>
 8004d78:	4b64      	ldr	r3, [pc, #400]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7c:	4a63      	ldr	r2, [pc, #396]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d84:	e01c      	b.n	8004dc0 <HAL_RCC_OscConfig+0x324>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x30c>
 8004d8e:	4b5f      	ldr	r3, [pc, #380]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d92:	4a5e      	ldr	r2, [pc, #376]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d94:	f043 0304 	orr.w	r3, r3, #4
 8004d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d9a:	4b5c      	ldr	r3, [pc, #368]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9e:	4a5b      	ldr	r2, [pc, #364]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCC_OscConfig+0x324>
 8004da8:	4b58      	ldr	r3, [pc, #352]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dac:	4a57      	ldr	r2, [pc, #348]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db4:	4b55      	ldr	r3, [pc, #340]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db8:	4a54      	ldr	r2, [pc, #336]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004dba:	f023 0304 	bic.w	r3, r3, #4
 8004dbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d015      	beq.n	8004df4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fd fd36 	bl	8002838 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd0:	f7fd fd32 	bl	8002838 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e0cb      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de6:	4b49      	ldr	r3, [pc, #292]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0ee      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x334>
 8004df2:	e014      	b.n	8004e1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df4:	f7fd fd20 	bl	8002838 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dfa:	e00a      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dfc:	f7fd fd1c 	bl	8002838 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e0b5      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e12:	4b3e      	ldr	r3, [pc, #248]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1ee      	bne.n	8004dfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d105      	bne.n	8004e30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e24:	4b39      	ldr	r3, [pc, #228]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	4a38      	ldr	r2, [pc, #224]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80a1 	beq.w	8004f7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e3a:	4b34      	ldr	r3, [pc, #208]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d05c      	beq.n	8004f00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d141      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4e:	4b31      	ldr	r3, [pc, #196]	@ (8004f14 <HAL_RCC_OscConfig+0x478>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fd fcf0 	bl	8002838 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fd fcec 	bl	8002838 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e087      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6e:	4b27      	ldr	r3, [pc, #156]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69da      	ldr	r2, [r3, #28]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	019b      	lsls	r3, r3, #6
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	3b01      	subs	r3, #1
 8004e94:	041b      	lsls	r3, r3, #16
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9c:	061b      	lsls	r3, r3, #24
 8004e9e:	491b      	ldr	r1, [pc, #108]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f14 <HAL_RCC_OscConfig+0x478>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fd fcc5 	bl	8002838 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fd fcc1 	bl	8002838 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e05c      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec4:	4b11      	ldr	r3, [pc, #68]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x416>
 8004ed0:	e054      	b.n	8004f7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed2:	4b10      	ldr	r3, [pc, #64]	@ (8004f14 <HAL_RCC_OscConfig+0x478>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7fd fcae 	bl	8002838 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fd fcaa 	bl	8002838 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e045      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef2:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x444>
 8004efe:	e03d      	b.n	8004f7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d107      	bne.n	8004f18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e038      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40007000 	.word	0x40007000
 8004f14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f18:	4b1b      	ldr	r3, [pc, #108]	@ (8004f88 <HAL_RCC_OscConfig+0x4ec>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d028      	beq.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d121      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d11a      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f48:	4013      	ands	r3, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d111      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	3b01      	subs	r3, #1
 8004f62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800

08004f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0cc      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b68      	ldr	r3, [pc, #416]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d90c      	bls.n	8004fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b65      	ldr	r3, [pc, #404]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b63      	ldr	r3, [pc, #396]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0b8      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fe0:	4b59      	ldr	r3, [pc, #356]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4a58      	ldr	r2, [pc, #352]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff8:	4b53      	ldr	r3, [pc, #332]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4a52      	ldr	r2, [pc, #328]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b50      	ldr	r3, [pc, #320]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	494d      	ldr	r1, [pc, #308]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d044      	beq.n	80050ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d107      	bne.n	800503a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502a:	4b47      	ldr	r3, [pc, #284]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d119      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e07f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d003      	beq.n	800504a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005046:	2b03      	cmp	r3, #3
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504a:	4b3f      	ldr	r3, [pc, #252]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e06f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505a:	4b3b      	ldr	r3, [pc, #236]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e067      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800506a:	4b37      	ldr	r3, [pc, #220]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f023 0203 	bic.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4934      	ldr	r1, [pc, #208]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800507c:	f7fd fbdc 	bl	8002838 <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005082:	e00a      	b.n	800509a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005084:	f7fd fbd8 	bl	8002838 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e04f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	4b2b      	ldr	r3, [pc, #172]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 020c 	and.w	r2, r3, #12
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d1eb      	bne.n	8005084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050ac:	4b25      	ldr	r3, [pc, #148]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d20c      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ba:	4b22      	ldr	r3, [pc, #136]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c2:	4b20      	ldr	r3, [pc, #128]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e032      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e0:	4b19      	ldr	r3, [pc, #100]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4916      	ldr	r1, [pc, #88]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050fe:	4b12      	ldr	r3, [pc, #72]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	490e      	ldr	r1, [pc, #56]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005112:	f000 f821 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8005116:	4602      	mov	r2, r0
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	091b      	lsrs	r3, r3, #4
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	490a      	ldr	r1, [pc, #40]	@ (800514c <HAL_RCC_ClockConfig+0x1c0>)
 8005124:	5ccb      	ldrb	r3, [r1, r3]
 8005126:	fa22 f303 	lsr.w	r3, r2, r3
 800512a:	4a09      	ldr	r2, [pc, #36]	@ (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800512e:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <HAL_RCC_ClockConfig+0x1c8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7fd fb3c 	bl	80027b0 <HAL_InitTick>

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40023c00 	.word	0x40023c00
 8005148:	40023800 	.word	0x40023800
 800514c:	0800e0a8 	.word	0x0800e0a8
 8005150:	20000000 	.word	0x20000000
 8005154:	20000004 	.word	0x20000004

08005158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800515c:	b090      	sub	sp, #64	@ 0x40
 800515e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	637b      	str	r3, [r7, #52]	@ 0x34
 8005164:	2300      	movs	r3, #0
 8005166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005168:	2300      	movs	r3, #0
 800516a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005170:	4b59      	ldr	r3, [pc, #356]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 030c 	and.w	r3, r3, #12
 8005178:	2b08      	cmp	r3, #8
 800517a:	d00d      	beq.n	8005198 <HAL_RCC_GetSysClockFreq+0x40>
 800517c:	2b08      	cmp	r3, #8
 800517e:	f200 80a1 	bhi.w	80052c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x34>
 8005186:	2b04      	cmp	r3, #4
 8005188:	d003      	beq.n	8005192 <HAL_RCC_GetSysClockFreq+0x3a>
 800518a:	e09b      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800518c:	4b53      	ldr	r3, [pc, #332]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x184>)
 800518e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005190:	e09b      	b.n	80052ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005192:	4b53      	ldr	r3, [pc, #332]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005194:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005196:	e098      	b.n	80052ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005198:	4b4f      	ldr	r3, [pc, #316]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051a2:	4b4d      	ldr	r3, [pc, #308]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d028      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ae:	4b4a      	ldr	r3, [pc, #296]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	099b      	lsrs	r3, r3, #6
 80051b4:	2200      	movs	r2, #0
 80051b6:	623b      	str	r3, [r7, #32]
 80051b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80051c0:	2100      	movs	r1, #0
 80051c2:	4b47      	ldr	r3, [pc, #284]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80051c4:	fb03 f201 	mul.w	r2, r3, r1
 80051c8:	2300      	movs	r3, #0
 80051ca:	fb00 f303 	mul.w	r3, r0, r3
 80051ce:	4413      	add	r3, r2
 80051d0:	4a43      	ldr	r2, [pc, #268]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80051d2:	fba0 1202 	umull	r1, r2, r0, r2
 80051d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051d8:	460a      	mov	r2, r1
 80051da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80051dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051de:	4413      	add	r3, r2
 80051e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e4:	2200      	movs	r2, #0
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	61fa      	str	r2, [r7, #28]
 80051ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80051f2:	f7fb fd31 	bl	8000c58 <__aeabi_uldivmod>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4613      	mov	r3, r2
 80051fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051fe:	e053      	b.n	80052a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005200:	4b35      	ldr	r3, [pc, #212]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	2200      	movs	r2, #0
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	617a      	str	r2, [r7, #20]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005212:	f04f 0b00 	mov.w	fp, #0
 8005216:	4652      	mov	r2, sl
 8005218:	465b      	mov	r3, fp
 800521a:	f04f 0000 	mov.w	r0, #0
 800521e:	f04f 0100 	mov.w	r1, #0
 8005222:	0159      	lsls	r1, r3, #5
 8005224:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005228:	0150      	lsls	r0, r2, #5
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	ebb2 080a 	subs.w	r8, r2, sl
 8005232:	eb63 090b 	sbc.w	r9, r3, fp
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005242:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005246:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800524a:	ebb2 0408 	subs.w	r4, r2, r8
 800524e:	eb63 0509 	sbc.w	r5, r3, r9
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	00eb      	lsls	r3, r5, #3
 800525c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005260:	00e2      	lsls	r2, r4, #3
 8005262:	4614      	mov	r4, r2
 8005264:	461d      	mov	r5, r3
 8005266:	eb14 030a 	adds.w	r3, r4, sl
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	eb45 030b 	adc.w	r3, r5, fp
 8005270:	607b      	str	r3, [r7, #4]
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800527e:	4629      	mov	r1, r5
 8005280:	028b      	lsls	r3, r1, #10
 8005282:	4621      	mov	r1, r4
 8005284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005288:	4621      	mov	r1, r4
 800528a:	028a      	lsls	r2, r1, #10
 800528c:	4610      	mov	r0, r2
 800528e:	4619      	mov	r1, r3
 8005290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005292:	2200      	movs	r2, #0
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	60fa      	str	r2, [r7, #12]
 8005298:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800529c:	f7fb fcdc 	bl	8000c58 <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4613      	mov	r3, r2
 80052a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052a8:	4b0b      	ldr	r3, [pc, #44]	@ (80052d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	0c1b      	lsrs	r3, r3, #16
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	3301      	adds	r3, #1
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80052b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80052ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052c2:	e002      	b.n	80052ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052c4:	4b05      	ldr	r3, [pc, #20]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x184>)
 80052c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3740      	adds	r7, #64	@ 0x40
 80052d0:	46bd      	mov	sp, r7
 80052d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d6:	bf00      	nop
 80052d8:	40023800 	.word	0x40023800
 80052dc:	00f42400 	.word	0x00f42400
 80052e0:	017d7840 	.word	0x017d7840

080052e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e8:	4b03      	ldr	r3, [pc, #12]	@ (80052f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ea:	681b      	ldr	r3, [r3, #0]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20000000 	.word	0x20000000

080052fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005300:	f7ff fff0 	bl	80052e4 <HAL_RCC_GetHCLKFreq>
 8005304:	4602      	mov	r2, r0
 8005306:	4b05      	ldr	r3, [pc, #20]	@ (800531c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	0a9b      	lsrs	r3, r3, #10
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	4903      	ldr	r1, [pc, #12]	@ (8005320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005312:	5ccb      	ldrb	r3, [r1, r3]
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40023800 	.word	0x40023800
 8005320:	0800e0b8 	.word	0x0800e0b8

08005324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005328:	f7ff ffdc 	bl	80052e4 <HAL_RCC_GetHCLKFreq>
 800532c:	4602      	mov	r2, r0
 800532e:	4b05      	ldr	r3, [pc, #20]	@ (8005344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	0b5b      	lsrs	r3, r3, #13
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	4903      	ldr	r1, [pc, #12]	@ (8005348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800533a:	5ccb      	ldrb	r3, [r1, r3]
 800533c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005340:	4618      	mov	r0, r3
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40023800 	.word	0x40023800
 8005348:	0800e0b8 	.word	0x0800e0b8

0800534c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e041      	b.n	80053e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fc fb84 	bl	8001a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f000 fa70 	bl	8005870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d001      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e044      	b.n	800548e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1e      	ldr	r2, [pc, #120]	@ (800549c <HAL_TIM_Base_Start_IT+0xb0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d018      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x6c>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542e:	d013      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x6c>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1a      	ldr	r2, [pc, #104]	@ (80054a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00e      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x6c>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a19      	ldr	r2, [pc, #100]	@ (80054a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d009      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x6c>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a17      	ldr	r2, [pc, #92]	@ (80054a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d004      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x6c>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a16      	ldr	r2, [pc, #88]	@ (80054ac <HAL_TIM_Base_Start_IT+0xc0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d111      	bne.n	800547c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b06      	cmp	r3, #6
 8005468:	d010      	beq.n	800548c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0201 	orr.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547a:	e007      	b.n	800548c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40010000 	.word	0x40010000
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	40014000 	.word	0x40014000

080054b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d020      	beq.n	8005514 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01b      	beq.n	8005514 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0202 	mvn.w	r2, #2
 80054e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f999 	bl	8005832 <HAL_TIM_IC_CaptureCallback>
 8005500:	e005      	b.n	800550e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f98b 	bl	800581e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f99c 	bl	8005846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d020      	beq.n	8005560 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0204 	mvn.w	r2, #4
 8005530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f973 	bl	8005832 <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f965 	bl	800581e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f976 	bl	8005846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0208 	mvn.w	r2, #8
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2204      	movs	r2, #4
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f94d 	bl	8005832 <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f93f 	bl	800581e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f950 	bl	8005846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d020      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01b      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0210 	mvn.w	r2, #16
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2208      	movs	r2, #8
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f927 	bl	8005832 <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f919 	bl	800581e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f92a 	bl	8005846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00c      	beq.n	800561c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0201 	mvn.w	r2, #1
 8005614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fb fcda 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00c      	beq.n	8005640 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fab6 	bl	8005bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00c      	beq.n	8005664 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d007      	beq.n	8005664 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800565c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f8fb 	bl	800585a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00c      	beq.n	8005688 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0220 	mvn.w	r2, #32
 8005680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fa88 	bl	8005b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005688:	bf00      	nop
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_TIM_ConfigClockSource+0x1c>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e0b4      	b.n	8005816 <HAL_TIM_ConfigClockSource+0x186>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056e4:	d03e      	beq.n	8005764 <HAL_TIM_ConfigClockSource+0xd4>
 80056e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ea:	f200 8087 	bhi.w	80057fc <HAL_TIM_ConfigClockSource+0x16c>
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f2:	f000 8086 	beq.w	8005802 <HAL_TIM_ConfigClockSource+0x172>
 80056f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056fa:	d87f      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b70      	cmp	r3, #112	@ 0x70
 80056fe:	d01a      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0xa6>
 8005700:	2b70      	cmp	r3, #112	@ 0x70
 8005702:	d87b      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b60      	cmp	r3, #96	@ 0x60
 8005706:	d050      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x11a>
 8005708:	2b60      	cmp	r3, #96	@ 0x60
 800570a:	d877      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b50      	cmp	r3, #80	@ 0x50
 800570e:	d03c      	beq.n	800578a <HAL_TIM_ConfigClockSource+0xfa>
 8005710:	2b50      	cmp	r3, #80	@ 0x50
 8005712:	d873      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x16c>
 8005714:	2b40      	cmp	r3, #64	@ 0x40
 8005716:	d058      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x13a>
 8005718:	2b40      	cmp	r3, #64	@ 0x40
 800571a:	d86f      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x16c>
 800571c:	2b30      	cmp	r3, #48	@ 0x30
 800571e:	d064      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x15a>
 8005720:	2b30      	cmp	r3, #48	@ 0x30
 8005722:	d86b      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x16c>
 8005724:	2b20      	cmp	r3, #32
 8005726:	d060      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x15a>
 8005728:	2b20      	cmp	r3, #32
 800572a:	d867      	bhi.n	80057fc <HAL_TIM_ConfigClockSource+0x16c>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d05c      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x15a>
 8005730:	2b10      	cmp	r3, #16
 8005732:	d05a      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x15a>
 8005734:	e062      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005746:	f000 f999 	bl	8005a7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005758:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	609a      	str	r2, [r3, #8]
      break;
 8005762:	e04f      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005774:	f000 f982 	bl	8005a7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005786:	609a      	str	r2, [r3, #8]
      break;
 8005788:	e03c      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005796:	461a      	mov	r2, r3
 8005798:	f000 f8f6 	bl	8005988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2150      	movs	r1, #80	@ 0x50
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f94f 	bl	8005a46 <TIM_ITRx_SetConfig>
      break;
 80057a8:	e02c      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057b6:	461a      	mov	r2, r3
 80057b8:	f000 f915 	bl	80059e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2160      	movs	r1, #96	@ 0x60
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 f93f 	bl	8005a46 <TIM_ITRx_SetConfig>
      break;
 80057c8:	e01c      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d6:	461a      	mov	r2, r3
 80057d8:	f000 f8d6 	bl	8005988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2140      	movs	r1, #64	@ 0x40
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f92f 	bl	8005a46 <TIM_ITRx_SetConfig>
      break;
 80057e8:	e00c      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4619      	mov	r1, r3
 80057f4:	4610      	mov	r0, r2
 80057f6:	f000 f926 	bl	8005a46 <TIM_ITRx_SetConfig>
      break;
 80057fa:	e003      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005800:	e000      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005802:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3a      	ldr	r2, [pc, #232]	@ (800596c <TIM_Base_SetConfig+0xfc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00f      	beq.n	80058a8 <TIM_Base_SetConfig+0x38>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800588e:	d00b      	beq.n	80058a8 <TIM_Base_SetConfig+0x38>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a37      	ldr	r2, [pc, #220]	@ (8005970 <TIM_Base_SetConfig+0x100>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d007      	beq.n	80058a8 <TIM_Base_SetConfig+0x38>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a36      	ldr	r2, [pc, #216]	@ (8005974 <TIM_Base_SetConfig+0x104>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_Base_SetConfig+0x38>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a35      	ldr	r2, [pc, #212]	@ (8005978 <TIM_Base_SetConfig+0x108>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d108      	bne.n	80058ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2b      	ldr	r2, [pc, #172]	@ (800596c <TIM_Base_SetConfig+0xfc>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d01b      	beq.n	80058fa <TIM_Base_SetConfig+0x8a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c8:	d017      	beq.n	80058fa <TIM_Base_SetConfig+0x8a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a28      	ldr	r2, [pc, #160]	@ (8005970 <TIM_Base_SetConfig+0x100>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d013      	beq.n	80058fa <TIM_Base_SetConfig+0x8a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a27      	ldr	r2, [pc, #156]	@ (8005974 <TIM_Base_SetConfig+0x104>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00f      	beq.n	80058fa <TIM_Base_SetConfig+0x8a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a26      	ldr	r2, [pc, #152]	@ (8005978 <TIM_Base_SetConfig+0x108>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00b      	beq.n	80058fa <TIM_Base_SetConfig+0x8a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a25      	ldr	r2, [pc, #148]	@ (800597c <TIM_Base_SetConfig+0x10c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <TIM_Base_SetConfig+0x8a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a24      	ldr	r2, [pc, #144]	@ (8005980 <TIM_Base_SetConfig+0x110>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d003      	beq.n	80058fa <TIM_Base_SetConfig+0x8a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a23      	ldr	r2, [pc, #140]	@ (8005984 <TIM_Base_SetConfig+0x114>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d108      	bne.n	800590c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a0e      	ldr	r2, [pc, #56]	@ (800596c <TIM_Base_SetConfig+0xfc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d103      	bne.n	8005940 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b01      	cmp	r3, #1
 8005950:	d105      	bne.n	800595e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f023 0201 	bic.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	611a      	str	r2, [r3, #16]
  }
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40014000 	.word	0x40014000
 8005980:	40014400 	.word	0x40014400
 8005984:	40014800 	.word	0x40014800

08005988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f023 0201 	bic.w	r2, r3, #1
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f023 030a 	bic.w	r3, r3, #10
 80059c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b087      	sub	sp, #28
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f023 0210 	bic.w	r2, r3, #16
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	031b      	lsls	r3, r3, #12
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	621a      	str	r2, [r3, #32]
}
 8005a3a:	bf00      	nop
 8005a3c:	371c      	adds	r7, #28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b085      	sub	sp, #20
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f043 0307 	orr.w	r3, r3, #7
 8005a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	609a      	str	r2, [r3, #8]
}
 8005a70:	bf00      	nop
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	021a      	lsls	r2, r3, #8
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	609a      	str	r2, [r3, #8]
}
 8005ab0:	bf00      	nop
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e050      	b.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1c      	ldr	r2, [pc, #112]	@ (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d018      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b20:	d013      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a18      	ldr	r2, [pc, #96]	@ (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00e      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a16      	ldr	r2, [pc, #88]	@ (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d009      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a15      	ldr	r2, [pc, #84]	@ (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d004      	beq.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a13      	ldr	r2, [pc, #76]	@ (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d10c      	bne.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	40014000 	.word	0x40014000

08005b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e042      	b.n	8005c58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fb ff70 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2224      	movs	r2, #36	@ 0x24
 8005bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 ff77 	bl	8006af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	695a      	ldr	r2, [r3, #20]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08c      	sub	sp, #48	@ 0x30
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	d156      	bne.n	8005d28 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <HAL_UART_Transmit_DMA+0x26>
 8005c80:	88fb      	ldrh	r3, [r7, #6]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e04f      	b.n	8005d2a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	88fa      	ldrh	r2, [r7, #6]
 8005c94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	88fa      	ldrh	r2, [r7, #6]
 8005c9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2221      	movs	r2, #33	@ 0x21
 8005ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cae:	4a21      	ldr	r2, [pc, #132]	@ (8005d34 <HAL_UART_Transmit_DMA+0xd4>)
 8005cb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb6:	4a20      	ldr	r2, [pc, #128]	@ (8005d38 <HAL_UART_Transmit_DMA+0xd8>)
 8005cb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8005d3c <HAL_UART_Transmit_DMA+0xdc>)
 8005cc0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005cca:	f107 0308 	add.w	r3, r7, #8
 8005cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd6:	6819      	ldr	r1, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	461a      	mov	r2, r3
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	f7fc ff99 	bl	8002c18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3314      	adds	r3, #20
 8005cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	617b      	str	r3, [r7, #20]
   return(result);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3314      	adds	r3, #20
 8005d0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d10:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6a39      	ldr	r1, [r7, #32]
 8005d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e5      	bne.n	8005cf0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e000      	b.n	8005d2a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005d28:	2302      	movs	r3, #2
  }
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3730      	adds	r7, #48	@ 0x30
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	08006385 	.word	0x08006385
 8005d38:	0800641f 	.word	0x0800641f
 8005d3c:	080065a3 	.word	0x080065a3

08005d40 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08c      	sub	sp, #48	@ 0x30
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	d14a      	bne.n	8005df0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e043      	b.n	8005df2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005d76:	88fb      	ldrh	r3, [r7, #6]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 fc5b 	bl	8006638 <UART_Start_Receive_DMA>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005d88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d12c      	bne.n	8005dea <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d125      	bne.n	8005de4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d98:	2300      	movs	r3, #0
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	613b      	str	r3, [r7, #16]
 8005dac:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	330c      	adds	r3, #12
 8005db4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	617b      	str	r3, [r7, #20]
   return(result);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f043 0310 	orr.w	r3, r3, #16
 8005dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dce:	627a      	str	r2, [r7, #36]	@ 0x24
 8005dd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6a39      	ldr	r1, [r7, #32]
 8005dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e5      	bne.n	8005dae <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005de2:	e002      	b.n	8005dea <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005dea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005dee:	e000      	b.n	8005df2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
  }
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3730      	adds	r7, #48	@ 0x30
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b0ba      	sub	sp, #232	@ 0xe8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10f      	bne.n	8005e62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <HAL_UART_IRQHandler+0x66>
 8005e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fd8d 	bl	800697a <UART_Receive_IT>
      return;
 8005e60:	e25b      	b.n	800631a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80de 	beq.w	8006028 <HAL_UART_IRQHandler+0x22c>
 8005e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 80d1 	beq.w	8006028 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <HAL_UART_IRQHandler+0xae>
 8005e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea2:	f043 0201 	orr.w	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <HAL_UART_IRQHandler+0xd2>
 8005eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec6:	f043 0202 	orr.w	r2, r3, #2
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00b      	beq.n	8005ef2 <HAL_UART_IRQHandler+0xf6>
 8005eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eea:	f043 0204 	orr.w	r2, r3, #4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d011      	beq.n	8005f22 <HAL_UART_IRQHandler+0x126>
 8005efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d105      	bne.n	8005f16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1a:	f043 0208 	orr.w	r2, r3, #8
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 81f2 	beq.w	8006310 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d008      	beq.n	8005f4a <HAL_UART_IRQHandler+0x14e>
 8005f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fd18 	bl	800697a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f54:	2b40      	cmp	r3, #64	@ 0x40
 8005f56:	bf0c      	ite	eq
 8005f58:	2301      	moveq	r3, #1
 8005f5a:	2300      	movne	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d103      	bne.n	8005f76 <HAL_UART_IRQHandler+0x17a>
 8005f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d04f      	beq.n	8006016 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fc20 	bl	80067bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f86:	2b40      	cmp	r3, #64	@ 0x40
 8005f88:	d141      	bne.n	800600e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3314      	adds	r3, #20
 8005f90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3314      	adds	r3, #20
 8005fb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005fc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1d9      	bne.n	8005f8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d013      	beq.n	8006006 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80061dc <HAL_UART_IRQHandler+0x3e0>)
 8005fe4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fc fedc 	bl	8002da8 <HAL_DMA_Abort_IT>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d016      	beq.n	8006024 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006000:	4610      	mov	r0, r2
 8006002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006004:	e00e      	b.n	8006024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f9b2 	bl	8006370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600c:	e00a      	b.n	8006024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f9ae 	bl	8006370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006014:	e006      	b.n	8006024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f9aa 	bl	8006370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006022:	e175      	b.n	8006310 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006024:	bf00      	nop
    return;
 8006026:	e173      	b.n	8006310 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602c:	2b01      	cmp	r3, #1
 800602e:	f040 814f 	bne.w	80062d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006036:	f003 0310 	and.w	r3, r3, #16
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 8148 	beq.w	80062d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006044:	f003 0310 	and.w	r3, r3, #16
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8141 	beq.w	80062d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800604e:	2300      	movs	r3, #0
 8006050:	60bb      	str	r3, [r7, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606e:	2b40      	cmp	r3, #64	@ 0x40
 8006070:	f040 80b6 	bne.w	80061e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8145 	beq.w	8006314 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800608e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006092:	429a      	cmp	r2, r3
 8006094:	f080 813e 	bcs.w	8006314 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800609e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060aa:	f000 8088 	beq.w	80061be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	330c      	adds	r3, #12
 80060d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80060da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1d9      	bne.n	80060ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3314      	adds	r3, #20
 8006100:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800610a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800610c:	f023 0301 	bic.w	r3, r3, #1
 8006110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3314      	adds	r3, #20
 800611a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800611e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006122:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006126:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006130:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e1      	bne.n	80060fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3314      	adds	r3, #20
 800613c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800614c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3314      	adds	r3, #20
 8006156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800615a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800615c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006160:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e3      	bne.n	8006136 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800618c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800618e:	f023 0310 	bic.w	r3, r3, #16
 8006192:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80061a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80061a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e3      	bne.n	800617c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fc fd85 	bl	8002cc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2202      	movs	r2, #2
 80061c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7fa feb7 	bl	8000f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061da:	e09b      	b.n	8006314 <HAL_UART_IRQHandler+0x518>
 80061dc:	08006883 	.word	0x08006883
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 808e 	beq.w	8006318 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8089 	beq.w	8006318 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	330c      	adds	r3, #12
 800620c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800621c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800622a:	647a      	str	r2, [r7, #68]	@ 0x44
 800622c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e3      	bne.n	8006206 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3314      	adds	r3, #20
 8006244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	623b      	str	r3, [r7, #32]
   return(result);
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	f023 0301 	bic.w	r3, r3, #1
 8006254:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3314      	adds	r3, #20
 800625e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006262:	633a      	str	r2, [r7, #48]	@ 0x30
 8006264:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e3      	bne.n	800623e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	60fb      	str	r3, [r7, #12]
   return(result);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0310 	bic.w	r3, r3, #16
 800629a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80062a8:	61fa      	str	r2, [r7, #28]
 80062aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	69b9      	ldr	r1, [r7, #24]
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	617b      	str	r3, [r7, #20]
   return(result);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e3      	bne.n	8006284 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7fa fe3d 	bl	8000f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062ce:	e023      	b.n	8006318 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d009      	beq.n	80062f0 <HAL_UART_IRQHandler+0x4f4>
 80062dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fade 	bl	80068aa <UART_Transmit_IT>
    return;
 80062ee:	e014      	b.n	800631a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00e      	beq.n	800631a <HAL_UART_IRQHandler+0x51e>
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d008      	beq.n	800631a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fb1e 	bl	800694a <UART_EndTransmit_IT>
    return;
 800630e:	e004      	b.n	800631a <HAL_UART_IRQHandler+0x51e>
    return;
 8006310:	bf00      	nop
 8006312:	e002      	b.n	800631a <HAL_UART_IRQHandler+0x51e>
      return;
 8006314:	bf00      	nop
 8006316:	e000      	b.n	800631a <HAL_UART_IRQHandler+0x51e>
      return;
 8006318:	bf00      	nop
  }
}
 800631a:	37e8      	adds	r7, #232	@ 0xe8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b090      	sub	sp, #64	@ 0x40
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006390:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639c:	2b00      	cmp	r3, #0
 800639e:	d137      	bne.n	8006410 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80063a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063a2:	2200      	movs	r2, #0
 80063a4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3314      	adds	r3, #20
 80063ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	623b      	str	r3, [r7, #32]
   return(result);
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3314      	adds	r3, #20
 80063c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80063c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e5      	bne.n	80063a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	330c      	adds	r3, #12
 80063e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	330c      	adds	r3, #12
 80063f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063fa:	61fa      	str	r2, [r7, #28]
 80063fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	69b9      	ldr	r1, [r7, #24]
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	617b      	str	r3, [r7, #20]
   return(result);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e5      	bne.n	80063da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800640e:	e002      	b.n	8006416 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006410:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006412:	f7ff ff85 	bl	8006320 <HAL_UART_TxCpltCallback>
}
 8006416:	bf00      	nop
 8006418:	3740      	adds	r7, #64	@ 0x40
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff ff81 	bl	8006334 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b09c      	sub	sp, #112	@ 0x70
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006446:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006452:	2b00      	cmp	r3, #0
 8006454:	d172      	bne.n	800653c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006458:	2200      	movs	r2, #0
 800645a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800645c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330c      	adds	r3, #12
 8006462:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800646c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800646e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006472:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	330c      	adds	r3, #12
 800647a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800647c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800647e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006482:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800648a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e5      	bne.n	800645c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3314      	adds	r3, #20
 8006496:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a2:	f023 0301 	bic.w	r3, r3, #1
 80064a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80064a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3314      	adds	r3, #20
 80064ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80064b0:	647a      	str	r2, [r7, #68]	@ 0x44
 80064b2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e5      	bne.n	8006490 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3314      	adds	r3, #20
 80064ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	623b      	str	r3, [r7, #32]
   return(result);
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064da:	663b      	str	r3, [r7, #96]	@ 0x60
 80064dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3314      	adds	r3, #20
 80064e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80064e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80064e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e5      	bne.n	80064c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006504:	2b01      	cmp	r3, #1
 8006506:	d119      	bne.n	800653c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	330c      	adds	r3, #12
 800650e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	60fb      	str	r3, [r7, #12]
   return(result);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0310 	bic.w	r3, r3, #16
 800651e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	330c      	adds	r3, #12
 8006526:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006528:	61fa      	str	r2, [r7, #28]
 800652a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	69b9      	ldr	r1, [r7, #24]
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	e841 2300 	strex	r3, r2, [r1]
 8006534:	617b      	str	r3, [r7, #20]
   return(result);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e5      	bne.n	8006508 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800653c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800653e:	2200      	movs	r2, #0
 8006540:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006546:	2b01      	cmp	r3, #1
 8006548:	d106      	bne.n	8006558 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800654a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800654c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800654e:	4619      	mov	r1, r3
 8006550:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006552:	f7fa fcf9 	bl	8000f48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006556:	e002      	b.n	800655e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006558:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800655a:	f7ff fef5 	bl	8006348 <HAL_UART_RxCpltCallback>
}
 800655e:	bf00      	nop
 8006560:	3770      	adds	r7, #112	@ 0x70
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006572:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657e:	2b01      	cmp	r3, #1
 8006580:	d108      	bne.n	8006594 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006586:	085b      	lsrs	r3, r3, #1
 8006588:	b29b      	uxth	r3, r3
 800658a:	4619      	mov	r1, r3
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7fa fcdb 	bl	8000f48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006592:	e002      	b.n	800659a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f7ff fee1 	bl	800635c <HAL_UART_RxHalfCpltCallback>
}
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065be:	2b80      	cmp	r3, #128	@ 0x80
 80065c0:	bf0c      	ite	eq
 80065c2:	2301      	moveq	r3, #1
 80065c4:	2300      	movne	r3, #0
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b21      	cmp	r3, #33	@ 0x21
 80065d4:	d108      	bne.n	80065e8 <UART_DMAError+0x46>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d005      	beq.n	80065e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80065e2:	68b8      	ldr	r0, [r7, #8]
 80065e4:	f000 f8c2 	bl	800676c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f2:	2b40      	cmp	r3, #64	@ 0x40
 80065f4:	bf0c      	ite	eq
 80065f6:	2301      	moveq	r3, #1
 80065f8:	2300      	movne	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b22      	cmp	r3, #34	@ 0x22
 8006608:	d108      	bne.n	800661c <UART_DMAError+0x7a>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2200      	movs	r2, #0
 8006614:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006616:	68b8      	ldr	r0, [r7, #8]
 8006618:	f000 f8d0 	bl	80067bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006620:	f043 0210 	orr.w	r2, r3, #16
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006628:	68b8      	ldr	r0, [r7, #8]
 800662a:	f7ff fea1 	bl	8006370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800662e:	bf00      	nop
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b098      	sub	sp, #96	@ 0x60
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	4613      	mov	r3, r2
 8006644:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	88fa      	ldrh	r2, [r7, #6]
 8006650:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2222      	movs	r2, #34	@ 0x22
 800665c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006664:	4a3e      	ldr	r2, [pc, #248]	@ (8006760 <UART_Start_Receive_DMA+0x128>)
 8006666:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800666c:	4a3d      	ldr	r2, [pc, #244]	@ (8006764 <UART_Start_Receive_DMA+0x12c>)
 800666e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006674:	4a3c      	ldr	r2, [pc, #240]	@ (8006768 <UART_Start_Receive_DMA+0x130>)
 8006676:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667c:	2200      	movs	r2, #0
 800667e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006680:	f107 0308 	add.w	r3, r7, #8
 8006684:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3304      	adds	r3, #4
 8006690:	4619      	mov	r1, r3
 8006692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	88fb      	ldrh	r3, [r7, #6]
 8006698:	f7fc fabe 	bl	8002c18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800669c:	2300      	movs	r3, #0
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d019      	beq.n	80066ee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	330c      	adds	r3, #12
 80066c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	330c      	adds	r3, #12
 80066d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066da:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80066dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80066e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80066e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e5      	bne.n	80066ba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3314      	adds	r3, #20
 80066f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	657b      	str	r3, [r7, #84]	@ 0x54
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3314      	adds	r3, #20
 800670c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800670e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006710:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006714:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e5      	bne.n	80066ee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3314      	adds	r3, #20
 8006728:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	617b      	str	r3, [r7, #20]
   return(result);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006738:	653b      	str	r3, [r7, #80]	@ 0x50
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3314      	adds	r3, #20
 8006740:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006742:	627a      	str	r2, [r7, #36]	@ 0x24
 8006744:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	6a39      	ldr	r1, [r7, #32]
 8006748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e5      	bne.n	8006722 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3760      	adds	r7, #96	@ 0x60
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	0800643b 	.word	0x0800643b
 8006764:	08006567 	.word	0x08006567
 8006768:	080065a3 	.word	0x080065a3

0800676c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800676c:	b480      	push	{r7}
 800676e:	b089      	sub	sp, #36	@ 0x24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	330c      	adds	r3, #12
 800677a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	60bb      	str	r3, [r7, #8]
   return(result);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800678a:	61fb      	str	r3, [r7, #28]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	330c      	adds	r3, #12
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	61ba      	str	r2, [r7, #24]
 8006796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6979      	ldr	r1, [r7, #20]
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	613b      	str	r3, [r7, #16]
   return(result);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e5      	bne.n	8006774 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80067b0:	bf00      	nop
 80067b2:	3724      	adds	r7, #36	@ 0x24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067bc:	b480      	push	{r7}
 80067be:	b095      	sub	sp, #84	@ 0x54
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	330c      	adds	r3, #12
 80067ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	330c      	adds	r3, #12
 80067e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80067e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067ec:	e841 2300 	strex	r3, r2, [r1]
 80067f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e5      	bne.n	80067c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3314      	adds	r3, #20
 80067fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	e853 3f00 	ldrex	r3, [r3]
 8006806:	61fb      	str	r3, [r7, #28]
   return(result);
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	f023 0301 	bic.w	r3, r3, #1
 800680e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3314      	adds	r3, #20
 8006816:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006818:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800681a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800681e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006820:	e841 2300 	strex	r3, r2, [r1]
 8006824:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1e5      	bne.n	80067f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006830:	2b01      	cmp	r3, #1
 8006832:	d119      	bne.n	8006868 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	330c      	adds	r3, #12
 800683a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	e853 3f00 	ldrex	r3, [r3]
 8006842:	60bb      	str	r3, [r7, #8]
   return(result);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f023 0310 	bic.w	r3, r3, #16
 800684a:	647b      	str	r3, [r7, #68]	@ 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006854:	61ba      	str	r2, [r7, #24]
 8006856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	6979      	ldr	r1, [r7, #20]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	613b      	str	r3, [r7, #16]
   return(result);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e5      	bne.n	8006834 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006876:	bf00      	nop
 8006878:	3754      	adds	r7, #84	@ 0x54
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f7ff fd67 	bl	8006370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a2:	bf00      	nop
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b085      	sub	sp, #20
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b21      	cmp	r3, #33	@ 0x21
 80068bc:	d13e      	bne.n	800693c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068c6:	d114      	bne.n	80068f2 <UART_Transmit_IT+0x48>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d110      	bne.n	80068f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	461a      	mov	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	1c9a      	adds	r2, r3, #2
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	621a      	str	r2, [r3, #32]
 80068f0:	e008      	b.n	8006904 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	1c59      	adds	r1, r3, #1
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6211      	str	r1, [r2, #32]
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	b29b      	uxth	r3, r3
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	4619      	mov	r1, r3
 8006912:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10f      	bne.n	8006938 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006926:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006936:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	e000      	b.n	800693e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800693c:	2302      	movs	r3, #2
  }
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b082      	sub	sp, #8
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006960:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2220      	movs	r2, #32
 8006966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff fcd8 	bl	8006320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b08c      	sub	sp, #48	@ 0x30
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b22      	cmp	r3, #34	@ 0x22
 800698c:	f040 80ae 	bne.w	8006aec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006998:	d117      	bne.n	80069ca <UART_Receive_IT+0x50>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d113      	bne.n	80069ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c2:	1c9a      	adds	r2, r3, #2
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80069c8:	e026      	b.n	8006a18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069dc:	d007      	beq.n	80069ee <UART_Receive_IT+0x74>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <UART_Receive_IT+0x82>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	e008      	b.n	8006a0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	4619      	mov	r1, r3
 8006a26:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d15d      	bne.n	8006ae8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 0220 	bic.w	r2, r2, #32
 8006a3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	695a      	ldr	r2, [r3, #20]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d135      	bne.n	8006ade <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	613b      	str	r3, [r7, #16]
   return(result);
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f023 0310 	bic.w	r3, r3, #16
 8006a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	330c      	adds	r3, #12
 8006a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a98:	623a      	str	r2, [r7, #32]
 8006a9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	69f9      	ldr	r1, [r7, #28]
 8006a9e:	6a3a      	ldr	r2, [r7, #32]
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e5      	bne.n	8006a78 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0310 	and.w	r3, r3, #16
 8006ab6:	2b10      	cmp	r3, #16
 8006ab8:	d10a      	bne.n	8006ad0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fa fa36 	bl	8000f48 <HAL_UARTEx_RxEventCallback>
 8006adc:	e002      	b.n	8006ae4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff fc32 	bl	8006348 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e002      	b.n	8006aee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e000      	b.n	8006aee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006aec:	2302      	movs	r3, #2
  }
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3730      	adds	r7, #48	@ 0x30
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006afc:	b0c0      	sub	sp, #256	@ 0x100
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b14:	68d9      	ldr	r1, [r3, #12]
 8006b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	ea40 0301 	orr.w	r3, r0, r1
 8006b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	431a      	orrs	r2, r3
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b50:	f021 010c 	bic.w	r1, r1, #12
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b72:	6999      	ldr	r1, [r3, #24]
 8006b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	ea40 0301 	orr.w	r3, r0, r1
 8006b7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	4b8f      	ldr	r3, [pc, #572]	@ (8006dc4 <UART_SetConfig+0x2cc>)
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d005      	beq.n	8006b98 <UART_SetConfig+0xa0>
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	4b8d      	ldr	r3, [pc, #564]	@ (8006dc8 <UART_SetConfig+0x2d0>)
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d104      	bne.n	8006ba2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b98:	f7fe fbc4 	bl	8005324 <HAL_RCC_GetPCLK2Freq>
 8006b9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006ba0:	e003      	b.n	8006baa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ba2:	f7fe fbab 	bl	80052fc <HAL_RCC_GetPCLK1Freq>
 8006ba6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bb4:	f040 810c 	bne.w	8006dd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006bc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006bca:	4622      	mov	r2, r4
 8006bcc:	462b      	mov	r3, r5
 8006bce:	1891      	adds	r1, r2, r2
 8006bd0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006bd2:	415b      	adcs	r3, r3
 8006bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006bda:	4621      	mov	r1, r4
 8006bdc:	eb12 0801 	adds.w	r8, r2, r1
 8006be0:	4629      	mov	r1, r5
 8006be2:	eb43 0901 	adc.w	r9, r3, r1
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bfa:	4690      	mov	r8, r2
 8006bfc:	4699      	mov	r9, r3
 8006bfe:	4623      	mov	r3, r4
 8006c00:	eb18 0303 	adds.w	r3, r8, r3
 8006c04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c08:	462b      	mov	r3, r5
 8006c0a:	eb49 0303 	adc.w	r3, r9, r3
 8006c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c26:	460b      	mov	r3, r1
 8006c28:	18db      	adds	r3, r3, r3
 8006c2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	eb42 0303 	adc.w	r3, r2, r3
 8006c32:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c3c:	f7fa f80c 	bl	8000c58 <__aeabi_uldivmod>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4b61      	ldr	r3, [pc, #388]	@ (8006dcc <UART_SetConfig+0x2d4>)
 8006c46:	fba3 2302 	umull	r2, r3, r3, r2
 8006c4a:	095b      	lsrs	r3, r3, #5
 8006c4c:	011c      	lsls	r4, r3, #4
 8006c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c60:	4642      	mov	r2, r8
 8006c62:	464b      	mov	r3, r9
 8006c64:	1891      	adds	r1, r2, r2
 8006c66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c68:	415b      	adcs	r3, r3
 8006c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c70:	4641      	mov	r1, r8
 8006c72:	eb12 0a01 	adds.w	sl, r2, r1
 8006c76:	4649      	mov	r1, r9
 8006c78:	eb43 0b01 	adc.w	fp, r3, r1
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	f04f 0300 	mov.w	r3, #0
 8006c84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c90:	4692      	mov	sl, r2
 8006c92:	469b      	mov	fp, r3
 8006c94:	4643      	mov	r3, r8
 8006c96:	eb1a 0303 	adds.w	r3, sl, r3
 8006c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c9e:	464b      	mov	r3, r9
 8006ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8006ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006cb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	18db      	adds	r3, r3, r3
 8006cc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	eb42 0303 	adc.w	r3, r2, r3
 8006cc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006cce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006cd2:	f7f9 ffc1 	bl	8000c58 <__aeabi_uldivmod>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4611      	mov	r1, r2
 8006cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8006dcc <UART_SetConfig+0x2d4>)
 8006cde:	fba3 2301 	umull	r2, r3, r3, r1
 8006ce2:	095b      	lsrs	r3, r3, #5
 8006ce4:	2264      	movs	r2, #100	@ 0x64
 8006ce6:	fb02 f303 	mul.w	r3, r2, r3
 8006cea:	1acb      	subs	r3, r1, r3
 8006cec:	00db      	lsls	r3, r3, #3
 8006cee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006cf2:	4b36      	ldr	r3, [pc, #216]	@ (8006dcc <UART_SetConfig+0x2d4>)
 8006cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8006cf8:	095b      	lsrs	r3, r3, #5
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d00:	441c      	add	r4, r3
 8006d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d14:	4642      	mov	r2, r8
 8006d16:	464b      	mov	r3, r9
 8006d18:	1891      	adds	r1, r2, r2
 8006d1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d1c:	415b      	adcs	r3, r3
 8006d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d24:	4641      	mov	r1, r8
 8006d26:	1851      	adds	r1, r2, r1
 8006d28:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	414b      	adcs	r3, r1
 8006d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d30:	f04f 0200 	mov.w	r2, #0
 8006d34:	f04f 0300 	mov.w	r3, #0
 8006d38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d3c:	4659      	mov	r1, fp
 8006d3e:	00cb      	lsls	r3, r1, #3
 8006d40:	4651      	mov	r1, sl
 8006d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d46:	4651      	mov	r1, sl
 8006d48:	00ca      	lsls	r2, r1, #3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4642      	mov	r2, r8
 8006d52:	189b      	adds	r3, r3, r2
 8006d54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d58:	464b      	mov	r3, r9
 8006d5a:	460a      	mov	r2, r1
 8006d5c:	eb42 0303 	adc.w	r3, r2, r3
 8006d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d78:	460b      	mov	r3, r1
 8006d7a:	18db      	adds	r3, r3, r3
 8006d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d7e:	4613      	mov	r3, r2
 8006d80:	eb42 0303 	adc.w	r3, r2, r3
 8006d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d8e:	f7f9 ff63 	bl	8000c58 <__aeabi_uldivmod>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4b0d      	ldr	r3, [pc, #52]	@ (8006dcc <UART_SetConfig+0x2d4>)
 8006d98:	fba3 1302 	umull	r1, r3, r3, r2
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	2164      	movs	r1, #100	@ 0x64
 8006da0:	fb01 f303 	mul.w	r3, r1, r3
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	3332      	adds	r3, #50	@ 0x32
 8006daa:	4a08      	ldr	r2, [pc, #32]	@ (8006dcc <UART_SetConfig+0x2d4>)
 8006dac:	fba2 2303 	umull	r2, r3, r2, r3
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	f003 0207 	and.w	r2, r3, #7
 8006db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4422      	add	r2, r4
 8006dbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dc0:	e106      	b.n	8006fd0 <UART_SetConfig+0x4d8>
 8006dc2:	bf00      	nop
 8006dc4:	40011000 	.word	0x40011000
 8006dc8:	40011400 	.word	0x40011400
 8006dcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006dda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006dde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006de2:	4642      	mov	r2, r8
 8006de4:	464b      	mov	r3, r9
 8006de6:	1891      	adds	r1, r2, r2
 8006de8:	6239      	str	r1, [r7, #32]
 8006dea:	415b      	adcs	r3, r3
 8006dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006df2:	4641      	mov	r1, r8
 8006df4:	1854      	adds	r4, r2, r1
 8006df6:	4649      	mov	r1, r9
 8006df8:	eb43 0501 	adc.w	r5, r3, r1
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	00eb      	lsls	r3, r5, #3
 8006e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e0a:	00e2      	lsls	r2, r4, #3
 8006e0c:	4614      	mov	r4, r2
 8006e0e:	461d      	mov	r5, r3
 8006e10:	4643      	mov	r3, r8
 8006e12:	18e3      	adds	r3, r4, r3
 8006e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e18:	464b      	mov	r3, r9
 8006e1a:	eb45 0303 	adc.w	r3, r5, r3
 8006e1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e3e:	4629      	mov	r1, r5
 8006e40:	008b      	lsls	r3, r1, #2
 8006e42:	4621      	mov	r1, r4
 8006e44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e48:	4621      	mov	r1, r4
 8006e4a:	008a      	lsls	r2, r1, #2
 8006e4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e50:	f7f9 ff02 	bl	8000c58 <__aeabi_uldivmod>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4b60      	ldr	r3, [pc, #384]	@ (8006fdc <UART_SetConfig+0x4e4>)
 8006e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	011c      	lsls	r4, r3, #4
 8006e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e74:	4642      	mov	r2, r8
 8006e76:	464b      	mov	r3, r9
 8006e78:	1891      	adds	r1, r2, r2
 8006e7a:	61b9      	str	r1, [r7, #24]
 8006e7c:	415b      	adcs	r3, r3
 8006e7e:	61fb      	str	r3, [r7, #28]
 8006e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e84:	4641      	mov	r1, r8
 8006e86:	1851      	adds	r1, r2, r1
 8006e88:	6139      	str	r1, [r7, #16]
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	414b      	adcs	r3, r1
 8006e8e:	617b      	str	r3, [r7, #20]
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e9c:	4659      	mov	r1, fp
 8006e9e:	00cb      	lsls	r3, r1, #3
 8006ea0:	4651      	mov	r1, sl
 8006ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ea6:	4651      	mov	r1, sl
 8006ea8:	00ca      	lsls	r2, r1, #3
 8006eaa:	4610      	mov	r0, r2
 8006eac:	4619      	mov	r1, r3
 8006eae:	4603      	mov	r3, r0
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	189b      	adds	r3, r3, r2
 8006eb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006eb8:	464b      	mov	r3, r9
 8006eba:	460a      	mov	r2, r1
 8006ebc:	eb42 0303 	adc.w	r3, r2, r3
 8006ec0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ece:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	f04f 0300 	mov.w	r3, #0
 8006ed8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006edc:	4649      	mov	r1, r9
 8006ede:	008b      	lsls	r3, r1, #2
 8006ee0:	4641      	mov	r1, r8
 8006ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ee6:	4641      	mov	r1, r8
 8006ee8:	008a      	lsls	r2, r1, #2
 8006eea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006eee:	f7f9 feb3 	bl	8000c58 <__aeabi_uldivmod>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4b38      	ldr	r3, [pc, #224]	@ (8006fdc <UART_SetConfig+0x4e4>)
 8006efa:	fba3 2301 	umull	r2, r3, r3, r1
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	2264      	movs	r2, #100	@ 0x64
 8006f02:	fb02 f303 	mul.w	r3, r2, r3
 8006f06:	1acb      	subs	r3, r1, r3
 8006f08:	011b      	lsls	r3, r3, #4
 8006f0a:	3332      	adds	r3, #50	@ 0x32
 8006f0c:	4a33      	ldr	r2, [pc, #204]	@ (8006fdc <UART_SetConfig+0x4e4>)
 8006f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f12:	095b      	lsrs	r3, r3, #5
 8006f14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f18:	441c      	add	r4, r3
 8006f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f1e:	2200      	movs	r2, #0
 8006f20:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f22:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f28:	4642      	mov	r2, r8
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	1891      	adds	r1, r2, r2
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	415b      	adcs	r3, r3
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f38:	4641      	mov	r1, r8
 8006f3a:	1851      	adds	r1, r2, r1
 8006f3c:	6039      	str	r1, [r7, #0]
 8006f3e:	4649      	mov	r1, r9
 8006f40:	414b      	adcs	r3, r1
 8006f42:	607b      	str	r3, [r7, #4]
 8006f44:	f04f 0200 	mov.w	r2, #0
 8006f48:	f04f 0300 	mov.w	r3, #0
 8006f4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f50:	4659      	mov	r1, fp
 8006f52:	00cb      	lsls	r3, r1, #3
 8006f54:	4651      	mov	r1, sl
 8006f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f5a:	4651      	mov	r1, sl
 8006f5c:	00ca      	lsls	r2, r1, #3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	4619      	mov	r1, r3
 8006f62:	4603      	mov	r3, r0
 8006f64:	4642      	mov	r2, r8
 8006f66:	189b      	adds	r3, r3, r2
 8006f68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	460a      	mov	r2, r1
 8006f6e:	eb42 0303 	adc.w	r3, r2, r3
 8006f72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	008b      	lsls	r3, r1, #2
 8006f90:	4641      	mov	r1, r8
 8006f92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f96:	4641      	mov	r1, r8
 8006f98:	008a      	lsls	r2, r1, #2
 8006f9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006f9e:	f7f9 fe5b 	bl	8000c58 <__aeabi_uldivmod>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8006fdc <UART_SetConfig+0x4e4>)
 8006fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	2164      	movs	r1, #100	@ 0x64
 8006fb0:	fb01 f303 	mul.w	r3, r1, r3
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	3332      	adds	r3, #50	@ 0x32
 8006fba:	4a08      	ldr	r2, [pc, #32]	@ (8006fdc <UART_SetConfig+0x4e4>)
 8006fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc0:	095b      	lsrs	r3, r3, #5
 8006fc2:	f003 020f 	and.w	r2, r3, #15
 8006fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4422      	add	r2, r4
 8006fce:	609a      	str	r2, [r3, #8]
}
 8006fd0:	bf00      	nop
 8006fd2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fdc:	51eb851f 	.word	0x51eb851f

08006fe0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	f107 001c 	add.w	r0, r7, #28
 8006fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ff2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d123      	bne.n	8007042 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800700e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007022:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007026:	2b01      	cmp	r3, #1
 8007028:	d105      	bne.n	8007036 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 fae2 	bl	8008600 <USB_CoreReset>
 800703c:	4603      	mov	r3, r0
 800703e:	73fb      	strb	r3, [r7, #15]
 8007040:	e01b      	b.n	800707a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 fad6 	bl	8008600 <USB_CoreReset>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007058:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800705c:	2b00      	cmp	r3, #0
 800705e:	d106      	bne.n	800706e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007064:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	639a      	str	r2, [r3, #56]	@ 0x38
 800706c:	e005      	b.n	800707a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007072:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800707a:	7fbb      	ldrb	r3, [r7, #30]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d10b      	bne.n	8007098 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f043 0206 	orr.w	r2, r3, #6
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f043 0220 	orr.w	r2, r3, #32
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070a4:	b004      	add	sp, #16
 80070a6:	4770      	bx	lr

080070a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80070b6:	79fb      	ldrb	r3, [r7, #7]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d165      	bne.n	8007188 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4a41      	ldr	r2, [pc, #260]	@ (80071c4 <USB_SetTurnaroundTime+0x11c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d906      	bls.n	80070d2 <USB_SetTurnaroundTime+0x2a>
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4a40      	ldr	r2, [pc, #256]	@ (80071c8 <USB_SetTurnaroundTime+0x120>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d202      	bcs.n	80070d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80070cc:	230f      	movs	r3, #15
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	e062      	b.n	8007198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	4a3c      	ldr	r2, [pc, #240]	@ (80071c8 <USB_SetTurnaroundTime+0x120>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d306      	bcc.n	80070e8 <USB_SetTurnaroundTime+0x40>
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	4a3b      	ldr	r2, [pc, #236]	@ (80071cc <USB_SetTurnaroundTime+0x124>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d202      	bcs.n	80070e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80070e2:	230e      	movs	r3, #14
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	e057      	b.n	8007198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	4a38      	ldr	r2, [pc, #224]	@ (80071cc <USB_SetTurnaroundTime+0x124>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d306      	bcc.n	80070fe <USB_SetTurnaroundTime+0x56>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4a37      	ldr	r2, [pc, #220]	@ (80071d0 <USB_SetTurnaroundTime+0x128>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d202      	bcs.n	80070fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80070f8:	230d      	movs	r3, #13
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	e04c      	b.n	8007198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	4a33      	ldr	r2, [pc, #204]	@ (80071d0 <USB_SetTurnaroundTime+0x128>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d306      	bcc.n	8007114 <USB_SetTurnaroundTime+0x6c>
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	4a32      	ldr	r2, [pc, #200]	@ (80071d4 <USB_SetTurnaroundTime+0x12c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d802      	bhi.n	8007114 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800710e:	230c      	movs	r3, #12
 8007110:	617b      	str	r3, [r7, #20]
 8007112:	e041      	b.n	8007198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4a2f      	ldr	r2, [pc, #188]	@ (80071d4 <USB_SetTurnaroundTime+0x12c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d906      	bls.n	800712a <USB_SetTurnaroundTime+0x82>
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4a2e      	ldr	r2, [pc, #184]	@ (80071d8 <USB_SetTurnaroundTime+0x130>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d802      	bhi.n	800712a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007124:	230b      	movs	r3, #11
 8007126:	617b      	str	r3, [r7, #20]
 8007128:	e036      	b.n	8007198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	4a2a      	ldr	r2, [pc, #168]	@ (80071d8 <USB_SetTurnaroundTime+0x130>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d906      	bls.n	8007140 <USB_SetTurnaroundTime+0x98>
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	4a29      	ldr	r2, [pc, #164]	@ (80071dc <USB_SetTurnaroundTime+0x134>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d802      	bhi.n	8007140 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800713a:	230a      	movs	r3, #10
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	e02b      	b.n	8007198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4a26      	ldr	r2, [pc, #152]	@ (80071dc <USB_SetTurnaroundTime+0x134>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d906      	bls.n	8007156 <USB_SetTurnaroundTime+0xae>
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4a25      	ldr	r2, [pc, #148]	@ (80071e0 <USB_SetTurnaroundTime+0x138>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d202      	bcs.n	8007156 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007150:	2309      	movs	r3, #9
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	e020      	b.n	8007198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	4a21      	ldr	r2, [pc, #132]	@ (80071e0 <USB_SetTurnaroundTime+0x138>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d306      	bcc.n	800716c <USB_SetTurnaroundTime+0xc4>
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4a20      	ldr	r2, [pc, #128]	@ (80071e4 <USB_SetTurnaroundTime+0x13c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d802      	bhi.n	800716c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007166:	2308      	movs	r3, #8
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	e015      	b.n	8007198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4a1d      	ldr	r2, [pc, #116]	@ (80071e4 <USB_SetTurnaroundTime+0x13c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d906      	bls.n	8007182 <USB_SetTurnaroundTime+0xda>
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	4a1c      	ldr	r2, [pc, #112]	@ (80071e8 <USB_SetTurnaroundTime+0x140>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d202      	bcs.n	8007182 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800717c:	2307      	movs	r3, #7
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	e00a      	b.n	8007198 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007182:	2306      	movs	r3, #6
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	e007      	b.n	8007198 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007188:	79fb      	ldrb	r3, [r7, #7]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800718e:	2309      	movs	r3, #9
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	e001      	b.n	8007198 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007194:	2309      	movs	r3, #9
 8007196:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	029b      	lsls	r3, r3, #10
 80071ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80071b0:	431a      	orrs	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	00d8acbf 	.word	0x00d8acbf
 80071c8:	00e4e1c0 	.word	0x00e4e1c0
 80071cc:	00f42400 	.word	0x00f42400
 80071d0:	01067380 	.word	0x01067380
 80071d4:	011a499f 	.word	0x011a499f
 80071d8:	01312cff 	.word	0x01312cff
 80071dc:	014ca43f 	.word	0x014ca43f
 80071e0:	016e3600 	.word	0x016e3600
 80071e4:	01a6ab1f 	.word	0x01a6ab1f
 80071e8:	01e84800 	.word	0x01e84800

080071ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f043 0201 	orr.w	r2, r3, #1
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f023 0201 	bic.w	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800724c:	78fb      	ldrb	r3, [r7, #3]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d115      	bne.n	800727e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800725e:	200a      	movs	r0, #10
 8007260:	f7fb faf6 	bl	8002850 <HAL_Delay>
      ms += 10U;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	330a      	adds	r3, #10
 8007268:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 f939 	bl	80084e2 <USB_GetMode>
 8007270:	4603      	mov	r3, r0
 8007272:	2b01      	cmp	r3, #1
 8007274:	d01e      	beq.n	80072b4 <USB_SetCurrentMode+0x84>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2bc7      	cmp	r3, #199	@ 0xc7
 800727a:	d9f0      	bls.n	800725e <USB_SetCurrentMode+0x2e>
 800727c:	e01a      	b.n	80072b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d115      	bne.n	80072b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007290:	200a      	movs	r0, #10
 8007292:	f7fb fadd 	bl	8002850 <HAL_Delay>
      ms += 10U;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	330a      	adds	r3, #10
 800729a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 f920 	bl	80084e2 <USB_GetMode>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <USB_SetCurrentMode+0x84>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80072ac:	d9f0      	bls.n	8007290 <USB_SetCurrentMode+0x60>
 80072ae:	e001      	b.n	80072b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e005      	b.n	80072c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80072b8:	d101      	bne.n	80072be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072c8:	b084      	sub	sp, #16
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b086      	sub	sp, #24
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80072d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072e2:	2300      	movs	r3, #0
 80072e4:	613b      	str	r3, [r7, #16]
 80072e6:	e009      	b.n	80072fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	3340      	adds	r3, #64	@ 0x40
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	2200      	movs	r2, #0
 80072f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	3301      	adds	r3, #1
 80072fa:	613b      	str	r3, [r7, #16]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2b0e      	cmp	r3, #14
 8007300:	d9f2      	bls.n	80072e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007302:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007306:	2b00      	cmp	r3, #0
 8007308:	d11c      	bne.n	8007344 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007318:	f043 0302 	orr.w	r3, r3, #2
 800731c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007322:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	639a      	str	r2, [r3, #56]	@ 0x38
 8007342:	e00b      	b.n	800735c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007348:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007354:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007362:	461a      	mov	r2, r3
 8007364:	2300      	movs	r3, #0
 8007366:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007368:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800736c:	2b01      	cmp	r3, #1
 800736e:	d10d      	bne.n	800738c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007378:	2100      	movs	r1, #0
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f968 	bl	8007650 <USB_SetDevSpeed>
 8007380:	e008      	b.n	8007394 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007382:	2101      	movs	r1, #1
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f963 	bl	8007650 <USB_SetDevSpeed>
 800738a:	e003      	b.n	8007394 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800738c:	2103      	movs	r1, #3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f95e 	bl	8007650 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007394:	2110      	movs	r1, #16
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f8fa 	bl	8007590 <USB_FlushTxFifo>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f924 	bl	80075f4 <USB_FlushRxFifo>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073bc:	461a      	mov	r2, r3
 80073be:	2300      	movs	r3, #0
 80073c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c8:	461a      	mov	r2, r3
 80073ca:	2300      	movs	r3, #0
 80073cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d4:	461a      	mov	r2, r3
 80073d6:	2300      	movs	r3, #0
 80073d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073da:	2300      	movs	r3, #0
 80073dc:	613b      	str	r3, [r7, #16]
 80073de:	e043      	b.n	8007468 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073f6:	d118      	bne.n	800742a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10a      	bne.n	8007414 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	4413      	add	r3, r2
 8007406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800740a:	461a      	mov	r2, r3
 800740c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	e013      	b.n	800743c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007420:	461a      	mov	r2, r3
 8007422:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	e008      	b.n	800743c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007436:	461a      	mov	r2, r3
 8007438:	2300      	movs	r3, #0
 800743a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007448:	461a      	mov	r2, r3
 800744a:	2300      	movs	r3, #0
 800744c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800745a:	461a      	mov	r2, r3
 800745c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007460:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	3301      	adds	r3, #1
 8007466:	613b      	str	r3, [r7, #16]
 8007468:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800746c:	461a      	mov	r2, r3
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4293      	cmp	r3, r2
 8007472:	d3b5      	bcc.n	80073e0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007474:	2300      	movs	r3, #0
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	e043      	b.n	8007502 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800748c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007490:	d118      	bne.n	80074c4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074a4:	461a      	mov	r2, r3
 80074a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	e013      	b.n	80074d6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ba:	461a      	mov	r2, r3
 80074bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	e008      	b.n	80074d6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d0:	461a      	mov	r2, r3
 80074d2:	2300      	movs	r3, #0
 80074d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e2:	461a      	mov	r2, r3
 80074e4:	2300      	movs	r3, #0
 80074e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f4:	461a      	mov	r2, r3
 80074f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80074fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	3301      	adds	r3, #1
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007506:	461a      	mov	r2, r3
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	4293      	cmp	r3, r2
 800750c:	d3b5      	bcc.n	800747a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800751c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007520:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800752e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007530:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007534:	2b00      	cmp	r3, #0
 8007536:	d105      	bne.n	8007544 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	f043 0210 	orr.w	r2, r3, #16
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699a      	ldr	r2, [r3, #24]
 8007548:	4b10      	ldr	r3, [pc, #64]	@ (800758c <USB_DevInit+0x2c4>)
 800754a:	4313      	orrs	r3, r2
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007550:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	f043 0208 	orr.w	r2, r3, #8
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007564:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007568:	2b01      	cmp	r3, #1
 800756a:	d107      	bne.n	800757c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007574:	f043 0304 	orr.w	r3, r3, #4
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007588:	b004      	add	sp, #16
 800758a:	4770      	bx	lr
 800758c:	803c3800 	.word	0x803c3800

08007590 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3301      	adds	r3, #1
 80075a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075aa:	d901      	bls.n	80075b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e01b      	b.n	80075e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	daf2      	bge.n	800759e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	019b      	lsls	r3, r3, #6
 80075c0:	f043 0220 	orr.w	r2, r3, #32
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075d4:	d901      	bls.n	80075da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e006      	b.n	80075e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b20      	cmp	r3, #32
 80075e4:	d0f0      	beq.n	80075c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	3301      	adds	r3, #1
 8007604:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800760c:	d901      	bls.n	8007612 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e018      	b.n	8007644 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	daf2      	bge.n	8007600 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2210      	movs	r2, #16
 8007622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3301      	adds	r3, #1
 8007628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007630:	d901      	bls.n	8007636 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e006      	b.n	8007644 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	f003 0310 	and.w	r3, r3, #16
 800763e:	2b10      	cmp	r3, #16
 8007640:	d0f0      	beq.n	8007624 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	78fb      	ldrb	r3, [r7, #3]
 800766a:	68f9      	ldr	r1, [r7, #12]
 800766c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007670:	4313      	orrs	r3, r2
 8007672:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007682:	b480      	push	{r7}
 8007684:	b087      	sub	sp, #28
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 0306 	and.w	r3, r3, #6
 800769a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d102      	bne.n	80076a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80076a2:	2300      	movs	r3, #0
 80076a4:	75fb      	strb	r3, [r7, #23]
 80076a6:	e00a      	b.n	80076be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d002      	beq.n	80076b4 <USB_GetDevSpeed+0x32>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b06      	cmp	r3, #6
 80076b2:	d102      	bne.n	80076ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80076b4:	2302      	movs	r3, #2
 80076b6:	75fb      	strb	r3, [r7, #23]
 80076b8:	e001      	b.n	80076be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80076ba:	230f      	movs	r3, #15
 80076bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80076be:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	785b      	ldrb	r3, [r3, #1]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d13a      	bne.n	800775e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	2101      	movs	r1, #1
 80076fa:	fa01 f303 	lsl.w	r3, r1, r3
 80076fe:	b29b      	uxth	r3, r3
 8007700:	68f9      	ldr	r1, [r7, #12]
 8007702:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007706:	4313      	orrs	r3, r2
 8007708:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d155      	bne.n	80077cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	791b      	ldrb	r3, [r3, #4]
 800773a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800773c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	059b      	lsls	r3, r3, #22
 8007742:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007744:	4313      	orrs	r3, r2
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	0151      	lsls	r1, r2, #5
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	440a      	add	r2, r1
 800774e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	e036      	b.n	80077cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007764:	69da      	ldr	r2, [r3, #28]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	f003 030f 	and.w	r3, r3, #15
 800776e:	2101      	movs	r1, #1
 8007770:	fa01 f303 	lsl.w	r3, r1, r3
 8007774:	041b      	lsls	r3, r3, #16
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800777c:	4313      	orrs	r3, r2
 800777e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4413      	add	r3, r2
 8007788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d11a      	bne.n	80077cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	791b      	ldrb	r3, [r3, #4]
 80077b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077b2:	430b      	orrs	r3, r1
 80077b4:	4313      	orrs	r3, r2
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
	...

080077dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	785b      	ldrb	r3, [r3, #1]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d161      	bne.n	80078bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800780a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800780e:	d11f      	bne.n	8007850 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	440a      	add	r2, r1
 8007826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800782a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800782e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	440a      	add	r2, r1
 8007846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800784a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800784e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007856:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	2101      	movs	r1, #1
 8007862:	fa01 f303 	lsl.w	r3, r1, r3
 8007866:	b29b      	uxth	r3, r3
 8007868:	43db      	mvns	r3, r3
 800786a:	68f9      	ldr	r1, [r7, #12]
 800786c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007870:	4013      	ands	r3, r2
 8007872:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800787a:	69da      	ldr	r2, [r3, #28]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	f003 030f 	and.w	r3, r3, #15
 8007884:	2101      	movs	r1, #1
 8007886:	fa01 f303 	lsl.w	r3, r1, r3
 800788a:	b29b      	uxth	r3, r3
 800788c:	43db      	mvns	r3, r3
 800788e:	68f9      	ldr	r1, [r7, #12]
 8007890:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007894:	4013      	ands	r3, r2
 8007896:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	0159      	lsls	r1, r3, #5
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	440b      	add	r3, r1
 80078ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b2:	4619      	mov	r1, r3
 80078b4:	4b35      	ldr	r3, [pc, #212]	@ (800798c <USB_DeactivateEndpoint+0x1b0>)
 80078b6:	4013      	ands	r3, r2
 80078b8:	600b      	str	r3, [r1, #0]
 80078ba:	e060      	b.n	800797e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078d2:	d11f      	bne.n	8007914 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	0151      	lsls	r1, r2, #5
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	440a      	add	r2, r1
 80078ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80078f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	0151      	lsls	r1, r2, #5
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	440a      	add	r2, r1
 800790a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800790e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007912:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800791a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	f003 030f 	and.w	r3, r3, #15
 8007924:	2101      	movs	r1, #1
 8007926:	fa01 f303 	lsl.w	r3, r1, r3
 800792a:	041b      	lsls	r3, r3, #16
 800792c:	43db      	mvns	r3, r3
 800792e:	68f9      	ldr	r1, [r7, #12]
 8007930:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007934:	4013      	ands	r3, r2
 8007936:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800793e:	69da      	ldr	r2, [r3, #28]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	2101      	movs	r1, #1
 800794a:	fa01 f303 	lsl.w	r3, r1, r3
 800794e:	041b      	lsls	r3, r3, #16
 8007950:	43db      	mvns	r3, r3
 8007952:	68f9      	ldr	r1, [r7, #12]
 8007954:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007958:	4013      	ands	r3, r2
 800795a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	0159      	lsls	r1, r3, #5
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	440b      	add	r3, r1
 8007972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007976:	4619      	mov	r1, r3
 8007978:	4b05      	ldr	r3, [pc, #20]	@ (8007990 <USB_DeactivateEndpoint+0x1b4>)
 800797a:	4013      	ands	r3, r2
 800797c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	ec337800 	.word	0xec337800
 8007990:	eff37800 	.word	0xeff37800

08007994 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08a      	sub	sp, #40	@ 0x28
 8007998:	af02      	add	r7, sp, #8
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	785b      	ldrb	r3, [r3, #1]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	f040 817a 	bne.w	8007caa <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d132      	bne.n	8007a24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	0151      	lsls	r1, r2, #5
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	440a      	add	r2, r1
 80079d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079d8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80079dc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80079e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	0151      	lsls	r1, r2, #5
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	440a      	add	r2, r1
 80079f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	0151      	lsls	r1, r2, #5
 8007a14:	69fa      	ldr	r2, [r7, #28]
 8007a16:	440a      	add	r2, r1
 8007a18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a1c:	0cdb      	lsrs	r3, r3, #19
 8007a1e:	04db      	lsls	r3, r3, #19
 8007a20:	6113      	str	r3, [r2, #16]
 8007a22:	e092      	b.n	8007b4a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	0151      	lsls	r1, r2, #5
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	440a      	add	r2, r1
 8007a3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a3e:	0cdb      	lsrs	r3, r3, #19
 8007a40:	04db      	lsls	r3, r3, #19
 8007a42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	0151      	lsls	r1, r2, #5
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	440a      	add	r2, r1
 8007a5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007a62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007a66:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d11a      	bne.n	8007aa4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d903      	bls.n	8007a82 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	0151      	lsls	r1, r2, #5
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	440a      	add	r2, r1
 8007a98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007aa0:	6113      	str	r3, [r2, #16]
 8007aa2:	e01b      	b.n	8007adc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	6919      	ldr	r1, [r3, #16]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	440b      	add	r3, r1
 8007abc:	1e59      	subs	r1, r3, #1
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ac6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007ac8:	4ba2      	ldr	r3, [pc, #648]	@ (8007d54 <USB_EPStartXfer+0x3c0>)
 8007aca:	400b      	ands	r3, r1
 8007acc:	69b9      	ldr	r1, [r7, #24]
 8007ace:	0148      	lsls	r0, r1, #5
 8007ad0:	69f9      	ldr	r1, [r7, #28]
 8007ad2:	4401      	add	r1, r0
 8007ad4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae8:	691a      	ldr	r2, [r3, #16]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007af2:	69b9      	ldr	r1, [r7, #24]
 8007af4:	0148      	lsls	r0, r1, #5
 8007af6:	69f9      	ldr	r1, [r7, #28]
 8007af8:	4401      	add	r1, r0
 8007afa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007afe:	4313      	orrs	r3, r2
 8007b00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	791b      	ldrb	r3, [r3, #4]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d11f      	bne.n	8007b4a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	0151      	lsls	r1, r2, #5
 8007b1c:	69fa      	ldr	r2, [r7, #28]
 8007b1e:	440a      	add	r2, r1
 8007b20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b24:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007b28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	0151      	lsls	r1, r2, #5
 8007b3c:	69fa      	ldr	r2, [r7, #28]
 8007b3e:	440a      	add	r2, r1
 8007b40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d14b      	bne.n	8007be8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d009      	beq.n	8007b6c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b64:	461a      	mov	r2, r3
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	791b      	ldrb	r3, [r3, #4]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d128      	bne.n	8007bc6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d110      	bne.n	8007ba6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	0151      	lsls	r1, r2, #5
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	440a      	add	r2, r1
 8007b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b9e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	e00f      	b.n	8007bc6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bc4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	0151      	lsls	r1, r2, #5
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	440a      	add	r2, r1
 8007bdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007be0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	e165      	b.n	8007eb4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	0151      	lsls	r1, r2, #5
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c02:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	791b      	ldrb	r3, [r3, #4]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d015      	beq.n	8007c3c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 814d 	beq.w	8007eb4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c30:	69f9      	ldr	r1, [r7, #28]
 8007c32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c36:	4313      	orrs	r3, r2
 8007c38:	634b      	str	r3, [r1, #52]	@ 0x34
 8007c3a:	e13b      	b.n	8007eb4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d110      	bne.n	8007c6e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69ba      	ldr	r2, [r7, #24]
 8007c5c:	0151      	lsls	r1, r2, #5
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	440a      	add	r2, r1
 8007c62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	e00f      	b.n	8007c8e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	0151      	lsls	r1, r2, #5
 8007c80:	69fa      	ldr	r2, [r7, #28]
 8007c82:	440a      	add	r2, r1
 8007c84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	68d9      	ldr	r1, [r3, #12]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	781a      	ldrb	r2, [r3, #0]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	b298      	uxth	r0, r3
 8007c9c:	79fb      	ldrb	r3, [r7, #7]
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f9b8 	bl	8008018 <USB_WritePacket>
 8007ca8:	e104      	b.n	8007eb4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	0151      	lsls	r1, r2, #5
 8007cbc:	69fa      	ldr	r2, [r7, #28]
 8007cbe:	440a      	add	r2, r1
 8007cc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cc4:	0cdb      	lsrs	r3, r3, #19
 8007cc6:	04db      	lsls	r3, r3, #19
 8007cc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	0151      	lsls	r1, r2, #5
 8007cdc:	69fa      	ldr	r2, [r7, #28]
 8007cde:	440a      	add	r2, r1
 8007ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ce4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007ce8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007cec:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d131      	bne.n	8007d58 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	689a      	ldr	r2, [r3, #8]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	689a      	ldr	r2, [r3, #8]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d18:	691a      	ldr	r2, [r3, #16]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d22:	69b9      	ldr	r1, [r7, #24]
 8007d24:	0148      	lsls	r0, r1, #5
 8007d26:	69f9      	ldr	r1, [r7, #28]
 8007d28:	4401      	add	r1, r0
 8007d2a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	0151      	lsls	r1, r2, #5
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	440a      	add	r2, r1
 8007d48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d50:	6113      	str	r3, [r2, #16]
 8007d52:	e061      	b.n	8007e18 <USB_EPStartXfer+0x484>
 8007d54:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d123      	bne.n	8007da8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d6c:	691a      	ldr	r2, [r3, #16]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d76:	69b9      	ldr	r1, [r7, #24]
 8007d78:	0148      	lsls	r0, r1, #5
 8007d7a:	69f9      	ldr	r1, [r7, #28]
 8007d7c:	4401      	add	r1, r0
 8007d7e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007d82:	4313      	orrs	r3, r2
 8007d84:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	0151      	lsls	r1, r2, #5
 8007d98:	69fa      	ldr	r2, [r7, #28]
 8007d9a:	440a      	add	r2, r1
 8007d9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007da0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007da4:	6113      	str	r3, [r2, #16]
 8007da6:	e037      	b.n	8007e18 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	691a      	ldr	r2, [r3, #16]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	4413      	add	r3, r2
 8007db2:	1e5a      	subs	r2, r3, #1
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dbc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	8afa      	ldrh	r2, [r7, #22]
 8007dc4:	fb03 f202 	mul.w	r2, r3, r2
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd8:	691a      	ldr	r2, [r3, #16]
 8007dda:	8afb      	ldrh	r3, [r7, #22]
 8007ddc:	04d9      	lsls	r1, r3, #19
 8007dde:	4b38      	ldr	r3, [pc, #224]	@ (8007ec0 <USB_EPStartXfer+0x52c>)
 8007de0:	400b      	ands	r3, r1
 8007de2:	69b9      	ldr	r1, [r7, #24]
 8007de4:	0148      	lsls	r0, r1, #5
 8007de6:	69f9      	ldr	r1, [r7, #28]
 8007de8:	4401      	add	r1, r0
 8007dea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007dee:	4313      	orrs	r3, r2
 8007df0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfe:	691a      	ldr	r2, [r3, #16]
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e08:	69b9      	ldr	r1, [r7, #24]
 8007e0a:	0148      	lsls	r0, r1, #5
 8007e0c:	69f9      	ldr	r1, [r7, #28]
 8007e0e:	4401      	add	r1, r0
 8007e10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e14:	4313      	orrs	r3, r2
 8007e16:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007e18:	79fb      	ldrb	r3, [r7, #7]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d10d      	bne.n	8007e3a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	68d9      	ldr	r1, [r3, #12]
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e36:	460a      	mov	r2, r1
 8007e38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	791b      	ldrb	r3, [r3, #4]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d128      	bne.n	8007e94 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d110      	bne.n	8007e74 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	0151      	lsls	r1, r2, #5
 8007e64:	69fa      	ldr	r2, [r7, #28]
 8007e66:	440a      	add	r2, r1
 8007e68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	e00f      	b.n	8007e94 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	0151      	lsls	r1, r2, #5
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	440a      	add	r2, r1
 8007e8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	0151      	lsls	r1, r2, #5
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	440a      	add	r2, r1
 8007eaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007eb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3720      	adds	r7, #32
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	1ff80000 	.word	0x1ff80000

08007ec4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	785b      	ldrb	r3, [r3, #1]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d14a      	bne.n	8007f78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007efa:	f040 8086 	bne.w	800800a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	7812      	ldrb	r2, [r2, #0]
 8007f12:	0151      	lsls	r1, r2, #5
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	440a      	add	r2, r1
 8007f18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	7812      	ldrb	r2, [r2, #0]
 8007f36:	0151      	lsls	r1, r2, #5
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	440a      	add	r2, r1
 8007f3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d902      	bls.n	8007f5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	75fb      	strb	r3, [r7, #23]
          break;
 8007f5a:	e056      	b.n	800800a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f74:	d0e7      	beq.n	8007f46 <USB_EPStopXfer+0x82>
 8007f76:	e048      	b.n	800800a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f90:	d13b      	bne.n	800800a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	7812      	ldrb	r2, [r2, #0]
 8007fa6:	0151      	lsls	r1, r2, #5
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	440a      	add	r2, r1
 8007fac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fb0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007fb4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	7812      	ldrb	r2, [r2, #0]
 8007fca:	0151      	lsls	r1, r2, #5
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	440a      	add	r2, r1
 8007fd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fd8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d902      	bls.n	8007ff0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	75fb      	strb	r3, [r7, #23]
          break;
 8007fee:	e00c      	b.n	800800a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008004:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008008:	d0e7      	beq.n	8007fda <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800800a:	7dfb      	ldrb	r3, [r7, #23]
}
 800800c:	4618      	mov	r0, r3
 800800e:	371c      	adds	r7, #28
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008018:	b480      	push	{r7}
 800801a:	b089      	sub	sp, #36	@ 0x24
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4611      	mov	r1, r2
 8008024:	461a      	mov	r2, r3
 8008026:	460b      	mov	r3, r1
 8008028:	71fb      	strb	r3, [r7, #7]
 800802a:	4613      	mov	r3, r2
 800802c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008036:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800803a:	2b00      	cmp	r3, #0
 800803c:	d123      	bne.n	8008086 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800803e:	88bb      	ldrh	r3, [r7, #4]
 8008040:	3303      	adds	r3, #3
 8008042:	089b      	lsrs	r3, r3, #2
 8008044:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008046:	2300      	movs	r3, #0
 8008048:	61bb      	str	r3, [r7, #24]
 800804a:	e018      	b.n	800807e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	031a      	lsls	r2, r3, #12
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	4413      	add	r3, r2
 8008054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008058:	461a      	mov	r2, r3
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	3301      	adds	r3, #1
 8008064:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	3301      	adds	r3, #1
 800806a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	3301      	adds	r3, #1
 8008070:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	3301      	adds	r3, #1
 8008076:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	3301      	adds	r3, #1
 800807c:	61bb      	str	r3, [r7, #24]
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	429a      	cmp	r2, r3
 8008084:	d3e2      	bcc.n	800804c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3724      	adds	r7, #36	@ 0x24
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008094:	b480      	push	{r7}
 8008096:	b08b      	sub	sp, #44	@ 0x2c
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	4613      	mov	r3, r2
 80080a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	089b      	lsrs	r3, r3, #2
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	f003 0303 	and.w	r3, r3, #3
 80080b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80080ba:	2300      	movs	r3, #0
 80080bc:	623b      	str	r3, [r7, #32]
 80080be:	e014      	b.n	80080ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80080cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ce:	3301      	adds	r3, #1
 80080d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d4:	3301      	adds	r3, #1
 80080d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080da:	3301      	adds	r3, #1
 80080dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	3301      	adds	r3, #1
 80080e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	3301      	adds	r3, #1
 80080e8:	623b      	str	r3, [r7, #32]
 80080ea:	6a3a      	ldr	r2, [r7, #32]
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d3e6      	bcc.n	80080c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080f2:	8bfb      	ldrh	r3, [r7, #30]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01e      	beq.n	8008136 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008102:	461a      	mov	r2, r3
 8008104:	f107 0310 	add.w	r3, r7, #16
 8008108:	6812      	ldr	r2, [r2, #0]
 800810a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	b2db      	uxtb	r3, r3
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	fa22 f303 	lsr.w	r3, r2, r3
 8008118:	b2da      	uxtb	r2, r3
 800811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811c:	701a      	strb	r2, [r3, #0]
      i++;
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	3301      	adds	r3, #1
 8008122:	623b      	str	r3, [r7, #32]
      pDest++;
 8008124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008126:	3301      	adds	r3, #1
 8008128:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800812a:	8bfb      	ldrh	r3, [r7, #30]
 800812c:	3b01      	subs	r3, #1
 800812e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008130:	8bfb      	ldrh	r3, [r7, #30]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1ea      	bne.n	800810c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008138:	4618      	mov	r0, r3
 800813a:	372c      	adds	r7, #44	@ 0x2c
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	785b      	ldrb	r3, [r3, #1]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d12c      	bne.n	80081ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	db12      	blt.n	8008198 <USB_EPSetStall+0x54>
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00f      	beq.n	8008198 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	0151      	lsls	r1, r2, #5
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	440a      	add	r2, r1
 800818e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008192:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008196:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	0151      	lsls	r1, r2, #5
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	440a      	add	r2, r1
 80081ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081b6:	6013      	str	r3, [r2, #0]
 80081b8:	e02b      	b.n	8008212 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	db12      	blt.n	80081f2 <USB_EPSetStall+0xae>
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00f      	beq.n	80081f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	0151      	lsls	r1, r2, #5
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	440a      	add	r2, r1
 80081e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80081f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	0151      	lsls	r1, r2, #5
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	440a      	add	r2, r1
 8008208:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800820c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008210:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	785b      	ldrb	r3, [r3, #1]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d128      	bne.n	800828e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	0151      	lsls	r1, r2, #5
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	440a      	add	r2, r1
 8008252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008256:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800825a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	791b      	ldrb	r3, [r3, #4]
 8008260:	2b03      	cmp	r3, #3
 8008262:	d003      	beq.n	800826c <USB_EPClearStall+0x4c>
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	791b      	ldrb	r3, [r3, #4]
 8008268:	2b02      	cmp	r3, #2
 800826a:	d138      	bne.n	80082de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	0151      	lsls	r1, r2, #5
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	440a      	add	r2, r1
 8008282:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	e027      	b.n	80082de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	0151      	lsls	r1, r2, #5
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	440a      	add	r2, r1
 80082a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80082ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	791b      	ldrb	r3, [r3, #4]
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d003      	beq.n	80082be <USB_EPClearStall+0x9e>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	791b      	ldrb	r3, [r3, #4]
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d10f      	bne.n	80082de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	0151      	lsls	r1, r2, #5
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	440a      	add	r2, r1
 80082d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800830a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800830e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	011b      	lsls	r3, r3, #4
 800831c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008320:	68f9      	ldr	r1, [r7, #12]
 8008322:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008326:	4313      	orrs	r3, r2
 8008328:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008352:	f023 0303 	bic.w	r3, r3, #3
 8008356:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008366:	f023 0302 	bic.w	r3, r3, #2
 800836a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800837a:	b480      	push	{r7}
 800837c:	b085      	sub	sp, #20
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008394:	f023 0303 	bic.w	r3, r3, #3
 8008398:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083a8:	f043 0302 	orr.w	r3, r3, #2
 80083ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3714      	adds	r7, #20
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4013      	ands	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083d4:	68fb      	ldr	r3, [r7, #12]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b085      	sub	sp, #20
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	4013      	ands	r3, r2
 8008404:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	0c1b      	lsrs	r3, r3, #16
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008416:	b480      	push	{r7}
 8008418:	b085      	sub	sp, #20
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	4013      	ands	r3, r2
 8008438:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	b29b      	uxth	r3, r3
}
 800843e:	4618      	mov	r0, r3
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800844a:	b480      	push	{r7}
 800844c:	b085      	sub	sp, #20
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	460b      	mov	r3, r1
 8008454:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800845a:	78fb      	ldrb	r3, [r7, #3]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	4013      	ands	r3, r2
 8008476:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008478:	68bb      	ldr	r3, [r7, #8]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008486:	b480      	push	{r7}
 8008488:	b087      	sub	sp, #28
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	460b      	mov	r3, r1
 8008490:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80084aa:	78fb      	ldrb	r3, [r7, #3]
 80084ac:	f003 030f 	and.w	r3, r3, #15
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	fa22 f303 	lsr.w	r3, r2, r3
 80084b6:	01db      	lsls	r3, r3, #7
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	4313      	orrs	r3, r2
 80084be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	4013      	ands	r3, r2
 80084d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084d4:	68bb      	ldr	r3, [r7, #8]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	f003 0301 	and.w	r3, r3, #1
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008518:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800851c:	f023 0307 	bic.w	r3, r3, #7
 8008520:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008534:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	460b      	mov	r3, r1
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	333c      	adds	r3, #60	@ 0x3c
 800855a:	3304      	adds	r3, #4
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	4a26      	ldr	r2, [pc, #152]	@ (80085fc <USB_EP0_OutStart+0xb8>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d90a      	bls.n	800857e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008574:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008578:	d101      	bne.n	800857e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	e037      	b.n	80085ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008584:	461a      	mov	r2, r3
 8008586:	2300      	movs	r3, #0
 8008588:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008598:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800859c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085ac:	f043 0318 	orr.w	r3, r3, #24
 80085b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085c0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80085c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80085c6:	7afb      	ldrb	r3, [r7, #11]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d10f      	bne.n	80085ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d2:	461a      	mov	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085e6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80085ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	4f54300a 	.word	0x4f54300a

08008600 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3301      	adds	r3, #1
 8008610:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008618:	d901      	bls.n	800861e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e01b      	b.n	8008656 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	2b00      	cmp	r3, #0
 8008624:	daf2      	bge.n	800860c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	f043 0201 	orr.w	r2, r3, #1
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3301      	adds	r3, #1
 800863a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008642:	d901      	bls.n	8008648 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e006      	b.n	8008656 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b01      	cmp	r3, #1
 8008652:	d0f0      	beq.n	8008636 <USB_CoreReset+0x36>

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
	...

08008664 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008670:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008674:	f002 fc88 	bl	800af88 <USBD_static_malloc>
 8008678:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d109      	bne.n	8008694 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	32b0      	adds	r2, #176	@ 0xb0
 800868a:	2100      	movs	r1, #0
 800868c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008690:	2302      	movs	r3, #2
 8008692:	e0d4      	b.n	800883e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008694:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008698:	2100      	movs	r1, #0
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f003 fad1 	bl	800bc42 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	32b0      	adds	r2, #176	@ 0xb0
 80086aa:	68f9      	ldr	r1, [r7, #12]
 80086ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	32b0      	adds	r2, #176	@ 0xb0
 80086ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	7c1b      	ldrb	r3, [r3, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d138      	bne.n	800873e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80086cc:	4b5e      	ldr	r3, [pc, #376]	@ (8008848 <USBD_CDC_Init+0x1e4>)
 80086ce:	7819      	ldrb	r1, [r3, #0]
 80086d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086d4:	2202      	movs	r2, #2
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f002 fb33 	bl	800ad42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80086dc:	4b5a      	ldr	r3, [pc, #360]	@ (8008848 <USBD_CDC_Init+0x1e4>)
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	f003 020f 	and.w	r2, r3, #15
 80086e4:	6879      	ldr	r1, [r7, #4]
 80086e6:	4613      	mov	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	440b      	add	r3, r1
 80086f0:	3324      	adds	r3, #36	@ 0x24
 80086f2:	2201      	movs	r2, #1
 80086f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80086f6:	4b55      	ldr	r3, [pc, #340]	@ (800884c <USBD_CDC_Init+0x1e8>)
 80086f8:	7819      	ldrb	r1, [r3, #0]
 80086fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086fe:	2202      	movs	r2, #2
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f002 fb1e 	bl	800ad42 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008706:	4b51      	ldr	r3, [pc, #324]	@ (800884c <USBD_CDC_Init+0x1e8>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	f003 020f 	and.w	r2, r3, #15
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	4613      	mov	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	440b      	add	r3, r1
 800871a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800871e:	2201      	movs	r2, #1
 8008720:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008722:	4b4b      	ldr	r3, [pc, #300]	@ (8008850 <USBD_CDC_Init+0x1ec>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	f003 020f 	and.w	r2, r3, #15
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	4613      	mov	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	440b      	add	r3, r1
 8008736:	3326      	adds	r3, #38	@ 0x26
 8008738:	2210      	movs	r2, #16
 800873a:	801a      	strh	r2, [r3, #0]
 800873c:	e035      	b.n	80087aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800873e:	4b42      	ldr	r3, [pc, #264]	@ (8008848 <USBD_CDC_Init+0x1e4>)
 8008740:	7819      	ldrb	r1, [r3, #0]
 8008742:	2340      	movs	r3, #64	@ 0x40
 8008744:	2202      	movs	r2, #2
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f002 fafb 	bl	800ad42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800874c:	4b3e      	ldr	r3, [pc, #248]	@ (8008848 <USBD_CDC_Init+0x1e4>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	f003 020f 	and.w	r2, r3, #15
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	4613      	mov	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	440b      	add	r3, r1
 8008760:	3324      	adds	r3, #36	@ 0x24
 8008762:	2201      	movs	r2, #1
 8008764:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008766:	4b39      	ldr	r3, [pc, #228]	@ (800884c <USBD_CDC_Init+0x1e8>)
 8008768:	7819      	ldrb	r1, [r3, #0]
 800876a:	2340      	movs	r3, #64	@ 0x40
 800876c:	2202      	movs	r2, #2
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f002 fae7 	bl	800ad42 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008774:	4b35      	ldr	r3, [pc, #212]	@ (800884c <USBD_CDC_Init+0x1e8>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	f003 020f 	and.w	r2, r3, #15
 800877c:	6879      	ldr	r1, [r7, #4]
 800877e:	4613      	mov	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	440b      	add	r3, r1
 8008788:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800878c:	2201      	movs	r2, #1
 800878e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008790:	4b2f      	ldr	r3, [pc, #188]	@ (8008850 <USBD_CDC_Init+0x1ec>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	f003 020f 	and.w	r2, r3, #15
 8008798:	6879      	ldr	r1, [r7, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	440b      	add	r3, r1
 80087a4:	3326      	adds	r3, #38	@ 0x26
 80087a6:	2210      	movs	r2, #16
 80087a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80087aa:	4b29      	ldr	r3, [pc, #164]	@ (8008850 <USBD_CDC_Init+0x1ec>)
 80087ac:	7819      	ldrb	r1, [r3, #0]
 80087ae:	2308      	movs	r3, #8
 80087b0:	2203      	movs	r2, #3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f002 fac5 	bl	800ad42 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80087b8:	4b25      	ldr	r3, [pc, #148]	@ (8008850 <USBD_CDC_Init+0x1ec>)
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	f003 020f 	and.w	r2, r3, #15
 80087c0:	6879      	ldr	r1, [r7, #4]
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	440b      	add	r3, r1
 80087cc:	3324      	adds	r3, #36	@ 0x24
 80087ce:	2201      	movs	r2, #1
 80087d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	33b0      	adds	r3, #176	@ 0xb0
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008808:	2302      	movs	r3, #2
 800880a:	e018      	b.n	800883e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	7c1b      	ldrb	r3, [r3, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10a      	bne.n	800882a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008814:	4b0d      	ldr	r3, [pc, #52]	@ (800884c <USBD_CDC_Init+0x1e8>)
 8008816:	7819      	ldrb	r1, [r3, #0]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800881e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f002 fb7c 	bl	800af20 <USBD_LL_PrepareReceive>
 8008828:	e008      	b.n	800883c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800882a:	4b08      	ldr	r3, [pc, #32]	@ (800884c <USBD_CDC_Init+0x1e8>)
 800882c:	7819      	ldrb	r1, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008834:	2340      	movs	r3, #64	@ 0x40
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f002 fb72 	bl	800af20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20000093 	.word	0x20000093
 800884c:	20000094 	.word	0x20000094
 8008850:	20000095 	.word	0x20000095

08008854 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008860:	4b3a      	ldr	r3, [pc, #232]	@ (800894c <USBD_CDC_DeInit+0xf8>)
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f002 fa91 	bl	800ad8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800886c:	4b37      	ldr	r3, [pc, #220]	@ (800894c <USBD_CDC_DeInit+0xf8>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	f003 020f 	and.w	r2, r3, #15
 8008874:	6879      	ldr	r1, [r7, #4]
 8008876:	4613      	mov	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	440b      	add	r3, r1
 8008880:	3324      	adds	r3, #36	@ 0x24
 8008882:	2200      	movs	r2, #0
 8008884:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008886:	4b32      	ldr	r3, [pc, #200]	@ (8008950 <USBD_CDC_DeInit+0xfc>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f002 fa7e 	bl	800ad8e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008892:	4b2f      	ldr	r3, [pc, #188]	@ (8008950 <USBD_CDC_DeInit+0xfc>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	f003 020f 	and.w	r2, r3, #15
 800889a:	6879      	ldr	r1, [r7, #4]
 800889c:	4613      	mov	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	440b      	add	r3, r1
 80088a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80088aa:	2200      	movs	r2, #0
 80088ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80088ae:	4b29      	ldr	r3, [pc, #164]	@ (8008954 <USBD_CDC_DeInit+0x100>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f002 fa6a 	bl	800ad8e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80088ba:	4b26      	ldr	r3, [pc, #152]	@ (8008954 <USBD_CDC_DeInit+0x100>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	f003 020f 	and.w	r2, r3, #15
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	4613      	mov	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	440b      	add	r3, r1
 80088ce:	3324      	adds	r3, #36	@ 0x24
 80088d0:	2200      	movs	r2, #0
 80088d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80088d4:	4b1f      	ldr	r3, [pc, #124]	@ (8008954 <USBD_CDC_DeInit+0x100>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	f003 020f 	and.w	r2, r3, #15
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	4613      	mov	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	440b      	add	r3, r1
 80088e8:	3326      	adds	r3, #38	@ 0x26
 80088ea:	2200      	movs	r2, #0
 80088ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	32b0      	adds	r2, #176	@ 0xb0
 80088f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01f      	beq.n	8008940 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	33b0      	adds	r3, #176	@ 0xb0
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	32b0      	adds	r2, #176	@ 0xb0
 800891e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008922:	4618      	mov	r0, r3
 8008924:	f002 fb3e 	bl	800afa4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	32b0      	adds	r2, #176	@ 0xb0
 8008932:	2100      	movs	r1, #0
 8008934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20000093 	.word	0x20000093
 8008950:	20000094 	.word	0x20000094
 8008954:	20000095 	.word	0x20000095

08008958 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	32b0      	adds	r2, #176	@ 0xb0
 800896c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008970:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008972:	2300      	movs	r3, #0
 8008974:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008976:	2300      	movs	r3, #0
 8008978:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d101      	bne.n	8008988 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008984:	2303      	movs	r3, #3
 8008986:	e0bf      	b.n	8008b08 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008990:	2b00      	cmp	r3, #0
 8008992:	d050      	beq.n	8008a36 <USBD_CDC_Setup+0xde>
 8008994:	2b20      	cmp	r3, #32
 8008996:	f040 80af 	bne.w	8008af8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	88db      	ldrh	r3, [r3, #6]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d03a      	beq.n	8008a18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b25b      	sxtb	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	da1b      	bge.n	80089e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	33b0      	adds	r3, #176	@ 0xb0
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80089c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	88d2      	ldrh	r2, [r2, #6]
 80089c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	88db      	ldrh	r3, [r3, #6]
 80089ce:	2b07      	cmp	r3, #7
 80089d0:	bf28      	it	cs
 80089d2:	2307      	movcs	r3, #7
 80089d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	89fa      	ldrh	r2, [r7, #14]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f001 fd87 	bl	800a4f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80089e2:	e090      	b.n	8008b06 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	785a      	ldrb	r2, [r3, #1]
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	88db      	ldrh	r3, [r3, #6]
 80089f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80089f4:	d803      	bhi.n	80089fe <USBD_CDC_Setup+0xa6>
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	88db      	ldrh	r3, [r3, #6]
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	e000      	b.n	8008a00 <USBD_CDC_Setup+0xa8>
 80089fe:	2240      	movs	r2, #64	@ 0x40
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008a06:	6939      	ldr	r1, [r7, #16]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008a0e:	461a      	mov	r2, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 fd99 	bl	800a548 <USBD_CtlPrepareRx>
      break;
 8008a16:	e076      	b.n	8008b06 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	33b0      	adds	r3, #176	@ 0xb0
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	7850      	ldrb	r0, [r2, #1]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	4798      	blx	r3
      break;
 8008a34:	e067      	b.n	8008b06 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	785b      	ldrb	r3, [r3, #1]
 8008a3a:	2b0b      	cmp	r3, #11
 8008a3c:	d851      	bhi.n	8008ae2 <USBD_CDC_Setup+0x18a>
 8008a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a44 <USBD_CDC_Setup+0xec>)
 8008a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a44:	08008a75 	.word	0x08008a75
 8008a48:	08008af1 	.word	0x08008af1
 8008a4c:	08008ae3 	.word	0x08008ae3
 8008a50:	08008ae3 	.word	0x08008ae3
 8008a54:	08008ae3 	.word	0x08008ae3
 8008a58:	08008ae3 	.word	0x08008ae3
 8008a5c:	08008ae3 	.word	0x08008ae3
 8008a60:	08008ae3 	.word	0x08008ae3
 8008a64:	08008ae3 	.word	0x08008ae3
 8008a68:	08008ae3 	.word	0x08008ae3
 8008a6c:	08008a9f 	.word	0x08008a9f
 8008a70:	08008ac9 	.word	0x08008ac9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d107      	bne.n	8008a90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a80:	f107 030a 	add.w	r3, r7, #10
 8008a84:	2202      	movs	r2, #2
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 fd31 	bl	800a4f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a8e:	e032      	b.n	8008af6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f001 fcbb 	bl	800a40e <USBD_CtlError>
            ret = USBD_FAIL;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	75fb      	strb	r3, [r7, #23]
          break;
 8008a9c:	e02b      	b.n	8008af6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d107      	bne.n	8008aba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008aaa:	f107 030d 	add.w	r3, r7, #13
 8008aae:	2201      	movs	r2, #1
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f001 fd1c 	bl	800a4f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ab8:	e01d      	b.n	8008af6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f001 fca6 	bl	800a40e <USBD_CtlError>
            ret = USBD_FAIL;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ac6:	e016      	b.n	8008af6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	d00f      	beq.n	8008af4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 fc99 	bl	800a40e <USBD_CtlError>
            ret = USBD_FAIL;
 8008adc:	2303      	movs	r3, #3
 8008ade:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008ae0:	e008      	b.n	8008af4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 fc92 	bl	800a40e <USBD_CtlError>
          ret = USBD_FAIL;
 8008aea:	2303      	movs	r3, #3
 8008aec:	75fb      	strb	r3, [r7, #23]
          break;
 8008aee:	e002      	b.n	8008af6 <USBD_CDC_Setup+0x19e>
          break;
 8008af0:	bf00      	nop
 8008af2:	e008      	b.n	8008b06 <USBD_CDC_Setup+0x1ae>
          break;
 8008af4:	bf00      	nop
      }
      break;
 8008af6:	e006      	b.n	8008b06 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 fc87 	bl	800a40e <USBD_CtlError>
      ret = USBD_FAIL;
 8008b00:	2303      	movs	r3, #3
 8008b02:	75fb      	strb	r3, [r7, #23]
      break;
 8008b04:	bf00      	nop
  }

  return (uint8_t)ret;
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	32b0      	adds	r2, #176	@ 0xb0
 8008b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e065      	b.n	8008c06 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	32b0      	adds	r2, #176	@ 0xb0
 8008b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b4a:	78fb      	ldrb	r3, [r7, #3]
 8008b4c:	f003 020f 	and.w	r2, r3, #15
 8008b50:	6879      	ldr	r1, [r7, #4]
 8008b52:	4613      	mov	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	440b      	add	r3, r1
 8008b5c:	3318      	adds	r3, #24
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d02f      	beq.n	8008bc4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	f003 020f 	and.w	r2, r3, #15
 8008b6a:	6879      	ldr	r1, [r7, #4]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	3318      	adds	r3, #24
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	78fb      	ldrb	r3, [r7, #3]
 8008b7c:	f003 010f 	and.w	r1, r3, #15
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	460b      	mov	r3, r1
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	440b      	add	r3, r1
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4403      	add	r3, r0
 8008b8c:	331c      	adds	r3, #28
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b94:	fb01 f303 	mul.w	r3, r1, r3
 8008b98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d112      	bne.n	8008bc4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008b9e:	78fb      	ldrb	r3, [r7, #3]
 8008ba0:	f003 020f 	and.w	r2, r3, #15
 8008ba4:	6879      	ldr	r1, [r7, #4]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	440b      	add	r3, r1
 8008bb0:	3318      	adds	r3, #24
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008bb6:	78f9      	ldrb	r1, [r7, #3]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	2200      	movs	r2, #0
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f002 f98e 	bl	800aede <USBD_LL_Transmit>
 8008bc2:	e01f      	b.n	8008c04 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	33b0      	adds	r3, #176	@ 0xb0
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d010      	beq.n	8008c04 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	33b0      	adds	r3, #176	@ 0xb0
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008c00:	78fa      	ldrb	r2, [r7, #3]
 8008c02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	460b      	mov	r3, r1
 8008c18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	32b0      	adds	r2, #176	@ 0xb0
 8008c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	32b0      	adds	r2, #176	@ 0xb0
 8008c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e01a      	b.n	8008c76 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f002 f98c 	bl	800af62 <USBD_LL_GetRxDataSize>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	33b0      	adds	r3, #176	@ 0xb0
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008c70:	4611      	mov	r1, r2
 8008c72:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	32b0      	adds	r2, #176	@ 0xb0
 8008c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e024      	b.n	8008cea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	33b0      	adds	r3, #176	@ 0xb0
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d019      	beq.n	8008ce8 <USBD_CDC_EP0_RxReady+0x6a>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008cba:	2bff      	cmp	r3, #255	@ 0xff
 8008cbc:	d014      	beq.n	8008ce8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	33b0      	adds	r3, #176	@ 0xb0
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008cd6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008cde:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	22ff      	movs	r2, #255	@ 0xff
 8008ce4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
	...

08008cf4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008cfc:	2182      	movs	r1, #130	@ 0x82
 8008cfe:	4818      	ldr	r0, [pc, #96]	@ (8008d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d00:	f000 fd4f 	bl	80097a2 <USBD_GetEpDesc>
 8008d04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d06:	2101      	movs	r1, #1
 8008d08:	4815      	ldr	r0, [pc, #84]	@ (8008d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d0a:	f000 fd4a 	bl	80097a2 <USBD_GetEpDesc>
 8008d0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d10:	2181      	movs	r1, #129	@ 0x81
 8008d12:	4813      	ldr	r0, [pc, #76]	@ (8008d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008d14:	f000 fd45 	bl	80097a2 <USBD_GetEpDesc>
 8008d18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	2210      	movs	r2, #16
 8008d24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d006      	beq.n	8008d3a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d34:	711a      	strb	r2, [r3, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d006      	beq.n	8008d4e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d48:	711a      	strb	r2, [r3, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2243      	movs	r2, #67	@ 0x43
 8008d52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d54:	4b02      	ldr	r3, [pc, #8]	@ (8008d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20000050 	.word	0x20000050

08008d64 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d6c:	2182      	movs	r1, #130	@ 0x82
 8008d6e:	4818      	ldr	r0, [pc, #96]	@ (8008dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d70:	f000 fd17 	bl	80097a2 <USBD_GetEpDesc>
 8008d74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d76:	2101      	movs	r1, #1
 8008d78:	4815      	ldr	r0, [pc, #84]	@ (8008dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d7a:	f000 fd12 	bl	80097a2 <USBD_GetEpDesc>
 8008d7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d80:	2181      	movs	r1, #129	@ 0x81
 8008d82:	4813      	ldr	r0, [pc, #76]	@ (8008dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d84:	f000 fd0d 	bl	80097a2 <USBD_GetEpDesc>
 8008d88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2210      	movs	r2, #16
 8008d94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d006      	beq.n	8008daa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	711a      	strb	r2, [r3, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f042 0202 	orr.w	r2, r2, #2
 8008da8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d006      	beq.n	8008dbe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	711a      	strb	r2, [r3, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f042 0202 	orr.w	r2, r2, #2
 8008dbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2243      	movs	r2, #67	@ 0x43
 8008dc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008dc4:	4b02      	ldr	r3, [pc, #8]	@ (8008dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000050 	.word	0x20000050

08008dd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ddc:	2182      	movs	r1, #130	@ 0x82
 8008dde:	4818      	ldr	r0, [pc, #96]	@ (8008e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008de0:	f000 fcdf 	bl	80097a2 <USBD_GetEpDesc>
 8008de4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008de6:	2101      	movs	r1, #1
 8008de8:	4815      	ldr	r0, [pc, #84]	@ (8008e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008dea:	f000 fcda 	bl	80097a2 <USBD_GetEpDesc>
 8008dee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008df0:	2181      	movs	r1, #129	@ 0x81
 8008df2:	4813      	ldr	r0, [pc, #76]	@ (8008e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008df4:	f000 fcd5 	bl	80097a2 <USBD_GetEpDesc>
 8008df8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2210      	movs	r2, #16
 8008e04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d006      	beq.n	8008e1a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e14:	711a      	strb	r2, [r3, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d006      	beq.n	8008e2e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e28:	711a      	strb	r2, [r3, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2243      	movs	r2, #67	@ 0x43
 8008e32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e34:	4b02      	ldr	r3, [pc, #8]	@ (8008e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000050 	.word	0x20000050

08008e44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	220a      	movs	r2, #10
 8008e50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008e52:	4b03      	ldr	r3, [pc, #12]	@ (8008e60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	2000000c 	.word	0x2000000c

08008e64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e009      	b.n	8008e8c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	33b0      	adds	r3, #176	@ 0xb0
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4413      	add	r3, r2
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	32b0      	adds	r2, #176	@ 0xb0
 8008eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d101      	bne.n	8008ebe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e008      	b.n	8008ed0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	371c      	adds	r7, #28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	32b0      	adds	r2, #176	@ 0xb0
 8008ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008efc:	2303      	movs	r3, #3
 8008efe:	e004      	b.n	8008f0a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
	...

08008f18 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	32b0      	adds	r2, #176	@ 0xb0
 8008f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008f30:	2301      	movs	r3, #1
 8008f32:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e025      	b.n	8008f8a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d11f      	bne.n	8008f88 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008f50:	4b10      	ldr	r3, [pc, #64]	@ (8008f94 <USBD_CDC_TransmitPacket+0x7c>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	f003 020f 	and.w	r2, r3, #15
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	4613      	mov	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4403      	add	r3, r0
 8008f6a:	3318      	adds	r3, #24
 8008f6c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008f6e:	4b09      	ldr	r3, [pc, #36]	@ (8008f94 <USBD_CDC_TransmitPacket+0x7c>)
 8008f70:	7819      	ldrb	r1, [r3, #0]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 ffad 	bl	800aede <USBD_LL_Transmit>

    ret = USBD_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	20000093 	.word	0x20000093

08008f98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	32b0      	adds	r2, #176	@ 0xb0
 8008faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	32b0      	adds	r2, #176	@ 0xb0
 8008fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e018      	b.n	8008ff8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	7c1b      	ldrb	r3, [r3, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008fce:	4b0c      	ldr	r3, [pc, #48]	@ (8009000 <USBD_CDC_ReceivePacket+0x68>)
 8008fd0:	7819      	ldrb	r1, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008fd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 ff9f 	bl	800af20 <USBD_LL_PrepareReceive>
 8008fe2:	e008      	b.n	8008ff6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008fe4:	4b06      	ldr	r3, [pc, #24]	@ (8009000 <USBD_CDC_ReceivePacket+0x68>)
 8008fe6:	7819      	ldrb	r1, [r3, #0]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008fee:	2340      	movs	r3, #64	@ 0x40
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 ff95 	bl	800af20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20000094 	.word	0x20000094

08009004 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	4613      	mov	r3, r2
 8009010:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	e01f      	b.n	800905c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d003      	beq.n	8009042 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	79fa      	ldrb	r2, [r7, #7]
 800904e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f001 fe0f 	bl	800ac74 <USBD_LL_Init>
 8009056:	4603      	mov	r3, r0
 8009058:	75fb      	strb	r3, [r7, #23]

  return ret;
 800905a:	7dfb      	ldrb	r3, [r7, #23]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800906e:	2300      	movs	r3, #0
 8009070:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009078:	2303      	movs	r3, #3
 800907a:	e025      	b.n	80090c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	32ae      	adds	r2, #174	@ 0xae
 800908e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00f      	beq.n	80090b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	32ae      	adds	r2, #174	@ 0xae
 80090a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a8:	f107 020e 	add.w	r2, r7, #14
 80090ac:	4610      	mov	r0, r2
 80090ae:	4798      	blx	r3
 80090b0:	4602      	mov	r2, r0
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80090be:	1c5a      	adds	r2, r3, #1
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 fe17 	bl	800ad0c <USBD_LL_Start>
 80090de:	4603      	mov	r3, r0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	370c      	adds	r7, #12
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	460b      	mov	r3, r1
 8009108:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009114:	2b00      	cmp	r3, #0
 8009116:	d009      	beq.n	800912c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	78fa      	ldrb	r2, [r7, #3]
 8009122:	4611      	mov	r1, r2
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	4798      	blx	r3
 8009128:	4603      	mov	r3, r0
 800912a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800912c:	7bfb      	ldrb	r3, [r7, #15]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	78fa      	ldrb	r2, [r7, #3]
 8009150:	4611      	mov	r1, r2
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	4798      	blx	r3
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800915c:	2303      	movs	r3, #3
 800915e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	4618      	mov	r0, r3
 800917e:	f001 f90c 	bl	800a39a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009190:	461a      	mov	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800919e:	f003 031f 	and.w	r3, r3, #31
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d01a      	beq.n	80091dc <USBD_LL_SetupStage+0x72>
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d822      	bhi.n	80091f0 <USBD_LL_SetupStage+0x86>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <USBD_LL_SetupStage+0x4a>
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d00a      	beq.n	80091c8 <USBD_LL_SetupStage+0x5e>
 80091b2:	e01d      	b.n	80091f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fb63 	bl	8009888 <USBD_StdDevReq>
 80091c2:	4603      	mov	r3, r0
 80091c4:	73fb      	strb	r3, [r7, #15]
      break;
 80091c6:	e020      	b.n	800920a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fbcb 	bl	800996c <USBD_StdItfReq>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73fb      	strb	r3, [r7, #15]
      break;
 80091da:	e016      	b.n	800920a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fc2d 	bl	8009a44 <USBD_StdEPReq>
 80091ea:	4603      	mov	r3, r0
 80091ec:	73fb      	strb	r3, [r7, #15]
      break;
 80091ee:	e00c      	b.n	800920a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80091f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f001 fde4 	bl	800adcc <USBD_LL_StallEP>
 8009204:	4603      	mov	r3, r0
 8009206:	73fb      	strb	r3, [r7, #15]
      break;
 8009208:	bf00      	nop
  }

  return ret;
 800920a:	7bfb      	ldrb	r3, [r7, #15]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	460b      	mov	r3, r1
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009226:	7afb      	ldrb	r3, [r7, #11]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d16e      	bne.n	800930a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009232:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800923a:	2b03      	cmp	r3, #3
 800923c:	f040 8098 	bne.w	8009370 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	429a      	cmp	r2, r3
 800924a:	d913      	bls.n	8009274 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	1ad2      	subs	r2, r2, r3
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	68da      	ldr	r2, [r3, #12]
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	4293      	cmp	r3, r2
 8009264:	bf28      	it	cs
 8009266:	4613      	movcs	r3, r2
 8009268:	461a      	mov	r2, r3
 800926a:	6879      	ldr	r1, [r7, #4]
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f001 f988 	bl	800a582 <USBD_CtlContinueRx>
 8009272:	e07d      	b.n	8009370 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800927a:	f003 031f 	and.w	r3, r3, #31
 800927e:	2b02      	cmp	r3, #2
 8009280:	d014      	beq.n	80092ac <USBD_LL_DataOutStage+0x98>
 8009282:	2b02      	cmp	r3, #2
 8009284:	d81d      	bhi.n	80092c2 <USBD_LL_DataOutStage+0xae>
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <USBD_LL_DataOutStage+0x7c>
 800928a:	2b01      	cmp	r3, #1
 800928c:	d003      	beq.n	8009296 <USBD_LL_DataOutStage+0x82>
 800928e:	e018      	b.n	80092c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009290:	2300      	movs	r3, #0
 8009292:	75bb      	strb	r3, [r7, #22]
            break;
 8009294:	e018      	b.n	80092c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800929c:	b2db      	uxtb	r3, r3
 800929e:	4619      	mov	r1, r3
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 fa64 	bl	800976e <USBD_CoreFindIF>
 80092a6:	4603      	mov	r3, r0
 80092a8:	75bb      	strb	r3, [r7, #22]
            break;
 80092aa:	e00d      	b.n	80092c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	4619      	mov	r1, r3
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 fa66 	bl	8009788 <USBD_CoreFindEP>
 80092bc:	4603      	mov	r3, r0
 80092be:	75bb      	strb	r3, [r7, #22]
            break;
 80092c0:	e002      	b.n	80092c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	75bb      	strb	r3, [r7, #22]
            break;
 80092c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80092c8:	7dbb      	ldrb	r3, [r7, #22]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d119      	bne.n	8009302 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d113      	bne.n	8009302 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80092da:	7dba      	ldrb	r2, [r7, #22]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	32ae      	adds	r2, #174	@ 0xae
 80092e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00b      	beq.n	8009302 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80092ea:	7dba      	ldrb	r2, [r7, #22]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80092f2:	7dba      	ldrb	r2, [r7, #22]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	32ae      	adds	r2, #174	@ 0xae
 80092f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f001 f94e 	bl	800a5a4 <USBD_CtlSendStatus>
 8009308:	e032      	b.n	8009370 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009310:	b2db      	uxtb	r3, r3
 8009312:	4619      	mov	r1, r3
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 fa37 	bl	8009788 <USBD_CoreFindEP>
 800931a:	4603      	mov	r3, r0
 800931c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800931e:	7dbb      	ldrb	r3, [r7, #22]
 8009320:	2bff      	cmp	r3, #255	@ 0xff
 8009322:	d025      	beq.n	8009370 <USBD_LL_DataOutStage+0x15c>
 8009324:	7dbb      	ldrb	r3, [r7, #22]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d122      	bne.n	8009370 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2b03      	cmp	r3, #3
 8009334:	d117      	bne.n	8009366 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009336:	7dba      	ldrb	r2, [r7, #22]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	32ae      	adds	r2, #174	@ 0xae
 800933c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00f      	beq.n	8009366 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009346:	7dba      	ldrb	r2, [r7, #22]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800934e:	7dba      	ldrb	r2, [r7, #22]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	32ae      	adds	r2, #174	@ 0xae
 8009354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	7afa      	ldrb	r2, [r7, #11]
 800935c:	4611      	mov	r1, r2
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	4798      	blx	r3
 8009362:	4603      	mov	r3, r0
 8009364:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d001      	beq.n	8009370 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	e000      	b.n	8009372 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b086      	sub	sp, #24
 800937e:	af00      	add	r7, sp, #0
 8009380:	60f8      	str	r0, [r7, #12]
 8009382:	460b      	mov	r3, r1
 8009384:	607a      	str	r2, [r7, #4]
 8009386:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009388:	7afb      	ldrb	r3, [r7, #11]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d16f      	bne.n	800946e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	3314      	adds	r3, #20
 8009392:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800939a:	2b02      	cmp	r3, #2
 800939c:	d15a      	bne.n	8009454 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d914      	bls.n	80093d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	689a      	ldr	r2, [r3, #8]
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	1ad2      	subs	r2, r2, r3
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	461a      	mov	r2, r3
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f001 f8b0 	bl	800a526 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093c6:	2300      	movs	r3, #0
 80093c8:	2200      	movs	r2, #0
 80093ca:	2100      	movs	r1, #0
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f001 fda7 	bl	800af20 <USBD_LL_PrepareReceive>
 80093d2:	e03f      	b.n	8009454 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	68da      	ldr	r2, [r3, #12]
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d11c      	bne.n	800941a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d316      	bcc.n	800941a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d20f      	bcs.n	800941a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80093fa:	2200      	movs	r2, #0
 80093fc:	2100      	movs	r1, #0
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f001 f891 	bl	800a526 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800940c:	2300      	movs	r3, #0
 800940e:	2200      	movs	r2, #0
 8009410:	2100      	movs	r1, #0
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f001 fd84 	bl	800af20 <USBD_LL_PrepareReceive>
 8009418:	e01c      	b.n	8009454 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b03      	cmp	r3, #3
 8009424:	d10f      	bne.n	8009446 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d009      	beq.n	8009446 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009446:	2180      	movs	r1, #128	@ 0x80
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f001 fcbf 	bl	800adcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f001 f8bb 	bl	800a5ca <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d03a      	beq.n	80094d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f7ff fe42 	bl	80090e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800946c:	e032      	b.n	80094d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800946e:	7afb      	ldrb	r3, [r7, #11]
 8009470:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009474:	b2db      	uxtb	r3, r3
 8009476:	4619      	mov	r1, r3
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 f985 	bl	8009788 <USBD_CoreFindEP>
 800947e:	4603      	mov	r3, r0
 8009480:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	2bff      	cmp	r3, #255	@ 0xff
 8009486:	d025      	beq.n	80094d4 <USBD_LL_DataInStage+0x15a>
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d122      	bne.n	80094d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b03      	cmp	r3, #3
 8009498:	d11c      	bne.n	80094d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800949a:	7dfa      	ldrb	r2, [r7, #23]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	32ae      	adds	r2, #174	@ 0xae
 80094a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d014      	beq.n	80094d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80094aa:	7dfa      	ldrb	r2, [r7, #23]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80094b2:	7dfa      	ldrb	r2, [r7, #23]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	32ae      	adds	r2, #174	@ 0xae
 80094b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	7afa      	ldrb	r2, [r7, #11]
 80094c0:	4611      	mov	r1, r2
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	4798      	blx	r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80094ca:	7dbb      	ldrb	r3, [r7, #22]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80094d0:	7dbb      	ldrb	r3, [r7, #22]
 80094d2:	e000      	b.n	80094d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009516:	2b00      	cmp	r3, #0
 8009518:	d014      	beq.n	8009544 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00e      	beq.n	8009544 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	6852      	ldr	r2, [r2, #4]
 8009532:	b2d2      	uxtb	r2, r2
 8009534:	4611      	mov	r1, r2
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	4798      	blx	r3
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009540:	2303      	movs	r3, #3
 8009542:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009544:	2340      	movs	r3, #64	@ 0x40
 8009546:	2200      	movs	r2, #0
 8009548:	2100      	movs	r1, #0
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f001 fbf9 	bl	800ad42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2240      	movs	r2, #64	@ 0x40
 800955c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009560:	2340      	movs	r3, #64	@ 0x40
 8009562:	2200      	movs	r2, #0
 8009564:	2180      	movs	r1, #128	@ 0x80
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f001 fbeb 	bl	800ad42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2240      	movs	r2, #64	@ 0x40
 8009576:	621a      	str	r2, [r3, #32]

  return ret;
 8009578:	7bfb      	ldrb	r3, [r7, #15]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	460b      	mov	r3, r1
 800958c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	78fa      	ldrb	r2, [r7, #3]
 8009592:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b083      	sub	sp, #12
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d006      	beq.n	80095c4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2204      	movs	r2, #4
 80095c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b04      	cmp	r3, #4
 80095ec:	d106      	bne.n	80095fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b082      	sub	sp, #8
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b03      	cmp	r3, #3
 800961c:	d110      	bne.n	8009640 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00b      	beq.n	8009640 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800962e:	69db      	ldr	r3, [r3, #28]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d005      	beq.n	8009640 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800963a:	69db      	ldr	r3, [r3, #28]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	32ae      	adds	r2, #174	@ 0xae
 8009660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d101      	bne.n	800966c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009668:	2303      	movs	r3, #3
 800966a:	e01c      	b.n	80096a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b03      	cmp	r3, #3
 8009676:	d115      	bne.n	80096a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	32ae      	adds	r2, #174	@ 0xae
 8009682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00b      	beq.n	80096a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	32ae      	adds	r2, #174	@ 0xae
 8009696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	78fa      	ldrb	r2, [r7, #3]
 800969e:	4611      	mov	r1, r2
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	460b      	mov	r3, r1
 80096b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	32ae      	adds	r2, #174	@ 0xae
 80096c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d101      	bne.n	80096d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e01c      	b.n	800970a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b03      	cmp	r3, #3
 80096da:	d115      	bne.n	8009708 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	32ae      	adds	r2, #174	@ 0xae
 80096e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00b      	beq.n	8009708 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	32ae      	adds	r2, #174	@ 0xae
 80096fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009700:	78fa      	ldrb	r2, [r7, #3]
 8009702:	4611      	mov	r1, r2
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009712:	b480      	push	{r7}
 8009714:	b083      	sub	sp, #12
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00e      	beq.n	8009764 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	6852      	ldr	r2, [r2, #4]
 8009752:	b2d2      	uxtb	r2, r2
 8009754:	4611      	mov	r1, r2
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	4798      	blx	r3
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009760:	2303      	movs	r3, #3
 8009762:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009764:	7bfb      	ldrb	r3, [r7, #15]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800976e:	b480      	push	{r7}
 8009770:	b083      	sub	sp, #12
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	460b      	mov	r3, r1
 8009778:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800977a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800977c:	4618      	mov	r0, r3
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009794:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009796:	4618      	mov	r0, r3
 8009798:	370c      	adds	r7, #12
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b086      	sub	sp, #24
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	885b      	ldrh	r3, [r3, #2]
 80097be:	b29b      	uxth	r3, r3
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	7812      	ldrb	r2, [r2, #0]
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d91f      	bls.n	8009808 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80097ce:	e013      	b.n	80097f8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80097d0:	f107 030a 	add.w	r3, r7, #10
 80097d4:	4619      	mov	r1, r3
 80097d6:	6978      	ldr	r0, [r7, #20]
 80097d8:	f000 f81b 	bl	8009812 <USBD_GetNextDesc>
 80097dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	785b      	ldrb	r3, [r3, #1]
 80097e2:	2b05      	cmp	r3, #5
 80097e4:	d108      	bne.n	80097f8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	789b      	ldrb	r3, [r3, #2]
 80097ee:	78fa      	ldrb	r2, [r7, #3]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d008      	beq.n	8009806 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80097f4:	2300      	movs	r3, #0
 80097f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	885b      	ldrh	r3, [r3, #2]
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	897b      	ldrh	r3, [r7, #10]
 8009800:	429a      	cmp	r2, r3
 8009802:	d8e5      	bhi.n	80097d0 <USBD_GetEpDesc+0x2e>
 8009804:	e000      	b.n	8009808 <USBD_GetEpDesc+0x66>
          break;
 8009806:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009808:	693b      	ldr	r3, [r7, #16]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3718      	adds	r7, #24
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009812:	b480      	push	{r7}
 8009814:	b085      	sub	sp, #20
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	7812      	ldrb	r2, [r2, #0]
 8009828:	4413      	add	r3, r2
 800982a:	b29a      	uxth	r2, r3
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4413      	add	r3, r2
 800983a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800983c:	68fb      	ldr	r3, [r7, #12]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800984a:	b480      	push	{r7}
 800984c:	b087      	sub	sp, #28
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	3301      	adds	r3, #1
 8009860:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009868:	8a3b      	ldrh	r3, [r7, #16]
 800986a:	021b      	lsls	r3, r3, #8
 800986c:	b21a      	sxth	r2, r3
 800986e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009872:	4313      	orrs	r3, r2
 8009874:	b21b      	sxth	r3, r3
 8009876:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009878:	89fb      	ldrh	r3, [r7, #14]
}
 800987a:	4618      	mov	r0, r3
 800987c:	371c      	adds	r7, #28
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
	...

08009888 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800989e:	2b40      	cmp	r3, #64	@ 0x40
 80098a0:	d005      	beq.n	80098ae <USBD_StdDevReq+0x26>
 80098a2:	2b40      	cmp	r3, #64	@ 0x40
 80098a4:	d857      	bhi.n	8009956 <USBD_StdDevReq+0xce>
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00f      	beq.n	80098ca <USBD_StdDevReq+0x42>
 80098aa:	2b20      	cmp	r3, #32
 80098ac:	d153      	bne.n	8009956 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	32ae      	adds	r2, #174	@ 0xae
 80098b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	4798      	blx	r3
 80098c4:	4603      	mov	r3, r0
 80098c6:	73fb      	strb	r3, [r7, #15]
      break;
 80098c8:	e04a      	b.n	8009960 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	785b      	ldrb	r3, [r3, #1]
 80098ce:	2b09      	cmp	r3, #9
 80098d0:	d83b      	bhi.n	800994a <USBD_StdDevReq+0xc2>
 80098d2:	a201      	add	r2, pc, #4	@ (adr r2, 80098d8 <USBD_StdDevReq+0x50>)
 80098d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d8:	0800992d 	.word	0x0800992d
 80098dc:	08009941 	.word	0x08009941
 80098e0:	0800994b 	.word	0x0800994b
 80098e4:	08009937 	.word	0x08009937
 80098e8:	0800994b 	.word	0x0800994b
 80098ec:	0800990b 	.word	0x0800990b
 80098f0:	08009901 	.word	0x08009901
 80098f4:	0800994b 	.word	0x0800994b
 80098f8:	08009923 	.word	0x08009923
 80098fc:	08009915 	.word	0x08009915
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fa3c 	bl	8009d80 <USBD_GetDescriptor>
          break;
 8009908:	e024      	b.n	8009954 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fba1 	bl	800a054 <USBD_SetAddress>
          break;
 8009912:	e01f      	b.n	8009954 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fbe0 	bl	800a0dc <USBD_SetConfig>
 800991c:	4603      	mov	r3, r0
 800991e:	73fb      	strb	r3, [r7, #15]
          break;
 8009920:	e018      	b.n	8009954 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fc83 	bl	800a230 <USBD_GetConfig>
          break;
 800992a:	e013      	b.n	8009954 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fcb4 	bl	800a29c <USBD_GetStatus>
          break;
 8009934:	e00e      	b.n	8009954 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fce3 	bl	800a304 <USBD_SetFeature>
          break;
 800993e:	e009      	b.n	8009954 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fd07 	bl	800a356 <USBD_ClrFeature>
          break;
 8009948:	e004      	b.n	8009954 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fd5e 	bl	800a40e <USBD_CtlError>
          break;
 8009952:	bf00      	nop
      }
      break;
 8009954:	e004      	b.n	8009960 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fd58 	bl	800a40e <USBD_CtlError>
      break;
 800995e:	bf00      	nop
  }

  return ret;
 8009960:	7bfb      	ldrb	r3, [r7, #15]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop

0800996c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009982:	2b40      	cmp	r3, #64	@ 0x40
 8009984:	d005      	beq.n	8009992 <USBD_StdItfReq+0x26>
 8009986:	2b40      	cmp	r3, #64	@ 0x40
 8009988:	d852      	bhi.n	8009a30 <USBD_StdItfReq+0xc4>
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <USBD_StdItfReq+0x26>
 800998e:	2b20      	cmp	r3, #32
 8009990:	d14e      	bne.n	8009a30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009998:	b2db      	uxtb	r3, r3
 800999a:	3b01      	subs	r3, #1
 800999c:	2b02      	cmp	r3, #2
 800999e:	d840      	bhi.n	8009a22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	889b      	ldrh	r3, [r3, #4]
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d836      	bhi.n	8009a18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	889b      	ldrh	r3, [r3, #4]
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7ff fedb 	bl	800976e <USBD_CoreFindIF>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099bc:	7bbb      	ldrb	r3, [r7, #14]
 80099be:	2bff      	cmp	r3, #255	@ 0xff
 80099c0:	d01d      	beq.n	80099fe <USBD_StdItfReq+0x92>
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d11a      	bne.n	80099fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80099c8:	7bba      	ldrb	r2, [r7, #14]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	32ae      	adds	r2, #174	@ 0xae
 80099ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00f      	beq.n	80099f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80099d8:	7bba      	ldrb	r2, [r7, #14]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80099e0:	7bba      	ldrb	r2, [r7, #14]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	32ae      	adds	r2, #174	@ 0xae
 80099e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	4798      	blx	r3
 80099f2:	4603      	mov	r3, r0
 80099f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80099f6:	e004      	b.n	8009a02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80099f8:	2303      	movs	r3, #3
 80099fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80099fc:	e001      	b.n	8009a02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80099fe:	2303      	movs	r3, #3
 8009a00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	88db      	ldrh	r3, [r3, #6]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d110      	bne.n	8009a2c <USBD_StdItfReq+0xc0>
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10d      	bne.n	8009a2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fdc7 	bl	800a5a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a16:	e009      	b.n	8009a2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fcf7 	bl	800a40e <USBD_CtlError>
          break;
 8009a20:	e004      	b.n	8009a2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fcf2 	bl	800a40e <USBD_CtlError>
          break;
 8009a2a:	e000      	b.n	8009a2e <USBD_StdItfReq+0xc2>
          break;
 8009a2c:	bf00      	nop
      }
      break;
 8009a2e:	e004      	b.n	8009a3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fceb 	bl	800a40e <USBD_CtlError>
      break;
 8009a38:	bf00      	nop
  }

  return ret;
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	889b      	ldrh	r3, [r3, #4]
 8009a56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a60:	2b40      	cmp	r3, #64	@ 0x40
 8009a62:	d007      	beq.n	8009a74 <USBD_StdEPReq+0x30>
 8009a64:	2b40      	cmp	r3, #64	@ 0x40
 8009a66:	f200 817f 	bhi.w	8009d68 <USBD_StdEPReq+0x324>
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d02a      	beq.n	8009ac4 <USBD_StdEPReq+0x80>
 8009a6e:	2b20      	cmp	r3, #32
 8009a70:	f040 817a 	bne.w	8009d68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff fe85 	bl	8009788 <USBD_CoreFindEP>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a82:	7b7b      	ldrb	r3, [r7, #13]
 8009a84:	2bff      	cmp	r3, #255	@ 0xff
 8009a86:	f000 8174 	beq.w	8009d72 <USBD_StdEPReq+0x32e>
 8009a8a:	7b7b      	ldrb	r3, [r7, #13]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f040 8170 	bne.w	8009d72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009a92:	7b7a      	ldrb	r2, [r7, #13]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009a9a:	7b7a      	ldrb	r2, [r7, #13]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	32ae      	adds	r2, #174	@ 0xae
 8009aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 8163 	beq.w	8009d72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009aac:	7b7a      	ldrb	r2, [r7, #13]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	32ae      	adds	r2, #174	@ 0xae
 8009ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	4798      	blx	r3
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009ac2:	e156      	b.n	8009d72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	785b      	ldrb	r3, [r3, #1]
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d008      	beq.n	8009ade <USBD_StdEPReq+0x9a>
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	f300 8145 	bgt.w	8009d5c <USBD_StdEPReq+0x318>
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 809b 	beq.w	8009c0e <USBD_StdEPReq+0x1ca>
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d03c      	beq.n	8009b56 <USBD_StdEPReq+0x112>
 8009adc:	e13e      	b.n	8009d5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d002      	beq.n	8009af0 <USBD_StdEPReq+0xac>
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d016      	beq.n	8009b1c <USBD_StdEPReq+0xd8>
 8009aee:	e02c      	b.n	8009b4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00d      	beq.n	8009b12 <USBD_StdEPReq+0xce>
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	2b80      	cmp	r3, #128	@ 0x80
 8009afa:	d00a      	beq.n	8009b12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f001 f963 	bl	800adcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b06:	2180      	movs	r1, #128	@ 0x80
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 f95f 	bl	800adcc <USBD_LL_StallEP>
 8009b0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b10:	e020      	b.n	8009b54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fc7a 	bl	800a40e <USBD_CtlError>
              break;
 8009b1a:	e01b      	b.n	8009b54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	885b      	ldrh	r3, [r3, #2]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10e      	bne.n	8009b42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00b      	beq.n	8009b42 <USBD_StdEPReq+0xfe>
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b80      	cmp	r3, #128	@ 0x80
 8009b2e:	d008      	beq.n	8009b42 <USBD_StdEPReq+0xfe>
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	88db      	ldrh	r3, [r3, #6]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d104      	bne.n	8009b42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f001 f945 	bl	800adcc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fd2e 	bl	800a5a4 <USBD_CtlSendStatus>

              break;
 8009b48:	e004      	b.n	8009b54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fc5e 	bl	800a40e <USBD_CtlError>
              break;
 8009b52:	bf00      	nop
          }
          break;
 8009b54:	e107      	b.n	8009d66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d002      	beq.n	8009b68 <USBD_StdEPReq+0x124>
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	d016      	beq.n	8009b94 <USBD_StdEPReq+0x150>
 8009b66:	e04b      	b.n	8009c00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00d      	beq.n	8009b8a <USBD_StdEPReq+0x146>
 8009b6e:	7bbb      	ldrb	r3, [r7, #14]
 8009b70:	2b80      	cmp	r3, #128	@ 0x80
 8009b72:	d00a      	beq.n	8009b8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f001 f927 	bl	800adcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b7e:	2180      	movs	r1, #128	@ 0x80
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f001 f923 	bl	800adcc <USBD_LL_StallEP>
 8009b86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b88:	e040      	b.n	8009c0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fc3e 	bl	800a40e <USBD_CtlError>
              break;
 8009b92:	e03b      	b.n	8009c0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	885b      	ldrh	r3, [r3, #2]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d136      	bne.n	8009c0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d004      	beq.n	8009bb0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ba6:	7bbb      	ldrb	r3, [r7, #14]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f001 f92d 	bl	800ae0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fcf7 	bl	800a5a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009bb6:	7bbb      	ldrb	r3, [r7, #14]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff fde4 	bl	8009788 <USBD_CoreFindEP>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bc4:	7b7b      	ldrb	r3, [r7, #13]
 8009bc6:	2bff      	cmp	r3, #255	@ 0xff
 8009bc8:	d01f      	beq.n	8009c0a <USBD_StdEPReq+0x1c6>
 8009bca:	7b7b      	ldrb	r3, [r7, #13]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d11c      	bne.n	8009c0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009bd0:	7b7a      	ldrb	r2, [r7, #13]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009bd8:	7b7a      	ldrb	r2, [r7, #13]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	32ae      	adds	r2, #174	@ 0xae
 8009bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d010      	beq.n	8009c0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009be8:	7b7a      	ldrb	r2, [r7, #13]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	32ae      	adds	r2, #174	@ 0xae
 8009bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	4798      	blx	r3
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009bfe:	e004      	b.n	8009c0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fc03 	bl	800a40e <USBD_CtlError>
              break;
 8009c08:	e000      	b.n	8009c0c <USBD_StdEPReq+0x1c8>
              break;
 8009c0a:	bf00      	nop
          }
          break;
 8009c0c:	e0ab      	b.n	8009d66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d002      	beq.n	8009c20 <USBD_StdEPReq+0x1dc>
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d032      	beq.n	8009c84 <USBD_StdEPReq+0x240>
 8009c1e:	e097      	b.n	8009d50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d007      	beq.n	8009c36 <USBD_StdEPReq+0x1f2>
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	2b80      	cmp	r3, #128	@ 0x80
 8009c2a:	d004      	beq.n	8009c36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fbed 	bl	800a40e <USBD_CtlError>
                break;
 8009c34:	e091      	b.n	8009d5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	da0b      	bge.n	8009c56 <USBD_StdEPReq+0x212>
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c44:	4613      	mov	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	3310      	adds	r3, #16
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	4413      	add	r3, r2
 8009c52:	3304      	adds	r3, #4
 8009c54:	e00b      	b.n	8009c6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c56:	7bbb      	ldrb	r3, [r7, #14]
 8009c58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	4413      	add	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	2200      	movs	r2, #0
 8009c74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2202      	movs	r2, #2
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fc37 	bl	800a4f0 <USBD_CtlSendData>
              break;
 8009c82:	e06a      	b.n	8009d5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	da11      	bge.n	8009cb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	f003 020f 	and.w	r2, r3, #15
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	4613      	mov	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	440b      	add	r3, r1
 8009c9e:	3324      	adds	r3, #36	@ 0x24
 8009ca0:	881b      	ldrh	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d117      	bne.n	8009cd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fbb0 	bl	800a40e <USBD_CtlError>
                  break;
 8009cae:	e054      	b.n	8009d5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
 8009cb2:	f003 020f 	and.w	r2, r3, #15
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	440b      	add	r3, r1
 8009cc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d104      	bne.n	8009cd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fb9d 	bl	800a40e <USBD_CtlError>
                  break;
 8009cd4:	e041      	b.n	8009d5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	da0b      	bge.n	8009cf6 <USBD_StdEPReq+0x2b2>
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
 8009ce0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	3310      	adds	r3, #16
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	e00b      	b.n	8009d0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cf6:	7bbb      	ldrb	r3, [r7, #14]
 8009cf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d002      	beq.n	8009d1c <USBD_StdEPReq+0x2d8>
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	2b80      	cmp	r3, #128	@ 0x80
 8009d1a:	d103      	bne.n	8009d24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	e00e      	b.n	8009d42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009d24:	7bbb      	ldrb	r3, [r7, #14]
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f001 f88d 	bl	800ae48 <USBD_LL_IsStallEP>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d003      	beq.n	8009d3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	2201      	movs	r2, #1
 8009d38:	601a      	str	r2, [r3, #0]
 8009d3a:	e002      	b.n	8009d42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2202      	movs	r2, #2
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fbd1 	bl	800a4f0 <USBD_CtlSendData>
              break;
 8009d4e:	e004      	b.n	8009d5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fb5b 	bl	800a40e <USBD_CtlError>
              break;
 8009d58:	bf00      	nop
          }
          break;
 8009d5a:	e004      	b.n	8009d66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fb55 	bl	800a40e <USBD_CtlError>
          break;
 8009d64:	bf00      	nop
      }
      break;
 8009d66:	e005      	b.n	8009d74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fb4f 	bl	800a40e <USBD_CtlError>
      break;
 8009d70:	e000      	b.n	8009d74 <USBD_StdEPReq+0x330>
      break;
 8009d72:	bf00      	nop
  }

  return ret;
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	885b      	ldrh	r3, [r3, #2]
 8009d9a:	0a1b      	lsrs	r3, r3, #8
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	2b06      	cmp	r3, #6
 8009da2:	f200 8128 	bhi.w	8009ff6 <USBD_GetDescriptor+0x276>
 8009da6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dac <USBD_GetDescriptor+0x2c>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009dc9 	.word	0x08009dc9
 8009db0:	08009de1 	.word	0x08009de1
 8009db4:	08009e21 	.word	0x08009e21
 8009db8:	08009ff7 	.word	0x08009ff7
 8009dbc:	08009ff7 	.word	0x08009ff7
 8009dc0:	08009f97 	.word	0x08009f97
 8009dc4:	08009fc3 	.word	0x08009fc3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	7c12      	ldrb	r2, [r2, #16]
 8009dd4:	f107 0108 	add.w	r1, r7, #8
 8009dd8:	4610      	mov	r0, r2
 8009dda:	4798      	blx	r3
 8009ddc:	60f8      	str	r0, [r7, #12]
      break;
 8009dde:	e112      	b.n	800a006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	7c1b      	ldrb	r3, [r3, #16]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10d      	bne.n	8009e04 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df0:	f107 0208 	add.w	r2, r7, #8
 8009df4:	4610      	mov	r0, r2
 8009df6:	4798      	blx	r3
 8009df8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	2202      	movs	r2, #2
 8009e00:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e02:	e100      	b.n	800a006 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0c:	f107 0208 	add.w	r2, r7, #8
 8009e10:	4610      	mov	r0, r2
 8009e12:	4798      	blx	r3
 8009e14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	701a      	strb	r2, [r3, #0]
      break;
 8009e1e:	e0f2      	b.n	800a006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	885b      	ldrh	r3, [r3, #2]
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b05      	cmp	r3, #5
 8009e28:	f200 80ac 	bhi.w	8009f84 <USBD_GetDescriptor+0x204>
 8009e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e34 <USBD_GetDescriptor+0xb4>)
 8009e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e32:	bf00      	nop
 8009e34:	08009e4d 	.word	0x08009e4d
 8009e38:	08009e81 	.word	0x08009e81
 8009e3c:	08009eb5 	.word	0x08009eb5
 8009e40:	08009ee9 	.word	0x08009ee9
 8009e44:	08009f1d 	.word	0x08009f1d
 8009e48:	08009f51 	.word	0x08009f51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00b      	beq.n	8009e70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	7c12      	ldrb	r2, [r2, #16]
 8009e64:	f107 0108 	add.w	r1, r7, #8
 8009e68:	4610      	mov	r0, r2
 8009e6a:	4798      	blx	r3
 8009e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e6e:	e091      	b.n	8009f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 facb 	bl	800a40e <USBD_CtlError>
            err++;
 8009e78:	7afb      	ldrb	r3, [r7, #11]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e7e:	e089      	b.n	8009f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00b      	beq.n	8009ea4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	7c12      	ldrb	r2, [r2, #16]
 8009e98:	f107 0108 	add.w	r1, r7, #8
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4798      	blx	r3
 8009ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ea2:	e077      	b.n	8009f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fab1 	bl	800a40e <USBD_CtlError>
            err++;
 8009eac:	7afb      	ldrb	r3, [r7, #11]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8009eb2:	e06f      	b.n	8009f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00b      	beq.n	8009ed8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	7c12      	ldrb	r2, [r2, #16]
 8009ecc:	f107 0108 	add.w	r1, r7, #8
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	4798      	blx	r3
 8009ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ed6:	e05d      	b.n	8009f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fa97 	bl	800a40e <USBD_CtlError>
            err++;
 8009ee0:	7afb      	ldrb	r3, [r7, #11]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ee6:	e055      	b.n	8009f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00b      	beq.n	8009f0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	7c12      	ldrb	r2, [r2, #16]
 8009f00:	f107 0108 	add.w	r1, r7, #8
 8009f04:	4610      	mov	r0, r2
 8009f06:	4798      	blx	r3
 8009f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f0a:	e043      	b.n	8009f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fa7d 	bl	800a40e <USBD_CtlError>
            err++;
 8009f14:	7afb      	ldrb	r3, [r7, #11]
 8009f16:	3301      	adds	r3, #1
 8009f18:	72fb      	strb	r3, [r7, #11]
          break;
 8009f1a:	e03b      	b.n	8009f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00b      	beq.n	8009f40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f2e:	695b      	ldr	r3, [r3, #20]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	7c12      	ldrb	r2, [r2, #16]
 8009f34:	f107 0108 	add.w	r1, r7, #8
 8009f38:	4610      	mov	r0, r2
 8009f3a:	4798      	blx	r3
 8009f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f3e:	e029      	b.n	8009f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fa63 	bl	800a40e <USBD_CtlError>
            err++;
 8009f48:	7afb      	ldrb	r3, [r7, #11]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f4e:	e021      	b.n	8009f94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00b      	beq.n	8009f74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	7c12      	ldrb	r2, [r2, #16]
 8009f68:	f107 0108 	add.w	r1, r7, #8
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4798      	blx	r3
 8009f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f72:	e00f      	b.n	8009f94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fa49 	bl	800a40e <USBD_CtlError>
            err++;
 8009f7c:	7afb      	ldrb	r3, [r7, #11]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	72fb      	strb	r3, [r7, #11]
          break;
 8009f82:	e007      	b.n	8009f94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 fa41 	bl	800a40e <USBD_CtlError>
          err++;
 8009f8c:	7afb      	ldrb	r3, [r7, #11]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009f92:	bf00      	nop
      }
      break;
 8009f94:	e037      	b.n	800a006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	7c1b      	ldrb	r3, [r3, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d109      	bne.n	8009fb2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fa6:	f107 0208 	add.w	r2, r7, #8
 8009faa:	4610      	mov	r0, r2
 8009fac:	4798      	blx	r3
 8009fae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fb0:	e029      	b.n	800a006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fa2a 	bl	800a40e <USBD_CtlError>
        err++;
 8009fba:	7afb      	ldrb	r3, [r7, #11]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	72fb      	strb	r3, [r7, #11]
      break;
 8009fc0:	e021      	b.n	800a006 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	7c1b      	ldrb	r3, [r3, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10d      	bne.n	8009fe6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd2:	f107 0208 	add.w	r2, r7, #8
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	4798      	blx	r3
 8009fda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	2207      	movs	r2, #7
 8009fe2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fe4:	e00f      	b.n	800a006 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fa10 	bl	800a40e <USBD_CtlError>
        err++;
 8009fee:	7afb      	ldrb	r3, [r7, #11]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ff4:	e007      	b.n	800a006 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009ff6:	6839      	ldr	r1, [r7, #0]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fa08 	bl	800a40e <USBD_CtlError>
      err++;
 8009ffe:	7afb      	ldrb	r3, [r7, #11]
 800a000:	3301      	adds	r3, #1
 800a002:	72fb      	strb	r3, [r7, #11]
      break;
 800a004:	bf00      	nop
  }

  if (err != 0U)
 800a006:	7afb      	ldrb	r3, [r7, #11]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d11e      	bne.n	800a04a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	88db      	ldrh	r3, [r3, #6]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d016      	beq.n	800a042 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a014:	893b      	ldrh	r3, [r7, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00e      	beq.n	800a038 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	88da      	ldrh	r2, [r3, #6]
 800a01e:	893b      	ldrh	r3, [r7, #8]
 800a020:	4293      	cmp	r3, r2
 800a022:	bf28      	it	cs
 800a024:	4613      	movcs	r3, r2
 800a026:	b29b      	uxth	r3, r3
 800a028:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a02a:	893b      	ldrh	r3, [r7, #8]
 800a02c:	461a      	mov	r2, r3
 800a02e:	68f9      	ldr	r1, [r7, #12]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 fa5d 	bl	800a4f0 <USBD_CtlSendData>
 800a036:	e009      	b.n	800a04c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f9e7 	bl	800a40e <USBD_CtlError>
 800a040:	e004      	b.n	800a04c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 faae 	bl	800a5a4 <USBD_CtlSendStatus>
 800a048:	e000      	b.n	800a04c <USBD_GetDescriptor+0x2cc>
    return;
 800a04a:	bf00      	nop
  }
}
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop

0800a054 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	889b      	ldrh	r3, [r3, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d131      	bne.n	800a0ca <USBD_SetAddress+0x76>
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	88db      	ldrh	r3, [r3, #6]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d12d      	bne.n	800a0ca <USBD_SetAddress+0x76>
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	885b      	ldrh	r3, [r3, #2]
 800a072:	2b7f      	cmp	r3, #127	@ 0x7f
 800a074:	d829      	bhi.n	800a0ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	885b      	ldrh	r3, [r3, #2]
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a080:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	d104      	bne.n	800a098 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f9bc 	bl	800a40e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a096:	e01d      	b.n	800a0d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	7bfa      	ldrb	r2, [r7, #15]
 800a09c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fefb 	bl	800aea0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fa7a 	bl	800a5a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d004      	beq.n	800a0c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0be:	e009      	b.n	800a0d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c8:	e004      	b.n	800a0d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f99e 	bl	800a40e <USBD_CtlError>
  }
}
 800a0d2:	bf00      	nop
 800a0d4:	bf00      	nop
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	885b      	ldrh	r3, [r3, #2]
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	4b4e      	ldr	r3, [pc, #312]	@ (800a22c <USBD_SetConfig+0x150>)
 800a0f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0f4:	4b4d      	ldr	r3, [pc, #308]	@ (800a22c <USBD_SetConfig+0x150>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d905      	bls.n	800a108 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a0fc:	6839      	ldr	r1, [r7, #0]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f985 	bl	800a40e <USBD_CtlError>
    return USBD_FAIL;
 800a104:	2303      	movs	r3, #3
 800a106:	e08c      	b.n	800a222 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b02      	cmp	r3, #2
 800a112:	d002      	beq.n	800a11a <USBD_SetConfig+0x3e>
 800a114:	2b03      	cmp	r3, #3
 800a116:	d029      	beq.n	800a16c <USBD_SetConfig+0x90>
 800a118:	e075      	b.n	800a206 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a11a:	4b44      	ldr	r3, [pc, #272]	@ (800a22c <USBD_SetConfig+0x150>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d020      	beq.n	800a164 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a122:	4b42      	ldr	r3, [pc, #264]	@ (800a22c <USBD_SetConfig+0x150>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a12c:	4b3f      	ldr	r3, [pc, #252]	@ (800a22c <USBD_SetConfig+0x150>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7fe ffe3 	bl	80090fe <USBD_SetClassConfig>
 800a138:	4603      	mov	r3, r0
 800a13a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d008      	beq.n	800a154 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f962 	bl	800a40e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2202      	movs	r2, #2
 800a14e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a152:	e065      	b.n	800a220 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fa25 	bl	800a5a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2203      	movs	r2, #3
 800a15e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a162:	e05d      	b.n	800a220 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fa1d 	bl	800a5a4 <USBD_CtlSendStatus>
      break;
 800a16a:	e059      	b.n	800a220 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a16c:	4b2f      	ldr	r3, [pc, #188]	@ (800a22c <USBD_SetConfig+0x150>)
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d112      	bne.n	800a19a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2202      	movs	r2, #2
 800a178:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a17c:	4b2b      	ldr	r3, [pc, #172]	@ (800a22c <USBD_SetConfig+0x150>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a186:	4b29      	ldr	r3, [pc, #164]	@ (800a22c <USBD_SetConfig+0x150>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7fe ffd2 	bl	8009136 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fa06 	bl	800a5a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a198:	e042      	b.n	800a220 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a19a:	4b24      	ldr	r3, [pc, #144]	@ (800a22c <USBD_SetConfig+0x150>)
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d02a      	beq.n	800a1fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7fe ffc0 	bl	8009136 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a1b6:	4b1d      	ldr	r3, [pc, #116]	@ (800a22c <USBD_SetConfig+0x150>)
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a22c <USBD_SetConfig+0x150>)
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7fe ff99 	bl	80090fe <USBD_SetClassConfig>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00f      	beq.n	800a1f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f918 	bl	800a40e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7fe ffa5 	bl	8009136 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a1f4:	e014      	b.n	800a220 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f9d4 	bl	800a5a4 <USBD_CtlSendStatus>
      break;
 800a1fc:	e010      	b.n	800a220 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f9d0 	bl	800a5a4 <USBD_CtlSendStatus>
      break;
 800a204:	e00c      	b.n	800a220 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f900 	bl	800a40e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a20e:	4b07      	ldr	r3, [pc, #28]	@ (800a22c <USBD_SetConfig+0x150>)
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	4619      	mov	r1, r3
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7fe ff8e 	bl	8009136 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a21a:	2303      	movs	r3, #3
 800a21c:	73fb      	strb	r3, [r7, #15]
      break;
 800a21e:	bf00      	nop
  }

  return ret;
 800a220:	7bfb      	ldrb	r3, [r7, #15]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20000580 	.word	0x20000580

0800a230 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	88db      	ldrh	r3, [r3, #6]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d004      	beq.n	800a24c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f8e2 	bl	800a40e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a24a:	e023      	b.n	800a294 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a252:	b2db      	uxtb	r3, r3
 800a254:	2b02      	cmp	r3, #2
 800a256:	dc02      	bgt.n	800a25e <USBD_GetConfig+0x2e>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	dc03      	bgt.n	800a264 <USBD_GetConfig+0x34>
 800a25c:	e015      	b.n	800a28a <USBD_GetConfig+0x5a>
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d00b      	beq.n	800a27a <USBD_GetConfig+0x4a>
 800a262:	e012      	b.n	800a28a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	3308      	adds	r3, #8
 800a26e:	2201      	movs	r2, #1
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f93c 	bl	800a4f0 <USBD_CtlSendData>
        break;
 800a278:	e00c      	b.n	800a294 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3304      	adds	r3, #4
 800a27e:	2201      	movs	r2, #1
 800a280:	4619      	mov	r1, r3
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f934 	bl	800a4f0 <USBD_CtlSendData>
        break;
 800a288:	e004      	b.n	800a294 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a28a:	6839      	ldr	r1, [r7, #0]
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f8be 	bl	800a40e <USBD_CtlError>
        break;
 800a292:	bf00      	nop
}
 800a294:	bf00      	nop
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d81e      	bhi.n	800a2f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	88db      	ldrh	r3, [r3, #6]
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d004      	beq.n	800a2c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f8a5 	bl	800a40e <USBD_CtlError>
        break;
 800a2c4:	e01a      	b.n	800a2fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d005      	beq.n	800a2e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	f043 0202 	orr.w	r2, r3, #2
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	330c      	adds	r3, #12
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f900 	bl	800a4f0 <USBD_CtlSendData>
      break;
 800a2f0:	e004      	b.n	800a2fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f88a 	bl	800a40e <USBD_CtlError>
      break;
 800a2fa:	bf00      	nop
  }
}
 800a2fc:	bf00      	nop
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	885b      	ldrh	r3, [r3, #2]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d107      	bne.n	800a326 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f940 	bl	800a5a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a324:	e013      	b.n	800a34e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	885b      	ldrh	r3, [r3, #2]
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d10b      	bne.n	800a346 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	889b      	ldrh	r3, [r3, #4]
 800a332:	0a1b      	lsrs	r3, r3, #8
 800a334:	b29b      	uxth	r3, r3
 800a336:	b2da      	uxtb	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f930 	bl	800a5a4 <USBD_CtlSendStatus>
}
 800a344:	e003      	b.n	800a34e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a346:	6839      	ldr	r1, [r7, #0]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 f860 	bl	800a40e <USBD_CtlError>
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b082      	sub	sp, #8
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a366:	b2db      	uxtb	r3, r3
 800a368:	3b01      	subs	r3, #1
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d80b      	bhi.n	800a386 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	885b      	ldrh	r3, [r3, #2]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d10c      	bne.n	800a390 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f910 	bl	800a5a4 <USBD_CtlSendStatus>
      }
      break;
 800a384:	e004      	b.n	800a390 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f840 	bl	800a40e <USBD_CtlError>
      break;
 800a38e:	e000      	b.n	800a392 <USBD_ClrFeature+0x3c>
      break;
 800a390:	bf00      	nop
  }
}
 800a392:	bf00      	nop
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b084      	sub	sp, #16
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	781a      	ldrb	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	781a      	ldrb	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f7ff fa40 	bl	800984a <SWAPBYTE>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f7ff fa33 	bl	800984a <SWAPBYTE>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f7ff fa26 	bl	800984a <SWAPBYTE>
 800a3fe:	4603      	mov	r3, r0
 800a400:	461a      	mov	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	80da      	strh	r2, [r3, #6]
}
 800a406:	bf00      	nop
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b082      	sub	sp, #8
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a418:	2180      	movs	r1, #128	@ 0x80
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fcd6 	bl	800adcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a420:	2100      	movs	r1, #0
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fcd2 	bl	800adcc <USBD_LL_StallEP>
}
 800a428:	bf00      	nop
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d036      	beq.n	800a4b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a44a:	6938      	ldr	r0, [r7, #16]
 800a44c:	f000 f836 	bl	800a4bc <USBD_GetLen>
 800a450:	4603      	mov	r3, r0
 800a452:	3301      	adds	r3, #1
 800a454:	b29b      	uxth	r3, r3
 800a456:	005b      	lsls	r3, r3, #1
 800a458:	b29a      	uxth	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	4413      	add	r3, r2
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	7812      	ldrb	r2, [r2, #0]
 800a468:	701a      	strb	r2, [r3, #0]
  idx++;
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	3301      	adds	r3, #1
 800a46e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a470:	7dfb      	ldrb	r3, [r7, #23]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	4413      	add	r3, r2
 800a476:	2203      	movs	r2, #3
 800a478:	701a      	strb	r2, [r3, #0]
  idx++;
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
 800a47c:	3301      	adds	r3, #1
 800a47e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a480:	e013      	b.n	800a4aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	4413      	add	r3, r2
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	7812      	ldrb	r2, [r2, #0]
 800a48c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	3301      	adds	r3, #1
 800a492:	613b      	str	r3, [r7, #16]
    idx++;
 800a494:	7dfb      	ldrb	r3, [r7, #23]
 800a496:	3301      	adds	r3, #1
 800a498:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	4413      	add	r3, r2
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	701a      	strb	r2, [r3, #0]
    idx++;
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1e7      	bne.n	800a482 <USBD_GetString+0x52>
 800a4b2:	e000      	b.n	800a4b6 <USBD_GetString+0x86>
    return;
 800a4b4:	bf00      	nop
  }
}
 800a4b6:	3718      	adds	r7, #24
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a4cc:	e005      	b.n	800a4da <USBD_GetLen+0x1e>
  {
    len++;
 800a4ce:	7bfb      	ldrb	r3, [r7, #15]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1f5      	bne.n	800a4ce <USBD_GetLen+0x12>
  }

  return len;
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2202      	movs	r2, #2
 800a500:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	2100      	movs	r1, #0
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 fce1 	bl	800aede <USBD_LL_Transmit>

  return USBD_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b084      	sub	sp, #16
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	60f8      	str	r0, [r7, #12]
 800a52e:	60b9      	str	r1, [r7, #8]
 800a530:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68ba      	ldr	r2, [r7, #8]
 800a536:	2100      	movs	r1, #0
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 fcd0 	bl	800aede <USBD_LL_Transmit>

  return USBD_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3710      	adds	r7, #16
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2203      	movs	r2, #3
 800a558:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	2100      	movs	r1, #0
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fcd4 	bl	800af20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	60f8      	str	r0, [r7, #12]
 800a58a:	60b9      	str	r1, [r7, #8]
 800a58c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	2100      	movs	r1, #0
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f000 fcc3 	bl	800af20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2204      	movs	r2, #4
 800a5b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fc8f 	bl	800aede <USBD_LL_Transmit>

  return USBD_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2205      	movs	r2, #5
 800a5d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2100      	movs	r1, #0
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 fc9d 	bl	800af20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	4912      	ldr	r1, [pc, #72]	@ (800a640 <MX_USB_DEVICE_Init+0x50>)
 800a5f8:	4812      	ldr	r0, [pc, #72]	@ (800a644 <MX_USB_DEVICE_Init+0x54>)
 800a5fa:	f7fe fd03 	bl	8009004 <USBD_Init>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d001      	beq.n	800a608 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a604:	f7f7 fa0e 	bl	8001a24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a608:	490f      	ldr	r1, [pc, #60]	@ (800a648 <MX_USB_DEVICE_Init+0x58>)
 800a60a:	480e      	ldr	r0, [pc, #56]	@ (800a644 <MX_USB_DEVICE_Init+0x54>)
 800a60c:	f7fe fd2a 	bl	8009064 <USBD_RegisterClass>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a616:	f7f7 fa05 	bl	8001a24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a61a:	490c      	ldr	r1, [pc, #48]	@ (800a64c <MX_USB_DEVICE_Init+0x5c>)
 800a61c:	4809      	ldr	r0, [pc, #36]	@ (800a644 <MX_USB_DEVICE_Init+0x54>)
 800a61e:	f7fe fc21 	bl	8008e64 <USBD_CDC_RegisterInterface>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a628:	f7f7 f9fc 	bl	8001a24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a62c:	4805      	ldr	r0, [pc, #20]	@ (800a644 <MX_USB_DEVICE_Init+0x54>)
 800a62e:	f7fe fd4f 	bl	80090d0 <USBD_Start>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d001      	beq.n	800a63c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a638:	f7f7 f9f4 	bl	8001a24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a63c:	bf00      	nop
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	200000ac 	.word	0x200000ac
 800a644:	20000584 	.word	0x20000584
 800a648:	20000018 	.word	0x20000018
 800a64c:	20000098 	.word	0x20000098

0800a650 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a654:	2200      	movs	r2, #0
 800a656:	4905      	ldr	r1, [pc, #20]	@ (800a66c <CDC_Init_FS+0x1c>)
 800a658:	4805      	ldr	r0, [pc, #20]	@ (800a670 <CDC_Init_FS+0x20>)
 800a65a:	f7fe fc1d 	bl	8008e98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a65e:	4905      	ldr	r1, [pc, #20]	@ (800a674 <CDC_Init_FS+0x24>)
 800a660:	4803      	ldr	r0, [pc, #12]	@ (800a670 <CDC_Init_FS+0x20>)
 800a662:	f7fe fc3b 	bl	8008edc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a666:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a668:	4618      	mov	r0, r3
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	20000c60 	.word	0x20000c60
 800a670:	20000584 	.word	0x20000584
 800a674:	20000860 	.word	0x20000860

0800a678 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a67c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a67e:	4618      	mov	r0, r3
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	4603      	mov	r3, r0
 800a690:	6039      	str	r1, [r7, #0]
 800a692:	71fb      	strb	r3, [r7, #7]
 800a694:	4613      	mov	r3, r2
 800a696:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a698:	79fb      	ldrb	r3, [r7, #7]
 800a69a:	2b23      	cmp	r3, #35	@ 0x23
 800a69c:	d84a      	bhi.n	800a734 <CDC_Control_FS+0xac>
 800a69e:	a201      	add	r2, pc, #4	@ (adr r2, 800a6a4 <CDC_Control_FS+0x1c>)
 800a6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a4:	0800a735 	.word	0x0800a735
 800a6a8:	0800a735 	.word	0x0800a735
 800a6ac:	0800a735 	.word	0x0800a735
 800a6b0:	0800a735 	.word	0x0800a735
 800a6b4:	0800a735 	.word	0x0800a735
 800a6b8:	0800a735 	.word	0x0800a735
 800a6bc:	0800a735 	.word	0x0800a735
 800a6c0:	0800a735 	.word	0x0800a735
 800a6c4:	0800a735 	.word	0x0800a735
 800a6c8:	0800a735 	.word	0x0800a735
 800a6cc:	0800a735 	.word	0x0800a735
 800a6d0:	0800a735 	.word	0x0800a735
 800a6d4:	0800a735 	.word	0x0800a735
 800a6d8:	0800a735 	.word	0x0800a735
 800a6dc:	0800a735 	.word	0x0800a735
 800a6e0:	0800a735 	.word	0x0800a735
 800a6e4:	0800a735 	.word	0x0800a735
 800a6e8:	0800a735 	.word	0x0800a735
 800a6ec:	0800a735 	.word	0x0800a735
 800a6f0:	0800a735 	.word	0x0800a735
 800a6f4:	0800a735 	.word	0x0800a735
 800a6f8:	0800a735 	.word	0x0800a735
 800a6fc:	0800a735 	.word	0x0800a735
 800a700:	0800a735 	.word	0x0800a735
 800a704:	0800a735 	.word	0x0800a735
 800a708:	0800a735 	.word	0x0800a735
 800a70c:	0800a735 	.word	0x0800a735
 800a710:	0800a735 	.word	0x0800a735
 800a714:	0800a735 	.word	0x0800a735
 800a718:	0800a735 	.word	0x0800a735
 800a71c:	0800a735 	.word	0x0800a735
 800a720:	0800a735 	.word	0x0800a735
 800a724:	0800a735 	.word	0x0800a735
 800a728:	0800a735 	.word	0x0800a735
 800a72c:	0800a735 	.word	0x0800a735
 800a730:	0800a735 	.word	0x0800a735
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a734:	bf00      	nop
  }

  return (USBD_OK);
 800a736:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a738:	4618      	mov	r0, r3
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a74e:	6879      	ldr	r1, [r7, #4]
 800a750:	4805      	ldr	r0, [pc, #20]	@ (800a768 <CDC_Receive_FS+0x24>)
 800a752:	f7fe fbc3 	bl	8008edc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a756:	4804      	ldr	r0, [pc, #16]	@ (800a768 <CDC_Receive_FS+0x24>)
 800a758:	f7fe fc1e 	bl	8008f98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a75c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	20000584 	.word	0x20000584

0800a76c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a77c:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b4 <CDC_Transmit_FS+0x48>)
 800a77e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a782:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d001      	beq.n	800a792 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a78e:	2301      	movs	r3, #1
 800a790:	e00b      	b.n	800a7aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a792:	887b      	ldrh	r3, [r7, #2]
 800a794:	461a      	mov	r2, r3
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	4806      	ldr	r0, [pc, #24]	@ (800a7b4 <CDC_Transmit_FS+0x48>)
 800a79a:	f7fe fb7d 	bl	8008e98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a79e:	4805      	ldr	r0, [pc, #20]	@ (800a7b4 <CDC_Transmit_FS+0x48>)
 800a7a0:	f7fe fbba 	bl	8008f18 <USBD_CDC_TransmitPacket>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20000584 	.word	0x20000584

0800a7b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b087      	sub	sp, #28
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a7ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	371c      	adds	r7, #28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
	...

0800a7dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	6039      	str	r1, [r7, #0]
 800a7e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	2212      	movs	r2, #18
 800a7ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a7ee:	4b03      	ldr	r3, [pc, #12]	@ (800a7fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	200000c8 	.word	0x200000c8

0800a800 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	4603      	mov	r3, r0
 800a808:	6039      	str	r1, [r7, #0]
 800a80a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2204      	movs	r2, #4
 800a810:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a812:	4b03      	ldr	r3, [pc, #12]	@ (800a820 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	200000dc 	.word	0x200000dc

0800a824 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	4603      	mov	r3, r0
 800a82c:	6039      	str	r1, [r7, #0]
 800a82e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a830:	79fb      	ldrb	r3, [r7, #7]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d105      	bne.n	800a842 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	4907      	ldr	r1, [pc, #28]	@ (800a858 <USBD_FS_ProductStrDescriptor+0x34>)
 800a83a:	4808      	ldr	r0, [pc, #32]	@ (800a85c <USBD_FS_ProductStrDescriptor+0x38>)
 800a83c:	f7ff fdf8 	bl	800a430 <USBD_GetString>
 800a840:	e004      	b.n	800a84c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	4904      	ldr	r1, [pc, #16]	@ (800a858 <USBD_FS_ProductStrDescriptor+0x34>)
 800a846:	4805      	ldr	r0, [pc, #20]	@ (800a85c <USBD_FS_ProductStrDescriptor+0x38>)
 800a848:	f7ff fdf2 	bl	800a430 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a84c:	4b02      	ldr	r3, [pc, #8]	@ (800a858 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	20001060 	.word	0x20001060
 800a85c:	0800e060 	.word	0x0800e060

0800a860 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	4603      	mov	r3, r0
 800a868:	6039      	str	r1, [r7, #0]
 800a86a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	4904      	ldr	r1, [pc, #16]	@ (800a880 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a870:	4804      	ldr	r0, [pc, #16]	@ (800a884 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a872:	f7ff fddd 	bl	800a430 <USBD_GetString>
  return USBD_StrDesc;
 800a876:	4b02      	ldr	r3, [pc, #8]	@ (800a880 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20001060 	.word	0x20001060
 800a884:	0800e078 	.word	0x0800e078

0800a888 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	4603      	mov	r3, r0
 800a890:	6039      	str	r1, [r7, #0]
 800a892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	221a      	movs	r2, #26
 800a898:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a89a:	f000 f843 	bl	800a924 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a89e:	4b02      	ldr	r3, [pc, #8]	@ (800a8a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	200000e0 	.word	0x200000e0

0800a8ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	6039      	str	r1, [r7, #0]
 800a8b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a8b8:	79fb      	ldrb	r3, [r7, #7]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d105      	bne.n	800a8ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	4907      	ldr	r1, [pc, #28]	@ (800a8e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8c2:	4808      	ldr	r0, [pc, #32]	@ (800a8e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8c4:	f7ff fdb4 	bl	800a430 <USBD_GetString>
 800a8c8:	e004      	b.n	800a8d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	4904      	ldr	r1, [pc, #16]	@ (800a8e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8ce:	4805      	ldr	r0, [pc, #20]	@ (800a8e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8d0:	f7ff fdae 	bl	800a430 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8d4:	4b02      	ldr	r3, [pc, #8]	@ (800a8e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	20001060 	.word	0x20001060
 800a8e4:	0800e08c 	.word	0x0800e08c

0800a8e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	6039      	str	r1, [r7, #0]
 800a8f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8f4:	79fb      	ldrb	r3, [r7, #7]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d105      	bne.n	800a906 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	4907      	ldr	r1, [pc, #28]	@ (800a91c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8fe:	4808      	ldr	r0, [pc, #32]	@ (800a920 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a900:	f7ff fd96 	bl	800a430 <USBD_GetString>
 800a904:	e004      	b.n	800a910 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a906:	683a      	ldr	r2, [r7, #0]
 800a908:	4904      	ldr	r1, [pc, #16]	@ (800a91c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a90a:	4805      	ldr	r0, [pc, #20]	@ (800a920 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a90c:	f7ff fd90 	bl	800a430 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a910:	4b02      	ldr	r3, [pc, #8]	@ (800a91c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	20001060 	.word	0x20001060
 800a920:	0800e098 	.word	0x0800e098

0800a924 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a92a:	4b0f      	ldr	r3, [pc, #60]	@ (800a968 <Get_SerialNum+0x44>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a930:	4b0e      	ldr	r3, [pc, #56]	@ (800a96c <Get_SerialNum+0x48>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a936:	4b0e      	ldr	r3, [pc, #56]	@ (800a970 <Get_SerialNum+0x4c>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4413      	add	r3, r2
 800a942:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d009      	beq.n	800a95e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a94a:	2208      	movs	r2, #8
 800a94c:	4909      	ldr	r1, [pc, #36]	@ (800a974 <Get_SerialNum+0x50>)
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f000 f814 	bl	800a97c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a954:	2204      	movs	r2, #4
 800a956:	4908      	ldr	r1, [pc, #32]	@ (800a978 <Get_SerialNum+0x54>)
 800a958:	68b8      	ldr	r0, [r7, #8]
 800a95a:	f000 f80f 	bl	800a97c <IntToUnicode>
  }
}
 800a95e:	bf00      	nop
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	1fff7a10 	.word	0x1fff7a10
 800a96c:	1fff7a14 	.word	0x1fff7a14
 800a970:	1fff7a18 	.word	0x1fff7a18
 800a974:	200000e2 	.word	0x200000e2
 800a978:	200000f2 	.word	0x200000f2

0800a97c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	4613      	mov	r3, r2
 800a988:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a98a:	2300      	movs	r3, #0
 800a98c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a98e:	2300      	movs	r3, #0
 800a990:	75fb      	strb	r3, [r7, #23]
 800a992:	e027      	b.n	800a9e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	0f1b      	lsrs	r3, r3, #28
 800a998:	2b09      	cmp	r3, #9
 800a99a:	d80b      	bhi.n	800a9b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	0f1b      	lsrs	r3, r3, #28
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	440b      	add	r3, r1
 800a9ac:	3230      	adds	r2, #48	@ 0x30
 800a9ae:	b2d2      	uxtb	r2, r2
 800a9b0:	701a      	strb	r2, [r3, #0]
 800a9b2:	e00a      	b.n	800a9ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	0f1b      	lsrs	r3, r3, #28
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
 800a9bc:	005b      	lsls	r3, r3, #1
 800a9be:	4619      	mov	r1, r3
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	440b      	add	r3, r1
 800a9c4:	3237      	adds	r2, #55	@ 0x37
 800a9c6:	b2d2      	uxtb	r2, r2
 800a9c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	011b      	lsls	r3, r3, #4
 800a9ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a9d0:	7dfb      	ldrb	r3, [r7, #23]
 800a9d2:	005b      	lsls	r3, r3, #1
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	4413      	add	r3, r2
 800a9da:	2200      	movs	r2, #0
 800a9dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a9de:	7dfb      	ldrb	r3, [r7, #23]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	75fb      	strb	r3, [r7, #23]
 800a9e4:	7dfa      	ldrb	r2, [r7, #23]
 800a9e6:	79fb      	ldrb	r3, [r7, #7]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d3d3      	bcc.n	800a994 <IntToUnicode+0x18>
  }
}
 800a9ec:	bf00      	nop
 800a9ee:	bf00      	nop
 800a9f0:	371c      	adds	r7, #28
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
	...

0800a9fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b08a      	sub	sp, #40	@ 0x28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa04:	f107 0314 	add.w	r3, r7, #20
 800aa08:	2200      	movs	r2, #0
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	605a      	str	r2, [r3, #4]
 800aa0e:	609a      	str	r2, [r3, #8]
 800aa10:	60da      	str	r2, [r3, #12]
 800aa12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa1c:	d13a      	bne.n	800aa94 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa1e:	2300      	movs	r3, #0
 800aa20:	613b      	str	r3, [r7, #16]
 800aa22:	4b1e      	ldr	r3, [pc, #120]	@ (800aa9c <HAL_PCD_MspInit+0xa0>)
 800aa24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa26:	4a1d      	ldr	r2, [pc, #116]	@ (800aa9c <HAL_PCD_MspInit+0xa0>)
 800aa28:	f043 0301 	orr.w	r3, r3, #1
 800aa2c:	6313      	str	r3, [r2, #48]	@ 0x30
 800aa2e:	4b1b      	ldr	r3, [pc, #108]	@ (800aa9c <HAL_PCD_MspInit+0xa0>)
 800aa30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	613b      	str	r3, [r7, #16]
 800aa38:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aa3a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800aa3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa40:	2302      	movs	r3, #2
 800aa42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa44:	2300      	movs	r3, #0
 800aa46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa4c:	230a      	movs	r3, #10
 800aa4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa50:	f107 0314 	add.w	r3, r7, #20
 800aa54:	4619      	mov	r1, r3
 800aa56:	4812      	ldr	r0, [pc, #72]	@ (800aaa0 <HAL_PCD_MspInit+0xa4>)
 800aa58:	f7f8 fc32 	bl	80032c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aa5c:	4b0f      	ldr	r3, [pc, #60]	@ (800aa9c <HAL_PCD_MspInit+0xa0>)
 800aa5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa60:	4a0e      	ldr	r2, [pc, #56]	@ (800aa9c <HAL_PCD_MspInit+0xa0>)
 800aa62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa66:	6353      	str	r3, [r2, #52]	@ 0x34
 800aa68:	2300      	movs	r3, #0
 800aa6a:	60fb      	str	r3, [r7, #12]
 800aa6c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa9c <HAL_PCD_MspInit+0xa0>)
 800aa6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa70:	4a0a      	ldr	r2, [pc, #40]	@ (800aa9c <HAL_PCD_MspInit+0xa0>)
 800aa72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aa76:	6453      	str	r3, [r2, #68]	@ 0x44
 800aa78:	4b08      	ldr	r3, [pc, #32]	@ (800aa9c <HAL_PCD_MspInit+0xa0>)
 800aa7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aa84:	2200      	movs	r2, #0
 800aa86:	2100      	movs	r1, #0
 800aa88:	2043      	movs	r0, #67	@ 0x43
 800aa8a:	f7f7 ffe0 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa8e:	2043      	movs	r0, #67	@ 0x43
 800aa90:	f7f7 fff9 	bl	8002a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa94:	bf00      	nop
 800aa96:	3728      	adds	r7, #40	@ 0x28
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	40023800 	.word	0x40023800
 800aaa0:	40020000 	.word	0x40020000

0800aaa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aab8:	4619      	mov	r1, r3
 800aaba:	4610      	mov	r0, r2
 800aabc:	f7fe fb55 	bl	800916a <USBD_LL_SetupStage>
}
 800aac0:	bf00      	nop
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	460b      	mov	r3, r1
 800aad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aada:	78fa      	ldrb	r2, [r7, #3]
 800aadc:	6879      	ldr	r1, [r7, #4]
 800aade:	4613      	mov	r3, r2
 800aae0:	00db      	lsls	r3, r3, #3
 800aae2:	4413      	add	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	440b      	add	r3, r1
 800aae8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	78fb      	ldrb	r3, [r7, #3]
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	f7fe fb8f 	bl	8009214 <USBD_LL_DataOutStage>
}
 800aaf6:	bf00      	nop
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	460b      	mov	r3, r1
 800ab08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ab10:	78fa      	ldrb	r2, [r7, #3]
 800ab12:	6879      	ldr	r1, [r7, #4]
 800ab14:	4613      	mov	r3, r2
 800ab16:	00db      	lsls	r3, r3, #3
 800ab18:	4413      	add	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	440b      	add	r3, r1
 800ab1e:	3320      	adds	r3, #32
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	78fb      	ldrb	r3, [r7, #3]
 800ab24:	4619      	mov	r1, r3
 800ab26:	f7fe fc28 	bl	800937a <USBD_LL_DataInStage>
}
 800ab2a:	bf00      	nop
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b082      	sub	sp, #8
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7fe fd62 	bl	800960a <USBD_LL_SOF>
}
 800ab46:	bf00      	nop
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b084      	sub	sp, #16
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab56:	2301      	movs	r3, #1
 800ab58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	79db      	ldrb	r3, [r3, #7]
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d001      	beq.n	800ab66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ab62:	f7f6 ff5f 	bl	8001a24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab6c:	7bfa      	ldrb	r2, [r7, #15]
 800ab6e:	4611      	mov	r1, r2
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7fe fd06 	bl	8009582 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fe fcae 	bl	80094de <USBD_LL_Reset>
}
 800ab82:	bf00      	nop
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe fd01 	bl	80095a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	6812      	ldr	r2, [r2, #0]
 800abae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800abb2:	f043 0301 	orr.w	r3, r3, #1
 800abb6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	7adb      	ldrb	r3, [r3, #11]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d005      	beq.n	800abcc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800abc0:	4b04      	ldr	r3, [pc, #16]	@ (800abd4 <HAL_PCD_SuspendCallback+0x48>)
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	4a03      	ldr	r2, [pc, #12]	@ (800abd4 <HAL_PCD_SuspendCallback+0x48>)
 800abc6:	f043 0306 	orr.w	r3, r3, #6
 800abca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800abcc:	bf00      	nop
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	e000ed00 	.word	0xe000ed00

0800abd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fe fcf7 	bl	80095da <USBD_LL_Resume>
}
 800abec:	bf00      	nop
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac06:	78fa      	ldrb	r2, [r7, #3]
 800ac08:	4611      	mov	r1, r2
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fe fd4f 	bl	80096ae <USBD_LL_IsoOUTIncomplete>
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	460b      	mov	r3, r1
 800ac22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac2a:	78fa      	ldrb	r2, [r7, #3]
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe fd0b 	bl	800964a <USBD_LL_IsoINIncomplete>
}
 800ac34:	bf00      	nop
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fe fd61 	bl	8009712 <USBD_LL_DevConnected>
}
 800ac50:	bf00      	nop
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fe fd5e 	bl	8009728 <USBD_LL_DevDisconnected>
}
 800ac6c:	bf00      	nop
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d13c      	bne.n	800acfe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac84:	4a20      	ldr	r2, [pc, #128]	@ (800ad08 <USBD_LL_Init+0x94>)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a1e      	ldr	r2, [pc, #120]	@ (800ad08 <USBD_LL_Init+0x94>)
 800ac90:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac94:	4b1c      	ldr	r3, [pc, #112]	@ (800ad08 <USBD_LL_Init+0x94>)
 800ac96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ac9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ac9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ad08 <USBD_LL_Init+0x94>)
 800ac9e:	2204      	movs	r2, #4
 800aca0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aca2:	4b19      	ldr	r3, [pc, #100]	@ (800ad08 <USBD_LL_Init+0x94>)
 800aca4:	2202      	movs	r2, #2
 800aca6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aca8:	4b17      	ldr	r3, [pc, #92]	@ (800ad08 <USBD_LL_Init+0x94>)
 800acaa:	2200      	movs	r2, #0
 800acac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800acae:	4b16      	ldr	r3, [pc, #88]	@ (800ad08 <USBD_LL_Init+0x94>)
 800acb0:	2202      	movs	r2, #2
 800acb2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800acb4:	4b14      	ldr	r3, [pc, #80]	@ (800ad08 <USBD_LL_Init+0x94>)
 800acb6:	2200      	movs	r2, #0
 800acb8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800acba:	4b13      	ldr	r3, [pc, #76]	@ (800ad08 <USBD_LL_Init+0x94>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800acc0:	4b11      	ldr	r3, [pc, #68]	@ (800ad08 <USBD_LL_Init+0x94>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800acc6:	4b10      	ldr	r3, [pc, #64]	@ (800ad08 <USBD_LL_Init+0x94>)
 800acc8:	2200      	movs	r2, #0
 800acca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800accc:	4b0e      	ldr	r3, [pc, #56]	@ (800ad08 <USBD_LL_Init+0x94>)
 800acce:	2200      	movs	r2, #0
 800acd0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800acd2:	480d      	ldr	r0, [pc, #52]	@ (800ad08 <USBD_LL_Init+0x94>)
 800acd4:	f7f8 fc91 	bl	80035fa <HAL_PCD_Init>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800acde:	f7f6 fea1 	bl	8001a24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ace2:	2180      	movs	r1, #128	@ 0x80
 800ace4:	4808      	ldr	r0, [pc, #32]	@ (800ad08 <USBD_LL_Init+0x94>)
 800ace6:	f7f9 febc 	bl	8004a62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800acea:	2240      	movs	r2, #64	@ 0x40
 800acec:	2100      	movs	r1, #0
 800acee:	4806      	ldr	r0, [pc, #24]	@ (800ad08 <USBD_LL_Init+0x94>)
 800acf0:	f7f9 fe70 	bl	80049d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800acf4:	2280      	movs	r2, #128	@ 0x80
 800acf6:	2101      	movs	r1, #1
 800acf8:	4803      	ldr	r0, [pc, #12]	@ (800ad08 <USBD_LL_Init+0x94>)
 800acfa:	f7f9 fe6b 	bl	80049d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20001260 	.word	0x20001260

0800ad0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7f8 fd78 	bl	8003818 <HAL_PCD_Start>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 f942 	bl	800afb8 <USBD_Get_USB_Status>
 800ad34:	4603      	mov	r3, r0
 800ad36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad38:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b084      	sub	sp, #16
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	4608      	mov	r0, r1
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	461a      	mov	r2, r3
 800ad50:	4603      	mov	r3, r0
 800ad52:	70fb      	strb	r3, [r7, #3]
 800ad54:	460b      	mov	r3, r1
 800ad56:	70bb      	strb	r3, [r7, #2]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad60:	2300      	movs	r3, #0
 800ad62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ad6a:	78bb      	ldrb	r3, [r7, #2]
 800ad6c:	883a      	ldrh	r2, [r7, #0]
 800ad6e:	78f9      	ldrb	r1, [r7, #3]
 800ad70:	f7f9 fa4c 	bl	800420c <HAL_PCD_EP_Open>
 800ad74:	4603      	mov	r3, r0
 800ad76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 f91c 	bl	800afb8 <USBD_Get_USB_Status>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b084      	sub	sp, #16
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	460b      	mov	r3, r1
 800ad98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ada8:	78fa      	ldrb	r2, [r7, #3]
 800adaa:	4611      	mov	r1, r2
 800adac:	4618      	mov	r0, r3
 800adae:	f7f9 fa95 	bl	80042dc <HAL_PCD_EP_Close>
 800adb2:	4603      	mov	r3, r0
 800adb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 f8fd 	bl	800afb8 <USBD_Get_USB_Status>
 800adbe:	4603      	mov	r3, r0
 800adc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ade6:	78fa      	ldrb	r2, [r7, #3]
 800ade8:	4611      	mov	r1, r2
 800adea:	4618      	mov	r0, r3
 800adec:	f7f9 fb4d 	bl	800448a <HAL_PCD_EP_SetStall>
 800adf0:	4603      	mov	r3, r0
 800adf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adf4:	7bfb      	ldrb	r3, [r7, #15]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 f8de 	bl	800afb8 <USBD_Get_USB_Status>
 800adfc:	4603      	mov	r3, r0
 800adfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	460b      	mov	r3, r1
 800ae14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae24:	78fa      	ldrb	r2, [r7, #3]
 800ae26:	4611      	mov	r1, r2
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7f9 fb91 	bl	8004550 <HAL_PCD_EP_ClrStall>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae32:	7bfb      	ldrb	r3, [r7, #15]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 f8bf 	bl	800afb8 <USBD_Get_USB_Status>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	da0b      	bge.n	800ae7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae64:	78fb      	ldrb	r3, [r7, #3]
 800ae66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae6a:	68f9      	ldr	r1, [r7, #12]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	00db      	lsls	r3, r3, #3
 800ae70:	4413      	add	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	440b      	add	r3, r1
 800ae76:	3316      	adds	r3, #22
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	e00b      	b.n	800ae94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae7c:	78fb      	ldrb	r3, [r7, #3]
 800ae7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae82:	68f9      	ldr	r1, [r7, #12]
 800ae84:	4613      	mov	r3, r2
 800ae86:	00db      	lsls	r3, r3, #3
 800ae88:	4413      	add	r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	440b      	add	r3, r1
 800ae8e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ae92:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aeba:	78fa      	ldrb	r2, [r7, #3]
 800aebc:	4611      	mov	r1, r2
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7f9 f980 	bl	80041c4 <HAL_PCD_SetAddress>
 800aec4:	4603      	mov	r3, r0
 800aec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 f874 	bl	800afb8 <USBD_Get_USB_Status>
 800aed0:	4603      	mov	r3, r0
 800aed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aed4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b086      	sub	sp, #24
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	60f8      	str	r0, [r7, #12]
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	603b      	str	r3, [r7, #0]
 800aeea:	460b      	mov	r3, r1
 800aeec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aefc:	7af9      	ldrb	r1, [r7, #11]
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	f7f9 fa88 	bl	8004416 <HAL_PCD_EP_Transmit>
 800af06:	4603      	mov	r3, r0
 800af08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af0a:	7dfb      	ldrb	r3, [r7, #23]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 f853 	bl	800afb8 <USBD_Get_USB_Status>
 800af12:	4603      	mov	r3, r0
 800af14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af16:	7dbb      	ldrb	r3, [r7, #22]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3718      	adds	r7, #24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	607a      	str	r2, [r7, #4]
 800af2a:	603b      	str	r3, [r7, #0]
 800af2c:	460b      	mov	r3, r1
 800af2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af34:	2300      	movs	r3, #0
 800af36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800af3e:	7af9      	ldrb	r1, [r7, #11]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	f7f9 fa14 	bl	8004370 <HAL_PCD_EP_Receive>
 800af48:	4603      	mov	r3, r0
 800af4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 f832 	bl	800afb8 <USBD_Get_USB_Status>
 800af54:	4603      	mov	r3, r0
 800af56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af58:	7dbb      	ldrb	r3, [r7, #22]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3718      	adds	r7, #24
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b082      	sub	sp, #8
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	460b      	mov	r3, r1
 800af6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af74:	78fa      	ldrb	r2, [r7, #3]
 800af76:	4611      	mov	r1, r2
 800af78:	4618      	mov	r0, r3
 800af7a:	f7f9 fa34 	bl	80043e6 <HAL_PCD_EP_GetRxCount>
 800af7e:	4603      	mov	r3, r0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af90:	4b03      	ldr	r3, [pc, #12]	@ (800afa0 <USBD_static_malloc+0x18>)
}
 800af92:	4618      	mov	r0, r3
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	20001744 	.word	0x20001744

0800afa4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]

}
 800afac:	bf00      	nop
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	4603      	mov	r3, r0
 800afc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800afc6:	79fb      	ldrb	r3, [r7, #7]
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d817      	bhi.n	800affc <USBD_Get_USB_Status+0x44>
 800afcc:	a201      	add	r2, pc, #4	@ (adr r2, 800afd4 <USBD_Get_USB_Status+0x1c>)
 800afce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd2:	bf00      	nop
 800afd4:	0800afe5 	.word	0x0800afe5
 800afd8:	0800afeb 	.word	0x0800afeb
 800afdc:	0800aff1 	.word	0x0800aff1
 800afe0:	0800aff7 	.word	0x0800aff7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	73fb      	strb	r3, [r7, #15]
    break;
 800afe8:	e00b      	b.n	800b002 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afea:	2303      	movs	r3, #3
 800afec:	73fb      	strb	r3, [r7, #15]
    break;
 800afee:	e008      	b.n	800b002 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aff0:	2301      	movs	r3, #1
 800aff2:	73fb      	strb	r3, [r7, #15]
    break;
 800aff4:	e005      	b.n	800b002 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aff6:	2303      	movs	r3, #3
 800aff8:	73fb      	strb	r3, [r7, #15]
    break;
 800affa:	e002      	b.n	800b002 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800affc:	2303      	movs	r3, #3
 800affe:	73fb      	strb	r3, [r7, #15]
    break;
 800b000:	bf00      	nop
  }
  return usb_status;
 800b002:	7bfb      	ldrb	r3, [r7, #15]
}
 800b004:	4618      	mov	r0, r3
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <atoi>:
 800b010:	220a      	movs	r2, #10
 800b012:	2100      	movs	r1, #0
 800b014:	f000 b87a 	b.w	800b10c <strtol>

0800b018 <_strtol_l.constprop.0>:
 800b018:	2b24      	cmp	r3, #36	@ 0x24
 800b01a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b01e:	4686      	mov	lr, r0
 800b020:	4690      	mov	r8, r2
 800b022:	d801      	bhi.n	800b028 <_strtol_l.constprop.0+0x10>
 800b024:	2b01      	cmp	r3, #1
 800b026:	d106      	bne.n	800b036 <_strtol_l.constprop.0+0x1e>
 800b028:	f000 fe74 	bl	800bd14 <__errno>
 800b02c:	2316      	movs	r3, #22
 800b02e:	6003      	str	r3, [r0, #0]
 800b030:	2000      	movs	r0, #0
 800b032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b036:	4834      	ldr	r0, [pc, #208]	@ (800b108 <_strtol_l.constprop.0+0xf0>)
 800b038:	460d      	mov	r5, r1
 800b03a:	462a      	mov	r2, r5
 800b03c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b040:	5d06      	ldrb	r6, [r0, r4]
 800b042:	f016 0608 	ands.w	r6, r6, #8
 800b046:	d1f8      	bne.n	800b03a <_strtol_l.constprop.0+0x22>
 800b048:	2c2d      	cmp	r4, #45	@ 0x2d
 800b04a:	d12d      	bne.n	800b0a8 <_strtol_l.constprop.0+0x90>
 800b04c:	782c      	ldrb	r4, [r5, #0]
 800b04e:	2601      	movs	r6, #1
 800b050:	1c95      	adds	r5, r2, #2
 800b052:	f033 0210 	bics.w	r2, r3, #16
 800b056:	d109      	bne.n	800b06c <_strtol_l.constprop.0+0x54>
 800b058:	2c30      	cmp	r4, #48	@ 0x30
 800b05a:	d12a      	bne.n	800b0b2 <_strtol_l.constprop.0+0x9a>
 800b05c:	782a      	ldrb	r2, [r5, #0]
 800b05e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b062:	2a58      	cmp	r2, #88	@ 0x58
 800b064:	d125      	bne.n	800b0b2 <_strtol_l.constprop.0+0x9a>
 800b066:	786c      	ldrb	r4, [r5, #1]
 800b068:	2310      	movs	r3, #16
 800b06a:	3502      	adds	r5, #2
 800b06c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b070:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b074:	2200      	movs	r2, #0
 800b076:	fbbc f9f3 	udiv	r9, ip, r3
 800b07a:	4610      	mov	r0, r2
 800b07c:	fb03 ca19 	mls	sl, r3, r9, ip
 800b080:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b084:	2f09      	cmp	r7, #9
 800b086:	d81b      	bhi.n	800b0c0 <_strtol_l.constprop.0+0xa8>
 800b088:	463c      	mov	r4, r7
 800b08a:	42a3      	cmp	r3, r4
 800b08c:	dd27      	ble.n	800b0de <_strtol_l.constprop.0+0xc6>
 800b08e:	1c57      	adds	r7, r2, #1
 800b090:	d007      	beq.n	800b0a2 <_strtol_l.constprop.0+0x8a>
 800b092:	4581      	cmp	r9, r0
 800b094:	d320      	bcc.n	800b0d8 <_strtol_l.constprop.0+0xc0>
 800b096:	d101      	bne.n	800b09c <_strtol_l.constprop.0+0x84>
 800b098:	45a2      	cmp	sl, r4
 800b09a:	db1d      	blt.n	800b0d8 <_strtol_l.constprop.0+0xc0>
 800b09c:	fb00 4003 	mla	r0, r0, r3, r4
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0a6:	e7eb      	b.n	800b080 <_strtol_l.constprop.0+0x68>
 800b0a8:	2c2b      	cmp	r4, #43	@ 0x2b
 800b0aa:	bf04      	itt	eq
 800b0ac:	782c      	ldrbeq	r4, [r5, #0]
 800b0ae:	1c95      	addeq	r5, r2, #2
 800b0b0:	e7cf      	b.n	800b052 <_strtol_l.constprop.0+0x3a>
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1da      	bne.n	800b06c <_strtol_l.constprop.0+0x54>
 800b0b6:	2c30      	cmp	r4, #48	@ 0x30
 800b0b8:	bf0c      	ite	eq
 800b0ba:	2308      	moveq	r3, #8
 800b0bc:	230a      	movne	r3, #10
 800b0be:	e7d5      	b.n	800b06c <_strtol_l.constprop.0+0x54>
 800b0c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b0c4:	2f19      	cmp	r7, #25
 800b0c6:	d801      	bhi.n	800b0cc <_strtol_l.constprop.0+0xb4>
 800b0c8:	3c37      	subs	r4, #55	@ 0x37
 800b0ca:	e7de      	b.n	800b08a <_strtol_l.constprop.0+0x72>
 800b0cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b0d0:	2f19      	cmp	r7, #25
 800b0d2:	d804      	bhi.n	800b0de <_strtol_l.constprop.0+0xc6>
 800b0d4:	3c57      	subs	r4, #87	@ 0x57
 800b0d6:	e7d8      	b.n	800b08a <_strtol_l.constprop.0+0x72>
 800b0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0dc:	e7e1      	b.n	800b0a2 <_strtol_l.constprop.0+0x8a>
 800b0de:	1c53      	adds	r3, r2, #1
 800b0e0:	d108      	bne.n	800b0f4 <_strtol_l.constprop.0+0xdc>
 800b0e2:	2322      	movs	r3, #34	@ 0x22
 800b0e4:	f8ce 3000 	str.w	r3, [lr]
 800b0e8:	4660      	mov	r0, ip
 800b0ea:	f1b8 0f00 	cmp.w	r8, #0
 800b0ee:	d0a0      	beq.n	800b032 <_strtol_l.constprop.0+0x1a>
 800b0f0:	1e69      	subs	r1, r5, #1
 800b0f2:	e006      	b.n	800b102 <_strtol_l.constprop.0+0xea>
 800b0f4:	b106      	cbz	r6, 800b0f8 <_strtol_l.constprop.0+0xe0>
 800b0f6:	4240      	negs	r0, r0
 800b0f8:	f1b8 0f00 	cmp.w	r8, #0
 800b0fc:	d099      	beq.n	800b032 <_strtol_l.constprop.0+0x1a>
 800b0fe:	2a00      	cmp	r2, #0
 800b100:	d1f6      	bne.n	800b0f0 <_strtol_l.constprop.0+0xd8>
 800b102:	f8c8 1000 	str.w	r1, [r8]
 800b106:	e794      	b.n	800b032 <_strtol_l.constprop.0+0x1a>
 800b108:	0800e0c9 	.word	0x0800e0c9

0800b10c <strtol>:
 800b10c:	4613      	mov	r3, r2
 800b10e:	460a      	mov	r2, r1
 800b110:	4601      	mov	r1, r0
 800b112:	4802      	ldr	r0, [pc, #8]	@ (800b11c <strtol+0x10>)
 800b114:	6800      	ldr	r0, [r0, #0]
 800b116:	f7ff bf7f 	b.w	800b018 <_strtol_l.constprop.0>
 800b11a:	bf00      	nop
 800b11c:	20000108 	.word	0x20000108

0800b120 <__cvt>:
 800b120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b124:	ec57 6b10 	vmov	r6, r7, d0
 800b128:	2f00      	cmp	r7, #0
 800b12a:	460c      	mov	r4, r1
 800b12c:	4619      	mov	r1, r3
 800b12e:	463b      	mov	r3, r7
 800b130:	bfbb      	ittet	lt
 800b132:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b136:	461f      	movlt	r7, r3
 800b138:	2300      	movge	r3, #0
 800b13a:	232d      	movlt	r3, #45	@ 0x2d
 800b13c:	700b      	strb	r3, [r1, #0]
 800b13e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b140:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b144:	4691      	mov	r9, r2
 800b146:	f023 0820 	bic.w	r8, r3, #32
 800b14a:	bfbc      	itt	lt
 800b14c:	4632      	movlt	r2, r6
 800b14e:	4616      	movlt	r6, r2
 800b150:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b154:	d005      	beq.n	800b162 <__cvt+0x42>
 800b156:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b15a:	d100      	bne.n	800b15e <__cvt+0x3e>
 800b15c:	3401      	adds	r4, #1
 800b15e:	2102      	movs	r1, #2
 800b160:	e000      	b.n	800b164 <__cvt+0x44>
 800b162:	2103      	movs	r1, #3
 800b164:	ab03      	add	r3, sp, #12
 800b166:	9301      	str	r3, [sp, #4]
 800b168:	ab02      	add	r3, sp, #8
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	ec47 6b10 	vmov	d0, r6, r7
 800b170:	4653      	mov	r3, sl
 800b172:	4622      	mov	r2, r4
 800b174:	f000 fe84 	bl	800be80 <_dtoa_r>
 800b178:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b17c:	4605      	mov	r5, r0
 800b17e:	d119      	bne.n	800b1b4 <__cvt+0x94>
 800b180:	f019 0f01 	tst.w	r9, #1
 800b184:	d00e      	beq.n	800b1a4 <__cvt+0x84>
 800b186:	eb00 0904 	add.w	r9, r0, r4
 800b18a:	2200      	movs	r2, #0
 800b18c:	2300      	movs	r3, #0
 800b18e:	4630      	mov	r0, r6
 800b190:	4639      	mov	r1, r7
 800b192:	f7f5 fca1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b196:	b108      	cbz	r0, 800b19c <__cvt+0x7c>
 800b198:	f8cd 900c 	str.w	r9, [sp, #12]
 800b19c:	2230      	movs	r2, #48	@ 0x30
 800b19e:	9b03      	ldr	r3, [sp, #12]
 800b1a0:	454b      	cmp	r3, r9
 800b1a2:	d31e      	bcc.n	800b1e2 <__cvt+0xc2>
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1a8:	1b5b      	subs	r3, r3, r5
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	6013      	str	r3, [r2, #0]
 800b1ae:	b004      	add	sp, #16
 800b1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b1b8:	eb00 0904 	add.w	r9, r0, r4
 800b1bc:	d1e5      	bne.n	800b18a <__cvt+0x6a>
 800b1be:	7803      	ldrb	r3, [r0, #0]
 800b1c0:	2b30      	cmp	r3, #48	@ 0x30
 800b1c2:	d10a      	bne.n	800b1da <__cvt+0xba>
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	4639      	mov	r1, r7
 800b1cc:	f7f5 fc84 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1d0:	b918      	cbnz	r0, 800b1da <__cvt+0xba>
 800b1d2:	f1c4 0401 	rsb	r4, r4, #1
 800b1d6:	f8ca 4000 	str.w	r4, [sl]
 800b1da:	f8da 3000 	ldr.w	r3, [sl]
 800b1de:	4499      	add	r9, r3
 800b1e0:	e7d3      	b.n	800b18a <__cvt+0x6a>
 800b1e2:	1c59      	adds	r1, r3, #1
 800b1e4:	9103      	str	r1, [sp, #12]
 800b1e6:	701a      	strb	r2, [r3, #0]
 800b1e8:	e7d9      	b.n	800b19e <__cvt+0x7e>

0800b1ea <__exponent>:
 800b1ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1ec:	2900      	cmp	r1, #0
 800b1ee:	bfba      	itte	lt
 800b1f0:	4249      	neglt	r1, r1
 800b1f2:	232d      	movlt	r3, #45	@ 0x2d
 800b1f4:	232b      	movge	r3, #43	@ 0x2b
 800b1f6:	2909      	cmp	r1, #9
 800b1f8:	7002      	strb	r2, [r0, #0]
 800b1fa:	7043      	strb	r3, [r0, #1]
 800b1fc:	dd29      	ble.n	800b252 <__exponent+0x68>
 800b1fe:	f10d 0307 	add.w	r3, sp, #7
 800b202:	461d      	mov	r5, r3
 800b204:	270a      	movs	r7, #10
 800b206:	461a      	mov	r2, r3
 800b208:	fbb1 f6f7 	udiv	r6, r1, r7
 800b20c:	fb07 1416 	mls	r4, r7, r6, r1
 800b210:	3430      	adds	r4, #48	@ 0x30
 800b212:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b216:	460c      	mov	r4, r1
 800b218:	2c63      	cmp	r4, #99	@ 0x63
 800b21a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b21e:	4631      	mov	r1, r6
 800b220:	dcf1      	bgt.n	800b206 <__exponent+0x1c>
 800b222:	3130      	adds	r1, #48	@ 0x30
 800b224:	1e94      	subs	r4, r2, #2
 800b226:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b22a:	1c41      	adds	r1, r0, #1
 800b22c:	4623      	mov	r3, r4
 800b22e:	42ab      	cmp	r3, r5
 800b230:	d30a      	bcc.n	800b248 <__exponent+0x5e>
 800b232:	f10d 0309 	add.w	r3, sp, #9
 800b236:	1a9b      	subs	r3, r3, r2
 800b238:	42ac      	cmp	r4, r5
 800b23a:	bf88      	it	hi
 800b23c:	2300      	movhi	r3, #0
 800b23e:	3302      	adds	r3, #2
 800b240:	4403      	add	r3, r0
 800b242:	1a18      	subs	r0, r3, r0
 800b244:	b003      	add	sp, #12
 800b246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b248:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b24c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b250:	e7ed      	b.n	800b22e <__exponent+0x44>
 800b252:	2330      	movs	r3, #48	@ 0x30
 800b254:	3130      	adds	r1, #48	@ 0x30
 800b256:	7083      	strb	r3, [r0, #2]
 800b258:	70c1      	strb	r1, [r0, #3]
 800b25a:	1d03      	adds	r3, r0, #4
 800b25c:	e7f1      	b.n	800b242 <__exponent+0x58>
	...

0800b260 <_printf_float>:
 800b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b264:	b08d      	sub	sp, #52	@ 0x34
 800b266:	460c      	mov	r4, r1
 800b268:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b26c:	4616      	mov	r6, r2
 800b26e:	461f      	mov	r7, r3
 800b270:	4605      	mov	r5, r0
 800b272:	f000 fd05 	bl	800bc80 <_localeconv_r>
 800b276:	6803      	ldr	r3, [r0, #0]
 800b278:	9304      	str	r3, [sp, #16]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7f5 f800 	bl	8000280 <strlen>
 800b280:	2300      	movs	r3, #0
 800b282:	930a      	str	r3, [sp, #40]	@ 0x28
 800b284:	f8d8 3000 	ldr.w	r3, [r8]
 800b288:	9005      	str	r0, [sp, #20]
 800b28a:	3307      	adds	r3, #7
 800b28c:	f023 0307 	bic.w	r3, r3, #7
 800b290:	f103 0208 	add.w	r2, r3, #8
 800b294:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b298:	f8d4 b000 	ldr.w	fp, [r4]
 800b29c:	f8c8 2000 	str.w	r2, [r8]
 800b2a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b2a8:	9307      	str	r3, [sp, #28]
 800b2aa:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b2b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2b6:	4b9c      	ldr	r3, [pc, #624]	@ (800b528 <_printf_float+0x2c8>)
 800b2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2bc:	f7f5 fc3e 	bl	8000b3c <__aeabi_dcmpun>
 800b2c0:	bb70      	cbnz	r0, 800b320 <_printf_float+0xc0>
 800b2c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2c6:	4b98      	ldr	r3, [pc, #608]	@ (800b528 <_printf_float+0x2c8>)
 800b2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2cc:	f7f5 fc18 	bl	8000b00 <__aeabi_dcmple>
 800b2d0:	bb30      	cbnz	r0, 800b320 <_printf_float+0xc0>
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	4649      	mov	r1, r9
 800b2da:	f7f5 fc07 	bl	8000aec <__aeabi_dcmplt>
 800b2de:	b110      	cbz	r0, 800b2e6 <_printf_float+0x86>
 800b2e0:	232d      	movs	r3, #45	@ 0x2d
 800b2e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2e6:	4a91      	ldr	r2, [pc, #580]	@ (800b52c <_printf_float+0x2cc>)
 800b2e8:	4b91      	ldr	r3, [pc, #580]	@ (800b530 <_printf_float+0x2d0>)
 800b2ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b2ee:	bf94      	ite	ls
 800b2f0:	4690      	movls	r8, r2
 800b2f2:	4698      	movhi	r8, r3
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	6123      	str	r3, [r4, #16]
 800b2f8:	f02b 0304 	bic.w	r3, fp, #4
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	f04f 0900 	mov.w	r9, #0
 800b302:	9700      	str	r7, [sp, #0]
 800b304:	4633      	mov	r3, r6
 800b306:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b308:	4621      	mov	r1, r4
 800b30a:	4628      	mov	r0, r5
 800b30c:	f000 f9d2 	bl	800b6b4 <_printf_common>
 800b310:	3001      	adds	r0, #1
 800b312:	f040 808d 	bne.w	800b430 <_printf_float+0x1d0>
 800b316:	f04f 30ff 	mov.w	r0, #4294967295
 800b31a:	b00d      	add	sp, #52	@ 0x34
 800b31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b320:	4642      	mov	r2, r8
 800b322:	464b      	mov	r3, r9
 800b324:	4640      	mov	r0, r8
 800b326:	4649      	mov	r1, r9
 800b328:	f7f5 fc08 	bl	8000b3c <__aeabi_dcmpun>
 800b32c:	b140      	cbz	r0, 800b340 <_printf_float+0xe0>
 800b32e:	464b      	mov	r3, r9
 800b330:	2b00      	cmp	r3, #0
 800b332:	bfbc      	itt	lt
 800b334:	232d      	movlt	r3, #45	@ 0x2d
 800b336:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b33a:	4a7e      	ldr	r2, [pc, #504]	@ (800b534 <_printf_float+0x2d4>)
 800b33c:	4b7e      	ldr	r3, [pc, #504]	@ (800b538 <_printf_float+0x2d8>)
 800b33e:	e7d4      	b.n	800b2ea <_printf_float+0x8a>
 800b340:	6863      	ldr	r3, [r4, #4]
 800b342:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b346:	9206      	str	r2, [sp, #24]
 800b348:	1c5a      	adds	r2, r3, #1
 800b34a:	d13b      	bne.n	800b3c4 <_printf_float+0x164>
 800b34c:	2306      	movs	r3, #6
 800b34e:	6063      	str	r3, [r4, #4]
 800b350:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b354:	2300      	movs	r3, #0
 800b356:	6022      	str	r2, [r4, #0]
 800b358:	9303      	str	r3, [sp, #12]
 800b35a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b35c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b360:	ab09      	add	r3, sp, #36	@ 0x24
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	6861      	ldr	r1, [r4, #4]
 800b366:	ec49 8b10 	vmov	d0, r8, r9
 800b36a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b36e:	4628      	mov	r0, r5
 800b370:	f7ff fed6 	bl	800b120 <__cvt>
 800b374:	9b06      	ldr	r3, [sp, #24]
 800b376:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b378:	2b47      	cmp	r3, #71	@ 0x47
 800b37a:	4680      	mov	r8, r0
 800b37c:	d129      	bne.n	800b3d2 <_printf_float+0x172>
 800b37e:	1cc8      	adds	r0, r1, #3
 800b380:	db02      	blt.n	800b388 <_printf_float+0x128>
 800b382:	6863      	ldr	r3, [r4, #4]
 800b384:	4299      	cmp	r1, r3
 800b386:	dd41      	ble.n	800b40c <_printf_float+0x1ac>
 800b388:	f1aa 0a02 	sub.w	sl, sl, #2
 800b38c:	fa5f fa8a 	uxtb.w	sl, sl
 800b390:	3901      	subs	r1, #1
 800b392:	4652      	mov	r2, sl
 800b394:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b398:	9109      	str	r1, [sp, #36]	@ 0x24
 800b39a:	f7ff ff26 	bl	800b1ea <__exponent>
 800b39e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3a0:	1813      	adds	r3, r2, r0
 800b3a2:	2a01      	cmp	r2, #1
 800b3a4:	4681      	mov	r9, r0
 800b3a6:	6123      	str	r3, [r4, #16]
 800b3a8:	dc02      	bgt.n	800b3b0 <_printf_float+0x150>
 800b3aa:	6822      	ldr	r2, [r4, #0]
 800b3ac:	07d2      	lsls	r2, r2, #31
 800b3ae:	d501      	bpl.n	800b3b4 <_printf_float+0x154>
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	6123      	str	r3, [r4, #16]
 800b3b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d0a2      	beq.n	800b302 <_printf_float+0xa2>
 800b3bc:	232d      	movs	r3, #45	@ 0x2d
 800b3be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3c2:	e79e      	b.n	800b302 <_printf_float+0xa2>
 800b3c4:	9a06      	ldr	r2, [sp, #24]
 800b3c6:	2a47      	cmp	r2, #71	@ 0x47
 800b3c8:	d1c2      	bne.n	800b350 <_printf_float+0xf0>
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1c0      	bne.n	800b350 <_printf_float+0xf0>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e7bd      	b.n	800b34e <_printf_float+0xee>
 800b3d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b3d6:	d9db      	bls.n	800b390 <_printf_float+0x130>
 800b3d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b3dc:	d118      	bne.n	800b410 <_printf_float+0x1b0>
 800b3de:	2900      	cmp	r1, #0
 800b3e0:	6863      	ldr	r3, [r4, #4]
 800b3e2:	dd0b      	ble.n	800b3fc <_printf_float+0x19c>
 800b3e4:	6121      	str	r1, [r4, #16]
 800b3e6:	b913      	cbnz	r3, 800b3ee <_printf_float+0x18e>
 800b3e8:	6822      	ldr	r2, [r4, #0]
 800b3ea:	07d0      	lsls	r0, r2, #31
 800b3ec:	d502      	bpl.n	800b3f4 <_printf_float+0x194>
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	440b      	add	r3, r1
 800b3f2:	6123      	str	r3, [r4, #16]
 800b3f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b3f6:	f04f 0900 	mov.w	r9, #0
 800b3fa:	e7db      	b.n	800b3b4 <_printf_float+0x154>
 800b3fc:	b913      	cbnz	r3, 800b404 <_printf_float+0x1a4>
 800b3fe:	6822      	ldr	r2, [r4, #0]
 800b400:	07d2      	lsls	r2, r2, #31
 800b402:	d501      	bpl.n	800b408 <_printf_float+0x1a8>
 800b404:	3302      	adds	r3, #2
 800b406:	e7f4      	b.n	800b3f2 <_printf_float+0x192>
 800b408:	2301      	movs	r3, #1
 800b40a:	e7f2      	b.n	800b3f2 <_printf_float+0x192>
 800b40c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b412:	4299      	cmp	r1, r3
 800b414:	db05      	blt.n	800b422 <_printf_float+0x1c2>
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	6121      	str	r1, [r4, #16]
 800b41a:	07d8      	lsls	r0, r3, #31
 800b41c:	d5ea      	bpl.n	800b3f4 <_printf_float+0x194>
 800b41e:	1c4b      	adds	r3, r1, #1
 800b420:	e7e7      	b.n	800b3f2 <_printf_float+0x192>
 800b422:	2900      	cmp	r1, #0
 800b424:	bfd4      	ite	le
 800b426:	f1c1 0202 	rsble	r2, r1, #2
 800b42a:	2201      	movgt	r2, #1
 800b42c:	4413      	add	r3, r2
 800b42e:	e7e0      	b.n	800b3f2 <_printf_float+0x192>
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	055a      	lsls	r2, r3, #21
 800b434:	d407      	bmi.n	800b446 <_printf_float+0x1e6>
 800b436:	6923      	ldr	r3, [r4, #16]
 800b438:	4642      	mov	r2, r8
 800b43a:	4631      	mov	r1, r6
 800b43c:	4628      	mov	r0, r5
 800b43e:	47b8      	blx	r7
 800b440:	3001      	adds	r0, #1
 800b442:	d12b      	bne.n	800b49c <_printf_float+0x23c>
 800b444:	e767      	b.n	800b316 <_printf_float+0xb6>
 800b446:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b44a:	f240 80dd 	bls.w	800b608 <_printf_float+0x3a8>
 800b44e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b452:	2200      	movs	r2, #0
 800b454:	2300      	movs	r3, #0
 800b456:	f7f5 fb3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d033      	beq.n	800b4c6 <_printf_float+0x266>
 800b45e:	4a37      	ldr	r2, [pc, #220]	@ (800b53c <_printf_float+0x2dc>)
 800b460:	2301      	movs	r3, #1
 800b462:	4631      	mov	r1, r6
 800b464:	4628      	mov	r0, r5
 800b466:	47b8      	blx	r7
 800b468:	3001      	adds	r0, #1
 800b46a:	f43f af54 	beq.w	800b316 <_printf_float+0xb6>
 800b46e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b472:	4543      	cmp	r3, r8
 800b474:	db02      	blt.n	800b47c <_printf_float+0x21c>
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	07d8      	lsls	r0, r3, #31
 800b47a:	d50f      	bpl.n	800b49c <_printf_float+0x23c>
 800b47c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b480:	4631      	mov	r1, r6
 800b482:	4628      	mov	r0, r5
 800b484:	47b8      	blx	r7
 800b486:	3001      	adds	r0, #1
 800b488:	f43f af45 	beq.w	800b316 <_printf_float+0xb6>
 800b48c:	f04f 0900 	mov.w	r9, #0
 800b490:	f108 38ff 	add.w	r8, r8, #4294967295
 800b494:	f104 0a1a 	add.w	sl, r4, #26
 800b498:	45c8      	cmp	r8, r9
 800b49a:	dc09      	bgt.n	800b4b0 <_printf_float+0x250>
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	079b      	lsls	r3, r3, #30
 800b4a0:	f100 8103 	bmi.w	800b6aa <_printf_float+0x44a>
 800b4a4:	68e0      	ldr	r0, [r4, #12]
 800b4a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4a8:	4298      	cmp	r0, r3
 800b4aa:	bfb8      	it	lt
 800b4ac:	4618      	movlt	r0, r3
 800b4ae:	e734      	b.n	800b31a <_printf_float+0xba>
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	4652      	mov	r2, sl
 800b4b4:	4631      	mov	r1, r6
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	47b8      	blx	r7
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	f43f af2b 	beq.w	800b316 <_printf_float+0xb6>
 800b4c0:	f109 0901 	add.w	r9, r9, #1
 800b4c4:	e7e8      	b.n	800b498 <_printf_float+0x238>
 800b4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	dc39      	bgt.n	800b540 <_printf_float+0x2e0>
 800b4cc:	4a1b      	ldr	r2, [pc, #108]	@ (800b53c <_printf_float+0x2dc>)
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	4631      	mov	r1, r6
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	47b8      	blx	r7
 800b4d6:	3001      	adds	r0, #1
 800b4d8:	f43f af1d 	beq.w	800b316 <_printf_float+0xb6>
 800b4dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b4e0:	ea59 0303 	orrs.w	r3, r9, r3
 800b4e4:	d102      	bne.n	800b4ec <_printf_float+0x28c>
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	07d9      	lsls	r1, r3, #31
 800b4ea:	d5d7      	bpl.n	800b49c <_printf_float+0x23c>
 800b4ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4f0:	4631      	mov	r1, r6
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	47b8      	blx	r7
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	f43f af0d 	beq.w	800b316 <_printf_float+0xb6>
 800b4fc:	f04f 0a00 	mov.w	sl, #0
 800b500:	f104 0b1a 	add.w	fp, r4, #26
 800b504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b506:	425b      	negs	r3, r3
 800b508:	4553      	cmp	r3, sl
 800b50a:	dc01      	bgt.n	800b510 <_printf_float+0x2b0>
 800b50c:	464b      	mov	r3, r9
 800b50e:	e793      	b.n	800b438 <_printf_float+0x1d8>
 800b510:	2301      	movs	r3, #1
 800b512:	465a      	mov	r2, fp
 800b514:	4631      	mov	r1, r6
 800b516:	4628      	mov	r0, r5
 800b518:	47b8      	blx	r7
 800b51a:	3001      	adds	r0, #1
 800b51c:	f43f aefb 	beq.w	800b316 <_printf_float+0xb6>
 800b520:	f10a 0a01 	add.w	sl, sl, #1
 800b524:	e7ee      	b.n	800b504 <_printf_float+0x2a4>
 800b526:	bf00      	nop
 800b528:	7fefffff 	.word	0x7fefffff
 800b52c:	0800e1c9 	.word	0x0800e1c9
 800b530:	0800e1cd 	.word	0x0800e1cd
 800b534:	0800e1d1 	.word	0x0800e1d1
 800b538:	0800e1d5 	.word	0x0800e1d5
 800b53c:	0800e1d9 	.word	0x0800e1d9
 800b540:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b542:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b546:	4553      	cmp	r3, sl
 800b548:	bfa8      	it	ge
 800b54a:	4653      	movge	r3, sl
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	4699      	mov	r9, r3
 800b550:	dc36      	bgt.n	800b5c0 <_printf_float+0x360>
 800b552:	f04f 0b00 	mov.w	fp, #0
 800b556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b55a:	f104 021a 	add.w	r2, r4, #26
 800b55e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b560:	9306      	str	r3, [sp, #24]
 800b562:	eba3 0309 	sub.w	r3, r3, r9
 800b566:	455b      	cmp	r3, fp
 800b568:	dc31      	bgt.n	800b5ce <_printf_float+0x36e>
 800b56a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b56c:	459a      	cmp	sl, r3
 800b56e:	dc3a      	bgt.n	800b5e6 <_printf_float+0x386>
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	07da      	lsls	r2, r3, #31
 800b574:	d437      	bmi.n	800b5e6 <_printf_float+0x386>
 800b576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b578:	ebaa 0903 	sub.w	r9, sl, r3
 800b57c:	9b06      	ldr	r3, [sp, #24]
 800b57e:	ebaa 0303 	sub.w	r3, sl, r3
 800b582:	4599      	cmp	r9, r3
 800b584:	bfa8      	it	ge
 800b586:	4699      	movge	r9, r3
 800b588:	f1b9 0f00 	cmp.w	r9, #0
 800b58c:	dc33      	bgt.n	800b5f6 <_printf_float+0x396>
 800b58e:	f04f 0800 	mov.w	r8, #0
 800b592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b596:	f104 0b1a 	add.w	fp, r4, #26
 800b59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b59c:	ebaa 0303 	sub.w	r3, sl, r3
 800b5a0:	eba3 0309 	sub.w	r3, r3, r9
 800b5a4:	4543      	cmp	r3, r8
 800b5a6:	f77f af79 	ble.w	800b49c <_printf_float+0x23c>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	465a      	mov	r2, fp
 800b5ae:	4631      	mov	r1, r6
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	47b8      	blx	r7
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	f43f aeae 	beq.w	800b316 <_printf_float+0xb6>
 800b5ba:	f108 0801 	add.w	r8, r8, #1
 800b5be:	e7ec      	b.n	800b59a <_printf_float+0x33a>
 800b5c0:	4642      	mov	r2, r8
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	47b8      	blx	r7
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	d1c2      	bne.n	800b552 <_printf_float+0x2f2>
 800b5cc:	e6a3      	b.n	800b316 <_printf_float+0xb6>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	4631      	mov	r1, r6
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	9206      	str	r2, [sp, #24]
 800b5d6:	47b8      	blx	r7
 800b5d8:	3001      	adds	r0, #1
 800b5da:	f43f ae9c 	beq.w	800b316 <_printf_float+0xb6>
 800b5de:	9a06      	ldr	r2, [sp, #24]
 800b5e0:	f10b 0b01 	add.w	fp, fp, #1
 800b5e4:	e7bb      	b.n	800b55e <_printf_float+0x2fe>
 800b5e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5ea:	4631      	mov	r1, r6
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	47b8      	blx	r7
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	d1c0      	bne.n	800b576 <_printf_float+0x316>
 800b5f4:	e68f      	b.n	800b316 <_printf_float+0xb6>
 800b5f6:	9a06      	ldr	r2, [sp, #24]
 800b5f8:	464b      	mov	r3, r9
 800b5fa:	4442      	add	r2, r8
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4628      	mov	r0, r5
 800b600:	47b8      	blx	r7
 800b602:	3001      	adds	r0, #1
 800b604:	d1c3      	bne.n	800b58e <_printf_float+0x32e>
 800b606:	e686      	b.n	800b316 <_printf_float+0xb6>
 800b608:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b60c:	f1ba 0f01 	cmp.w	sl, #1
 800b610:	dc01      	bgt.n	800b616 <_printf_float+0x3b6>
 800b612:	07db      	lsls	r3, r3, #31
 800b614:	d536      	bpl.n	800b684 <_printf_float+0x424>
 800b616:	2301      	movs	r3, #1
 800b618:	4642      	mov	r2, r8
 800b61a:	4631      	mov	r1, r6
 800b61c:	4628      	mov	r0, r5
 800b61e:	47b8      	blx	r7
 800b620:	3001      	adds	r0, #1
 800b622:	f43f ae78 	beq.w	800b316 <_printf_float+0xb6>
 800b626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b62a:	4631      	mov	r1, r6
 800b62c:	4628      	mov	r0, r5
 800b62e:	47b8      	blx	r7
 800b630:	3001      	adds	r0, #1
 800b632:	f43f ae70 	beq.w	800b316 <_printf_float+0xb6>
 800b636:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b63a:	2200      	movs	r2, #0
 800b63c:	2300      	movs	r3, #0
 800b63e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b642:	f7f5 fa49 	bl	8000ad8 <__aeabi_dcmpeq>
 800b646:	b9c0      	cbnz	r0, 800b67a <_printf_float+0x41a>
 800b648:	4653      	mov	r3, sl
 800b64a:	f108 0201 	add.w	r2, r8, #1
 800b64e:	4631      	mov	r1, r6
 800b650:	4628      	mov	r0, r5
 800b652:	47b8      	blx	r7
 800b654:	3001      	adds	r0, #1
 800b656:	d10c      	bne.n	800b672 <_printf_float+0x412>
 800b658:	e65d      	b.n	800b316 <_printf_float+0xb6>
 800b65a:	2301      	movs	r3, #1
 800b65c:	465a      	mov	r2, fp
 800b65e:	4631      	mov	r1, r6
 800b660:	4628      	mov	r0, r5
 800b662:	47b8      	blx	r7
 800b664:	3001      	adds	r0, #1
 800b666:	f43f ae56 	beq.w	800b316 <_printf_float+0xb6>
 800b66a:	f108 0801 	add.w	r8, r8, #1
 800b66e:	45d0      	cmp	r8, sl
 800b670:	dbf3      	blt.n	800b65a <_printf_float+0x3fa>
 800b672:	464b      	mov	r3, r9
 800b674:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b678:	e6df      	b.n	800b43a <_printf_float+0x1da>
 800b67a:	f04f 0800 	mov.w	r8, #0
 800b67e:	f104 0b1a 	add.w	fp, r4, #26
 800b682:	e7f4      	b.n	800b66e <_printf_float+0x40e>
 800b684:	2301      	movs	r3, #1
 800b686:	4642      	mov	r2, r8
 800b688:	e7e1      	b.n	800b64e <_printf_float+0x3ee>
 800b68a:	2301      	movs	r3, #1
 800b68c:	464a      	mov	r2, r9
 800b68e:	4631      	mov	r1, r6
 800b690:	4628      	mov	r0, r5
 800b692:	47b8      	blx	r7
 800b694:	3001      	adds	r0, #1
 800b696:	f43f ae3e 	beq.w	800b316 <_printf_float+0xb6>
 800b69a:	f108 0801 	add.w	r8, r8, #1
 800b69e:	68e3      	ldr	r3, [r4, #12]
 800b6a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6a2:	1a5b      	subs	r3, r3, r1
 800b6a4:	4543      	cmp	r3, r8
 800b6a6:	dcf0      	bgt.n	800b68a <_printf_float+0x42a>
 800b6a8:	e6fc      	b.n	800b4a4 <_printf_float+0x244>
 800b6aa:	f04f 0800 	mov.w	r8, #0
 800b6ae:	f104 0919 	add.w	r9, r4, #25
 800b6b2:	e7f4      	b.n	800b69e <_printf_float+0x43e>

0800b6b4 <_printf_common>:
 800b6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b8:	4616      	mov	r6, r2
 800b6ba:	4698      	mov	r8, r3
 800b6bc:	688a      	ldr	r2, [r1, #8]
 800b6be:	690b      	ldr	r3, [r1, #16]
 800b6c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	bfb8      	it	lt
 800b6c8:	4613      	movlt	r3, r2
 800b6ca:	6033      	str	r3, [r6, #0]
 800b6cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6d0:	4607      	mov	r7, r0
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	b10a      	cbz	r2, 800b6da <_printf_common+0x26>
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	6033      	str	r3, [r6, #0]
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	0699      	lsls	r1, r3, #26
 800b6de:	bf42      	ittt	mi
 800b6e0:	6833      	ldrmi	r3, [r6, #0]
 800b6e2:	3302      	addmi	r3, #2
 800b6e4:	6033      	strmi	r3, [r6, #0]
 800b6e6:	6825      	ldr	r5, [r4, #0]
 800b6e8:	f015 0506 	ands.w	r5, r5, #6
 800b6ec:	d106      	bne.n	800b6fc <_printf_common+0x48>
 800b6ee:	f104 0a19 	add.w	sl, r4, #25
 800b6f2:	68e3      	ldr	r3, [r4, #12]
 800b6f4:	6832      	ldr	r2, [r6, #0]
 800b6f6:	1a9b      	subs	r3, r3, r2
 800b6f8:	42ab      	cmp	r3, r5
 800b6fa:	dc26      	bgt.n	800b74a <_printf_common+0x96>
 800b6fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b700:	6822      	ldr	r2, [r4, #0]
 800b702:	3b00      	subs	r3, #0
 800b704:	bf18      	it	ne
 800b706:	2301      	movne	r3, #1
 800b708:	0692      	lsls	r2, r2, #26
 800b70a:	d42b      	bmi.n	800b764 <_printf_common+0xb0>
 800b70c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b710:	4641      	mov	r1, r8
 800b712:	4638      	mov	r0, r7
 800b714:	47c8      	blx	r9
 800b716:	3001      	adds	r0, #1
 800b718:	d01e      	beq.n	800b758 <_printf_common+0xa4>
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	6922      	ldr	r2, [r4, #16]
 800b71e:	f003 0306 	and.w	r3, r3, #6
 800b722:	2b04      	cmp	r3, #4
 800b724:	bf02      	ittt	eq
 800b726:	68e5      	ldreq	r5, [r4, #12]
 800b728:	6833      	ldreq	r3, [r6, #0]
 800b72a:	1aed      	subeq	r5, r5, r3
 800b72c:	68a3      	ldr	r3, [r4, #8]
 800b72e:	bf0c      	ite	eq
 800b730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b734:	2500      	movne	r5, #0
 800b736:	4293      	cmp	r3, r2
 800b738:	bfc4      	itt	gt
 800b73a:	1a9b      	subgt	r3, r3, r2
 800b73c:	18ed      	addgt	r5, r5, r3
 800b73e:	2600      	movs	r6, #0
 800b740:	341a      	adds	r4, #26
 800b742:	42b5      	cmp	r5, r6
 800b744:	d11a      	bne.n	800b77c <_printf_common+0xc8>
 800b746:	2000      	movs	r0, #0
 800b748:	e008      	b.n	800b75c <_printf_common+0xa8>
 800b74a:	2301      	movs	r3, #1
 800b74c:	4652      	mov	r2, sl
 800b74e:	4641      	mov	r1, r8
 800b750:	4638      	mov	r0, r7
 800b752:	47c8      	blx	r9
 800b754:	3001      	adds	r0, #1
 800b756:	d103      	bne.n	800b760 <_printf_common+0xac>
 800b758:	f04f 30ff 	mov.w	r0, #4294967295
 800b75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b760:	3501      	adds	r5, #1
 800b762:	e7c6      	b.n	800b6f2 <_printf_common+0x3e>
 800b764:	18e1      	adds	r1, r4, r3
 800b766:	1c5a      	adds	r2, r3, #1
 800b768:	2030      	movs	r0, #48	@ 0x30
 800b76a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b76e:	4422      	add	r2, r4
 800b770:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b774:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b778:	3302      	adds	r3, #2
 800b77a:	e7c7      	b.n	800b70c <_printf_common+0x58>
 800b77c:	2301      	movs	r3, #1
 800b77e:	4622      	mov	r2, r4
 800b780:	4641      	mov	r1, r8
 800b782:	4638      	mov	r0, r7
 800b784:	47c8      	blx	r9
 800b786:	3001      	adds	r0, #1
 800b788:	d0e6      	beq.n	800b758 <_printf_common+0xa4>
 800b78a:	3601      	adds	r6, #1
 800b78c:	e7d9      	b.n	800b742 <_printf_common+0x8e>
	...

0800b790 <_printf_i>:
 800b790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b794:	7e0f      	ldrb	r7, [r1, #24]
 800b796:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b798:	2f78      	cmp	r7, #120	@ 0x78
 800b79a:	4691      	mov	r9, r2
 800b79c:	4680      	mov	r8, r0
 800b79e:	460c      	mov	r4, r1
 800b7a0:	469a      	mov	sl, r3
 800b7a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b7a6:	d807      	bhi.n	800b7b8 <_printf_i+0x28>
 800b7a8:	2f62      	cmp	r7, #98	@ 0x62
 800b7aa:	d80a      	bhi.n	800b7c2 <_printf_i+0x32>
 800b7ac:	2f00      	cmp	r7, #0
 800b7ae:	f000 80d2 	beq.w	800b956 <_printf_i+0x1c6>
 800b7b2:	2f58      	cmp	r7, #88	@ 0x58
 800b7b4:	f000 80b9 	beq.w	800b92a <_printf_i+0x19a>
 800b7b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7c0:	e03a      	b.n	800b838 <_printf_i+0xa8>
 800b7c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7c6:	2b15      	cmp	r3, #21
 800b7c8:	d8f6      	bhi.n	800b7b8 <_printf_i+0x28>
 800b7ca:	a101      	add	r1, pc, #4	@ (adr r1, 800b7d0 <_printf_i+0x40>)
 800b7cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7d0:	0800b829 	.word	0x0800b829
 800b7d4:	0800b83d 	.word	0x0800b83d
 800b7d8:	0800b7b9 	.word	0x0800b7b9
 800b7dc:	0800b7b9 	.word	0x0800b7b9
 800b7e0:	0800b7b9 	.word	0x0800b7b9
 800b7e4:	0800b7b9 	.word	0x0800b7b9
 800b7e8:	0800b83d 	.word	0x0800b83d
 800b7ec:	0800b7b9 	.word	0x0800b7b9
 800b7f0:	0800b7b9 	.word	0x0800b7b9
 800b7f4:	0800b7b9 	.word	0x0800b7b9
 800b7f8:	0800b7b9 	.word	0x0800b7b9
 800b7fc:	0800b93d 	.word	0x0800b93d
 800b800:	0800b867 	.word	0x0800b867
 800b804:	0800b8f7 	.word	0x0800b8f7
 800b808:	0800b7b9 	.word	0x0800b7b9
 800b80c:	0800b7b9 	.word	0x0800b7b9
 800b810:	0800b95f 	.word	0x0800b95f
 800b814:	0800b7b9 	.word	0x0800b7b9
 800b818:	0800b867 	.word	0x0800b867
 800b81c:	0800b7b9 	.word	0x0800b7b9
 800b820:	0800b7b9 	.word	0x0800b7b9
 800b824:	0800b8ff 	.word	0x0800b8ff
 800b828:	6833      	ldr	r3, [r6, #0]
 800b82a:	1d1a      	adds	r2, r3, #4
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6032      	str	r2, [r6, #0]
 800b830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b834:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b838:	2301      	movs	r3, #1
 800b83a:	e09d      	b.n	800b978 <_printf_i+0x1e8>
 800b83c:	6833      	ldr	r3, [r6, #0]
 800b83e:	6820      	ldr	r0, [r4, #0]
 800b840:	1d19      	adds	r1, r3, #4
 800b842:	6031      	str	r1, [r6, #0]
 800b844:	0606      	lsls	r6, r0, #24
 800b846:	d501      	bpl.n	800b84c <_printf_i+0xbc>
 800b848:	681d      	ldr	r5, [r3, #0]
 800b84a:	e003      	b.n	800b854 <_printf_i+0xc4>
 800b84c:	0645      	lsls	r5, r0, #25
 800b84e:	d5fb      	bpl.n	800b848 <_printf_i+0xb8>
 800b850:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b854:	2d00      	cmp	r5, #0
 800b856:	da03      	bge.n	800b860 <_printf_i+0xd0>
 800b858:	232d      	movs	r3, #45	@ 0x2d
 800b85a:	426d      	negs	r5, r5
 800b85c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b860:	4859      	ldr	r0, [pc, #356]	@ (800b9c8 <_printf_i+0x238>)
 800b862:	230a      	movs	r3, #10
 800b864:	e011      	b.n	800b88a <_printf_i+0xfa>
 800b866:	6821      	ldr	r1, [r4, #0]
 800b868:	6833      	ldr	r3, [r6, #0]
 800b86a:	0608      	lsls	r0, r1, #24
 800b86c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b870:	d402      	bmi.n	800b878 <_printf_i+0xe8>
 800b872:	0649      	lsls	r1, r1, #25
 800b874:	bf48      	it	mi
 800b876:	b2ad      	uxthmi	r5, r5
 800b878:	2f6f      	cmp	r7, #111	@ 0x6f
 800b87a:	4853      	ldr	r0, [pc, #332]	@ (800b9c8 <_printf_i+0x238>)
 800b87c:	6033      	str	r3, [r6, #0]
 800b87e:	bf14      	ite	ne
 800b880:	230a      	movne	r3, #10
 800b882:	2308      	moveq	r3, #8
 800b884:	2100      	movs	r1, #0
 800b886:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b88a:	6866      	ldr	r6, [r4, #4]
 800b88c:	60a6      	str	r6, [r4, #8]
 800b88e:	2e00      	cmp	r6, #0
 800b890:	bfa2      	ittt	ge
 800b892:	6821      	ldrge	r1, [r4, #0]
 800b894:	f021 0104 	bicge.w	r1, r1, #4
 800b898:	6021      	strge	r1, [r4, #0]
 800b89a:	b90d      	cbnz	r5, 800b8a0 <_printf_i+0x110>
 800b89c:	2e00      	cmp	r6, #0
 800b89e:	d04b      	beq.n	800b938 <_printf_i+0x1a8>
 800b8a0:	4616      	mov	r6, r2
 800b8a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8a6:	fb03 5711 	mls	r7, r3, r1, r5
 800b8aa:	5dc7      	ldrb	r7, [r0, r7]
 800b8ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8b0:	462f      	mov	r7, r5
 800b8b2:	42bb      	cmp	r3, r7
 800b8b4:	460d      	mov	r5, r1
 800b8b6:	d9f4      	bls.n	800b8a2 <_printf_i+0x112>
 800b8b8:	2b08      	cmp	r3, #8
 800b8ba:	d10b      	bne.n	800b8d4 <_printf_i+0x144>
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	07df      	lsls	r7, r3, #31
 800b8c0:	d508      	bpl.n	800b8d4 <_printf_i+0x144>
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	6861      	ldr	r1, [r4, #4]
 800b8c6:	4299      	cmp	r1, r3
 800b8c8:	bfde      	ittt	le
 800b8ca:	2330      	movle	r3, #48	@ 0x30
 800b8cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8d4:	1b92      	subs	r2, r2, r6
 800b8d6:	6122      	str	r2, [r4, #16]
 800b8d8:	f8cd a000 	str.w	sl, [sp]
 800b8dc:	464b      	mov	r3, r9
 800b8de:	aa03      	add	r2, sp, #12
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	4640      	mov	r0, r8
 800b8e4:	f7ff fee6 	bl	800b6b4 <_printf_common>
 800b8e8:	3001      	adds	r0, #1
 800b8ea:	d14a      	bne.n	800b982 <_printf_i+0x1f2>
 800b8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f0:	b004      	add	sp, #16
 800b8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f6:	6823      	ldr	r3, [r4, #0]
 800b8f8:	f043 0320 	orr.w	r3, r3, #32
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	4833      	ldr	r0, [pc, #204]	@ (800b9cc <_printf_i+0x23c>)
 800b900:	2778      	movs	r7, #120	@ 0x78
 800b902:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b906:	6823      	ldr	r3, [r4, #0]
 800b908:	6831      	ldr	r1, [r6, #0]
 800b90a:	061f      	lsls	r7, r3, #24
 800b90c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b910:	d402      	bmi.n	800b918 <_printf_i+0x188>
 800b912:	065f      	lsls	r7, r3, #25
 800b914:	bf48      	it	mi
 800b916:	b2ad      	uxthmi	r5, r5
 800b918:	6031      	str	r1, [r6, #0]
 800b91a:	07d9      	lsls	r1, r3, #31
 800b91c:	bf44      	itt	mi
 800b91e:	f043 0320 	orrmi.w	r3, r3, #32
 800b922:	6023      	strmi	r3, [r4, #0]
 800b924:	b11d      	cbz	r5, 800b92e <_printf_i+0x19e>
 800b926:	2310      	movs	r3, #16
 800b928:	e7ac      	b.n	800b884 <_printf_i+0xf4>
 800b92a:	4827      	ldr	r0, [pc, #156]	@ (800b9c8 <_printf_i+0x238>)
 800b92c:	e7e9      	b.n	800b902 <_printf_i+0x172>
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	f023 0320 	bic.w	r3, r3, #32
 800b934:	6023      	str	r3, [r4, #0]
 800b936:	e7f6      	b.n	800b926 <_printf_i+0x196>
 800b938:	4616      	mov	r6, r2
 800b93a:	e7bd      	b.n	800b8b8 <_printf_i+0x128>
 800b93c:	6833      	ldr	r3, [r6, #0]
 800b93e:	6825      	ldr	r5, [r4, #0]
 800b940:	6961      	ldr	r1, [r4, #20]
 800b942:	1d18      	adds	r0, r3, #4
 800b944:	6030      	str	r0, [r6, #0]
 800b946:	062e      	lsls	r6, r5, #24
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	d501      	bpl.n	800b950 <_printf_i+0x1c0>
 800b94c:	6019      	str	r1, [r3, #0]
 800b94e:	e002      	b.n	800b956 <_printf_i+0x1c6>
 800b950:	0668      	lsls	r0, r5, #25
 800b952:	d5fb      	bpl.n	800b94c <_printf_i+0x1bc>
 800b954:	8019      	strh	r1, [r3, #0]
 800b956:	2300      	movs	r3, #0
 800b958:	6123      	str	r3, [r4, #16]
 800b95a:	4616      	mov	r6, r2
 800b95c:	e7bc      	b.n	800b8d8 <_printf_i+0x148>
 800b95e:	6833      	ldr	r3, [r6, #0]
 800b960:	1d1a      	adds	r2, r3, #4
 800b962:	6032      	str	r2, [r6, #0]
 800b964:	681e      	ldr	r6, [r3, #0]
 800b966:	6862      	ldr	r2, [r4, #4]
 800b968:	2100      	movs	r1, #0
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7f4 fc38 	bl	80001e0 <memchr>
 800b970:	b108      	cbz	r0, 800b976 <_printf_i+0x1e6>
 800b972:	1b80      	subs	r0, r0, r6
 800b974:	6060      	str	r0, [r4, #4]
 800b976:	6863      	ldr	r3, [r4, #4]
 800b978:	6123      	str	r3, [r4, #16]
 800b97a:	2300      	movs	r3, #0
 800b97c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b980:	e7aa      	b.n	800b8d8 <_printf_i+0x148>
 800b982:	6923      	ldr	r3, [r4, #16]
 800b984:	4632      	mov	r2, r6
 800b986:	4649      	mov	r1, r9
 800b988:	4640      	mov	r0, r8
 800b98a:	47d0      	blx	sl
 800b98c:	3001      	adds	r0, #1
 800b98e:	d0ad      	beq.n	800b8ec <_printf_i+0x15c>
 800b990:	6823      	ldr	r3, [r4, #0]
 800b992:	079b      	lsls	r3, r3, #30
 800b994:	d413      	bmi.n	800b9be <_printf_i+0x22e>
 800b996:	68e0      	ldr	r0, [r4, #12]
 800b998:	9b03      	ldr	r3, [sp, #12]
 800b99a:	4298      	cmp	r0, r3
 800b99c:	bfb8      	it	lt
 800b99e:	4618      	movlt	r0, r3
 800b9a0:	e7a6      	b.n	800b8f0 <_printf_i+0x160>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	4632      	mov	r2, r6
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	47d0      	blx	sl
 800b9ac:	3001      	adds	r0, #1
 800b9ae:	d09d      	beq.n	800b8ec <_printf_i+0x15c>
 800b9b0:	3501      	adds	r5, #1
 800b9b2:	68e3      	ldr	r3, [r4, #12]
 800b9b4:	9903      	ldr	r1, [sp, #12]
 800b9b6:	1a5b      	subs	r3, r3, r1
 800b9b8:	42ab      	cmp	r3, r5
 800b9ba:	dcf2      	bgt.n	800b9a2 <_printf_i+0x212>
 800b9bc:	e7eb      	b.n	800b996 <_printf_i+0x206>
 800b9be:	2500      	movs	r5, #0
 800b9c0:	f104 0619 	add.w	r6, r4, #25
 800b9c4:	e7f5      	b.n	800b9b2 <_printf_i+0x222>
 800b9c6:	bf00      	nop
 800b9c8:	0800e1db 	.word	0x0800e1db
 800b9cc:	0800e1ec 	.word	0x0800e1ec

0800b9d0 <std>:
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	b510      	push	{r4, lr}
 800b9d4:	4604      	mov	r4, r0
 800b9d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b9da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9de:	6083      	str	r3, [r0, #8]
 800b9e0:	8181      	strh	r1, [r0, #12]
 800b9e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b9e4:	81c2      	strh	r2, [r0, #14]
 800b9e6:	6183      	str	r3, [r0, #24]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	2208      	movs	r2, #8
 800b9ec:	305c      	adds	r0, #92	@ 0x5c
 800b9ee:	f000 f928 	bl	800bc42 <memset>
 800b9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800ba28 <std+0x58>)
 800b9f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800ba2c <std+0x5c>)
 800b9f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800ba30 <std+0x60>)
 800b9fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800ba34 <std+0x64>)
 800ba00:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba02:	4b0d      	ldr	r3, [pc, #52]	@ (800ba38 <std+0x68>)
 800ba04:	6224      	str	r4, [r4, #32]
 800ba06:	429c      	cmp	r4, r3
 800ba08:	d006      	beq.n	800ba18 <std+0x48>
 800ba0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba0e:	4294      	cmp	r4, r2
 800ba10:	d002      	beq.n	800ba18 <std+0x48>
 800ba12:	33d0      	adds	r3, #208	@ 0xd0
 800ba14:	429c      	cmp	r4, r3
 800ba16:	d105      	bne.n	800ba24 <std+0x54>
 800ba18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba20:	f000 b9a2 	b.w	800bd68 <__retarget_lock_init_recursive>
 800ba24:	bd10      	pop	{r4, pc}
 800ba26:	bf00      	nop
 800ba28:	0800bbbd 	.word	0x0800bbbd
 800ba2c:	0800bbdf 	.word	0x0800bbdf
 800ba30:	0800bc17 	.word	0x0800bc17
 800ba34:	0800bc3b 	.word	0x0800bc3b
 800ba38:	20001964 	.word	0x20001964

0800ba3c <stdio_exit_handler>:
 800ba3c:	4a02      	ldr	r2, [pc, #8]	@ (800ba48 <stdio_exit_handler+0xc>)
 800ba3e:	4903      	ldr	r1, [pc, #12]	@ (800ba4c <stdio_exit_handler+0x10>)
 800ba40:	4803      	ldr	r0, [pc, #12]	@ (800ba50 <stdio_exit_handler+0x14>)
 800ba42:	f000 b869 	b.w	800bb18 <_fwalk_sglue>
 800ba46:	bf00      	nop
 800ba48:	200000fc 	.word	0x200000fc
 800ba4c:	0800d6c5 	.word	0x0800d6c5
 800ba50:	2000010c 	.word	0x2000010c

0800ba54 <cleanup_stdio>:
 800ba54:	6841      	ldr	r1, [r0, #4]
 800ba56:	4b0c      	ldr	r3, [pc, #48]	@ (800ba88 <cleanup_stdio+0x34>)
 800ba58:	4299      	cmp	r1, r3
 800ba5a:	b510      	push	{r4, lr}
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	d001      	beq.n	800ba64 <cleanup_stdio+0x10>
 800ba60:	f001 fe30 	bl	800d6c4 <_fflush_r>
 800ba64:	68a1      	ldr	r1, [r4, #8]
 800ba66:	4b09      	ldr	r3, [pc, #36]	@ (800ba8c <cleanup_stdio+0x38>)
 800ba68:	4299      	cmp	r1, r3
 800ba6a:	d002      	beq.n	800ba72 <cleanup_stdio+0x1e>
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f001 fe29 	bl	800d6c4 <_fflush_r>
 800ba72:	68e1      	ldr	r1, [r4, #12]
 800ba74:	4b06      	ldr	r3, [pc, #24]	@ (800ba90 <cleanup_stdio+0x3c>)
 800ba76:	4299      	cmp	r1, r3
 800ba78:	d004      	beq.n	800ba84 <cleanup_stdio+0x30>
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba80:	f001 be20 	b.w	800d6c4 <_fflush_r>
 800ba84:	bd10      	pop	{r4, pc}
 800ba86:	bf00      	nop
 800ba88:	20001964 	.word	0x20001964
 800ba8c:	200019cc 	.word	0x200019cc
 800ba90:	20001a34 	.word	0x20001a34

0800ba94 <global_stdio_init.part.0>:
 800ba94:	b510      	push	{r4, lr}
 800ba96:	4b0b      	ldr	r3, [pc, #44]	@ (800bac4 <global_stdio_init.part.0+0x30>)
 800ba98:	4c0b      	ldr	r4, [pc, #44]	@ (800bac8 <global_stdio_init.part.0+0x34>)
 800ba9a:	4a0c      	ldr	r2, [pc, #48]	@ (800bacc <global_stdio_init.part.0+0x38>)
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	4620      	mov	r0, r4
 800baa0:	2200      	movs	r2, #0
 800baa2:	2104      	movs	r1, #4
 800baa4:	f7ff ff94 	bl	800b9d0 <std>
 800baa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800baac:	2201      	movs	r2, #1
 800baae:	2109      	movs	r1, #9
 800bab0:	f7ff ff8e 	bl	800b9d0 <std>
 800bab4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bab8:	2202      	movs	r2, #2
 800baba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800babe:	2112      	movs	r1, #18
 800bac0:	f7ff bf86 	b.w	800b9d0 <std>
 800bac4:	20001a9c 	.word	0x20001a9c
 800bac8:	20001964 	.word	0x20001964
 800bacc:	0800ba3d 	.word	0x0800ba3d

0800bad0 <__sfp_lock_acquire>:
 800bad0:	4801      	ldr	r0, [pc, #4]	@ (800bad8 <__sfp_lock_acquire+0x8>)
 800bad2:	f000 b94a 	b.w	800bd6a <__retarget_lock_acquire_recursive>
 800bad6:	bf00      	nop
 800bad8:	20001aa5 	.word	0x20001aa5

0800badc <__sfp_lock_release>:
 800badc:	4801      	ldr	r0, [pc, #4]	@ (800bae4 <__sfp_lock_release+0x8>)
 800bade:	f000 b945 	b.w	800bd6c <__retarget_lock_release_recursive>
 800bae2:	bf00      	nop
 800bae4:	20001aa5 	.word	0x20001aa5

0800bae8 <__sinit>:
 800bae8:	b510      	push	{r4, lr}
 800baea:	4604      	mov	r4, r0
 800baec:	f7ff fff0 	bl	800bad0 <__sfp_lock_acquire>
 800baf0:	6a23      	ldr	r3, [r4, #32]
 800baf2:	b11b      	cbz	r3, 800bafc <__sinit+0x14>
 800baf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baf8:	f7ff bff0 	b.w	800badc <__sfp_lock_release>
 800bafc:	4b04      	ldr	r3, [pc, #16]	@ (800bb10 <__sinit+0x28>)
 800bafe:	6223      	str	r3, [r4, #32]
 800bb00:	4b04      	ldr	r3, [pc, #16]	@ (800bb14 <__sinit+0x2c>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1f5      	bne.n	800baf4 <__sinit+0xc>
 800bb08:	f7ff ffc4 	bl	800ba94 <global_stdio_init.part.0>
 800bb0c:	e7f2      	b.n	800baf4 <__sinit+0xc>
 800bb0e:	bf00      	nop
 800bb10:	0800ba55 	.word	0x0800ba55
 800bb14:	20001a9c 	.word	0x20001a9c

0800bb18 <_fwalk_sglue>:
 800bb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb1c:	4607      	mov	r7, r0
 800bb1e:	4688      	mov	r8, r1
 800bb20:	4614      	mov	r4, r2
 800bb22:	2600      	movs	r6, #0
 800bb24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb28:	f1b9 0901 	subs.w	r9, r9, #1
 800bb2c:	d505      	bpl.n	800bb3a <_fwalk_sglue+0x22>
 800bb2e:	6824      	ldr	r4, [r4, #0]
 800bb30:	2c00      	cmp	r4, #0
 800bb32:	d1f7      	bne.n	800bb24 <_fwalk_sglue+0xc>
 800bb34:	4630      	mov	r0, r6
 800bb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb3a:	89ab      	ldrh	r3, [r5, #12]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d907      	bls.n	800bb50 <_fwalk_sglue+0x38>
 800bb40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb44:	3301      	adds	r3, #1
 800bb46:	d003      	beq.n	800bb50 <_fwalk_sglue+0x38>
 800bb48:	4629      	mov	r1, r5
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	47c0      	blx	r8
 800bb4e:	4306      	orrs	r6, r0
 800bb50:	3568      	adds	r5, #104	@ 0x68
 800bb52:	e7e9      	b.n	800bb28 <_fwalk_sglue+0x10>

0800bb54 <sniprintf>:
 800bb54:	b40c      	push	{r2, r3}
 800bb56:	b530      	push	{r4, r5, lr}
 800bb58:	4b17      	ldr	r3, [pc, #92]	@ (800bbb8 <sniprintf+0x64>)
 800bb5a:	1e0c      	subs	r4, r1, #0
 800bb5c:	681d      	ldr	r5, [r3, #0]
 800bb5e:	b09d      	sub	sp, #116	@ 0x74
 800bb60:	da08      	bge.n	800bb74 <sniprintf+0x20>
 800bb62:	238b      	movs	r3, #139	@ 0x8b
 800bb64:	602b      	str	r3, [r5, #0]
 800bb66:	f04f 30ff 	mov.w	r0, #4294967295
 800bb6a:	b01d      	add	sp, #116	@ 0x74
 800bb6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb70:	b002      	add	sp, #8
 800bb72:	4770      	bx	lr
 800bb74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bb78:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bb7c:	bf14      	ite	ne
 800bb7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb82:	4623      	moveq	r3, r4
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	9307      	str	r3, [sp, #28]
 800bb88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb8c:	9002      	str	r0, [sp, #8]
 800bb8e:	9006      	str	r0, [sp, #24]
 800bb90:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bb94:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bb96:	ab21      	add	r3, sp, #132	@ 0x84
 800bb98:	a902      	add	r1, sp, #8
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	9301      	str	r3, [sp, #4]
 800bb9e:	f001 fc11 	bl	800d3c4 <_svfiprintf_r>
 800bba2:	1c43      	adds	r3, r0, #1
 800bba4:	bfbc      	itt	lt
 800bba6:	238b      	movlt	r3, #139	@ 0x8b
 800bba8:	602b      	strlt	r3, [r5, #0]
 800bbaa:	2c00      	cmp	r4, #0
 800bbac:	d0dd      	beq.n	800bb6a <sniprintf+0x16>
 800bbae:	9b02      	ldr	r3, [sp, #8]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	701a      	strb	r2, [r3, #0]
 800bbb4:	e7d9      	b.n	800bb6a <sniprintf+0x16>
 800bbb6:	bf00      	nop
 800bbb8:	20000108 	.word	0x20000108

0800bbbc <__sread>:
 800bbbc:	b510      	push	{r4, lr}
 800bbbe:	460c      	mov	r4, r1
 800bbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbc4:	f000 f882 	bl	800bccc <_read_r>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	bfab      	itete	ge
 800bbcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bbce:	89a3      	ldrhlt	r3, [r4, #12]
 800bbd0:	181b      	addge	r3, r3, r0
 800bbd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bbd6:	bfac      	ite	ge
 800bbd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bbda:	81a3      	strhlt	r3, [r4, #12]
 800bbdc:	bd10      	pop	{r4, pc}

0800bbde <__swrite>:
 800bbde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe2:	461f      	mov	r7, r3
 800bbe4:	898b      	ldrh	r3, [r1, #12]
 800bbe6:	05db      	lsls	r3, r3, #23
 800bbe8:	4605      	mov	r5, r0
 800bbea:	460c      	mov	r4, r1
 800bbec:	4616      	mov	r6, r2
 800bbee:	d505      	bpl.n	800bbfc <__swrite+0x1e>
 800bbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f000 f856 	bl	800bca8 <_lseek_r>
 800bbfc:	89a3      	ldrh	r3, [r4, #12]
 800bbfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc06:	81a3      	strh	r3, [r4, #12]
 800bc08:	4632      	mov	r2, r6
 800bc0a:	463b      	mov	r3, r7
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc12:	f000 b86d 	b.w	800bcf0 <_write_r>

0800bc16 <__sseek>:
 800bc16:	b510      	push	{r4, lr}
 800bc18:	460c      	mov	r4, r1
 800bc1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc1e:	f000 f843 	bl	800bca8 <_lseek_r>
 800bc22:	1c43      	adds	r3, r0, #1
 800bc24:	89a3      	ldrh	r3, [r4, #12]
 800bc26:	bf15      	itete	ne
 800bc28:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc32:	81a3      	strheq	r3, [r4, #12]
 800bc34:	bf18      	it	ne
 800bc36:	81a3      	strhne	r3, [r4, #12]
 800bc38:	bd10      	pop	{r4, pc}

0800bc3a <__sclose>:
 800bc3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc3e:	f000 b823 	b.w	800bc88 <_close_r>

0800bc42 <memset>:
 800bc42:	4402      	add	r2, r0
 800bc44:	4603      	mov	r3, r0
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d100      	bne.n	800bc4c <memset+0xa>
 800bc4a:	4770      	bx	lr
 800bc4c:	f803 1b01 	strb.w	r1, [r3], #1
 800bc50:	e7f9      	b.n	800bc46 <memset+0x4>

0800bc52 <strstr>:
 800bc52:	780a      	ldrb	r2, [r1, #0]
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	b96a      	cbnz	r2, 800bc74 <strstr+0x22>
 800bc58:	bd70      	pop	{r4, r5, r6, pc}
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d109      	bne.n	800bc72 <strstr+0x20>
 800bc5e:	460c      	mov	r4, r1
 800bc60:	4605      	mov	r5, r0
 800bc62:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d0f6      	beq.n	800bc58 <strstr+0x6>
 800bc6a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bc6e:	429e      	cmp	r6, r3
 800bc70:	d0f7      	beq.n	800bc62 <strstr+0x10>
 800bc72:	3001      	adds	r0, #1
 800bc74:	7803      	ldrb	r3, [r0, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1ef      	bne.n	800bc5a <strstr+0x8>
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	e7ec      	b.n	800bc58 <strstr+0x6>
	...

0800bc80 <_localeconv_r>:
 800bc80:	4800      	ldr	r0, [pc, #0]	@ (800bc84 <_localeconv_r+0x4>)
 800bc82:	4770      	bx	lr
 800bc84:	20000248 	.word	0x20000248

0800bc88 <_close_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d06      	ldr	r5, [pc, #24]	@ (800bca4 <_close_r+0x1c>)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	4604      	mov	r4, r0
 800bc90:	4608      	mov	r0, r1
 800bc92:	602b      	str	r3, [r5, #0]
 800bc94:	f7f6 f8a6 	bl	8001de4 <_close>
 800bc98:	1c43      	adds	r3, r0, #1
 800bc9a:	d102      	bne.n	800bca2 <_close_r+0x1a>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	b103      	cbz	r3, 800bca2 <_close_r+0x1a>
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
 800bca4:	20001aa0 	.word	0x20001aa0

0800bca8 <_lseek_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d07      	ldr	r5, [pc, #28]	@ (800bcc8 <_lseek_r+0x20>)
 800bcac:	4604      	mov	r4, r0
 800bcae:	4608      	mov	r0, r1
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	602a      	str	r2, [r5, #0]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	f7f6 f8bb 	bl	8001e32 <_lseek>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d102      	bne.n	800bcc6 <_lseek_r+0x1e>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	b103      	cbz	r3, 800bcc6 <_lseek_r+0x1e>
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	20001aa0 	.word	0x20001aa0

0800bccc <_read_r>:
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4d07      	ldr	r5, [pc, #28]	@ (800bcec <_read_r+0x20>)
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	4608      	mov	r0, r1
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	602a      	str	r2, [r5, #0]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	f7f6 f849 	bl	8001d72 <_read>
 800bce0:	1c43      	adds	r3, r0, #1
 800bce2:	d102      	bne.n	800bcea <_read_r+0x1e>
 800bce4:	682b      	ldr	r3, [r5, #0]
 800bce6:	b103      	cbz	r3, 800bcea <_read_r+0x1e>
 800bce8:	6023      	str	r3, [r4, #0]
 800bcea:	bd38      	pop	{r3, r4, r5, pc}
 800bcec:	20001aa0 	.word	0x20001aa0

0800bcf0 <_write_r>:
 800bcf0:	b538      	push	{r3, r4, r5, lr}
 800bcf2:	4d07      	ldr	r5, [pc, #28]	@ (800bd10 <_write_r+0x20>)
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	4608      	mov	r0, r1
 800bcf8:	4611      	mov	r1, r2
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	602a      	str	r2, [r5, #0]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	f7f6 f854 	bl	8001dac <_write>
 800bd04:	1c43      	adds	r3, r0, #1
 800bd06:	d102      	bne.n	800bd0e <_write_r+0x1e>
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	b103      	cbz	r3, 800bd0e <_write_r+0x1e>
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	bd38      	pop	{r3, r4, r5, pc}
 800bd10:	20001aa0 	.word	0x20001aa0

0800bd14 <__errno>:
 800bd14:	4b01      	ldr	r3, [pc, #4]	@ (800bd1c <__errno+0x8>)
 800bd16:	6818      	ldr	r0, [r3, #0]
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop
 800bd1c:	20000108 	.word	0x20000108

0800bd20 <__libc_init_array>:
 800bd20:	b570      	push	{r4, r5, r6, lr}
 800bd22:	4d0d      	ldr	r5, [pc, #52]	@ (800bd58 <__libc_init_array+0x38>)
 800bd24:	4c0d      	ldr	r4, [pc, #52]	@ (800bd5c <__libc_init_array+0x3c>)
 800bd26:	1b64      	subs	r4, r4, r5
 800bd28:	10a4      	asrs	r4, r4, #2
 800bd2a:	2600      	movs	r6, #0
 800bd2c:	42a6      	cmp	r6, r4
 800bd2e:	d109      	bne.n	800bd44 <__libc_init_array+0x24>
 800bd30:	4d0b      	ldr	r5, [pc, #44]	@ (800bd60 <__libc_init_array+0x40>)
 800bd32:	4c0c      	ldr	r4, [pc, #48]	@ (800bd64 <__libc_init_array+0x44>)
 800bd34:	f002 f864 	bl	800de00 <_init>
 800bd38:	1b64      	subs	r4, r4, r5
 800bd3a:	10a4      	asrs	r4, r4, #2
 800bd3c:	2600      	movs	r6, #0
 800bd3e:	42a6      	cmp	r6, r4
 800bd40:	d105      	bne.n	800bd4e <__libc_init_array+0x2e>
 800bd42:	bd70      	pop	{r4, r5, r6, pc}
 800bd44:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd48:	4798      	blx	r3
 800bd4a:	3601      	adds	r6, #1
 800bd4c:	e7ee      	b.n	800bd2c <__libc_init_array+0xc>
 800bd4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd52:	4798      	blx	r3
 800bd54:	3601      	adds	r6, #1
 800bd56:	e7f2      	b.n	800bd3e <__libc_init_array+0x1e>
 800bd58:	0800e440 	.word	0x0800e440
 800bd5c:	0800e440 	.word	0x0800e440
 800bd60:	0800e440 	.word	0x0800e440
 800bd64:	0800e444 	.word	0x0800e444

0800bd68 <__retarget_lock_init_recursive>:
 800bd68:	4770      	bx	lr

0800bd6a <__retarget_lock_acquire_recursive>:
 800bd6a:	4770      	bx	lr

0800bd6c <__retarget_lock_release_recursive>:
 800bd6c:	4770      	bx	lr

0800bd6e <quorem>:
 800bd6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd72:	6903      	ldr	r3, [r0, #16]
 800bd74:	690c      	ldr	r4, [r1, #16]
 800bd76:	42a3      	cmp	r3, r4
 800bd78:	4607      	mov	r7, r0
 800bd7a:	db7e      	blt.n	800be7a <quorem+0x10c>
 800bd7c:	3c01      	subs	r4, #1
 800bd7e:	f101 0814 	add.w	r8, r1, #20
 800bd82:	00a3      	lsls	r3, r4, #2
 800bd84:	f100 0514 	add.w	r5, r0, #20
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd8e:	9301      	str	r3, [sp, #4]
 800bd90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bda0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bda4:	d32e      	bcc.n	800be04 <quorem+0x96>
 800bda6:	f04f 0a00 	mov.w	sl, #0
 800bdaa:	46c4      	mov	ip, r8
 800bdac:	46ae      	mov	lr, r5
 800bdae:	46d3      	mov	fp, sl
 800bdb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdb4:	b298      	uxth	r0, r3
 800bdb6:	fb06 a000 	mla	r0, r6, r0, sl
 800bdba:	0c02      	lsrs	r2, r0, #16
 800bdbc:	0c1b      	lsrs	r3, r3, #16
 800bdbe:	fb06 2303 	mla	r3, r6, r3, r2
 800bdc2:	f8de 2000 	ldr.w	r2, [lr]
 800bdc6:	b280      	uxth	r0, r0
 800bdc8:	b292      	uxth	r2, r2
 800bdca:	1a12      	subs	r2, r2, r0
 800bdcc:	445a      	add	r2, fp
 800bdce:	f8de 0000 	ldr.w	r0, [lr]
 800bdd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bddc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bde0:	b292      	uxth	r2, r2
 800bde2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bde6:	45e1      	cmp	r9, ip
 800bde8:	f84e 2b04 	str.w	r2, [lr], #4
 800bdec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bdf0:	d2de      	bcs.n	800bdb0 <quorem+0x42>
 800bdf2:	9b00      	ldr	r3, [sp, #0]
 800bdf4:	58eb      	ldr	r3, [r5, r3]
 800bdf6:	b92b      	cbnz	r3, 800be04 <quorem+0x96>
 800bdf8:	9b01      	ldr	r3, [sp, #4]
 800bdfa:	3b04      	subs	r3, #4
 800bdfc:	429d      	cmp	r5, r3
 800bdfe:	461a      	mov	r2, r3
 800be00:	d32f      	bcc.n	800be62 <quorem+0xf4>
 800be02:	613c      	str	r4, [r7, #16]
 800be04:	4638      	mov	r0, r7
 800be06:	f001 f979 	bl	800d0fc <__mcmp>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	db25      	blt.n	800be5a <quorem+0xec>
 800be0e:	4629      	mov	r1, r5
 800be10:	2000      	movs	r0, #0
 800be12:	f858 2b04 	ldr.w	r2, [r8], #4
 800be16:	f8d1 c000 	ldr.w	ip, [r1]
 800be1a:	fa1f fe82 	uxth.w	lr, r2
 800be1e:	fa1f f38c 	uxth.w	r3, ip
 800be22:	eba3 030e 	sub.w	r3, r3, lr
 800be26:	4403      	add	r3, r0
 800be28:	0c12      	lsrs	r2, r2, #16
 800be2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800be2e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800be32:	b29b      	uxth	r3, r3
 800be34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be38:	45c1      	cmp	r9, r8
 800be3a:	f841 3b04 	str.w	r3, [r1], #4
 800be3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be42:	d2e6      	bcs.n	800be12 <quorem+0xa4>
 800be44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be4c:	b922      	cbnz	r2, 800be58 <quorem+0xea>
 800be4e:	3b04      	subs	r3, #4
 800be50:	429d      	cmp	r5, r3
 800be52:	461a      	mov	r2, r3
 800be54:	d30b      	bcc.n	800be6e <quorem+0x100>
 800be56:	613c      	str	r4, [r7, #16]
 800be58:	3601      	adds	r6, #1
 800be5a:	4630      	mov	r0, r6
 800be5c:	b003      	add	sp, #12
 800be5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be62:	6812      	ldr	r2, [r2, #0]
 800be64:	3b04      	subs	r3, #4
 800be66:	2a00      	cmp	r2, #0
 800be68:	d1cb      	bne.n	800be02 <quorem+0x94>
 800be6a:	3c01      	subs	r4, #1
 800be6c:	e7c6      	b.n	800bdfc <quorem+0x8e>
 800be6e:	6812      	ldr	r2, [r2, #0]
 800be70:	3b04      	subs	r3, #4
 800be72:	2a00      	cmp	r2, #0
 800be74:	d1ef      	bne.n	800be56 <quorem+0xe8>
 800be76:	3c01      	subs	r4, #1
 800be78:	e7ea      	b.n	800be50 <quorem+0xe2>
 800be7a:	2000      	movs	r0, #0
 800be7c:	e7ee      	b.n	800be5c <quorem+0xee>
	...

0800be80 <_dtoa_r>:
 800be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	69c7      	ldr	r7, [r0, #28]
 800be86:	b099      	sub	sp, #100	@ 0x64
 800be88:	ed8d 0b02 	vstr	d0, [sp, #8]
 800be8c:	ec55 4b10 	vmov	r4, r5, d0
 800be90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800be92:	9109      	str	r1, [sp, #36]	@ 0x24
 800be94:	4683      	mov	fp, r0
 800be96:	920e      	str	r2, [sp, #56]	@ 0x38
 800be98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be9a:	b97f      	cbnz	r7, 800bebc <_dtoa_r+0x3c>
 800be9c:	2010      	movs	r0, #16
 800be9e:	f000 fdfd 	bl	800ca9c <malloc>
 800bea2:	4602      	mov	r2, r0
 800bea4:	f8cb 001c 	str.w	r0, [fp, #28]
 800bea8:	b920      	cbnz	r0, 800beb4 <_dtoa_r+0x34>
 800beaa:	4ba7      	ldr	r3, [pc, #668]	@ (800c148 <_dtoa_r+0x2c8>)
 800beac:	21ef      	movs	r1, #239	@ 0xef
 800beae:	48a7      	ldr	r0, [pc, #668]	@ (800c14c <_dtoa_r+0x2cc>)
 800beb0:	f001 fc68 	bl	800d784 <__assert_func>
 800beb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800beb8:	6007      	str	r7, [r0, #0]
 800beba:	60c7      	str	r7, [r0, #12]
 800bebc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bec0:	6819      	ldr	r1, [r3, #0]
 800bec2:	b159      	cbz	r1, 800bedc <_dtoa_r+0x5c>
 800bec4:	685a      	ldr	r2, [r3, #4]
 800bec6:	604a      	str	r2, [r1, #4]
 800bec8:	2301      	movs	r3, #1
 800beca:	4093      	lsls	r3, r2
 800becc:	608b      	str	r3, [r1, #8]
 800bece:	4658      	mov	r0, fp
 800bed0:	f000 feda 	bl	800cc88 <_Bfree>
 800bed4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bed8:	2200      	movs	r2, #0
 800beda:	601a      	str	r2, [r3, #0]
 800bedc:	1e2b      	subs	r3, r5, #0
 800bede:	bfb9      	ittee	lt
 800bee0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bee4:	9303      	strlt	r3, [sp, #12]
 800bee6:	2300      	movge	r3, #0
 800bee8:	6033      	strge	r3, [r6, #0]
 800beea:	9f03      	ldr	r7, [sp, #12]
 800beec:	4b98      	ldr	r3, [pc, #608]	@ (800c150 <_dtoa_r+0x2d0>)
 800beee:	bfbc      	itt	lt
 800bef0:	2201      	movlt	r2, #1
 800bef2:	6032      	strlt	r2, [r6, #0]
 800bef4:	43bb      	bics	r3, r7
 800bef6:	d112      	bne.n	800bf1e <_dtoa_r+0x9e>
 800bef8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800befa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800befe:	6013      	str	r3, [r2, #0]
 800bf00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf04:	4323      	orrs	r3, r4
 800bf06:	f000 854d 	beq.w	800c9a4 <_dtoa_r+0xb24>
 800bf0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c164 <_dtoa_r+0x2e4>
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	f000 854f 	beq.w	800c9b4 <_dtoa_r+0xb34>
 800bf16:	f10a 0303 	add.w	r3, sl, #3
 800bf1a:	f000 bd49 	b.w	800c9b0 <_dtoa_r+0xb30>
 800bf1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf22:	2200      	movs	r2, #0
 800bf24:	ec51 0b17 	vmov	r0, r1, d7
 800bf28:	2300      	movs	r3, #0
 800bf2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bf2e:	f7f4 fdd3 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf32:	4680      	mov	r8, r0
 800bf34:	b158      	cbz	r0, 800bf4e <_dtoa_r+0xce>
 800bf36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bf38:	2301      	movs	r3, #1
 800bf3a:	6013      	str	r3, [r2, #0]
 800bf3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf3e:	b113      	cbz	r3, 800bf46 <_dtoa_r+0xc6>
 800bf40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bf42:	4b84      	ldr	r3, [pc, #528]	@ (800c154 <_dtoa_r+0x2d4>)
 800bf44:	6013      	str	r3, [r2, #0]
 800bf46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c168 <_dtoa_r+0x2e8>
 800bf4a:	f000 bd33 	b.w	800c9b4 <_dtoa_r+0xb34>
 800bf4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bf52:	aa16      	add	r2, sp, #88	@ 0x58
 800bf54:	a917      	add	r1, sp, #92	@ 0x5c
 800bf56:	4658      	mov	r0, fp
 800bf58:	f001 f980 	bl	800d25c <__d2b>
 800bf5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bf60:	4681      	mov	r9, r0
 800bf62:	2e00      	cmp	r6, #0
 800bf64:	d077      	beq.n	800c056 <_dtoa_r+0x1d6>
 800bf66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bf68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bf6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bf78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bf7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bf80:	4619      	mov	r1, r3
 800bf82:	2200      	movs	r2, #0
 800bf84:	4b74      	ldr	r3, [pc, #464]	@ (800c158 <_dtoa_r+0x2d8>)
 800bf86:	f7f4 f987 	bl	8000298 <__aeabi_dsub>
 800bf8a:	a369      	add	r3, pc, #420	@ (adr r3, 800c130 <_dtoa_r+0x2b0>)
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	f7f4 fb3a 	bl	8000608 <__aeabi_dmul>
 800bf94:	a368      	add	r3, pc, #416	@ (adr r3, 800c138 <_dtoa_r+0x2b8>)
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f7f4 f97f 	bl	800029c <__adddf3>
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	460d      	mov	r5, r1
 800bfa4:	f7f4 fac6 	bl	8000534 <__aeabi_i2d>
 800bfa8:	a365      	add	r3, pc, #404	@ (adr r3, 800c140 <_dtoa_r+0x2c0>)
 800bfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfae:	f7f4 fb2b 	bl	8000608 <__aeabi_dmul>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	4629      	mov	r1, r5
 800bfba:	f7f4 f96f 	bl	800029c <__adddf3>
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	460d      	mov	r5, r1
 800bfc2:	f7f4 fdd1 	bl	8000b68 <__aeabi_d2iz>
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	4607      	mov	r7, r0
 800bfca:	2300      	movs	r3, #0
 800bfcc:	4620      	mov	r0, r4
 800bfce:	4629      	mov	r1, r5
 800bfd0:	f7f4 fd8c 	bl	8000aec <__aeabi_dcmplt>
 800bfd4:	b140      	cbz	r0, 800bfe8 <_dtoa_r+0x168>
 800bfd6:	4638      	mov	r0, r7
 800bfd8:	f7f4 faac 	bl	8000534 <__aeabi_i2d>
 800bfdc:	4622      	mov	r2, r4
 800bfde:	462b      	mov	r3, r5
 800bfe0:	f7f4 fd7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800bfe4:	b900      	cbnz	r0, 800bfe8 <_dtoa_r+0x168>
 800bfe6:	3f01      	subs	r7, #1
 800bfe8:	2f16      	cmp	r7, #22
 800bfea:	d851      	bhi.n	800c090 <_dtoa_r+0x210>
 800bfec:	4b5b      	ldr	r3, [pc, #364]	@ (800c15c <_dtoa_r+0x2dc>)
 800bfee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bffa:	f7f4 fd77 	bl	8000aec <__aeabi_dcmplt>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d048      	beq.n	800c094 <_dtoa_r+0x214>
 800c002:	3f01      	subs	r7, #1
 800c004:	2300      	movs	r3, #0
 800c006:	9312      	str	r3, [sp, #72]	@ 0x48
 800c008:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c00a:	1b9b      	subs	r3, r3, r6
 800c00c:	1e5a      	subs	r2, r3, #1
 800c00e:	bf44      	itt	mi
 800c010:	f1c3 0801 	rsbmi	r8, r3, #1
 800c014:	2300      	movmi	r3, #0
 800c016:	9208      	str	r2, [sp, #32]
 800c018:	bf54      	ite	pl
 800c01a:	f04f 0800 	movpl.w	r8, #0
 800c01e:	9308      	strmi	r3, [sp, #32]
 800c020:	2f00      	cmp	r7, #0
 800c022:	db39      	blt.n	800c098 <_dtoa_r+0x218>
 800c024:	9b08      	ldr	r3, [sp, #32]
 800c026:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c028:	443b      	add	r3, r7
 800c02a:	9308      	str	r3, [sp, #32]
 800c02c:	2300      	movs	r3, #0
 800c02e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c032:	2b09      	cmp	r3, #9
 800c034:	d864      	bhi.n	800c100 <_dtoa_r+0x280>
 800c036:	2b05      	cmp	r3, #5
 800c038:	bfc4      	itt	gt
 800c03a:	3b04      	subgt	r3, #4
 800c03c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c040:	f1a3 0302 	sub.w	r3, r3, #2
 800c044:	bfcc      	ite	gt
 800c046:	2400      	movgt	r4, #0
 800c048:	2401      	movle	r4, #1
 800c04a:	2b03      	cmp	r3, #3
 800c04c:	d863      	bhi.n	800c116 <_dtoa_r+0x296>
 800c04e:	e8df f003 	tbb	[pc, r3]
 800c052:	372a      	.short	0x372a
 800c054:	5535      	.short	0x5535
 800c056:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c05a:	441e      	add	r6, r3
 800c05c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c060:	2b20      	cmp	r3, #32
 800c062:	bfc1      	itttt	gt
 800c064:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c068:	409f      	lslgt	r7, r3
 800c06a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c06e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c072:	bfd6      	itet	le
 800c074:	f1c3 0320 	rsble	r3, r3, #32
 800c078:	ea47 0003 	orrgt.w	r0, r7, r3
 800c07c:	fa04 f003 	lslle.w	r0, r4, r3
 800c080:	f7f4 fa48 	bl	8000514 <__aeabi_ui2d>
 800c084:	2201      	movs	r2, #1
 800c086:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c08a:	3e01      	subs	r6, #1
 800c08c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c08e:	e777      	b.n	800bf80 <_dtoa_r+0x100>
 800c090:	2301      	movs	r3, #1
 800c092:	e7b8      	b.n	800c006 <_dtoa_r+0x186>
 800c094:	9012      	str	r0, [sp, #72]	@ 0x48
 800c096:	e7b7      	b.n	800c008 <_dtoa_r+0x188>
 800c098:	427b      	negs	r3, r7
 800c09a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c09c:	2300      	movs	r3, #0
 800c09e:	eba8 0807 	sub.w	r8, r8, r7
 800c0a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0a4:	e7c4      	b.n	800c030 <_dtoa_r+0x1b0>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	dc35      	bgt.n	800c11c <_dtoa_r+0x29c>
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	9307      	str	r3, [sp, #28]
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c0ba:	e00b      	b.n	800c0d4 <_dtoa_r+0x254>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e7f3      	b.n	800c0a8 <_dtoa_r+0x228>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0c6:	18fb      	adds	r3, r7, r3
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	9307      	str	r3, [sp, #28]
 800c0d0:	bfb8      	it	lt
 800c0d2:	2301      	movlt	r3, #1
 800c0d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c0d8:	2100      	movs	r1, #0
 800c0da:	2204      	movs	r2, #4
 800c0dc:	f102 0514 	add.w	r5, r2, #20
 800c0e0:	429d      	cmp	r5, r3
 800c0e2:	d91f      	bls.n	800c124 <_dtoa_r+0x2a4>
 800c0e4:	6041      	str	r1, [r0, #4]
 800c0e6:	4658      	mov	r0, fp
 800c0e8:	f000 fd8e 	bl	800cc08 <_Balloc>
 800c0ec:	4682      	mov	sl, r0
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	d13c      	bne.n	800c16c <_dtoa_r+0x2ec>
 800c0f2:	4b1b      	ldr	r3, [pc, #108]	@ (800c160 <_dtoa_r+0x2e0>)
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c0fa:	e6d8      	b.n	800beae <_dtoa_r+0x2e>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e7e0      	b.n	800c0c2 <_dtoa_r+0x242>
 800c100:	2401      	movs	r4, #1
 800c102:	2300      	movs	r3, #0
 800c104:	9309      	str	r3, [sp, #36]	@ 0x24
 800c106:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c108:	f04f 33ff 	mov.w	r3, #4294967295
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	9307      	str	r3, [sp, #28]
 800c110:	2200      	movs	r2, #0
 800c112:	2312      	movs	r3, #18
 800c114:	e7d0      	b.n	800c0b8 <_dtoa_r+0x238>
 800c116:	2301      	movs	r3, #1
 800c118:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c11a:	e7f5      	b.n	800c108 <_dtoa_r+0x288>
 800c11c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	9307      	str	r3, [sp, #28]
 800c122:	e7d7      	b.n	800c0d4 <_dtoa_r+0x254>
 800c124:	3101      	adds	r1, #1
 800c126:	0052      	lsls	r2, r2, #1
 800c128:	e7d8      	b.n	800c0dc <_dtoa_r+0x25c>
 800c12a:	bf00      	nop
 800c12c:	f3af 8000 	nop.w
 800c130:	636f4361 	.word	0x636f4361
 800c134:	3fd287a7 	.word	0x3fd287a7
 800c138:	8b60c8b3 	.word	0x8b60c8b3
 800c13c:	3fc68a28 	.word	0x3fc68a28
 800c140:	509f79fb 	.word	0x509f79fb
 800c144:	3fd34413 	.word	0x3fd34413
 800c148:	0800e20a 	.word	0x0800e20a
 800c14c:	0800e221 	.word	0x0800e221
 800c150:	7ff00000 	.word	0x7ff00000
 800c154:	0800e1da 	.word	0x0800e1da
 800c158:	3ff80000 	.word	0x3ff80000
 800c15c:	0800e318 	.word	0x0800e318
 800c160:	0800e279 	.word	0x0800e279
 800c164:	0800e206 	.word	0x0800e206
 800c168:	0800e1d9 	.word	0x0800e1d9
 800c16c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c170:	6018      	str	r0, [r3, #0]
 800c172:	9b07      	ldr	r3, [sp, #28]
 800c174:	2b0e      	cmp	r3, #14
 800c176:	f200 80a4 	bhi.w	800c2c2 <_dtoa_r+0x442>
 800c17a:	2c00      	cmp	r4, #0
 800c17c:	f000 80a1 	beq.w	800c2c2 <_dtoa_r+0x442>
 800c180:	2f00      	cmp	r7, #0
 800c182:	dd33      	ble.n	800c1ec <_dtoa_r+0x36c>
 800c184:	4bad      	ldr	r3, [pc, #692]	@ (800c43c <_dtoa_r+0x5bc>)
 800c186:	f007 020f 	and.w	r2, r7, #15
 800c18a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c18e:	ed93 7b00 	vldr	d7, [r3]
 800c192:	05f8      	lsls	r0, r7, #23
 800c194:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c198:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c19c:	d516      	bpl.n	800c1cc <_dtoa_r+0x34c>
 800c19e:	4ba8      	ldr	r3, [pc, #672]	@ (800c440 <_dtoa_r+0x5c0>)
 800c1a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1a8:	f7f4 fb58 	bl	800085c <__aeabi_ddiv>
 800c1ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1b0:	f004 040f 	and.w	r4, r4, #15
 800c1b4:	2603      	movs	r6, #3
 800c1b6:	4da2      	ldr	r5, [pc, #648]	@ (800c440 <_dtoa_r+0x5c0>)
 800c1b8:	b954      	cbnz	r4, 800c1d0 <_dtoa_r+0x350>
 800c1ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1c2:	f7f4 fb4b 	bl	800085c <__aeabi_ddiv>
 800c1c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1ca:	e028      	b.n	800c21e <_dtoa_r+0x39e>
 800c1cc:	2602      	movs	r6, #2
 800c1ce:	e7f2      	b.n	800c1b6 <_dtoa_r+0x336>
 800c1d0:	07e1      	lsls	r1, r4, #31
 800c1d2:	d508      	bpl.n	800c1e6 <_dtoa_r+0x366>
 800c1d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1dc:	f7f4 fa14 	bl	8000608 <__aeabi_dmul>
 800c1e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1e4:	3601      	adds	r6, #1
 800c1e6:	1064      	asrs	r4, r4, #1
 800c1e8:	3508      	adds	r5, #8
 800c1ea:	e7e5      	b.n	800c1b8 <_dtoa_r+0x338>
 800c1ec:	f000 80d2 	beq.w	800c394 <_dtoa_r+0x514>
 800c1f0:	427c      	negs	r4, r7
 800c1f2:	4b92      	ldr	r3, [pc, #584]	@ (800c43c <_dtoa_r+0x5bc>)
 800c1f4:	4d92      	ldr	r5, [pc, #584]	@ (800c440 <_dtoa_r+0x5c0>)
 800c1f6:	f004 020f 	and.w	r2, r4, #15
 800c1fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c202:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c206:	f7f4 f9ff 	bl	8000608 <__aeabi_dmul>
 800c20a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c20e:	1124      	asrs	r4, r4, #4
 800c210:	2300      	movs	r3, #0
 800c212:	2602      	movs	r6, #2
 800c214:	2c00      	cmp	r4, #0
 800c216:	f040 80b2 	bne.w	800c37e <_dtoa_r+0x4fe>
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1d3      	bne.n	800c1c6 <_dtoa_r+0x346>
 800c21e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c220:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c224:	2b00      	cmp	r3, #0
 800c226:	f000 80b7 	beq.w	800c398 <_dtoa_r+0x518>
 800c22a:	4b86      	ldr	r3, [pc, #536]	@ (800c444 <_dtoa_r+0x5c4>)
 800c22c:	2200      	movs	r2, #0
 800c22e:	4620      	mov	r0, r4
 800c230:	4629      	mov	r1, r5
 800c232:	f7f4 fc5b 	bl	8000aec <__aeabi_dcmplt>
 800c236:	2800      	cmp	r0, #0
 800c238:	f000 80ae 	beq.w	800c398 <_dtoa_r+0x518>
 800c23c:	9b07      	ldr	r3, [sp, #28]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 80aa 	beq.w	800c398 <_dtoa_r+0x518>
 800c244:	9b00      	ldr	r3, [sp, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	dd37      	ble.n	800c2ba <_dtoa_r+0x43a>
 800c24a:	1e7b      	subs	r3, r7, #1
 800c24c:	9304      	str	r3, [sp, #16]
 800c24e:	4620      	mov	r0, r4
 800c250:	4b7d      	ldr	r3, [pc, #500]	@ (800c448 <_dtoa_r+0x5c8>)
 800c252:	2200      	movs	r2, #0
 800c254:	4629      	mov	r1, r5
 800c256:	f7f4 f9d7 	bl	8000608 <__aeabi_dmul>
 800c25a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c25e:	9c00      	ldr	r4, [sp, #0]
 800c260:	3601      	adds	r6, #1
 800c262:	4630      	mov	r0, r6
 800c264:	f7f4 f966 	bl	8000534 <__aeabi_i2d>
 800c268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c26c:	f7f4 f9cc 	bl	8000608 <__aeabi_dmul>
 800c270:	4b76      	ldr	r3, [pc, #472]	@ (800c44c <_dtoa_r+0x5cc>)
 800c272:	2200      	movs	r2, #0
 800c274:	f7f4 f812 	bl	800029c <__adddf3>
 800c278:	4605      	mov	r5, r0
 800c27a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c27e:	2c00      	cmp	r4, #0
 800c280:	f040 808d 	bne.w	800c39e <_dtoa_r+0x51e>
 800c284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c288:	4b71      	ldr	r3, [pc, #452]	@ (800c450 <_dtoa_r+0x5d0>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	f7f4 f804 	bl	8000298 <__aeabi_dsub>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c298:	462a      	mov	r2, r5
 800c29a:	4633      	mov	r3, r6
 800c29c:	f7f4 fc44 	bl	8000b28 <__aeabi_dcmpgt>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	f040 828b 	bne.w	800c7bc <_dtoa_r+0x93c>
 800c2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2aa:	462a      	mov	r2, r5
 800c2ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c2b0:	f7f4 fc1c 	bl	8000aec <__aeabi_dcmplt>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	f040 8128 	bne.w	800c50a <_dtoa_r+0x68a>
 800c2ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c2be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c2c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f2c0 815a 	blt.w	800c57e <_dtoa_r+0x6fe>
 800c2ca:	2f0e      	cmp	r7, #14
 800c2cc:	f300 8157 	bgt.w	800c57e <_dtoa_r+0x6fe>
 800c2d0:	4b5a      	ldr	r3, [pc, #360]	@ (800c43c <_dtoa_r+0x5bc>)
 800c2d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2d6:	ed93 7b00 	vldr	d7, [r3]
 800c2da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	ed8d 7b00 	vstr	d7, [sp]
 800c2e2:	da03      	bge.n	800c2ec <_dtoa_r+0x46c>
 800c2e4:	9b07      	ldr	r3, [sp, #28]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f340 8101 	ble.w	800c4ee <_dtoa_r+0x66e>
 800c2ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c2f0:	4656      	mov	r6, sl
 800c2f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	f7f4 faaf 	bl	800085c <__aeabi_ddiv>
 800c2fe:	f7f4 fc33 	bl	8000b68 <__aeabi_d2iz>
 800c302:	4680      	mov	r8, r0
 800c304:	f7f4 f916 	bl	8000534 <__aeabi_i2d>
 800c308:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c30c:	f7f4 f97c 	bl	8000608 <__aeabi_dmul>
 800c310:	4602      	mov	r2, r0
 800c312:	460b      	mov	r3, r1
 800c314:	4620      	mov	r0, r4
 800c316:	4629      	mov	r1, r5
 800c318:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c31c:	f7f3 ffbc 	bl	8000298 <__aeabi_dsub>
 800c320:	f806 4b01 	strb.w	r4, [r6], #1
 800c324:	9d07      	ldr	r5, [sp, #28]
 800c326:	eba6 040a 	sub.w	r4, r6, sl
 800c32a:	42a5      	cmp	r5, r4
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	f040 8117 	bne.w	800c562 <_dtoa_r+0x6e2>
 800c334:	f7f3 ffb2 	bl	800029c <__adddf3>
 800c338:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c33c:	4604      	mov	r4, r0
 800c33e:	460d      	mov	r5, r1
 800c340:	f7f4 fbf2 	bl	8000b28 <__aeabi_dcmpgt>
 800c344:	2800      	cmp	r0, #0
 800c346:	f040 80f9 	bne.w	800c53c <_dtoa_r+0x6bc>
 800c34a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c34e:	4620      	mov	r0, r4
 800c350:	4629      	mov	r1, r5
 800c352:	f7f4 fbc1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c356:	b118      	cbz	r0, 800c360 <_dtoa_r+0x4e0>
 800c358:	f018 0f01 	tst.w	r8, #1
 800c35c:	f040 80ee 	bne.w	800c53c <_dtoa_r+0x6bc>
 800c360:	4649      	mov	r1, r9
 800c362:	4658      	mov	r0, fp
 800c364:	f000 fc90 	bl	800cc88 <_Bfree>
 800c368:	2300      	movs	r3, #0
 800c36a:	7033      	strb	r3, [r6, #0]
 800c36c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c36e:	3701      	adds	r7, #1
 800c370:	601f      	str	r7, [r3, #0]
 800c372:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c374:	2b00      	cmp	r3, #0
 800c376:	f000 831d 	beq.w	800c9b4 <_dtoa_r+0xb34>
 800c37a:	601e      	str	r6, [r3, #0]
 800c37c:	e31a      	b.n	800c9b4 <_dtoa_r+0xb34>
 800c37e:	07e2      	lsls	r2, r4, #31
 800c380:	d505      	bpl.n	800c38e <_dtoa_r+0x50e>
 800c382:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c386:	f7f4 f93f 	bl	8000608 <__aeabi_dmul>
 800c38a:	3601      	adds	r6, #1
 800c38c:	2301      	movs	r3, #1
 800c38e:	1064      	asrs	r4, r4, #1
 800c390:	3508      	adds	r5, #8
 800c392:	e73f      	b.n	800c214 <_dtoa_r+0x394>
 800c394:	2602      	movs	r6, #2
 800c396:	e742      	b.n	800c21e <_dtoa_r+0x39e>
 800c398:	9c07      	ldr	r4, [sp, #28]
 800c39a:	9704      	str	r7, [sp, #16]
 800c39c:	e761      	b.n	800c262 <_dtoa_r+0x3e2>
 800c39e:	4b27      	ldr	r3, [pc, #156]	@ (800c43c <_dtoa_r+0x5bc>)
 800c3a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c3aa:	4454      	add	r4, sl
 800c3ac:	2900      	cmp	r1, #0
 800c3ae:	d053      	beq.n	800c458 <_dtoa_r+0x5d8>
 800c3b0:	4928      	ldr	r1, [pc, #160]	@ (800c454 <_dtoa_r+0x5d4>)
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	f7f4 fa52 	bl	800085c <__aeabi_ddiv>
 800c3b8:	4633      	mov	r3, r6
 800c3ba:	462a      	mov	r2, r5
 800c3bc:	f7f3 ff6c 	bl	8000298 <__aeabi_dsub>
 800c3c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3c4:	4656      	mov	r6, sl
 800c3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3ca:	f7f4 fbcd 	bl	8000b68 <__aeabi_d2iz>
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	f7f4 f8b0 	bl	8000534 <__aeabi_i2d>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3dc:	f7f3 ff5c 	bl	8000298 <__aeabi_dsub>
 800c3e0:	3530      	adds	r5, #48	@ 0x30
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3ea:	f806 5b01 	strb.w	r5, [r6], #1
 800c3ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c3f2:	f7f4 fb7b 	bl	8000aec <__aeabi_dcmplt>
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	d171      	bne.n	800c4de <_dtoa_r+0x65e>
 800c3fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3fe:	4911      	ldr	r1, [pc, #68]	@ (800c444 <_dtoa_r+0x5c4>)
 800c400:	2000      	movs	r0, #0
 800c402:	f7f3 ff49 	bl	8000298 <__aeabi_dsub>
 800c406:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c40a:	f7f4 fb6f 	bl	8000aec <__aeabi_dcmplt>
 800c40e:	2800      	cmp	r0, #0
 800c410:	f040 8095 	bne.w	800c53e <_dtoa_r+0x6be>
 800c414:	42a6      	cmp	r6, r4
 800c416:	f43f af50 	beq.w	800c2ba <_dtoa_r+0x43a>
 800c41a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c41e:	4b0a      	ldr	r3, [pc, #40]	@ (800c448 <_dtoa_r+0x5c8>)
 800c420:	2200      	movs	r2, #0
 800c422:	f7f4 f8f1 	bl	8000608 <__aeabi_dmul>
 800c426:	4b08      	ldr	r3, [pc, #32]	@ (800c448 <_dtoa_r+0x5c8>)
 800c428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c42c:	2200      	movs	r2, #0
 800c42e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c432:	f7f4 f8e9 	bl	8000608 <__aeabi_dmul>
 800c436:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c43a:	e7c4      	b.n	800c3c6 <_dtoa_r+0x546>
 800c43c:	0800e318 	.word	0x0800e318
 800c440:	0800e2f0 	.word	0x0800e2f0
 800c444:	3ff00000 	.word	0x3ff00000
 800c448:	40240000 	.word	0x40240000
 800c44c:	401c0000 	.word	0x401c0000
 800c450:	40140000 	.word	0x40140000
 800c454:	3fe00000 	.word	0x3fe00000
 800c458:	4631      	mov	r1, r6
 800c45a:	4628      	mov	r0, r5
 800c45c:	f7f4 f8d4 	bl	8000608 <__aeabi_dmul>
 800c460:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c464:	9415      	str	r4, [sp, #84]	@ 0x54
 800c466:	4656      	mov	r6, sl
 800c468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c46c:	f7f4 fb7c 	bl	8000b68 <__aeabi_d2iz>
 800c470:	4605      	mov	r5, r0
 800c472:	f7f4 f85f 	bl	8000534 <__aeabi_i2d>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c47e:	f7f3 ff0b 	bl	8000298 <__aeabi_dsub>
 800c482:	3530      	adds	r5, #48	@ 0x30
 800c484:	f806 5b01 	strb.w	r5, [r6], #1
 800c488:	4602      	mov	r2, r0
 800c48a:	460b      	mov	r3, r1
 800c48c:	42a6      	cmp	r6, r4
 800c48e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c492:	f04f 0200 	mov.w	r2, #0
 800c496:	d124      	bne.n	800c4e2 <_dtoa_r+0x662>
 800c498:	4bac      	ldr	r3, [pc, #688]	@ (800c74c <_dtoa_r+0x8cc>)
 800c49a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c49e:	f7f3 fefd 	bl	800029c <__adddf3>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4aa:	f7f4 fb3d 	bl	8000b28 <__aeabi_dcmpgt>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	d145      	bne.n	800c53e <_dtoa_r+0x6be>
 800c4b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c4b6:	49a5      	ldr	r1, [pc, #660]	@ (800c74c <_dtoa_r+0x8cc>)
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	f7f3 feed 	bl	8000298 <__aeabi_dsub>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4c6:	f7f4 fb11 	bl	8000aec <__aeabi_dcmplt>
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	f43f aef5 	beq.w	800c2ba <_dtoa_r+0x43a>
 800c4d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c4d2:	1e73      	subs	r3, r6, #1
 800c4d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c4d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c4da:	2b30      	cmp	r3, #48	@ 0x30
 800c4dc:	d0f8      	beq.n	800c4d0 <_dtoa_r+0x650>
 800c4de:	9f04      	ldr	r7, [sp, #16]
 800c4e0:	e73e      	b.n	800c360 <_dtoa_r+0x4e0>
 800c4e2:	4b9b      	ldr	r3, [pc, #620]	@ (800c750 <_dtoa_r+0x8d0>)
 800c4e4:	f7f4 f890 	bl	8000608 <__aeabi_dmul>
 800c4e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4ec:	e7bc      	b.n	800c468 <_dtoa_r+0x5e8>
 800c4ee:	d10c      	bne.n	800c50a <_dtoa_r+0x68a>
 800c4f0:	4b98      	ldr	r3, [pc, #608]	@ (800c754 <_dtoa_r+0x8d4>)
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4f8:	f7f4 f886 	bl	8000608 <__aeabi_dmul>
 800c4fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c500:	f7f4 fb08 	bl	8000b14 <__aeabi_dcmpge>
 800c504:	2800      	cmp	r0, #0
 800c506:	f000 8157 	beq.w	800c7b8 <_dtoa_r+0x938>
 800c50a:	2400      	movs	r4, #0
 800c50c:	4625      	mov	r5, r4
 800c50e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c510:	43db      	mvns	r3, r3
 800c512:	9304      	str	r3, [sp, #16]
 800c514:	4656      	mov	r6, sl
 800c516:	2700      	movs	r7, #0
 800c518:	4621      	mov	r1, r4
 800c51a:	4658      	mov	r0, fp
 800c51c:	f000 fbb4 	bl	800cc88 <_Bfree>
 800c520:	2d00      	cmp	r5, #0
 800c522:	d0dc      	beq.n	800c4de <_dtoa_r+0x65e>
 800c524:	b12f      	cbz	r7, 800c532 <_dtoa_r+0x6b2>
 800c526:	42af      	cmp	r7, r5
 800c528:	d003      	beq.n	800c532 <_dtoa_r+0x6b2>
 800c52a:	4639      	mov	r1, r7
 800c52c:	4658      	mov	r0, fp
 800c52e:	f000 fbab 	bl	800cc88 <_Bfree>
 800c532:	4629      	mov	r1, r5
 800c534:	4658      	mov	r0, fp
 800c536:	f000 fba7 	bl	800cc88 <_Bfree>
 800c53a:	e7d0      	b.n	800c4de <_dtoa_r+0x65e>
 800c53c:	9704      	str	r7, [sp, #16]
 800c53e:	4633      	mov	r3, r6
 800c540:	461e      	mov	r6, r3
 800c542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c546:	2a39      	cmp	r2, #57	@ 0x39
 800c548:	d107      	bne.n	800c55a <_dtoa_r+0x6da>
 800c54a:	459a      	cmp	sl, r3
 800c54c:	d1f8      	bne.n	800c540 <_dtoa_r+0x6c0>
 800c54e:	9a04      	ldr	r2, [sp, #16]
 800c550:	3201      	adds	r2, #1
 800c552:	9204      	str	r2, [sp, #16]
 800c554:	2230      	movs	r2, #48	@ 0x30
 800c556:	f88a 2000 	strb.w	r2, [sl]
 800c55a:	781a      	ldrb	r2, [r3, #0]
 800c55c:	3201      	adds	r2, #1
 800c55e:	701a      	strb	r2, [r3, #0]
 800c560:	e7bd      	b.n	800c4de <_dtoa_r+0x65e>
 800c562:	4b7b      	ldr	r3, [pc, #492]	@ (800c750 <_dtoa_r+0x8d0>)
 800c564:	2200      	movs	r2, #0
 800c566:	f7f4 f84f 	bl	8000608 <__aeabi_dmul>
 800c56a:	2200      	movs	r2, #0
 800c56c:	2300      	movs	r3, #0
 800c56e:	4604      	mov	r4, r0
 800c570:	460d      	mov	r5, r1
 800c572:	f7f4 fab1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c576:	2800      	cmp	r0, #0
 800c578:	f43f aebb 	beq.w	800c2f2 <_dtoa_r+0x472>
 800c57c:	e6f0      	b.n	800c360 <_dtoa_r+0x4e0>
 800c57e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c580:	2a00      	cmp	r2, #0
 800c582:	f000 80db 	beq.w	800c73c <_dtoa_r+0x8bc>
 800c586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c588:	2a01      	cmp	r2, #1
 800c58a:	f300 80bf 	bgt.w	800c70c <_dtoa_r+0x88c>
 800c58e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c590:	2a00      	cmp	r2, #0
 800c592:	f000 80b7 	beq.w	800c704 <_dtoa_r+0x884>
 800c596:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c59a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c59c:	4646      	mov	r6, r8
 800c59e:	9a08      	ldr	r2, [sp, #32]
 800c5a0:	2101      	movs	r1, #1
 800c5a2:	441a      	add	r2, r3
 800c5a4:	4658      	mov	r0, fp
 800c5a6:	4498      	add	r8, r3
 800c5a8:	9208      	str	r2, [sp, #32]
 800c5aa:	f000 fc21 	bl	800cdf0 <__i2b>
 800c5ae:	4605      	mov	r5, r0
 800c5b0:	b15e      	cbz	r6, 800c5ca <_dtoa_r+0x74a>
 800c5b2:	9b08      	ldr	r3, [sp, #32]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	dd08      	ble.n	800c5ca <_dtoa_r+0x74a>
 800c5b8:	42b3      	cmp	r3, r6
 800c5ba:	9a08      	ldr	r2, [sp, #32]
 800c5bc:	bfa8      	it	ge
 800c5be:	4633      	movge	r3, r6
 800c5c0:	eba8 0803 	sub.w	r8, r8, r3
 800c5c4:	1af6      	subs	r6, r6, r3
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	9308      	str	r3, [sp, #32]
 800c5ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5cc:	b1f3      	cbz	r3, 800c60c <_dtoa_r+0x78c>
 800c5ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 80b7 	beq.w	800c744 <_dtoa_r+0x8c4>
 800c5d6:	b18c      	cbz	r4, 800c5fc <_dtoa_r+0x77c>
 800c5d8:	4629      	mov	r1, r5
 800c5da:	4622      	mov	r2, r4
 800c5dc:	4658      	mov	r0, fp
 800c5de:	f000 fcc7 	bl	800cf70 <__pow5mult>
 800c5e2:	464a      	mov	r2, r9
 800c5e4:	4601      	mov	r1, r0
 800c5e6:	4605      	mov	r5, r0
 800c5e8:	4658      	mov	r0, fp
 800c5ea:	f000 fc17 	bl	800ce1c <__multiply>
 800c5ee:	4649      	mov	r1, r9
 800c5f0:	9004      	str	r0, [sp, #16]
 800c5f2:	4658      	mov	r0, fp
 800c5f4:	f000 fb48 	bl	800cc88 <_Bfree>
 800c5f8:	9b04      	ldr	r3, [sp, #16]
 800c5fa:	4699      	mov	r9, r3
 800c5fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5fe:	1b1a      	subs	r2, r3, r4
 800c600:	d004      	beq.n	800c60c <_dtoa_r+0x78c>
 800c602:	4649      	mov	r1, r9
 800c604:	4658      	mov	r0, fp
 800c606:	f000 fcb3 	bl	800cf70 <__pow5mult>
 800c60a:	4681      	mov	r9, r0
 800c60c:	2101      	movs	r1, #1
 800c60e:	4658      	mov	r0, fp
 800c610:	f000 fbee 	bl	800cdf0 <__i2b>
 800c614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c616:	4604      	mov	r4, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 81cf 	beq.w	800c9bc <_dtoa_r+0xb3c>
 800c61e:	461a      	mov	r2, r3
 800c620:	4601      	mov	r1, r0
 800c622:	4658      	mov	r0, fp
 800c624:	f000 fca4 	bl	800cf70 <__pow5mult>
 800c628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	4604      	mov	r4, r0
 800c62e:	f300 8095 	bgt.w	800c75c <_dtoa_r+0x8dc>
 800c632:	9b02      	ldr	r3, [sp, #8]
 800c634:	2b00      	cmp	r3, #0
 800c636:	f040 8087 	bne.w	800c748 <_dtoa_r+0x8c8>
 800c63a:	9b03      	ldr	r3, [sp, #12]
 800c63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c640:	2b00      	cmp	r3, #0
 800c642:	f040 8089 	bne.w	800c758 <_dtoa_r+0x8d8>
 800c646:	9b03      	ldr	r3, [sp, #12]
 800c648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c64c:	0d1b      	lsrs	r3, r3, #20
 800c64e:	051b      	lsls	r3, r3, #20
 800c650:	b12b      	cbz	r3, 800c65e <_dtoa_r+0x7de>
 800c652:	9b08      	ldr	r3, [sp, #32]
 800c654:	3301      	adds	r3, #1
 800c656:	9308      	str	r3, [sp, #32]
 800c658:	f108 0801 	add.w	r8, r8, #1
 800c65c:	2301      	movs	r3, #1
 800c65e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c662:	2b00      	cmp	r3, #0
 800c664:	f000 81b0 	beq.w	800c9c8 <_dtoa_r+0xb48>
 800c668:	6923      	ldr	r3, [r4, #16]
 800c66a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c66e:	6918      	ldr	r0, [r3, #16]
 800c670:	f000 fb72 	bl	800cd58 <__hi0bits>
 800c674:	f1c0 0020 	rsb	r0, r0, #32
 800c678:	9b08      	ldr	r3, [sp, #32]
 800c67a:	4418      	add	r0, r3
 800c67c:	f010 001f 	ands.w	r0, r0, #31
 800c680:	d077      	beq.n	800c772 <_dtoa_r+0x8f2>
 800c682:	f1c0 0320 	rsb	r3, r0, #32
 800c686:	2b04      	cmp	r3, #4
 800c688:	dd6b      	ble.n	800c762 <_dtoa_r+0x8e2>
 800c68a:	9b08      	ldr	r3, [sp, #32]
 800c68c:	f1c0 001c 	rsb	r0, r0, #28
 800c690:	4403      	add	r3, r0
 800c692:	4480      	add	r8, r0
 800c694:	4406      	add	r6, r0
 800c696:	9308      	str	r3, [sp, #32]
 800c698:	f1b8 0f00 	cmp.w	r8, #0
 800c69c:	dd05      	ble.n	800c6aa <_dtoa_r+0x82a>
 800c69e:	4649      	mov	r1, r9
 800c6a0:	4642      	mov	r2, r8
 800c6a2:	4658      	mov	r0, fp
 800c6a4:	f000 fcbe 	bl	800d024 <__lshift>
 800c6a8:	4681      	mov	r9, r0
 800c6aa:	9b08      	ldr	r3, [sp, #32]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	dd05      	ble.n	800c6bc <_dtoa_r+0x83c>
 800c6b0:	4621      	mov	r1, r4
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	4658      	mov	r0, fp
 800c6b6:	f000 fcb5 	bl	800d024 <__lshift>
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d059      	beq.n	800c776 <_dtoa_r+0x8f6>
 800c6c2:	4621      	mov	r1, r4
 800c6c4:	4648      	mov	r0, r9
 800c6c6:	f000 fd19 	bl	800d0fc <__mcmp>
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	da53      	bge.n	800c776 <_dtoa_r+0x8f6>
 800c6ce:	1e7b      	subs	r3, r7, #1
 800c6d0:	9304      	str	r3, [sp, #16]
 800c6d2:	4649      	mov	r1, r9
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	220a      	movs	r2, #10
 800c6d8:	4658      	mov	r0, fp
 800c6da:	f000 faf7 	bl	800cccc <__multadd>
 800c6de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6e0:	4681      	mov	r9, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f000 8172 	beq.w	800c9cc <_dtoa_r+0xb4c>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	220a      	movs	r2, #10
 800c6ee:	4658      	mov	r0, fp
 800c6f0:	f000 faec 	bl	800cccc <__multadd>
 800c6f4:	9b00      	ldr	r3, [sp, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	4605      	mov	r5, r0
 800c6fa:	dc67      	bgt.n	800c7cc <_dtoa_r+0x94c>
 800c6fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	dc41      	bgt.n	800c786 <_dtoa_r+0x906>
 800c702:	e063      	b.n	800c7cc <_dtoa_r+0x94c>
 800c704:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c706:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c70a:	e746      	b.n	800c59a <_dtoa_r+0x71a>
 800c70c:	9b07      	ldr	r3, [sp, #28]
 800c70e:	1e5c      	subs	r4, r3, #1
 800c710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c712:	42a3      	cmp	r3, r4
 800c714:	bfbf      	itttt	lt
 800c716:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c718:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c71a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c71c:	1ae3      	sublt	r3, r4, r3
 800c71e:	bfb4      	ite	lt
 800c720:	18d2      	addlt	r2, r2, r3
 800c722:	1b1c      	subge	r4, r3, r4
 800c724:	9b07      	ldr	r3, [sp, #28]
 800c726:	bfbc      	itt	lt
 800c728:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c72a:	2400      	movlt	r4, #0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	bfb5      	itete	lt
 800c730:	eba8 0603 	sublt.w	r6, r8, r3
 800c734:	9b07      	ldrge	r3, [sp, #28]
 800c736:	2300      	movlt	r3, #0
 800c738:	4646      	movge	r6, r8
 800c73a:	e730      	b.n	800c59e <_dtoa_r+0x71e>
 800c73c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c73e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c740:	4646      	mov	r6, r8
 800c742:	e735      	b.n	800c5b0 <_dtoa_r+0x730>
 800c744:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c746:	e75c      	b.n	800c602 <_dtoa_r+0x782>
 800c748:	2300      	movs	r3, #0
 800c74a:	e788      	b.n	800c65e <_dtoa_r+0x7de>
 800c74c:	3fe00000 	.word	0x3fe00000
 800c750:	40240000 	.word	0x40240000
 800c754:	40140000 	.word	0x40140000
 800c758:	9b02      	ldr	r3, [sp, #8]
 800c75a:	e780      	b.n	800c65e <_dtoa_r+0x7de>
 800c75c:	2300      	movs	r3, #0
 800c75e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c760:	e782      	b.n	800c668 <_dtoa_r+0x7e8>
 800c762:	d099      	beq.n	800c698 <_dtoa_r+0x818>
 800c764:	9a08      	ldr	r2, [sp, #32]
 800c766:	331c      	adds	r3, #28
 800c768:	441a      	add	r2, r3
 800c76a:	4498      	add	r8, r3
 800c76c:	441e      	add	r6, r3
 800c76e:	9208      	str	r2, [sp, #32]
 800c770:	e792      	b.n	800c698 <_dtoa_r+0x818>
 800c772:	4603      	mov	r3, r0
 800c774:	e7f6      	b.n	800c764 <_dtoa_r+0x8e4>
 800c776:	9b07      	ldr	r3, [sp, #28]
 800c778:	9704      	str	r7, [sp, #16]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	dc20      	bgt.n	800c7c0 <_dtoa_r+0x940>
 800c77e:	9300      	str	r3, [sp, #0]
 800c780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c782:	2b02      	cmp	r3, #2
 800c784:	dd1e      	ble.n	800c7c4 <_dtoa_r+0x944>
 800c786:	9b00      	ldr	r3, [sp, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	f47f aec0 	bne.w	800c50e <_dtoa_r+0x68e>
 800c78e:	4621      	mov	r1, r4
 800c790:	2205      	movs	r2, #5
 800c792:	4658      	mov	r0, fp
 800c794:	f000 fa9a 	bl	800cccc <__multadd>
 800c798:	4601      	mov	r1, r0
 800c79a:	4604      	mov	r4, r0
 800c79c:	4648      	mov	r0, r9
 800c79e:	f000 fcad 	bl	800d0fc <__mcmp>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	f77f aeb3 	ble.w	800c50e <_dtoa_r+0x68e>
 800c7a8:	4656      	mov	r6, sl
 800c7aa:	2331      	movs	r3, #49	@ 0x31
 800c7ac:	f806 3b01 	strb.w	r3, [r6], #1
 800c7b0:	9b04      	ldr	r3, [sp, #16]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	9304      	str	r3, [sp, #16]
 800c7b6:	e6ae      	b.n	800c516 <_dtoa_r+0x696>
 800c7b8:	9c07      	ldr	r4, [sp, #28]
 800c7ba:	9704      	str	r7, [sp, #16]
 800c7bc:	4625      	mov	r5, r4
 800c7be:	e7f3      	b.n	800c7a8 <_dtoa_r+0x928>
 800c7c0:	9b07      	ldr	r3, [sp, #28]
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f000 8104 	beq.w	800c9d4 <_dtoa_r+0xb54>
 800c7cc:	2e00      	cmp	r6, #0
 800c7ce:	dd05      	ble.n	800c7dc <_dtoa_r+0x95c>
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	4632      	mov	r2, r6
 800c7d4:	4658      	mov	r0, fp
 800c7d6:	f000 fc25 	bl	800d024 <__lshift>
 800c7da:	4605      	mov	r5, r0
 800c7dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d05a      	beq.n	800c898 <_dtoa_r+0xa18>
 800c7e2:	6869      	ldr	r1, [r5, #4]
 800c7e4:	4658      	mov	r0, fp
 800c7e6:	f000 fa0f 	bl	800cc08 <_Balloc>
 800c7ea:	4606      	mov	r6, r0
 800c7ec:	b928      	cbnz	r0, 800c7fa <_dtoa_r+0x97a>
 800c7ee:	4b84      	ldr	r3, [pc, #528]	@ (800ca00 <_dtoa_r+0xb80>)
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c7f6:	f7ff bb5a 	b.w	800beae <_dtoa_r+0x2e>
 800c7fa:	692a      	ldr	r2, [r5, #16]
 800c7fc:	3202      	adds	r2, #2
 800c7fe:	0092      	lsls	r2, r2, #2
 800c800:	f105 010c 	add.w	r1, r5, #12
 800c804:	300c      	adds	r0, #12
 800c806:	f000 ffaf 	bl	800d768 <memcpy>
 800c80a:	2201      	movs	r2, #1
 800c80c:	4631      	mov	r1, r6
 800c80e:	4658      	mov	r0, fp
 800c810:	f000 fc08 	bl	800d024 <__lshift>
 800c814:	f10a 0301 	add.w	r3, sl, #1
 800c818:	9307      	str	r3, [sp, #28]
 800c81a:	9b00      	ldr	r3, [sp, #0]
 800c81c:	4453      	add	r3, sl
 800c81e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c820:	9b02      	ldr	r3, [sp, #8]
 800c822:	f003 0301 	and.w	r3, r3, #1
 800c826:	462f      	mov	r7, r5
 800c828:	930a      	str	r3, [sp, #40]	@ 0x28
 800c82a:	4605      	mov	r5, r0
 800c82c:	9b07      	ldr	r3, [sp, #28]
 800c82e:	4621      	mov	r1, r4
 800c830:	3b01      	subs	r3, #1
 800c832:	4648      	mov	r0, r9
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	f7ff fa9a 	bl	800bd6e <quorem>
 800c83a:	4639      	mov	r1, r7
 800c83c:	9002      	str	r0, [sp, #8]
 800c83e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c842:	4648      	mov	r0, r9
 800c844:	f000 fc5a 	bl	800d0fc <__mcmp>
 800c848:	462a      	mov	r2, r5
 800c84a:	9008      	str	r0, [sp, #32]
 800c84c:	4621      	mov	r1, r4
 800c84e:	4658      	mov	r0, fp
 800c850:	f000 fc70 	bl	800d134 <__mdiff>
 800c854:	68c2      	ldr	r2, [r0, #12]
 800c856:	4606      	mov	r6, r0
 800c858:	bb02      	cbnz	r2, 800c89c <_dtoa_r+0xa1c>
 800c85a:	4601      	mov	r1, r0
 800c85c:	4648      	mov	r0, r9
 800c85e:	f000 fc4d 	bl	800d0fc <__mcmp>
 800c862:	4602      	mov	r2, r0
 800c864:	4631      	mov	r1, r6
 800c866:	4658      	mov	r0, fp
 800c868:	920e      	str	r2, [sp, #56]	@ 0x38
 800c86a:	f000 fa0d 	bl	800cc88 <_Bfree>
 800c86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c870:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c872:	9e07      	ldr	r6, [sp, #28]
 800c874:	ea43 0102 	orr.w	r1, r3, r2
 800c878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c87a:	4319      	orrs	r1, r3
 800c87c:	d110      	bne.n	800c8a0 <_dtoa_r+0xa20>
 800c87e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c882:	d029      	beq.n	800c8d8 <_dtoa_r+0xa58>
 800c884:	9b08      	ldr	r3, [sp, #32]
 800c886:	2b00      	cmp	r3, #0
 800c888:	dd02      	ble.n	800c890 <_dtoa_r+0xa10>
 800c88a:	9b02      	ldr	r3, [sp, #8]
 800c88c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c890:	9b00      	ldr	r3, [sp, #0]
 800c892:	f883 8000 	strb.w	r8, [r3]
 800c896:	e63f      	b.n	800c518 <_dtoa_r+0x698>
 800c898:	4628      	mov	r0, r5
 800c89a:	e7bb      	b.n	800c814 <_dtoa_r+0x994>
 800c89c:	2201      	movs	r2, #1
 800c89e:	e7e1      	b.n	800c864 <_dtoa_r+0x9e4>
 800c8a0:	9b08      	ldr	r3, [sp, #32]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	db04      	blt.n	800c8b0 <_dtoa_r+0xa30>
 800c8a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c8a8:	430b      	orrs	r3, r1
 800c8aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c8ac:	430b      	orrs	r3, r1
 800c8ae:	d120      	bne.n	800c8f2 <_dtoa_r+0xa72>
 800c8b0:	2a00      	cmp	r2, #0
 800c8b2:	dded      	ble.n	800c890 <_dtoa_r+0xa10>
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	4658      	mov	r0, fp
 800c8ba:	f000 fbb3 	bl	800d024 <__lshift>
 800c8be:	4621      	mov	r1, r4
 800c8c0:	4681      	mov	r9, r0
 800c8c2:	f000 fc1b 	bl	800d0fc <__mcmp>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	dc03      	bgt.n	800c8d2 <_dtoa_r+0xa52>
 800c8ca:	d1e1      	bne.n	800c890 <_dtoa_r+0xa10>
 800c8cc:	f018 0f01 	tst.w	r8, #1
 800c8d0:	d0de      	beq.n	800c890 <_dtoa_r+0xa10>
 800c8d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c8d6:	d1d8      	bne.n	800c88a <_dtoa_r+0xa0a>
 800c8d8:	9a00      	ldr	r2, [sp, #0]
 800c8da:	2339      	movs	r3, #57	@ 0x39
 800c8dc:	7013      	strb	r3, [r2, #0]
 800c8de:	4633      	mov	r3, r6
 800c8e0:	461e      	mov	r6, r3
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c8e8:	2a39      	cmp	r2, #57	@ 0x39
 800c8ea:	d052      	beq.n	800c992 <_dtoa_r+0xb12>
 800c8ec:	3201      	adds	r2, #1
 800c8ee:	701a      	strb	r2, [r3, #0]
 800c8f0:	e612      	b.n	800c518 <_dtoa_r+0x698>
 800c8f2:	2a00      	cmp	r2, #0
 800c8f4:	dd07      	ble.n	800c906 <_dtoa_r+0xa86>
 800c8f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c8fa:	d0ed      	beq.n	800c8d8 <_dtoa_r+0xa58>
 800c8fc:	9a00      	ldr	r2, [sp, #0]
 800c8fe:	f108 0301 	add.w	r3, r8, #1
 800c902:	7013      	strb	r3, [r2, #0]
 800c904:	e608      	b.n	800c518 <_dtoa_r+0x698>
 800c906:	9b07      	ldr	r3, [sp, #28]
 800c908:	9a07      	ldr	r2, [sp, #28]
 800c90a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c90e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c910:	4293      	cmp	r3, r2
 800c912:	d028      	beq.n	800c966 <_dtoa_r+0xae6>
 800c914:	4649      	mov	r1, r9
 800c916:	2300      	movs	r3, #0
 800c918:	220a      	movs	r2, #10
 800c91a:	4658      	mov	r0, fp
 800c91c:	f000 f9d6 	bl	800cccc <__multadd>
 800c920:	42af      	cmp	r7, r5
 800c922:	4681      	mov	r9, r0
 800c924:	f04f 0300 	mov.w	r3, #0
 800c928:	f04f 020a 	mov.w	r2, #10
 800c92c:	4639      	mov	r1, r7
 800c92e:	4658      	mov	r0, fp
 800c930:	d107      	bne.n	800c942 <_dtoa_r+0xac2>
 800c932:	f000 f9cb 	bl	800cccc <__multadd>
 800c936:	4607      	mov	r7, r0
 800c938:	4605      	mov	r5, r0
 800c93a:	9b07      	ldr	r3, [sp, #28]
 800c93c:	3301      	adds	r3, #1
 800c93e:	9307      	str	r3, [sp, #28]
 800c940:	e774      	b.n	800c82c <_dtoa_r+0x9ac>
 800c942:	f000 f9c3 	bl	800cccc <__multadd>
 800c946:	4629      	mov	r1, r5
 800c948:	4607      	mov	r7, r0
 800c94a:	2300      	movs	r3, #0
 800c94c:	220a      	movs	r2, #10
 800c94e:	4658      	mov	r0, fp
 800c950:	f000 f9bc 	bl	800cccc <__multadd>
 800c954:	4605      	mov	r5, r0
 800c956:	e7f0      	b.n	800c93a <_dtoa_r+0xaba>
 800c958:	9b00      	ldr	r3, [sp, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	bfcc      	ite	gt
 800c95e:	461e      	movgt	r6, r3
 800c960:	2601      	movle	r6, #1
 800c962:	4456      	add	r6, sl
 800c964:	2700      	movs	r7, #0
 800c966:	4649      	mov	r1, r9
 800c968:	2201      	movs	r2, #1
 800c96a:	4658      	mov	r0, fp
 800c96c:	f000 fb5a 	bl	800d024 <__lshift>
 800c970:	4621      	mov	r1, r4
 800c972:	4681      	mov	r9, r0
 800c974:	f000 fbc2 	bl	800d0fc <__mcmp>
 800c978:	2800      	cmp	r0, #0
 800c97a:	dcb0      	bgt.n	800c8de <_dtoa_r+0xa5e>
 800c97c:	d102      	bne.n	800c984 <_dtoa_r+0xb04>
 800c97e:	f018 0f01 	tst.w	r8, #1
 800c982:	d1ac      	bne.n	800c8de <_dtoa_r+0xa5e>
 800c984:	4633      	mov	r3, r6
 800c986:	461e      	mov	r6, r3
 800c988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c98c:	2a30      	cmp	r2, #48	@ 0x30
 800c98e:	d0fa      	beq.n	800c986 <_dtoa_r+0xb06>
 800c990:	e5c2      	b.n	800c518 <_dtoa_r+0x698>
 800c992:	459a      	cmp	sl, r3
 800c994:	d1a4      	bne.n	800c8e0 <_dtoa_r+0xa60>
 800c996:	9b04      	ldr	r3, [sp, #16]
 800c998:	3301      	adds	r3, #1
 800c99a:	9304      	str	r3, [sp, #16]
 800c99c:	2331      	movs	r3, #49	@ 0x31
 800c99e:	f88a 3000 	strb.w	r3, [sl]
 800c9a2:	e5b9      	b.n	800c518 <_dtoa_r+0x698>
 800c9a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c9a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ca04 <_dtoa_r+0xb84>
 800c9aa:	b11b      	cbz	r3, 800c9b4 <_dtoa_r+0xb34>
 800c9ac:	f10a 0308 	add.w	r3, sl, #8
 800c9b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c9b2:	6013      	str	r3, [r2, #0]
 800c9b4:	4650      	mov	r0, sl
 800c9b6:	b019      	add	sp, #100	@ 0x64
 800c9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	f77f ae37 	ble.w	800c632 <_dtoa_r+0x7b2>
 800c9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9c8:	2001      	movs	r0, #1
 800c9ca:	e655      	b.n	800c678 <_dtoa_r+0x7f8>
 800c9cc:	9b00      	ldr	r3, [sp, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f77f aed6 	ble.w	800c780 <_dtoa_r+0x900>
 800c9d4:	4656      	mov	r6, sl
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	4648      	mov	r0, r9
 800c9da:	f7ff f9c8 	bl	800bd6e <quorem>
 800c9de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c9e2:	f806 8b01 	strb.w	r8, [r6], #1
 800c9e6:	9b00      	ldr	r3, [sp, #0]
 800c9e8:	eba6 020a 	sub.w	r2, r6, sl
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	ddb3      	ble.n	800c958 <_dtoa_r+0xad8>
 800c9f0:	4649      	mov	r1, r9
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	220a      	movs	r2, #10
 800c9f6:	4658      	mov	r0, fp
 800c9f8:	f000 f968 	bl	800cccc <__multadd>
 800c9fc:	4681      	mov	r9, r0
 800c9fe:	e7ea      	b.n	800c9d6 <_dtoa_r+0xb56>
 800ca00:	0800e279 	.word	0x0800e279
 800ca04:	0800e1fd 	.word	0x0800e1fd

0800ca08 <_free_r>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	2900      	cmp	r1, #0
 800ca0e:	d041      	beq.n	800ca94 <_free_r+0x8c>
 800ca10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca14:	1f0c      	subs	r4, r1, #4
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	bfb8      	it	lt
 800ca1a:	18e4      	addlt	r4, r4, r3
 800ca1c:	f000 f8e8 	bl	800cbf0 <__malloc_lock>
 800ca20:	4a1d      	ldr	r2, [pc, #116]	@ (800ca98 <_free_r+0x90>)
 800ca22:	6813      	ldr	r3, [r2, #0]
 800ca24:	b933      	cbnz	r3, 800ca34 <_free_r+0x2c>
 800ca26:	6063      	str	r3, [r4, #4]
 800ca28:	6014      	str	r4, [r2, #0]
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca30:	f000 b8e4 	b.w	800cbfc <__malloc_unlock>
 800ca34:	42a3      	cmp	r3, r4
 800ca36:	d908      	bls.n	800ca4a <_free_r+0x42>
 800ca38:	6820      	ldr	r0, [r4, #0]
 800ca3a:	1821      	adds	r1, r4, r0
 800ca3c:	428b      	cmp	r3, r1
 800ca3e:	bf01      	itttt	eq
 800ca40:	6819      	ldreq	r1, [r3, #0]
 800ca42:	685b      	ldreq	r3, [r3, #4]
 800ca44:	1809      	addeq	r1, r1, r0
 800ca46:	6021      	streq	r1, [r4, #0]
 800ca48:	e7ed      	b.n	800ca26 <_free_r+0x1e>
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	b10b      	cbz	r3, 800ca54 <_free_r+0x4c>
 800ca50:	42a3      	cmp	r3, r4
 800ca52:	d9fa      	bls.n	800ca4a <_free_r+0x42>
 800ca54:	6811      	ldr	r1, [r2, #0]
 800ca56:	1850      	adds	r0, r2, r1
 800ca58:	42a0      	cmp	r0, r4
 800ca5a:	d10b      	bne.n	800ca74 <_free_r+0x6c>
 800ca5c:	6820      	ldr	r0, [r4, #0]
 800ca5e:	4401      	add	r1, r0
 800ca60:	1850      	adds	r0, r2, r1
 800ca62:	4283      	cmp	r3, r0
 800ca64:	6011      	str	r1, [r2, #0]
 800ca66:	d1e0      	bne.n	800ca2a <_free_r+0x22>
 800ca68:	6818      	ldr	r0, [r3, #0]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	6053      	str	r3, [r2, #4]
 800ca6e:	4408      	add	r0, r1
 800ca70:	6010      	str	r0, [r2, #0]
 800ca72:	e7da      	b.n	800ca2a <_free_r+0x22>
 800ca74:	d902      	bls.n	800ca7c <_free_r+0x74>
 800ca76:	230c      	movs	r3, #12
 800ca78:	602b      	str	r3, [r5, #0]
 800ca7a:	e7d6      	b.n	800ca2a <_free_r+0x22>
 800ca7c:	6820      	ldr	r0, [r4, #0]
 800ca7e:	1821      	adds	r1, r4, r0
 800ca80:	428b      	cmp	r3, r1
 800ca82:	bf04      	itt	eq
 800ca84:	6819      	ldreq	r1, [r3, #0]
 800ca86:	685b      	ldreq	r3, [r3, #4]
 800ca88:	6063      	str	r3, [r4, #4]
 800ca8a:	bf04      	itt	eq
 800ca8c:	1809      	addeq	r1, r1, r0
 800ca8e:	6021      	streq	r1, [r4, #0]
 800ca90:	6054      	str	r4, [r2, #4]
 800ca92:	e7ca      	b.n	800ca2a <_free_r+0x22>
 800ca94:	bd38      	pop	{r3, r4, r5, pc}
 800ca96:	bf00      	nop
 800ca98:	20001aac 	.word	0x20001aac

0800ca9c <malloc>:
 800ca9c:	4b02      	ldr	r3, [pc, #8]	@ (800caa8 <malloc+0xc>)
 800ca9e:	4601      	mov	r1, r0
 800caa0:	6818      	ldr	r0, [r3, #0]
 800caa2:	f000 b825 	b.w	800caf0 <_malloc_r>
 800caa6:	bf00      	nop
 800caa8:	20000108 	.word	0x20000108

0800caac <sbrk_aligned>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	4e0f      	ldr	r6, [pc, #60]	@ (800caec <sbrk_aligned+0x40>)
 800cab0:	460c      	mov	r4, r1
 800cab2:	6831      	ldr	r1, [r6, #0]
 800cab4:	4605      	mov	r5, r0
 800cab6:	b911      	cbnz	r1, 800cabe <sbrk_aligned+0x12>
 800cab8:	f000 fe46 	bl	800d748 <_sbrk_r>
 800cabc:	6030      	str	r0, [r6, #0]
 800cabe:	4621      	mov	r1, r4
 800cac0:	4628      	mov	r0, r5
 800cac2:	f000 fe41 	bl	800d748 <_sbrk_r>
 800cac6:	1c43      	adds	r3, r0, #1
 800cac8:	d103      	bne.n	800cad2 <sbrk_aligned+0x26>
 800caca:	f04f 34ff 	mov.w	r4, #4294967295
 800cace:	4620      	mov	r0, r4
 800cad0:	bd70      	pop	{r4, r5, r6, pc}
 800cad2:	1cc4      	adds	r4, r0, #3
 800cad4:	f024 0403 	bic.w	r4, r4, #3
 800cad8:	42a0      	cmp	r0, r4
 800cada:	d0f8      	beq.n	800cace <sbrk_aligned+0x22>
 800cadc:	1a21      	subs	r1, r4, r0
 800cade:	4628      	mov	r0, r5
 800cae0:	f000 fe32 	bl	800d748 <_sbrk_r>
 800cae4:	3001      	adds	r0, #1
 800cae6:	d1f2      	bne.n	800cace <sbrk_aligned+0x22>
 800cae8:	e7ef      	b.n	800caca <sbrk_aligned+0x1e>
 800caea:	bf00      	nop
 800caec:	20001aa8 	.word	0x20001aa8

0800caf0 <_malloc_r>:
 800caf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caf4:	1ccd      	adds	r5, r1, #3
 800caf6:	f025 0503 	bic.w	r5, r5, #3
 800cafa:	3508      	adds	r5, #8
 800cafc:	2d0c      	cmp	r5, #12
 800cafe:	bf38      	it	cc
 800cb00:	250c      	movcc	r5, #12
 800cb02:	2d00      	cmp	r5, #0
 800cb04:	4606      	mov	r6, r0
 800cb06:	db01      	blt.n	800cb0c <_malloc_r+0x1c>
 800cb08:	42a9      	cmp	r1, r5
 800cb0a:	d904      	bls.n	800cb16 <_malloc_r+0x26>
 800cb0c:	230c      	movs	r3, #12
 800cb0e:	6033      	str	r3, [r6, #0]
 800cb10:	2000      	movs	r0, #0
 800cb12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cbec <_malloc_r+0xfc>
 800cb1a:	f000 f869 	bl	800cbf0 <__malloc_lock>
 800cb1e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb22:	461c      	mov	r4, r3
 800cb24:	bb44      	cbnz	r4, 800cb78 <_malloc_r+0x88>
 800cb26:	4629      	mov	r1, r5
 800cb28:	4630      	mov	r0, r6
 800cb2a:	f7ff ffbf 	bl	800caac <sbrk_aligned>
 800cb2e:	1c43      	adds	r3, r0, #1
 800cb30:	4604      	mov	r4, r0
 800cb32:	d158      	bne.n	800cbe6 <_malloc_r+0xf6>
 800cb34:	f8d8 4000 	ldr.w	r4, [r8]
 800cb38:	4627      	mov	r7, r4
 800cb3a:	2f00      	cmp	r7, #0
 800cb3c:	d143      	bne.n	800cbc6 <_malloc_r+0xd6>
 800cb3e:	2c00      	cmp	r4, #0
 800cb40:	d04b      	beq.n	800cbda <_malloc_r+0xea>
 800cb42:	6823      	ldr	r3, [r4, #0]
 800cb44:	4639      	mov	r1, r7
 800cb46:	4630      	mov	r0, r6
 800cb48:	eb04 0903 	add.w	r9, r4, r3
 800cb4c:	f000 fdfc 	bl	800d748 <_sbrk_r>
 800cb50:	4581      	cmp	r9, r0
 800cb52:	d142      	bne.n	800cbda <_malloc_r+0xea>
 800cb54:	6821      	ldr	r1, [r4, #0]
 800cb56:	1a6d      	subs	r5, r5, r1
 800cb58:	4629      	mov	r1, r5
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	f7ff ffa6 	bl	800caac <sbrk_aligned>
 800cb60:	3001      	adds	r0, #1
 800cb62:	d03a      	beq.n	800cbda <_malloc_r+0xea>
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	442b      	add	r3, r5
 800cb68:	6023      	str	r3, [r4, #0]
 800cb6a:	f8d8 3000 	ldr.w	r3, [r8]
 800cb6e:	685a      	ldr	r2, [r3, #4]
 800cb70:	bb62      	cbnz	r2, 800cbcc <_malloc_r+0xdc>
 800cb72:	f8c8 7000 	str.w	r7, [r8]
 800cb76:	e00f      	b.n	800cb98 <_malloc_r+0xa8>
 800cb78:	6822      	ldr	r2, [r4, #0]
 800cb7a:	1b52      	subs	r2, r2, r5
 800cb7c:	d420      	bmi.n	800cbc0 <_malloc_r+0xd0>
 800cb7e:	2a0b      	cmp	r2, #11
 800cb80:	d917      	bls.n	800cbb2 <_malloc_r+0xc2>
 800cb82:	1961      	adds	r1, r4, r5
 800cb84:	42a3      	cmp	r3, r4
 800cb86:	6025      	str	r5, [r4, #0]
 800cb88:	bf18      	it	ne
 800cb8a:	6059      	strne	r1, [r3, #4]
 800cb8c:	6863      	ldr	r3, [r4, #4]
 800cb8e:	bf08      	it	eq
 800cb90:	f8c8 1000 	streq.w	r1, [r8]
 800cb94:	5162      	str	r2, [r4, r5]
 800cb96:	604b      	str	r3, [r1, #4]
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f000 f82f 	bl	800cbfc <__malloc_unlock>
 800cb9e:	f104 000b 	add.w	r0, r4, #11
 800cba2:	1d23      	adds	r3, r4, #4
 800cba4:	f020 0007 	bic.w	r0, r0, #7
 800cba8:	1ac2      	subs	r2, r0, r3
 800cbaa:	bf1c      	itt	ne
 800cbac:	1a1b      	subne	r3, r3, r0
 800cbae:	50a3      	strne	r3, [r4, r2]
 800cbb0:	e7af      	b.n	800cb12 <_malloc_r+0x22>
 800cbb2:	6862      	ldr	r2, [r4, #4]
 800cbb4:	42a3      	cmp	r3, r4
 800cbb6:	bf0c      	ite	eq
 800cbb8:	f8c8 2000 	streq.w	r2, [r8]
 800cbbc:	605a      	strne	r2, [r3, #4]
 800cbbe:	e7eb      	b.n	800cb98 <_malloc_r+0xa8>
 800cbc0:	4623      	mov	r3, r4
 800cbc2:	6864      	ldr	r4, [r4, #4]
 800cbc4:	e7ae      	b.n	800cb24 <_malloc_r+0x34>
 800cbc6:	463c      	mov	r4, r7
 800cbc8:	687f      	ldr	r7, [r7, #4]
 800cbca:	e7b6      	b.n	800cb3a <_malloc_r+0x4a>
 800cbcc:	461a      	mov	r2, r3
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	42a3      	cmp	r3, r4
 800cbd2:	d1fb      	bne.n	800cbcc <_malloc_r+0xdc>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	6053      	str	r3, [r2, #4]
 800cbd8:	e7de      	b.n	800cb98 <_malloc_r+0xa8>
 800cbda:	230c      	movs	r3, #12
 800cbdc:	6033      	str	r3, [r6, #0]
 800cbde:	4630      	mov	r0, r6
 800cbe0:	f000 f80c 	bl	800cbfc <__malloc_unlock>
 800cbe4:	e794      	b.n	800cb10 <_malloc_r+0x20>
 800cbe6:	6005      	str	r5, [r0, #0]
 800cbe8:	e7d6      	b.n	800cb98 <_malloc_r+0xa8>
 800cbea:	bf00      	nop
 800cbec:	20001aac 	.word	0x20001aac

0800cbf0 <__malloc_lock>:
 800cbf0:	4801      	ldr	r0, [pc, #4]	@ (800cbf8 <__malloc_lock+0x8>)
 800cbf2:	f7ff b8ba 	b.w	800bd6a <__retarget_lock_acquire_recursive>
 800cbf6:	bf00      	nop
 800cbf8:	20001aa4 	.word	0x20001aa4

0800cbfc <__malloc_unlock>:
 800cbfc:	4801      	ldr	r0, [pc, #4]	@ (800cc04 <__malloc_unlock+0x8>)
 800cbfe:	f7ff b8b5 	b.w	800bd6c <__retarget_lock_release_recursive>
 800cc02:	bf00      	nop
 800cc04:	20001aa4 	.word	0x20001aa4

0800cc08 <_Balloc>:
 800cc08:	b570      	push	{r4, r5, r6, lr}
 800cc0a:	69c6      	ldr	r6, [r0, #28]
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	460d      	mov	r5, r1
 800cc10:	b976      	cbnz	r6, 800cc30 <_Balloc+0x28>
 800cc12:	2010      	movs	r0, #16
 800cc14:	f7ff ff42 	bl	800ca9c <malloc>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	61e0      	str	r0, [r4, #28]
 800cc1c:	b920      	cbnz	r0, 800cc28 <_Balloc+0x20>
 800cc1e:	4b18      	ldr	r3, [pc, #96]	@ (800cc80 <_Balloc+0x78>)
 800cc20:	4818      	ldr	r0, [pc, #96]	@ (800cc84 <_Balloc+0x7c>)
 800cc22:	216b      	movs	r1, #107	@ 0x6b
 800cc24:	f000 fdae 	bl	800d784 <__assert_func>
 800cc28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc2c:	6006      	str	r6, [r0, #0]
 800cc2e:	60c6      	str	r6, [r0, #12]
 800cc30:	69e6      	ldr	r6, [r4, #28]
 800cc32:	68f3      	ldr	r3, [r6, #12]
 800cc34:	b183      	cbz	r3, 800cc58 <_Balloc+0x50>
 800cc36:	69e3      	ldr	r3, [r4, #28]
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc3e:	b9b8      	cbnz	r0, 800cc70 <_Balloc+0x68>
 800cc40:	2101      	movs	r1, #1
 800cc42:	fa01 f605 	lsl.w	r6, r1, r5
 800cc46:	1d72      	adds	r2, r6, #5
 800cc48:	0092      	lsls	r2, r2, #2
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f000 fdb8 	bl	800d7c0 <_calloc_r>
 800cc50:	b160      	cbz	r0, 800cc6c <_Balloc+0x64>
 800cc52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc56:	e00e      	b.n	800cc76 <_Balloc+0x6e>
 800cc58:	2221      	movs	r2, #33	@ 0x21
 800cc5a:	2104      	movs	r1, #4
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f000 fdaf 	bl	800d7c0 <_calloc_r>
 800cc62:	69e3      	ldr	r3, [r4, #28]
 800cc64:	60f0      	str	r0, [r6, #12]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1e4      	bne.n	800cc36 <_Balloc+0x2e>
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	bd70      	pop	{r4, r5, r6, pc}
 800cc70:	6802      	ldr	r2, [r0, #0]
 800cc72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc76:	2300      	movs	r3, #0
 800cc78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc7c:	e7f7      	b.n	800cc6e <_Balloc+0x66>
 800cc7e:	bf00      	nop
 800cc80:	0800e20a 	.word	0x0800e20a
 800cc84:	0800e28a 	.word	0x0800e28a

0800cc88 <_Bfree>:
 800cc88:	b570      	push	{r4, r5, r6, lr}
 800cc8a:	69c6      	ldr	r6, [r0, #28]
 800cc8c:	4605      	mov	r5, r0
 800cc8e:	460c      	mov	r4, r1
 800cc90:	b976      	cbnz	r6, 800ccb0 <_Bfree+0x28>
 800cc92:	2010      	movs	r0, #16
 800cc94:	f7ff ff02 	bl	800ca9c <malloc>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	61e8      	str	r0, [r5, #28]
 800cc9c:	b920      	cbnz	r0, 800cca8 <_Bfree+0x20>
 800cc9e:	4b09      	ldr	r3, [pc, #36]	@ (800ccc4 <_Bfree+0x3c>)
 800cca0:	4809      	ldr	r0, [pc, #36]	@ (800ccc8 <_Bfree+0x40>)
 800cca2:	218f      	movs	r1, #143	@ 0x8f
 800cca4:	f000 fd6e 	bl	800d784 <__assert_func>
 800cca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccac:	6006      	str	r6, [r0, #0]
 800ccae:	60c6      	str	r6, [r0, #12]
 800ccb0:	b13c      	cbz	r4, 800ccc2 <_Bfree+0x3a>
 800ccb2:	69eb      	ldr	r3, [r5, #28]
 800ccb4:	6862      	ldr	r2, [r4, #4]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccbc:	6021      	str	r1, [r4, #0]
 800ccbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccc2:	bd70      	pop	{r4, r5, r6, pc}
 800ccc4:	0800e20a 	.word	0x0800e20a
 800ccc8:	0800e28a 	.word	0x0800e28a

0800cccc <__multadd>:
 800cccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd0:	690d      	ldr	r5, [r1, #16]
 800ccd2:	4607      	mov	r7, r0
 800ccd4:	460c      	mov	r4, r1
 800ccd6:	461e      	mov	r6, r3
 800ccd8:	f101 0c14 	add.w	ip, r1, #20
 800ccdc:	2000      	movs	r0, #0
 800ccde:	f8dc 3000 	ldr.w	r3, [ip]
 800cce2:	b299      	uxth	r1, r3
 800cce4:	fb02 6101 	mla	r1, r2, r1, r6
 800cce8:	0c1e      	lsrs	r6, r3, #16
 800ccea:	0c0b      	lsrs	r3, r1, #16
 800ccec:	fb02 3306 	mla	r3, r2, r6, r3
 800ccf0:	b289      	uxth	r1, r1
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ccf8:	4285      	cmp	r5, r0
 800ccfa:	f84c 1b04 	str.w	r1, [ip], #4
 800ccfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd02:	dcec      	bgt.n	800ccde <__multadd+0x12>
 800cd04:	b30e      	cbz	r6, 800cd4a <__multadd+0x7e>
 800cd06:	68a3      	ldr	r3, [r4, #8]
 800cd08:	42ab      	cmp	r3, r5
 800cd0a:	dc19      	bgt.n	800cd40 <__multadd+0x74>
 800cd0c:	6861      	ldr	r1, [r4, #4]
 800cd0e:	4638      	mov	r0, r7
 800cd10:	3101      	adds	r1, #1
 800cd12:	f7ff ff79 	bl	800cc08 <_Balloc>
 800cd16:	4680      	mov	r8, r0
 800cd18:	b928      	cbnz	r0, 800cd26 <__multadd+0x5a>
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd50 <__multadd+0x84>)
 800cd1e:	480d      	ldr	r0, [pc, #52]	@ (800cd54 <__multadd+0x88>)
 800cd20:	21ba      	movs	r1, #186	@ 0xba
 800cd22:	f000 fd2f 	bl	800d784 <__assert_func>
 800cd26:	6922      	ldr	r2, [r4, #16]
 800cd28:	3202      	adds	r2, #2
 800cd2a:	f104 010c 	add.w	r1, r4, #12
 800cd2e:	0092      	lsls	r2, r2, #2
 800cd30:	300c      	adds	r0, #12
 800cd32:	f000 fd19 	bl	800d768 <memcpy>
 800cd36:	4621      	mov	r1, r4
 800cd38:	4638      	mov	r0, r7
 800cd3a:	f7ff ffa5 	bl	800cc88 <_Bfree>
 800cd3e:	4644      	mov	r4, r8
 800cd40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd44:	3501      	adds	r5, #1
 800cd46:	615e      	str	r6, [r3, #20]
 800cd48:	6125      	str	r5, [r4, #16]
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd50:	0800e279 	.word	0x0800e279
 800cd54:	0800e28a 	.word	0x0800e28a

0800cd58 <__hi0bits>:
 800cd58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	bf36      	itet	cc
 800cd60:	0403      	lslcc	r3, r0, #16
 800cd62:	2000      	movcs	r0, #0
 800cd64:	2010      	movcc	r0, #16
 800cd66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cd6a:	bf3c      	itt	cc
 800cd6c:	021b      	lslcc	r3, r3, #8
 800cd6e:	3008      	addcc	r0, #8
 800cd70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd74:	bf3c      	itt	cc
 800cd76:	011b      	lslcc	r3, r3, #4
 800cd78:	3004      	addcc	r0, #4
 800cd7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd7e:	bf3c      	itt	cc
 800cd80:	009b      	lslcc	r3, r3, #2
 800cd82:	3002      	addcc	r0, #2
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	db05      	blt.n	800cd94 <__hi0bits+0x3c>
 800cd88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cd8c:	f100 0001 	add.w	r0, r0, #1
 800cd90:	bf08      	it	eq
 800cd92:	2020      	moveq	r0, #32
 800cd94:	4770      	bx	lr

0800cd96 <__lo0bits>:
 800cd96:	6803      	ldr	r3, [r0, #0]
 800cd98:	4602      	mov	r2, r0
 800cd9a:	f013 0007 	ands.w	r0, r3, #7
 800cd9e:	d00b      	beq.n	800cdb8 <__lo0bits+0x22>
 800cda0:	07d9      	lsls	r1, r3, #31
 800cda2:	d421      	bmi.n	800cde8 <__lo0bits+0x52>
 800cda4:	0798      	lsls	r0, r3, #30
 800cda6:	bf49      	itett	mi
 800cda8:	085b      	lsrmi	r3, r3, #1
 800cdaa:	089b      	lsrpl	r3, r3, #2
 800cdac:	2001      	movmi	r0, #1
 800cdae:	6013      	strmi	r3, [r2, #0]
 800cdb0:	bf5c      	itt	pl
 800cdb2:	6013      	strpl	r3, [r2, #0]
 800cdb4:	2002      	movpl	r0, #2
 800cdb6:	4770      	bx	lr
 800cdb8:	b299      	uxth	r1, r3
 800cdba:	b909      	cbnz	r1, 800cdc0 <__lo0bits+0x2a>
 800cdbc:	0c1b      	lsrs	r3, r3, #16
 800cdbe:	2010      	movs	r0, #16
 800cdc0:	b2d9      	uxtb	r1, r3
 800cdc2:	b909      	cbnz	r1, 800cdc8 <__lo0bits+0x32>
 800cdc4:	3008      	adds	r0, #8
 800cdc6:	0a1b      	lsrs	r3, r3, #8
 800cdc8:	0719      	lsls	r1, r3, #28
 800cdca:	bf04      	itt	eq
 800cdcc:	091b      	lsreq	r3, r3, #4
 800cdce:	3004      	addeq	r0, #4
 800cdd0:	0799      	lsls	r1, r3, #30
 800cdd2:	bf04      	itt	eq
 800cdd4:	089b      	lsreq	r3, r3, #2
 800cdd6:	3002      	addeq	r0, #2
 800cdd8:	07d9      	lsls	r1, r3, #31
 800cdda:	d403      	bmi.n	800cde4 <__lo0bits+0x4e>
 800cddc:	085b      	lsrs	r3, r3, #1
 800cdde:	f100 0001 	add.w	r0, r0, #1
 800cde2:	d003      	beq.n	800cdec <__lo0bits+0x56>
 800cde4:	6013      	str	r3, [r2, #0]
 800cde6:	4770      	bx	lr
 800cde8:	2000      	movs	r0, #0
 800cdea:	4770      	bx	lr
 800cdec:	2020      	movs	r0, #32
 800cdee:	4770      	bx	lr

0800cdf0 <__i2b>:
 800cdf0:	b510      	push	{r4, lr}
 800cdf2:	460c      	mov	r4, r1
 800cdf4:	2101      	movs	r1, #1
 800cdf6:	f7ff ff07 	bl	800cc08 <_Balloc>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	b928      	cbnz	r0, 800ce0a <__i2b+0x1a>
 800cdfe:	4b05      	ldr	r3, [pc, #20]	@ (800ce14 <__i2b+0x24>)
 800ce00:	4805      	ldr	r0, [pc, #20]	@ (800ce18 <__i2b+0x28>)
 800ce02:	f240 1145 	movw	r1, #325	@ 0x145
 800ce06:	f000 fcbd 	bl	800d784 <__assert_func>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	6144      	str	r4, [r0, #20]
 800ce0e:	6103      	str	r3, [r0, #16]
 800ce10:	bd10      	pop	{r4, pc}
 800ce12:	bf00      	nop
 800ce14:	0800e279 	.word	0x0800e279
 800ce18:	0800e28a 	.word	0x0800e28a

0800ce1c <__multiply>:
 800ce1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce20:	4614      	mov	r4, r2
 800ce22:	690a      	ldr	r2, [r1, #16]
 800ce24:	6923      	ldr	r3, [r4, #16]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	bfa8      	it	ge
 800ce2a:	4623      	movge	r3, r4
 800ce2c:	460f      	mov	r7, r1
 800ce2e:	bfa4      	itt	ge
 800ce30:	460c      	movge	r4, r1
 800ce32:	461f      	movge	r7, r3
 800ce34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ce38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ce3c:	68a3      	ldr	r3, [r4, #8]
 800ce3e:	6861      	ldr	r1, [r4, #4]
 800ce40:	eb0a 0609 	add.w	r6, sl, r9
 800ce44:	42b3      	cmp	r3, r6
 800ce46:	b085      	sub	sp, #20
 800ce48:	bfb8      	it	lt
 800ce4a:	3101      	addlt	r1, #1
 800ce4c:	f7ff fedc 	bl	800cc08 <_Balloc>
 800ce50:	b930      	cbnz	r0, 800ce60 <__multiply+0x44>
 800ce52:	4602      	mov	r2, r0
 800ce54:	4b44      	ldr	r3, [pc, #272]	@ (800cf68 <__multiply+0x14c>)
 800ce56:	4845      	ldr	r0, [pc, #276]	@ (800cf6c <__multiply+0x150>)
 800ce58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ce5c:	f000 fc92 	bl	800d784 <__assert_func>
 800ce60:	f100 0514 	add.w	r5, r0, #20
 800ce64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce68:	462b      	mov	r3, r5
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	4543      	cmp	r3, r8
 800ce6e:	d321      	bcc.n	800ceb4 <__multiply+0x98>
 800ce70:	f107 0114 	add.w	r1, r7, #20
 800ce74:	f104 0214 	add.w	r2, r4, #20
 800ce78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ce7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ce80:	9302      	str	r3, [sp, #8]
 800ce82:	1b13      	subs	r3, r2, r4
 800ce84:	3b15      	subs	r3, #21
 800ce86:	f023 0303 	bic.w	r3, r3, #3
 800ce8a:	3304      	adds	r3, #4
 800ce8c:	f104 0715 	add.w	r7, r4, #21
 800ce90:	42ba      	cmp	r2, r7
 800ce92:	bf38      	it	cc
 800ce94:	2304      	movcc	r3, #4
 800ce96:	9301      	str	r3, [sp, #4]
 800ce98:	9b02      	ldr	r3, [sp, #8]
 800ce9a:	9103      	str	r1, [sp, #12]
 800ce9c:	428b      	cmp	r3, r1
 800ce9e:	d80c      	bhi.n	800ceba <__multiply+0x9e>
 800cea0:	2e00      	cmp	r6, #0
 800cea2:	dd03      	ble.n	800ceac <__multiply+0x90>
 800cea4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d05b      	beq.n	800cf64 <__multiply+0x148>
 800ceac:	6106      	str	r6, [r0, #16]
 800ceae:	b005      	add	sp, #20
 800ceb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb4:	f843 2b04 	str.w	r2, [r3], #4
 800ceb8:	e7d8      	b.n	800ce6c <__multiply+0x50>
 800ceba:	f8b1 a000 	ldrh.w	sl, [r1]
 800cebe:	f1ba 0f00 	cmp.w	sl, #0
 800cec2:	d024      	beq.n	800cf0e <__multiply+0xf2>
 800cec4:	f104 0e14 	add.w	lr, r4, #20
 800cec8:	46a9      	mov	r9, r5
 800ceca:	f04f 0c00 	mov.w	ip, #0
 800cece:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ced2:	f8d9 3000 	ldr.w	r3, [r9]
 800ced6:	fa1f fb87 	uxth.w	fp, r7
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	fb0a 330b 	mla	r3, sl, fp, r3
 800cee0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cee4:	f8d9 7000 	ldr.w	r7, [r9]
 800cee8:	4463      	add	r3, ip
 800ceea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ceee:	fb0a c70b 	mla	r7, sl, fp, ip
 800cef2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cefc:	4572      	cmp	r2, lr
 800cefe:	f849 3b04 	str.w	r3, [r9], #4
 800cf02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cf06:	d8e2      	bhi.n	800cece <__multiply+0xb2>
 800cf08:	9b01      	ldr	r3, [sp, #4]
 800cf0a:	f845 c003 	str.w	ip, [r5, r3]
 800cf0e:	9b03      	ldr	r3, [sp, #12]
 800cf10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cf14:	3104      	adds	r1, #4
 800cf16:	f1b9 0f00 	cmp.w	r9, #0
 800cf1a:	d021      	beq.n	800cf60 <__multiply+0x144>
 800cf1c:	682b      	ldr	r3, [r5, #0]
 800cf1e:	f104 0c14 	add.w	ip, r4, #20
 800cf22:	46ae      	mov	lr, r5
 800cf24:	f04f 0a00 	mov.w	sl, #0
 800cf28:	f8bc b000 	ldrh.w	fp, [ip]
 800cf2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cf30:	fb09 770b 	mla	r7, r9, fp, r7
 800cf34:	4457      	add	r7, sl
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cf3c:	f84e 3b04 	str.w	r3, [lr], #4
 800cf40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf48:	f8be 3000 	ldrh.w	r3, [lr]
 800cf4c:	fb09 330a 	mla	r3, r9, sl, r3
 800cf50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cf54:	4562      	cmp	r2, ip
 800cf56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf5a:	d8e5      	bhi.n	800cf28 <__multiply+0x10c>
 800cf5c:	9f01      	ldr	r7, [sp, #4]
 800cf5e:	51eb      	str	r3, [r5, r7]
 800cf60:	3504      	adds	r5, #4
 800cf62:	e799      	b.n	800ce98 <__multiply+0x7c>
 800cf64:	3e01      	subs	r6, #1
 800cf66:	e79b      	b.n	800cea0 <__multiply+0x84>
 800cf68:	0800e279 	.word	0x0800e279
 800cf6c:	0800e28a 	.word	0x0800e28a

0800cf70 <__pow5mult>:
 800cf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf74:	4615      	mov	r5, r2
 800cf76:	f012 0203 	ands.w	r2, r2, #3
 800cf7a:	4607      	mov	r7, r0
 800cf7c:	460e      	mov	r6, r1
 800cf7e:	d007      	beq.n	800cf90 <__pow5mult+0x20>
 800cf80:	4c25      	ldr	r4, [pc, #148]	@ (800d018 <__pow5mult+0xa8>)
 800cf82:	3a01      	subs	r2, #1
 800cf84:	2300      	movs	r3, #0
 800cf86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf8a:	f7ff fe9f 	bl	800cccc <__multadd>
 800cf8e:	4606      	mov	r6, r0
 800cf90:	10ad      	asrs	r5, r5, #2
 800cf92:	d03d      	beq.n	800d010 <__pow5mult+0xa0>
 800cf94:	69fc      	ldr	r4, [r7, #28]
 800cf96:	b97c      	cbnz	r4, 800cfb8 <__pow5mult+0x48>
 800cf98:	2010      	movs	r0, #16
 800cf9a:	f7ff fd7f 	bl	800ca9c <malloc>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	61f8      	str	r0, [r7, #28]
 800cfa2:	b928      	cbnz	r0, 800cfb0 <__pow5mult+0x40>
 800cfa4:	4b1d      	ldr	r3, [pc, #116]	@ (800d01c <__pow5mult+0xac>)
 800cfa6:	481e      	ldr	r0, [pc, #120]	@ (800d020 <__pow5mult+0xb0>)
 800cfa8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cfac:	f000 fbea 	bl	800d784 <__assert_func>
 800cfb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfb4:	6004      	str	r4, [r0, #0]
 800cfb6:	60c4      	str	r4, [r0, #12]
 800cfb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cfbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfc0:	b94c      	cbnz	r4, 800cfd6 <__pow5mult+0x66>
 800cfc2:	f240 2171 	movw	r1, #625	@ 0x271
 800cfc6:	4638      	mov	r0, r7
 800cfc8:	f7ff ff12 	bl	800cdf0 <__i2b>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f8c8 0008 	str.w	r0, [r8, #8]
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	6003      	str	r3, [r0, #0]
 800cfd6:	f04f 0900 	mov.w	r9, #0
 800cfda:	07eb      	lsls	r3, r5, #31
 800cfdc:	d50a      	bpl.n	800cff4 <__pow5mult+0x84>
 800cfde:	4631      	mov	r1, r6
 800cfe0:	4622      	mov	r2, r4
 800cfe2:	4638      	mov	r0, r7
 800cfe4:	f7ff ff1a 	bl	800ce1c <__multiply>
 800cfe8:	4631      	mov	r1, r6
 800cfea:	4680      	mov	r8, r0
 800cfec:	4638      	mov	r0, r7
 800cfee:	f7ff fe4b 	bl	800cc88 <_Bfree>
 800cff2:	4646      	mov	r6, r8
 800cff4:	106d      	asrs	r5, r5, #1
 800cff6:	d00b      	beq.n	800d010 <__pow5mult+0xa0>
 800cff8:	6820      	ldr	r0, [r4, #0]
 800cffa:	b938      	cbnz	r0, 800d00c <__pow5mult+0x9c>
 800cffc:	4622      	mov	r2, r4
 800cffe:	4621      	mov	r1, r4
 800d000:	4638      	mov	r0, r7
 800d002:	f7ff ff0b 	bl	800ce1c <__multiply>
 800d006:	6020      	str	r0, [r4, #0]
 800d008:	f8c0 9000 	str.w	r9, [r0]
 800d00c:	4604      	mov	r4, r0
 800d00e:	e7e4      	b.n	800cfda <__pow5mult+0x6a>
 800d010:	4630      	mov	r0, r6
 800d012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d016:	bf00      	nop
 800d018:	0800e2e4 	.word	0x0800e2e4
 800d01c:	0800e20a 	.word	0x0800e20a
 800d020:	0800e28a 	.word	0x0800e28a

0800d024 <__lshift>:
 800d024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d028:	460c      	mov	r4, r1
 800d02a:	6849      	ldr	r1, [r1, #4]
 800d02c:	6923      	ldr	r3, [r4, #16]
 800d02e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d032:	68a3      	ldr	r3, [r4, #8]
 800d034:	4607      	mov	r7, r0
 800d036:	4691      	mov	r9, r2
 800d038:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d03c:	f108 0601 	add.w	r6, r8, #1
 800d040:	42b3      	cmp	r3, r6
 800d042:	db0b      	blt.n	800d05c <__lshift+0x38>
 800d044:	4638      	mov	r0, r7
 800d046:	f7ff fddf 	bl	800cc08 <_Balloc>
 800d04a:	4605      	mov	r5, r0
 800d04c:	b948      	cbnz	r0, 800d062 <__lshift+0x3e>
 800d04e:	4602      	mov	r2, r0
 800d050:	4b28      	ldr	r3, [pc, #160]	@ (800d0f4 <__lshift+0xd0>)
 800d052:	4829      	ldr	r0, [pc, #164]	@ (800d0f8 <__lshift+0xd4>)
 800d054:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d058:	f000 fb94 	bl	800d784 <__assert_func>
 800d05c:	3101      	adds	r1, #1
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	e7ee      	b.n	800d040 <__lshift+0x1c>
 800d062:	2300      	movs	r3, #0
 800d064:	f100 0114 	add.w	r1, r0, #20
 800d068:	f100 0210 	add.w	r2, r0, #16
 800d06c:	4618      	mov	r0, r3
 800d06e:	4553      	cmp	r3, sl
 800d070:	db33      	blt.n	800d0da <__lshift+0xb6>
 800d072:	6920      	ldr	r0, [r4, #16]
 800d074:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d078:	f104 0314 	add.w	r3, r4, #20
 800d07c:	f019 091f 	ands.w	r9, r9, #31
 800d080:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d084:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d088:	d02b      	beq.n	800d0e2 <__lshift+0xbe>
 800d08a:	f1c9 0e20 	rsb	lr, r9, #32
 800d08e:	468a      	mov	sl, r1
 800d090:	2200      	movs	r2, #0
 800d092:	6818      	ldr	r0, [r3, #0]
 800d094:	fa00 f009 	lsl.w	r0, r0, r9
 800d098:	4310      	orrs	r0, r2
 800d09a:	f84a 0b04 	str.w	r0, [sl], #4
 800d09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0a2:	459c      	cmp	ip, r3
 800d0a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d0a8:	d8f3      	bhi.n	800d092 <__lshift+0x6e>
 800d0aa:	ebac 0304 	sub.w	r3, ip, r4
 800d0ae:	3b15      	subs	r3, #21
 800d0b0:	f023 0303 	bic.w	r3, r3, #3
 800d0b4:	3304      	adds	r3, #4
 800d0b6:	f104 0015 	add.w	r0, r4, #21
 800d0ba:	4584      	cmp	ip, r0
 800d0bc:	bf38      	it	cc
 800d0be:	2304      	movcc	r3, #4
 800d0c0:	50ca      	str	r2, [r1, r3]
 800d0c2:	b10a      	cbz	r2, 800d0c8 <__lshift+0xa4>
 800d0c4:	f108 0602 	add.w	r6, r8, #2
 800d0c8:	3e01      	subs	r6, #1
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	612e      	str	r6, [r5, #16]
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	f7ff fdda 	bl	800cc88 <_Bfree>
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0da:	f842 0f04 	str.w	r0, [r2, #4]!
 800d0de:	3301      	adds	r3, #1
 800d0e0:	e7c5      	b.n	800d06e <__lshift+0x4a>
 800d0e2:	3904      	subs	r1, #4
 800d0e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0ec:	459c      	cmp	ip, r3
 800d0ee:	d8f9      	bhi.n	800d0e4 <__lshift+0xc0>
 800d0f0:	e7ea      	b.n	800d0c8 <__lshift+0xa4>
 800d0f2:	bf00      	nop
 800d0f4:	0800e279 	.word	0x0800e279
 800d0f8:	0800e28a 	.word	0x0800e28a

0800d0fc <__mcmp>:
 800d0fc:	690a      	ldr	r2, [r1, #16]
 800d0fe:	4603      	mov	r3, r0
 800d100:	6900      	ldr	r0, [r0, #16]
 800d102:	1a80      	subs	r0, r0, r2
 800d104:	b530      	push	{r4, r5, lr}
 800d106:	d10e      	bne.n	800d126 <__mcmp+0x2a>
 800d108:	3314      	adds	r3, #20
 800d10a:	3114      	adds	r1, #20
 800d10c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d110:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d114:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d118:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d11c:	4295      	cmp	r5, r2
 800d11e:	d003      	beq.n	800d128 <__mcmp+0x2c>
 800d120:	d205      	bcs.n	800d12e <__mcmp+0x32>
 800d122:	f04f 30ff 	mov.w	r0, #4294967295
 800d126:	bd30      	pop	{r4, r5, pc}
 800d128:	42a3      	cmp	r3, r4
 800d12a:	d3f3      	bcc.n	800d114 <__mcmp+0x18>
 800d12c:	e7fb      	b.n	800d126 <__mcmp+0x2a>
 800d12e:	2001      	movs	r0, #1
 800d130:	e7f9      	b.n	800d126 <__mcmp+0x2a>
	...

0800d134 <__mdiff>:
 800d134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d138:	4689      	mov	r9, r1
 800d13a:	4606      	mov	r6, r0
 800d13c:	4611      	mov	r1, r2
 800d13e:	4648      	mov	r0, r9
 800d140:	4614      	mov	r4, r2
 800d142:	f7ff ffdb 	bl	800d0fc <__mcmp>
 800d146:	1e05      	subs	r5, r0, #0
 800d148:	d112      	bne.n	800d170 <__mdiff+0x3c>
 800d14a:	4629      	mov	r1, r5
 800d14c:	4630      	mov	r0, r6
 800d14e:	f7ff fd5b 	bl	800cc08 <_Balloc>
 800d152:	4602      	mov	r2, r0
 800d154:	b928      	cbnz	r0, 800d162 <__mdiff+0x2e>
 800d156:	4b3f      	ldr	r3, [pc, #252]	@ (800d254 <__mdiff+0x120>)
 800d158:	f240 2137 	movw	r1, #567	@ 0x237
 800d15c:	483e      	ldr	r0, [pc, #248]	@ (800d258 <__mdiff+0x124>)
 800d15e:	f000 fb11 	bl	800d784 <__assert_func>
 800d162:	2301      	movs	r3, #1
 800d164:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d168:	4610      	mov	r0, r2
 800d16a:	b003      	add	sp, #12
 800d16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d170:	bfbc      	itt	lt
 800d172:	464b      	movlt	r3, r9
 800d174:	46a1      	movlt	r9, r4
 800d176:	4630      	mov	r0, r6
 800d178:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d17c:	bfba      	itte	lt
 800d17e:	461c      	movlt	r4, r3
 800d180:	2501      	movlt	r5, #1
 800d182:	2500      	movge	r5, #0
 800d184:	f7ff fd40 	bl	800cc08 <_Balloc>
 800d188:	4602      	mov	r2, r0
 800d18a:	b918      	cbnz	r0, 800d194 <__mdiff+0x60>
 800d18c:	4b31      	ldr	r3, [pc, #196]	@ (800d254 <__mdiff+0x120>)
 800d18e:	f240 2145 	movw	r1, #581	@ 0x245
 800d192:	e7e3      	b.n	800d15c <__mdiff+0x28>
 800d194:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d198:	6926      	ldr	r6, [r4, #16]
 800d19a:	60c5      	str	r5, [r0, #12]
 800d19c:	f109 0310 	add.w	r3, r9, #16
 800d1a0:	f109 0514 	add.w	r5, r9, #20
 800d1a4:	f104 0e14 	add.w	lr, r4, #20
 800d1a8:	f100 0b14 	add.w	fp, r0, #20
 800d1ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d1b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d1b4:	9301      	str	r3, [sp, #4]
 800d1b6:	46d9      	mov	r9, fp
 800d1b8:	f04f 0c00 	mov.w	ip, #0
 800d1bc:	9b01      	ldr	r3, [sp, #4]
 800d1be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d1c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d1c6:	9301      	str	r3, [sp, #4]
 800d1c8:	fa1f f38a 	uxth.w	r3, sl
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	b283      	uxth	r3, r0
 800d1d0:	1acb      	subs	r3, r1, r3
 800d1d2:	0c00      	lsrs	r0, r0, #16
 800d1d4:	4463      	add	r3, ip
 800d1d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d1da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d1e4:	4576      	cmp	r6, lr
 800d1e6:	f849 3b04 	str.w	r3, [r9], #4
 800d1ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1ee:	d8e5      	bhi.n	800d1bc <__mdiff+0x88>
 800d1f0:	1b33      	subs	r3, r6, r4
 800d1f2:	3b15      	subs	r3, #21
 800d1f4:	f023 0303 	bic.w	r3, r3, #3
 800d1f8:	3415      	adds	r4, #21
 800d1fa:	3304      	adds	r3, #4
 800d1fc:	42a6      	cmp	r6, r4
 800d1fe:	bf38      	it	cc
 800d200:	2304      	movcc	r3, #4
 800d202:	441d      	add	r5, r3
 800d204:	445b      	add	r3, fp
 800d206:	461e      	mov	r6, r3
 800d208:	462c      	mov	r4, r5
 800d20a:	4544      	cmp	r4, r8
 800d20c:	d30e      	bcc.n	800d22c <__mdiff+0xf8>
 800d20e:	f108 0103 	add.w	r1, r8, #3
 800d212:	1b49      	subs	r1, r1, r5
 800d214:	f021 0103 	bic.w	r1, r1, #3
 800d218:	3d03      	subs	r5, #3
 800d21a:	45a8      	cmp	r8, r5
 800d21c:	bf38      	it	cc
 800d21e:	2100      	movcc	r1, #0
 800d220:	440b      	add	r3, r1
 800d222:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d226:	b191      	cbz	r1, 800d24e <__mdiff+0x11a>
 800d228:	6117      	str	r7, [r2, #16]
 800d22a:	e79d      	b.n	800d168 <__mdiff+0x34>
 800d22c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d230:	46e6      	mov	lr, ip
 800d232:	0c08      	lsrs	r0, r1, #16
 800d234:	fa1c fc81 	uxtah	ip, ip, r1
 800d238:	4471      	add	r1, lr
 800d23a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d23e:	b289      	uxth	r1, r1
 800d240:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d244:	f846 1b04 	str.w	r1, [r6], #4
 800d248:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d24c:	e7dd      	b.n	800d20a <__mdiff+0xd6>
 800d24e:	3f01      	subs	r7, #1
 800d250:	e7e7      	b.n	800d222 <__mdiff+0xee>
 800d252:	bf00      	nop
 800d254:	0800e279 	.word	0x0800e279
 800d258:	0800e28a 	.word	0x0800e28a

0800d25c <__d2b>:
 800d25c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d260:	460f      	mov	r7, r1
 800d262:	2101      	movs	r1, #1
 800d264:	ec59 8b10 	vmov	r8, r9, d0
 800d268:	4616      	mov	r6, r2
 800d26a:	f7ff fccd 	bl	800cc08 <_Balloc>
 800d26e:	4604      	mov	r4, r0
 800d270:	b930      	cbnz	r0, 800d280 <__d2b+0x24>
 800d272:	4602      	mov	r2, r0
 800d274:	4b23      	ldr	r3, [pc, #140]	@ (800d304 <__d2b+0xa8>)
 800d276:	4824      	ldr	r0, [pc, #144]	@ (800d308 <__d2b+0xac>)
 800d278:	f240 310f 	movw	r1, #783	@ 0x30f
 800d27c:	f000 fa82 	bl	800d784 <__assert_func>
 800d280:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d284:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d288:	b10d      	cbz	r5, 800d28e <__d2b+0x32>
 800d28a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d28e:	9301      	str	r3, [sp, #4]
 800d290:	f1b8 0300 	subs.w	r3, r8, #0
 800d294:	d023      	beq.n	800d2de <__d2b+0x82>
 800d296:	4668      	mov	r0, sp
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	f7ff fd7c 	bl	800cd96 <__lo0bits>
 800d29e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2a2:	b1d0      	cbz	r0, 800d2da <__d2b+0x7e>
 800d2a4:	f1c0 0320 	rsb	r3, r0, #32
 800d2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ac:	430b      	orrs	r3, r1
 800d2ae:	40c2      	lsrs	r2, r0
 800d2b0:	6163      	str	r3, [r4, #20]
 800d2b2:	9201      	str	r2, [sp, #4]
 800d2b4:	9b01      	ldr	r3, [sp, #4]
 800d2b6:	61a3      	str	r3, [r4, #24]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	bf0c      	ite	eq
 800d2bc:	2201      	moveq	r2, #1
 800d2be:	2202      	movne	r2, #2
 800d2c0:	6122      	str	r2, [r4, #16]
 800d2c2:	b1a5      	cbz	r5, 800d2ee <__d2b+0x92>
 800d2c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d2c8:	4405      	add	r5, r0
 800d2ca:	603d      	str	r5, [r7, #0]
 800d2cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d2d0:	6030      	str	r0, [r6, #0]
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	b003      	add	sp, #12
 800d2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2da:	6161      	str	r1, [r4, #20]
 800d2dc:	e7ea      	b.n	800d2b4 <__d2b+0x58>
 800d2de:	a801      	add	r0, sp, #4
 800d2e0:	f7ff fd59 	bl	800cd96 <__lo0bits>
 800d2e4:	9b01      	ldr	r3, [sp, #4]
 800d2e6:	6163      	str	r3, [r4, #20]
 800d2e8:	3020      	adds	r0, #32
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	e7e8      	b.n	800d2c0 <__d2b+0x64>
 800d2ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d2f6:	6038      	str	r0, [r7, #0]
 800d2f8:	6918      	ldr	r0, [r3, #16]
 800d2fa:	f7ff fd2d 	bl	800cd58 <__hi0bits>
 800d2fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d302:	e7e5      	b.n	800d2d0 <__d2b+0x74>
 800d304:	0800e279 	.word	0x0800e279
 800d308:	0800e28a 	.word	0x0800e28a

0800d30c <__ssputs_r>:
 800d30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d310:	688e      	ldr	r6, [r1, #8]
 800d312:	461f      	mov	r7, r3
 800d314:	42be      	cmp	r6, r7
 800d316:	680b      	ldr	r3, [r1, #0]
 800d318:	4682      	mov	sl, r0
 800d31a:	460c      	mov	r4, r1
 800d31c:	4690      	mov	r8, r2
 800d31e:	d82d      	bhi.n	800d37c <__ssputs_r+0x70>
 800d320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d328:	d026      	beq.n	800d378 <__ssputs_r+0x6c>
 800d32a:	6965      	ldr	r5, [r4, #20]
 800d32c:	6909      	ldr	r1, [r1, #16]
 800d32e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d332:	eba3 0901 	sub.w	r9, r3, r1
 800d336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d33a:	1c7b      	adds	r3, r7, #1
 800d33c:	444b      	add	r3, r9
 800d33e:	106d      	asrs	r5, r5, #1
 800d340:	429d      	cmp	r5, r3
 800d342:	bf38      	it	cc
 800d344:	461d      	movcc	r5, r3
 800d346:	0553      	lsls	r3, r2, #21
 800d348:	d527      	bpl.n	800d39a <__ssputs_r+0x8e>
 800d34a:	4629      	mov	r1, r5
 800d34c:	f7ff fbd0 	bl	800caf0 <_malloc_r>
 800d350:	4606      	mov	r6, r0
 800d352:	b360      	cbz	r0, 800d3ae <__ssputs_r+0xa2>
 800d354:	6921      	ldr	r1, [r4, #16]
 800d356:	464a      	mov	r2, r9
 800d358:	f000 fa06 	bl	800d768 <memcpy>
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d366:	81a3      	strh	r3, [r4, #12]
 800d368:	6126      	str	r6, [r4, #16]
 800d36a:	6165      	str	r5, [r4, #20]
 800d36c:	444e      	add	r6, r9
 800d36e:	eba5 0509 	sub.w	r5, r5, r9
 800d372:	6026      	str	r6, [r4, #0]
 800d374:	60a5      	str	r5, [r4, #8]
 800d376:	463e      	mov	r6, r7
 800d378:	42be      	cmp	r6, r7
 800d37a:	d900      	bls.n	800d37e <__ssputs_r+0x72>
 800d37c:	463e      	mov	r6, r7
 800d37e:	6820      	ldr	r0, [r4, #0]
 800d380:	4632      	mov	r2, r6
 800d382:	4641      	mov	r1, r8
 800d384:	f000 f9c6 	bl	800d714 <memmove>
 800d388:	68a3      	ldr	r3, [r4, #8]
 800d38a:	1b9b      	subs	r3, r3, r6
 800d38c:	60a3      	str	r3, [r4, #8]
 800d38e:	6823      	ldr	r3, [r4, #0]
 800d390:	4433      	add	r3, r6
 800d392:	6023      	str	r3, [r4, #0]
 800d394:	2000      	movs	r0, #0
 800d396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d39a:	462a      	mov	r2, r5
 800d39c:	f000 fa36 	bl	800d80c <_realloc_r>
 800d3a0:	4606      	mov	r6, r0
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d1e0      	bne.n	800d368 <__ssputs_r+0x5c>
 800d3a6:	6921      	ldr	r1, [r4, #16]
 800d3a8:	4650      	mov	r0, sl
 800d3aa:	f7ff fb2d 	bl	800ca08 <_free_r>
 800d3ae:	230c      	movs	r3, #12
 800d3b0:	f8ca 3000 	str.w	r3, [sl]
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3ba:	81a3      	strh	r3, [r4, #12]
 800d3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c0:	e7e9      	b.n	800d396 <__ssputs_r+0x8a>
	...

0800d3c4 <_svfiprintf_r>:
 800d3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c8:	4698      	mov	r8, r3
 800d3ca:	898b      	ldrh	r3, [r1, #12]
 800d3cc:	061b      	lsls	r3, r3, #24
 800d3ce:	b09d      	sub	sp, #116	@ 0x74
 800d3d0:	4607      	mov	r7, r0
 800d3d2:	460d      	mov	r5, r1
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	d510      	bpl.n	800d3fa <_svfiprintf_r+0x36>
 800d3d8:	690b      	ldr	r3, [r1, #16]
 800d3da:	b973      	cbnz	r3, 800d3fa <_svfiprintf_r+0x36>
 800d3dc:	2140      	movs	r1, #64	@ 0x40
 800d3de:	f7ff fb87 	bl	800caf0 <_malloc_r>
 800d3e2:	6028      	str	r0, [r5, #0]
 800d3e4:	6128      	str	r0, [r5, #16]
 800d3e6:	b930      	cbnz	r0, 800d3f6 <_svfiprintf_r+0x32>
 800d3e8:	230c      	movs	r3, #12
 800d3ea:	603b      	str	r3, [r7, #0]
 800d3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f0:	b01d      	add	sp, #116	@ 0x74
 800d3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f6:	2340      	movs	r3, #64	@ 0x40
 800d3f8:	616b      	str	r3, [r5, #20]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3fe:	2320      	movs	r3, #32
 800d400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d404:	f8cd 800c 	str.w	r8, [sp, #12]
 800d408:	2330      	movs	r3, #48	@ 0x30
 800d40a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d5a8 <_svfiprintf_r+0x1e4>
 800d40e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d412:	f04f 0901 	mov.w	r9, #1
 800d416:	4623      	mov	r3, r4
 800d418:	469a      	mov	sl, r3
 800d41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d41e:	b10a      	cbz	r2, 800d424 <_svfiprintf_r+0x60>
 800d420:	2a25      	cmp	r2, #37	@ 0x25
 800d422:	d1f9      	bne.n	800d418 <_svfiprintf_r+0x54>
 800d424:	ebba 0b04 	subs.w	fp, sl, r4
 800d428:	d00b      	beq.n	800d442 <_svfiprintf_r+0x7e>
 800d42a:	465b      	mov	r3, fp
 800d42c:	4622      	mov	r2, r4
 800d42e:	4629      	mov	r1, r5
 800d430:	4638      	mov	r0, r7
 800d432:	f7ff ff6b 	bl	800d30c <__ssputs_r>
 800d436:	3001      	adds	r0, #1
 800d438:	f000 80a7 	beq.w	800d58a <_svfiprintf_r+0x1c6>
 800d43c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d43e:	445a      	add	r2, fp
 800d440:	9209      	str	r2, [sp, #36]	@ 0x24
 800d442:	f89a 3000 	ldrb.w	r3, [sl]
 800d446:	2b00      	cmp	r3, #0
 800d448:	f000 809f 	beq.w	800d58a <_svfiprintf_r+0x1c6>
 800d44c:	2300      	movs	r3, #0
 800d44e:	f04f 32ff 	mov.w	r2, #4294967295
 800d452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d456:	f10a 0a01 	add.w	sl, sl, #1
 800d45a:	9304      	str	r3, [sp, #16]
 800d45c:	9307      	str	r3, [sp, #28]
 800d45e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d462:	931a      	str	r3, [sp, #104]	@ 0x68
 800d464:	4654      	mov	r4, sl
 800d466:	2205      	movs	r2, #5
 800d468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d46c:	484e      	ldr	r0, [pc, #312]	@ (800d5a8 <_svfiprintf_r+0x1e4>)
 800d46e:	f7f2 feb7 	bl	80001e0 <memchr>
 800d472:	9a04      	ldr	r2, [sp, #16]
 800d474:	b9d8      	cbnz	r0, 800d4ae <_svfiprintf_r+0xea>
 800d476:	06d0      	lsls	r0, r2, #27
 800d478:	bf44      	itt	mi
 800d47a:	2320      	movmi	r3, #32
 800d47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d480:	0711      	lsls	r1, r2, #28
 800d482:	bf44      	itt	mi
 800d484:	232b      	movmi	r3, #43	@ 0x2b
 800d486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d48a:	f89a 3000 	ldrb.w	r3, [sl]
 800d48e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d490:	d015      	beq.n	800d4be <_svfiprintf_r+0xfa>
 800d492:	9a07      	ldr	r2, [sp, #28]
 800d494:	4654      	mov	r4, sl
 800d496:	2000      	movs	r0, #0
 800d498:	f04f 0c0a 	mov.w	ip, #10
 800d49c:	4621      	mov	r1, r4
 800d49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4a2:	3b30      	subs	r3, #48	@ 0x30
 800d4a4:	2b09      	cmp	r3, #9
 800d4a6:	d94b      	bls.n	800d540 <_svfiprintf_r+0x17c>
 800d4a8:	b1b0      	cbz	r0, 800d4d8 <_svfiprintf_r+0x114>
 800d4aa:	9207      	str	r2, [sp, #28]
 800d4ac:	e014      	b.n	800d4d8 <_svfiprintf_r+0x114>
 800d4ae:	eba0 0308 	sub.w	r3, r0, r8
 800d4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	9304      	str	r3, [sp, #16]
 800d4ba:	46a2      	mov	sl, r4
 800d4bc:	e7d2      	b.n	800d464 <_svfiprintf_r+0xa0>
 800d4be:	9b03      	ldr	r3, [sp, #12]
 800d4c0:	1d19      	adds	r1, r3, #4
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	9103      	str	r1, [sp, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	bfbb      	ittet	lt
 800d4ca:	425b      	neglt	r3, r3
 800d4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d4d0:	9307      	strge	r3, [sp, #28]
 800d4d2:	9307      	strlt	r3, [sp, #28]
 800d4d4:	bfb8      	it	lt
 800d4d6:	9204      	strlt	r2, [sp, #16]
 800d4d8:	7823      	ldrb	r3, [r4, #0]
 800d4da:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4dc:	d10a      	bne.n	800d4f4 <_svfiprintf_r+0x130>
 800d4de:	7863      	ldrb	r3, [r4, #1]
 800d4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4e2:	d132      	bne.n	800d54a <_svfiprintf_r+0x186>
 800d4e4:	9b03      	ldr	r3, [sp, #12]
 800d4e6:	1d1a      	adds	r2, r3, #4
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	9203      	str	r2, [sp, #12]
 800d4ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4f0:	3402      	adds	r4, #2
 800d4f2:	9305      	str	r3, [sp, #20]
 800d4f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d5b8 <_svfiprintf_r+0x1f4>
 800d4f8:	7821      	ldrb	r1, [r4, #0]
 800d4fa:	2203      	movs	r2, #3
 800d4fc:	4650      	mov	r0, sl
 800d4fe:	f7f2 fe6f 	bl	80001e0 <memchr>
 800d502:	b138      	cbz	r0, 800d514 <_svfiprintf_r+0x150>
 800d504:	9b04      	ldr	r3, [sp, #16]
 800d506:	eba0 000a 	sub.w	r0, r0, sl
 800d50a:	2240      	movs	r2, #64	@ 0x40
 800d50c:	4082      	lsls	r2, r0
 800d50e:	4313      	orrs	r3, r2
 800d510:	3401      	adds	r4, #1
 800d512:	9304      	str	r3, [sp, #16]
 800d514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d518:	4824      	ldr	r0, [pc, #144]	@ (800d5ac <_svfiprintf_r+0x1e8>)
 800d51a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d51e:	2206      	movs	r2, #6
 800d520:	f7f2 fe5e 	bl	80001e0 <memchr>
 800d524:	2800      	cmp	r0, #0
 800d526:	d036      	beq.n	800d596 <_svfiprintf_r+0x1d2>
 800d528:	4b21      	ldr	r3, [pc, #132]	@ (800d5b0 <_svfiprintf_r+0x1ec>)
 800d52a:	bb1b      	cbnz	r3, 800d574 <_svfiprintf_r+0x1b0>
 800d52c:	9b03      	ldr	r3, [sp, #12]
 800d52e:	3307      	adds	r3, #7
 800d530:	f023 0307 	bic.w	r3, r3, #7
 800d534:	3308      	adds	r3, #8
 800d536:	9303      	str	r3, [sp, #12]
 800d538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d53a:	4433      	add	r3, r6
 800d53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d53e:	e76a      	b.n	800d416 <_svfiprintf_r+0x52>
 800d540:	fb0c 3202 	mla	r2, ip, r2, r3
 800d544:	460c      	mov	r4, r1
 800d546:	2001      	movs	r0, #1
 800d548:	e7a8      	b.n	800d49c <_svfiprintf_r+0xd8>
 800d54a:	2300      	movs	r3, #0
 800d54c:	3401      	adds	r4, #1
 800d54e:	9305      	str	r3, [sp, #20]
 800d550:	4619      	mov	r1, r3
 800d552:	f04f 0c0a 	mov.w	ip, #10
 800d556:	4620      	mov	r0, r4
 800d558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d55c:	3a30      	subs	r2, #48	@ 0x30
 800d55e:	2a09      	cmp	r2, #9
 800d560:	d903      	bls.n	800d56a <_svfiprintf_r+0x1a6>
 800d562:	2b00      	cmp	r3, #0
 800d564:	d0c6      	beq.n	800d4f4 <_svfiprintf_r+0x130>
 800d566:	9105      	str	r1, [sp, #20]
 800d568:	e7c4      	b.n	800d4f4 <_svfiprintf_r+0x130>
 800d56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d56e:	4604      	mov	r4, r0
 800d570:	2301      	movs	r3, #1
 800d572:	e7f0      	b.n	800d556 <_svfiprintf_r+0x192>
 800d574:	ab03      	add	r3, sp, #12
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	462a      	mov	r2, r5
 800d57a:	4b0e      	ldr	r3, [pc, #56]	@ (800d5b4 <_svfiprintf_r+0x1f0>)
 800d57c:	a904      	add	r1, sp, #16
 800d57e:	4638      	mov	r0, r7
 800d580:	f7fd fe6e 	bl	800b260 <_printf_float>
 800d584:	1c42      	adds	r2, r0, #1
 800d586:	4606      	mov	r6, r0
 800d588:	d1d6      	bne.n	800d538 <_svfiprintf_r+0x174>
 800d58a:	89ab      	ldrh	r3, [r5, #12]
 800d58c:	065b      	lsls	r3, r3, #25
 800d58e:	f53f af2d 	bmi.w	800d3ec <_svfiprintf_r+0x28>
 800d592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d594:	e72c      	b.n	800d3f0 <_svfiprintf_r+0x2c>
 800d596:	ab03      	add	r3, sp, #12
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	462a      	mov	r2, r5
 800d59c:	4b05      	ldr	r3, [pc, #20]	@ (800d5b4 <_svfiprintf_r+0x1f0>)
 800d59e:	a904      	add	r1, sp, #16
 800d5a0:	4638      	mov	r0, r7
 800d5a2:	f7fe f8f5 	bl	800b790 <_printf_i>
 800d5a6:	e7ed      	b.n	800d584 <_svfiprintf_r+0x1c0>
 800d5a8:	0800e3e0 	.word	0x0800e3e0
 800d5ac:	0800e3ea 	.word	0x0800e3ea
 800d5b0:	0800b261 	.word	0x0800b261
 800d5b4:	0800d30d 	.word	0x0800d30d
 800d5b8:	0800e3e6 	.word	0x0800e3e6

0800d5bc <__sflush_r>:
 800d5bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c4:	0716      	lsls	r6, r2, #28
 800d5c6:	4605      	mov	r5, r0
 800d5c8:	460c      	mov	r4, r1
 800d5ca:	d454      	bmi.n	800d676 <__sflush_r+0xba>
 800d5cc:	684b      	ldr	r3, [r1, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	dc02      	bgt.n	800d5d8 <__sflush_r+0x1c>
 800d5d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	dd48      	ble.n	800d66a <__sflush_r+0xae>
 800d5d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5da:	2e00      	cmp	r6, #0
 800d5dc:	d045      	beq.n	800d66a <__sflush_r+0xae>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d5e4:	682f      	ldr	r7, [r5, #0]
 800d5e6:	6a21      	ldr	r1, [r4, #32]
 800d5e8:	602b      	str	r3, [r5, #0]
 800d5ea:	d030      	beq.n	800d64e <__sflush_r+0x92>
 800d5ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5ee:	89a3      	ldrh	r3, [r4, #12]
 800d5f0:	0759      	lsls	r1, r3, #29
 800d5f2:	d505      	bpl.n	800d600 <__sflush_r+0x44>
 800d5f4:	6863      	ldr	r3, [r4, #4]
 800d5f6:	1ad2      	subs	r2, r2, r3
 800d5f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5fa:	b10b      	cbz	r3, 800d600 <__sflush_r+0x44>
 800d5fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d5fe:	1ad2      	subs	r2, r2, r3
 800d600:	2300      	movs	r3, #0
 800d602:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d604:	6a21      	ldr	r1, [r4, #32]
 800d606:	4628      	mov	r0, r5
 800d608:	47b0      	blx	r6
 800d60a:	1c43      	adds	r3, r0, #1
 800d60c:	89a3      	ldrh	r3, [r4, #12]
 800d60e:	d106      	bne.n	800d61e <__sflush_r+0x62>
 800d610:	6829      	ldr	r1, [r5, #0]
 800d612:	291d      	cmp	r1, #29
 800d614:	d82b      	bhi.n	800d66e <__sflush_r+0xb2>
 800d616:	4a2a      	ldr	r2, [pc, #168]	@ (800d6c0 <__sflush_r+0x104>)
 800d618:	410a      	asrs	r2, r1
 800d61a:	07d6      	lsls	r6, r2, #31
 800d61c:	d427      	bmi.n	800d66e <__sflush_r+0xb2>
 800d61e:	2200      	movs	r2, #0
 800d620:	6062      	str	r2, [r4, #4]
 800d622:	04d9      	lsls	r1, r3, #19
 800d624:	6922      	ldr	r2, [r4, #16]
 800d626:	6022      	str	r2, [r4, #0]
 800d628:	d504      	bpl.n	800d634 <__sflush_r+0x78>
 800d62a:	1c42      	adds	r2, r0, #1
 800d62c:	d101      	bne.n	800d632 <__sflush_r+0x76>
 800d62e:	682b      	ldr	r3, [r5, #0]
 800d630:	b903      	cbnz	r3, 800d634 <__sflush_r+0x78>
 800d632:	6560      	str	r0, [r4, #84]	@ 0x54
 800d634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d636:	602f      	str	r7, [r5, #0]
 800d638:	b1b9      	cbz	r1, 800d66a <__sflush_r+0xae>
 800d63a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d63e:	4299      	cmp	r1, r3
 800d640:	d002      	beq.n	800d648 <__sflush_r+0x8c>
 800d642:	4628      	mov	r0, r5
 800d644:	f7ff f9e0 	bl	800ca08 <_free_r>
 800d648:	2300      	movs	r3, #0
 800d64a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d64c:	e00d      	b.n	800d66a <__sflush_r+0xae>
 800d64e:	2301      	movs	r3, #1
 800d650:	4628      	mov	r0, r5
 800d652:	47b0      	blx	r6
 800d654:	4602      	mov	r2, r0
 800d656:	1c50      	adds	r0, r2, #1
 800d658:	d1c9      	bne.n	800d5ee <__sflush_r+0x32>
 800d65a:	682b      	ldr	r3, [r5, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d0c6      	beq.n	800d5ee <__sflush_r+0x32>
 800d660:	2b1d      	cmp	r3, #29
 800d662:	d001      	beq.n	800d668 <__sflush_r+0xac>
 800d664:	2b16      	cmp	r3, #22
 800d666:	d11e      	bne.n	800d6a6 <__sflush_r+0xea>
 800d668:	602f      	str	r7, [r5, #0]
 800d66a:	2000      	movs	r0, #0
 800d66c:	e022      	b.n	800d6b4 <__sflush_r+0xf8>
 800d66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d672:	b21b      	sxth	r3, r3
 800d674:	e01b      	b.n	800d6ae <__sflush_r+0xf2>
 800d676:	690f      	ldr	r7, [r1, #16]
 800d678:	2f00      	cmp	r7, #0
 800d67a:	d0f6      	beq.n	800d66a <__sflush_r+0xae>
 800d67c:	0793      	lsls	r3, r2, #30
 800d67e:	680e      	ldr	r6, [r1, #0]
 800d680:	bf08      	it	eq
 800d682:	694b      	ldreq	r3, [r1, #20]
 800d684:	600f      	str	r7, [r1, #0]
 800d686:	bf18      	it	ne
 800d688:	2300      	movne	r3, #0
 800d68a:	eba6 0807 	sub.w	r8, r6, r7
 800d68e:	608b      	str	r3, [r1, #8]
 800d690:	f1b8 0f00 	cmp.w	r8, #0
 800d694:	dde9      	ble.n	800d66a <__sflush_r+0xae>
 800d696:	6a21      	ldr	r1, [r4, #32]
 800d698:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d69a:	4643      	mov	r3, r8
 800d69c:	463a      	mov	r2, r7
 800d69e:	4628      	mov	r0, r5
 800d6a0:	47b0      	blx	r6
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	dc08      	bgt.n	800d6b8 <__sflush_r+0xfc>
 800d6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6ae:	81a3      	strh	r3, [r4, #12]
 800d6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b8:	4407      	add	r7, r0
 800d6ba:	eba8 0800 	sub.w	r8, r8, r0
 800d6be:	e7e7      	b.n	800d690 <__sflush_r+0xd4>
 800d6c0:	dfbffffe 	.word	0xdfbffffe

0800d6c4 <_fflush_r>:
 800d6c4:	b538      	push	{r3, r4, r5, lr}
 800d6c6:	690b      	ldr	r3, [r1, #16]
 800d6c8:	4605      	mov	r5, r0
 800d6ca:	460c      	mov	r4, r1
 800d6cc:	b913      	cbnz	r3, 800d6d4 <_fflush_r+0x10>
 800d6ce:	2500      	movs	r5, #0
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	bd38      	pop	{r3, r4, r5, pc}
 800d6d4:	b118      	cbz	r0, 800d6de <_fflush_r+0x1a>
 800d6d6:	6a03      	ldr	r3, [r0, #32]
 800d6d8:	b90b      	cbnz	r3, 800d6de <_fflush_r+0x1a>
 800d6da:	f7fe fa05 	bl	800bae8 <__sinit>
 800d6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d0f3      	beq.n	800d6ce <_fflush_r+0xa>
 800d6e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6e8:	07d0      	lsls	r0, r2, #31
 800d6ea:	d404      	bmi.n	800d6f6 <_fflush_r+0x32>
 800d6ec:	0599      	lsls	r1, r3, #22
 800d6ee:	d402      	bmi.n	800d6f6 <_fflush_r+0x32>
 800d6f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6f2:	f7fe fb3a 	bl	800bd6a <__retarget_lock_acquire_recursive>
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	f7ff ff5f 	bl	800d5bc <__sflush_r>
 800d6fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d700:	07da      	lsls	r2, r3, #31
 800d702:	4605      	mov	r5, r0
 800d704:	d4e4      	bmi.n	800d6d0 <_fflush_r+0xc>
 800d706:	89a3      	ldrh	r3, [r4, #12]
 800d708:	059b      	lsls	r3, r3, #22
 800d70a:	d4e1      	bmi.n	800d6d0 <_fflush_r+0xc>
 800d70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d70e:	f7fe fb2d 	bl	800bd6c <__retarget_lock_release_recursive>
 800d712:	e7dd      	b.n	800d6d0 <_fflush_r+0xc>

0800d714 <memmove>:
 800d714:	4288      	cmp	r0, r1
 800d716:	b510      	push	{r4, lr}
 800d718:	eb01 0402 	add.w	r4, r1, r2
 800d71c:	d902      	bls.n	800d724 <memmove+0x10>
 800d71e:	4284      	cmp	r4, r0
 800d720:	4623      	mov	r3, r4
 800d722:	d807      	bhi.n	800d734 <memmove+0x20>
 800d724:	1e43      	subs	r3, r0, #1
 800d726:	42a1      	cmp	r1, r4
 800d728:	d008      	beq.n	800d73c <memmove+0x28>
 800d72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d732:	e7f8      	b.n	800d726 <memmove+0x12>
 800d734:	4402      	add	r2, r0
 800d736:	4601      	mov	r1, r0
 800d738:	428a      	cmp	r2, r1
 800d73a:	d100      	bne.n	800d73e <memmove+0x2a>
 800d73c:	bd10      	pop	{r4, pc}
 800d73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d746:	e7f7      	b.n	800d738 <memmove+0x24>

0800d748 <_sbrk_r>:
 800d748:	b538      	push	{r3, r4, r5, lr}
 800d74a:	4d06      	ldr	r5, [pc, #24]	@ (800d764 <_sbrk_r+0x1c>)
 800d74c:	2300      	movs	r3, #0
 800d74e:	4604      	mov	r4, r0
 800d750:	4608      	mov	r0, r1
 800d752:	602b      	str	r3, [r5, #0]
 800d754:	f7f4 fb7a 	bl	8001e4c <_sbrk>
 800d758:	1c43      	adds	r3, r0, #1
 800d75a:	d102      	bne.n	800d762 <_sbrk_r+0x1a>
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	b103      	cbz	r3, 800d762 <_sbrk_r+0x1a>
 800d760:	6023      	str	r3, [r4, #0]
 800d762:	bd38      	pop	{r3, r4, r5, pc}
 800d764:	20001aa0 	.word	0x20001aa0

0800d768 <memcpy>:
 800d768:	440a      	add	r2, r1
 800d76a:	4291      	cmp	r1, r2
 800d76c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d770:	d100      	bne.n	800d774 <memcpy+0xc>
 800d772:	4770      	bx	lr
 800d774:	b510      	push	{r4, lr}
 800d776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d77a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d77e:	4291      	cmp	r1, r2
 800d780:	d1f9      	bne.n	800d776 <memcpy+0xe>
 800d782:	bd10      	pop	{r4, pc}

0800d784 <__assert_func>:
 800d784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d786:	4614      	mov	r4, r2
 800d788:	461a      	mov	r2, r3
 800d78a:	4b09      	ldr	r3, [pc, #36]	@ (800d7b0 <__assert_func+0x2c>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4605      	mov	r5, r0
 800d790:	68d8      	ldr	r0, [r3, #12]
 800d792:	b954      	cbnz	r4, 800d7aa <__assert_func+0x26>
 800d794:	4b07      	ldr	r3, [pc, #28]	@ (800d7b4 <__assert_func+0x30>)
 800d796:	461c      	mov	r4, r3
 800d798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d79c:	9100      	str	r1, [sp, #0]
 800d79e:	462b      	mov	r3, r5
 800d7a0:	4905      	ldr	r1, [pc, #20]	@ (800d7b8 <__assert_func+0x34>)
 800d7a2:	f000 f86f 	bl	800d884 <fiprintf>
 800d7a6:	f000 f87f 	bl	800d8a8 <abort>
 800d7aa:	4b04      	ldr	r3, [pc, #16]	@ (800d7bc <__assert_func+0x38>)
 800d7ac:	e7f4      	b.n	800d798 <__assert_func+0x14>
 800d7ae:	bf00      	nop
 800d7b0:	20000108 	.word	0x20000108
 800d7b4:	0800e436 	.word	0x0800e436
 800d7b8:	0800e408 	.word	0x0800e408
 800d7bc:	0800e3fb 	.word	0x0800e3fb

0800d7c0 <_calloc_r>:
 800d7c0:	b570      	push	{r4, r5, r6, lr}
 800d7c2:	fba1 5402 	umull	r5, r4, r1, r2
 800d7c6:	b93c      	cbnz	r4, 800d7d8 <_calloc_r+0x18>
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	f7ff f991 	bl	800caf0 <_malloc_r>
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	b928      	cbnz	r0, 800d7de <_calloc_r+0x1e>
 800d7d2:	2600      	movs	r6, #0
 800d7d4:	4630      	mov	r0, r6
 800d7d6:	bd70      	pop	{r4, r5, r6, pc}
 800d7d8:	220c      	movs	r2, #12
 800d7da:	6002      	str	r2, [r0, #0]
 800d7dc:	e7f9      	b.n	800d7d2 <_calloc_r+0x12>
 800d7de:	462a      	mov	r2, r5
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	f7fe fa2e 	bl	800bc42 <memset>
 800d7e6:	e7f5      	b.n	800d7d4 <_calloc_r+0x14>

0800d7e8 <__ascii_mbtowc>:
 800d7e8:	b082      	sub	sp, #8
 800d7ea:	b901      	cbnz	r1, 800d7ee <__ascii_mbtowc+0x6>
 800d7ec:	a901      	add	r1, sp, #4
 800d7ee:	b142      	cbz	r2, 800d802 <__ascii_mbtowc+0x1a>
 800d7f0:	b14b      	cbz	r3, 800d806 <__ascii_mbtowc+0x1e>
 800d7f2:	7813      	ldrb	r3, [r2, #0]
 800d7f4:	600b      	str	r3, [r1, #0]
 800d7f6:	7812      	ldrb	r2, [r2, #0]
 800d7f8:	1e10      	subs	r0, r2, #0
 800d7fa:	bf18      	it	ne
 800d7fc:	2001      	movne	r0, #1
 800d7fe:	b002      	add	sp, #8
 800d800:	4770      	bx	lr
 800d802:	4610      	mov	r0, r2
 800d804:	e7fb      	b.n	800d7fe <__ascii_mbtowc+0x16>
 800d806:	f06f 0001 	mvn.w	r0, #1
 800d80a:	e7f8      	b.n	800d7fe <__ascii_mbtowc+0x16>

0800d80c <_realloc_r>:
 800d80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d810:	4680      	mov	r8, r0
 800d812:	4615      	mov	r5, r2
 800d814:	460c      	mov	r4, r1
 800d816:	b921      	cbnz	r1, 800d822 <_realloc_r+0x16>
 800d818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d81c:	4611      	mov	r1, r2
 800d81e:	f7ff b967 	b.w	800caf0 <_malloc_r>
 800d822:	b92a      	cbnz	r2, 800d830 <_realloc_r+0x24>
 800d824:	f7ff f8f0 	bl	800ca08 <_free_r>
 800d828:	2400      	movs	r4, #0
 800d82a:	4620      	mov	r0, r4
 800d82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d830:	f000 f841 	bl	800d8b6 <_malloc_usable_size_r>
 800d834:	4285      	cmp	r5, r0
 800d836:	4606      	mov	r6, r0
 800d838:	d802      	bhi.n	800d840 <_realloc_r+0x34>
 800d83a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d83e:	d8f4      	bhi.n	800d82a <_realloc_r+0x1e>
 800d840:	4629      	mov	r1, r5
 800d842:	4640      	mov	r0, r8
 800d844:	f7ff f954 	bl	800caf0 <_malloc_r>
 800d848:	4607      	mov	r7, r0
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d0ec      	beq.n	800d828 <_realloc_r+0x1c>
 800d84e:	42b5      	cmp	r5, r6
 800d850:	462a      	mov	r2, r5
 800d852:	4621      	mov	r1, r4
 800d854:	bf28      	it	cs
 800d856:	4632      	movcs	r2, r6
 800d858:	f7ff ff86 	bl	800d768 <memcpy>
 800d85c:	4621      	mov	r1, r4
 800d85e:	4640      	mov	r0, r8
 800d860:	f7ff f8d2 	bl	800ca08 <_free_r>
 800d864:	463c      	mov	r4, r7
 800d866:	e7e0      	b.n	800d82a <_realloc_r+0x1e>

0800d868 <__ascii_wctomb>:
 800d868:	4603      	mov	r3, r0
 800d86a:	4608      	mov	r0, r1
 800d86c:	b141      	cbz	r1, 800d880 <__ascii_wctomb+0x18>
 800d86e:	2aff      	cmp	r2, #255	@ 0xff
 800d870:	d904      	bls.n	800d87c <__ascii_wctomb+0x14>
 800d872:	228a      	movs	r2, #138	@ 0x8a
 800d874:	601a      	str	r2, [r3, #0]
 800d876:	f04f 30ff 	mov.w	r0, #4294967295
 800d87a:	4770      	bx	lr
 800d87c:	700a      	strb	r2, [r1, #0]
 800d87e:	2001      	movs	r0, #1
 800d880:	4770      	bx	lr
	...

0800d884 <fiprintf>:
 800d884:	b40e      	push	{r1, r2, r3}
 800d886:	b503      	push	{r0, r1, lr}
 800d888:	4601      	mov	r1, r0
 800d88a:	ab03      	add	r3, sp, #12
 800d88c:	4805      	ldr	r0, [pc, #20]	@ (800d8a4 <fiprintf+0x20>)
 800d88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d892:	6800      	ldr	r0, [r0, #0]
 800d894:	9301      	str	r3, [sp, #4]
 800d896:	f000 f83f 	bl	800d918 <_vfiprintf_r>
 800d89a:	b002      	add	sp, #8
 800d89c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8a0:	b003      	add	sp, #12
 800d8a2:	4770      	bx	lr
 800d8a4:	20000108 	.word	0x20000108

0800d8a8 <abort>:
 800d8a8:	b508      	push	{r3, lr}
 800d8aa:	2006      	movs	r0, #6
 800d8ac:	f000 fa08 	bl	800dcc0 <raise>
 800d8b0:	2001      	movs	r0, #1
 800d8b2:	f7f4 fa53 	bl	8001d5c <_exit>

0800d8b6 <_malloc_usable_size_r>:
 800d8b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8ba:	1f18      	subs	r0, r3, #4
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	bfbc      	itt	lt
 800d8c0:	580b      	ldrlt	r3, [r1, r0]
 800d8c2:	18c0      	addlt	r0, r0, r3
 800d8c4:	4770      	bx	lr

0800d8c6 <__sfputc_r>:
 800d8c6:	6893      	ldr	r3, [r2, #8]
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	b410      	push	{r4}
 800d8ce:	6093      	str	r3, [r2, #8]
 800d8d0:	da08      	bge.n	800d8e4 <__sfputc_r+0x1e>
 800d8d2:	6994      	ldr	r4, [r2, #24]
 800d8d4:	42a3      	cmp	r3, r4
 800d8d6:	db01      	blt.n	800d8dc <__sfputc_r+0x16>
 800d8d8:	290a      	cmp	r1, #10
 800d8da:	d103      	bne.n	800d8e4 <__sfputc_r+0x1e>
 800d8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8e0:	f000 b932 	b.w	800db48 <__swbuf_r>
 800d8e4:	6813      	ldr	r3, [r2, #0]
 800d8e6:	1c58      	adds	r0, r3, #1
 800d8e8:	6010      	str	r0, [r2, #0]
 800d8ea:	7019      	strb	r1, [r3, #0]
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <__sfputs_r>:
 800d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f6:	4606      	mov	r6, r0
 800d8f8:	460f      	mov	r7, r1
 800d8fa:	4614      	mov	r4, r2
 800d8fc:	18d5      	adds	r5, r2, r3
 800d8fe:	42ac      	cmp	r4, r5
 800d900:	d101      	bne.n	800d906 <__sfputs_r+0x12>
 800d902:	2000      	movs	r0, #0
 800d904:	e007      	b.n	800d916 <__sfputs_r+0x22>
 800d906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d90a:	463a      	mov	r2, r7
 800d90c:	4630      	mov	r0, r6
 800d90e:	f7ff ffda 	bl	800d8c6 <__sfputc_r>
 800d912:	1c43      	adds	r3, r0, #1
 800d914:	d1f3      	bne.n	800d8fe <__sfputs_r+0xa>
 800d916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d918 <_vfiprintf_r>:
 800d918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d91c:	460d      	mov	r5, r1
 800d91e:	b09d      	sub	sp, #116	@ 0x74
 800d920:	4614      	mov	r4, r2
 800d922:	4698      	mov	r8, r3
 800d924:	4606      	mov	r6, r0
 800d926:	b118      	cbz	r0, 800d930 <_vfiprintf_r+0x18>
 800d928:	6a03      	ldr	r3, [r0, #32]
 800d92a:	b90b      	cbnz	r3, 800d930 <_vfiprintf_r+0x18>
 800d92c:	f7fe f8dc 	bl	800bae8 <__sinit>
 800d930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d932:	07d9      	lsls	r1, r3, #31
 800d934:	d405      	bmi.n	800d942 <_vfiprintf_r+0x2a>
 800d936:	89ab      	ldrh	r3, [r5, #12]
 800d938:	059a      	lsls	r2, r3, #22
 800d93a:	d402      	bmi.n	800d942 <_vfiprintf_r+0x2a>
 800d93c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d93e:	f7fe fa14 	bl	800bd6a <__retarget_lock_acquire_recursive>
 800d942:	89ab      	ldrh	r3, [r5, #12]
 800d944:	071b      	lsls	r3, r3, #28
 800d946:	d501      	bpl.n	800d94c <_vfiprintf_r+0x34>
 800d948:	692b      	ldr	r3, [r5, #16]
 800d94a:	b99b      	cbnz	r3, 800d974 <_vfiprintf_r+0x5c>
 800d94c:	4629      	mov	r1, r5
 800d94e:	4630      	mov	r0, r6
 800d950:	f000 f938 	bl	800dbc4 <__swsetup_r>
 800d954:	b170      	cbz	r0, 800d974 <_vfiprintf_r+0x5c>
 800d956:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d958:	07dc      	lsls	r4, r3, #31
 800d95a:	d504      	bpl.n	800d966 <_vfiprintf_r+0x4e>
 800d95c:	f04f 30ff 	mov.w	r0, #4294967295
 800d960:	b01d      	add	sp, #116	@ 0x74
 800d962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d966:	89ab      	ldrh	r3, [r5, #12]
 800d968:	0598      	lsls	r0, r3, #22
 800d96a:	d4f7      	bmi.n	800d95c <_vfiprintf_r+0x44>
 800d96c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d96e:	f7fe f9fd 	bl	800bd6c <__retarget_lock_release_recursive>
 800d972:	e7f3      	b.n	800d95c <_vfiprintf_r+0x44>
 800d974:	2300      	movs	r3, #0
 800d976:	9309      	str	r3, [sp, #36]	@ 0x24
 800d978:	2320      	movs	r3, #32
 800d97a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d97e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d982:	2330      	movs	r3, #48	@ 0x30
 800d984:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800db34 <_vfiprintf_r+0x21c>
 800d988:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d98c:	f04f 0901 	mov.w	r9, #1
 800d990:	4623      	mov	r3, r4
 800d992:	469a      	mov	sl, r3
 800d994:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d998:	b10a      	cbz	r2, 800d99e <_vfiprintf_r+0x86>
 800d99a:	2a25      	cmp	r2, #37	@ 0x25
 800d99c:	d1f9      	bne.n	800d992 <_vfiprintf_r+0x7a>
 800d99e:	ebba 0b04 	subs.w	fp, sl, r4
 800d9a2:	d00b      	beq.n	800d9bc <_vfiprintf_r+0xa4>
 800d9a4:	465b      	mov	r3, fp
 800d9a6:	4622      	mov	r2, r4
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	f7ff ffa2 	bl	800d8f4 <__sfputs_r>
 800d9b0:	3001      	adds	r0, #1
 800d9b2:	f000 80a7 	beq.w	800db04 <_vfiprintf_r+0x1ec>
 800d9b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9b8:	445a      	add	r2, fp
 800d9ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	f000 809f 	beq.w	800db04 <_vfiprintf_r+0x1ec>
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9d0:	f10a 0a01 	add.w	sl, sl, #1
 800d9d4:	9304      	str	r3, [sp, #16]
 800d9d6:	9307      	str	r3, [sp, #28]
 800d9d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d9dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9de:	4654      	mov	r4, sl
 800d9e0:	2205      	movs	r2, #5
 800d9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9e6:	4853      	ldr	r0, [pc, #332]	@ (800db34 <_vfiprintf_r+0x21c>)
 800d9e8:	f7f2 fbfa 	bl	80001e0 <memchr>
 800d9ec:	9a04      	ldr	r2, [sp, #16]
 800d9ee:	b9d8      	cbnz	r0, 800da28 <_vfiprintf_r+0x110>
 800d9f0:	06d1      	lsls	r1, r2, #27
 800d9f2:	bf44      	itt	mi
 800d9f4:	2320      	movmi	r3, #32
 800d9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9fa:	0713      	lsls	r3, r2, #28
 800d9fc:	bf44      	itt	mi
 800d9fe:	232b      	movmi	r3, #43	@ 0x2b
 800da00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da04:	f89a 3000 	ldrb.w	r3, [sl]
 800da08:	2b2a      	cmp	r3, #42	@ 0x2a
 800da0a:	d015      	beq.n	800da38 <_vfiprintf_r+0x120>
 800da0c:	9a07      	ldr	r2, [sp, #28]
 800da0e:	4654      	mov	r4, sl
 800da10:	2000      	movs	r0, #0
 800da12:	f04f 0c0a 	mov.w	ip, #10
 800da16:	4621      	mov	r1, r4
 800da18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da1c:	3b30      	subs	r3, #48	@ 0x30
 800da1e:	2b09      	cmp	r3, #9
 800da20:	d94b      	bls.n	800daba <_vfiprintf_r+0x1a2>
 800da22:	b1b0      	cbz	r0, 800da52 <_vfiprintf_r+0x13a>
 800da24:	9207      	str	r2, [sp, #28]
 800da26:	e014      	b.n	800da52 <_vfiprintf_r+0x13a>
 800da28:	eba0 0308 	sub.w	r3, r0, r8
 800da2c:	fa09 f303 	lsl.w	r3, r9, r3
 800da30:	4313      	orrs	r3, r2
 800da32:	9304      	str	r3, [sp, #16]
 800da34:	46a2      	mov	sl, r4
 800da36:	e7d2      	b.n	800d9de <_vfiprintf_r+0xc6>
 800da38:	9b03      	ldr	r3, [sp, #12]
 800da3a:	1d19      	adds	r1, r3, #4
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	9103      	str	r1, [sp, #12]
 800da40:	2b00      	cmp	r3, #0
 800da42:	bfbb      	ittet	lt
 800da44:	425b      	neglt	r3, r3
 800da46:	f042 0202 	orrlt.w	r2, r2, #2
 800da4a:	9307      	strge	r3, [sp, #28]
 800da4c:	9307      	strlt	r3, [sp, #28]
 800da4e:	bfb8      	it	lt
 800da50:	9204      	strlt	r2, [sp, #16]
 800da52:	7823      	ldrb	r3, [r4, #0]
 800da54:	2b2e      	cmp	r3, #46	@ 0x2e
 800da56:	d10a      	bne.n	800da6e <_vfiprintf_r+0x156>
 800da58:	7863      	ldrb	r3, [r4, #1]
 800da5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800da5c:	d132      	bne.n	800dac4 <_vfiprintf_r+0x1ac>
 800da5e:	9b03      	ldr	r3, [sp, #12]
 800da60:	1d1a      	adds	r2, r3, #4
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	9203      	str	r2, [sp, #12]
 800da66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da6a:	3402      	adds	r4, #2
 800da6c:	9305      	str	r3, [sp, #20]
 800da6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800db44 <_vfiprintf_r+0x22c>
 800da72:	7821      	ldrb	r1, [r4, #0]
 800da74:	2203      	movs	r2, #3
 800da76:	4650      	mov	r0, sl
 800da78:	f7f2 fbb2 	bl	80001e0 <memchr>
 800da7c:	b138      	cbz	r0, 800da8e <_vfiprintf_r+0x176>
 800da7e:	9b04      	ldr	r3, [sp, #16]
 800da80:	eba0 000a 	sub.w	r0, r0, sl
 800da84:	2240      	movs	r2, #64	@ 0x40
 800da86:	4082      	lsls	r2, r0
 800da88:	4313      	orrs	r3, r2
 800da8a:	3401      	adds	r4, #1
 800da8c:	9304      	str	r3, [sp, #16]
 800da8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da92:	4829      	ldr	r0, [pc, #164]	@ (800db38 <_vfiprintf_r+0x220>)
 800da94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da98:	2206      	movs	r2, #6
 800da9a:	f7f2 fba1 	bl	80001e0 <memchr>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d03f      	beq.n	800db22 <_vfiprintf_r+0x20a>
 800daa2:	4b26      	ldr	r3, [pc, #152]	@ (800db3c <_vfiprintf_r+0x224>)
 800daa4:	bb1b      	cbnz	r3, 800daee <_vfiprintf_r+0x1d6>
 800daa6:	9b03      	ldr	r3, [sp, #12]
 800daa8:	3307      	adds	r3, #7
 800daaa:	f023 0307 	bic.w	r3, r3, #7
 800daae:	3308      	adds	r3, #8
 800dab0:	9303      	str	r3, [sp, #12]
 800dab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dab4:	443b      	add	r3, r7
 800dab6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dab8:	e76a      	b.n	800d990 <_vfiprintf_r+0x78>
 800daba:	fb0c 3202 	mla	r2, ip, r2, r3
 800dabe:	460c      	mov	r4, r1
 800dac0:	2001      	movs	r0, #1
 800dac2:	e7a8      	b.n	800da16 <_vfiprintf_r+0xfe>
 800dac4:	2300      	movs	r3, #0
 800dac6:	3401      	adds	r4, #1
 800dac8:	9305      	str	r3, [sp, #20]
 800daca:	4619      	mov	r1, r3
 800dacc:	f04f 0c0a 	mov.w	ip, #10
 800dad0:	4620      	mov	r0, r4
 800dad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dad6:	3a30      	subs	r2, #48	@ 0x30
 800dad8:	2a09      	cmp	r2, #9
 800dada:	d903      	bls.n	800dae4 <_vfiprintf_r+0x1cc>
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d0c6      	beq.n	800da6e <_vfiprintf_r+0x156>
 800dae0:	9105      	str	r1, [sp, #20]
 800dae2:	e7c4      	b.n	800da6e <_vfiprintf_r+0x156>
 800dae4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dae8:	4604      	mov	r4, r0
 800daea:	2301      	movs	r3, #1
 800daec:	e7f0      	b.n	800dad0 <_vfiprintf_r+0x1b8>
 800daee:	ab03      	add	r3, sp, #12
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	462a      	mov	r2, r5
 800daf4:	4b12      	ldr	r3, [pc, #72]	@ (800db40 <_vfiprintf_r+0x228>)
 800daf6:	a904      	add	r1, sp, #16
 800daf8:	4630      	mov	r0, r6
 800dafa:	f7fd fbb1 	bl	800b260 <_printf_float>
 800dafe:	4607      	mov	r7, r0
 800db00:	1c78      	adds	r0, r7, #1
 800db02:	d1d6      	bne.n	800dab2 <_vfiprintf_r+0x19a>
 800db04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db06:	07d9      	lsls	r1, r3, #31
 800db08:	d405      	bmi.n	800db16 <_vfiprintf_r+0x1fe>
 800db0a:	89ab      	ldrh	r3, [r5, #12]
 800db0c:	059a      	lsls	r2, r3, #22
 800db0e:	d402      	bmi.n	800db16 <_vfiprintf_r+0x1fe>
 800db10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db12:	f7fe f92b 	bl	800bd6c <__retarget_lock_release_recursive>
 800db16:	89ab      	ldrh	r3, [r5, #12]
 800db18:	065b      	lsls	r3, r3, #25
 800db1a:	f53f af1f 	bmi.w	800d95c <_vfiprintf_r+0x44>
 800db1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db20:	e71e      	b.n	800d960 <_vfiprintf_r+0x48>
 800db22:	ab03      	add	r3, sp, #12
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	462a      	mov	r2, r5
 800db28:	4b05      	ldr	r3, [pc, #20]	@ (800db40 <_vfiprintf_r+0x228>)
 800db2a:	a904      	add	r1, sp, #16
 800db2c:	4630      	mov	r0, r6
 800db2e:	f7fd fe2f 	bl	800b790 <_printf_i>
 800db32:	e7e4      	b.n	800dafe <_vfiprintf_r+0x1e6>
 800db34:	0800e3e0 	.word	0x0800e3e0
 800db38:	0800e3ea 	.word	0x0800e3ea
 800db3c:	0800b261 	.word	0x0800b261
 800db40:	0800d8f5 	.word	0x0800d8f5
 800db44:	0800e3e6 	.word	0x0800e3e6

0800db48 <__swbuf_r>:
 800db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4a:	460e      	mov	r6, r1
 800db4c:	4614      	mov	r4, r2
 800db4e:	4605      	mov	r5, r0
 800db50:	b118      	cbz	r0, 800db5a <__swbuf_r+0x12>
 800db52:	6a03      	ldr	r3, [r0, #32]
 800db54:	b90b      	cbnz	r3, 800db5a <__swbuf_r+0x12>
 800db56:	f7fd ffc7 	bl	800bae8 <__sinit>
 800db5a:	69a3      	ldr	r3, [r4, #24]
 800db5c:	60a3      	str	r3, [r4, #8]
 800db5e:	89a3      	ldrh	r3, [r4, #12]
 800db60:	071a      	lsls	r2, r3, #28
 800db62:	d501      	bpl.n	800db68 <__swbuf_r+0x20>
 800db64:	6923      	ldr	r3, [r4, #16]
 800db66:	b943      	cbnz	r3, 800db7a <__swbuf_r+0x32>
 800db68:	4621      	mov	r1, r4
 800db6a:	4628      	mov	r0, r5
 800db6c:	f000 f82a 	bl	800dbc4 <__swsetup_r>
 800db70:	b118      	cbz	r0, 800db7a <__swbuf_r+0x32>
 800db72:	f04f 37ff 	mov.w	r7, #4294967295
 800db76:	4638      	mov	r0, r7
 800db78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db7a:	6823      	ldr	r3, [r4, #0]
 800db7c:	6922      	ldr	r2, [r4, #16]
 800db7e:	1a98      	subs	r0, r3, r2
 800db80:	6963      	ldr	r3, [r4, #20]
 800db82:	b2f6      	uxtb	r6, r6
 800db84:	4283      	cmp	r3, r0
 800db86:	4637      	mov	r7, r6
 800db88:	dc05      	bgt.n	800db96 <__swbuf_r+0x4e>
 800db8a:	4621      	mov	r1, r4
 800db8c:	4628      	mov	r0, r5
 800db8e:	f7ff fd99 	bl	800d6c4 <_fflush_r>
 800db92:	2800      	cmp	r0, #0
 800db94:	d1ed      	bne.n	800db72 <__swbuf_r+0x2a>
 800db96:	68a3      	ldr	r3, [r4, #8]
 800db98:	3b01      	subs	r3, #1
 800db9a:	60a3      	str	r3, [r4, #8]
 800db9c:	6823      	ldr	r3, [r4, #0]
 800db9e:	1c5a      	adds	r2, r3, #1
 800dba0:	6022      	str	r2, [r4, #0]
 800dba2:	701e      	strb	r6, [r3, #0]
 800dba4:	6962      	ldr	r2, [r4, #20]
 800dba6:	1c43      	adds	r3, r0, #1
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d004      	beq.n	800dbb6 <__swbuf_r+0x6e>
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	07db      	lsls	r3, r3, #31
 800dbb0:	d5e1      	bpl.n	800db76 <__swbuf_r+0x2e>
 800dbb2:	2e0a      	cmp	r6, #10
 800dbb4:	d1df      	bne.n	800db76 <__swbuf_r+0x2e>
 800dbb6:	4621      	mov	r1, r4
 800dbb8:	4628      	mov	r0, r5
 800dbba:	f7ff fd83 	bl	800d6c4 <_fflush_r>
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	d0d9      	beq.n	800db76 <__swbuf_r+0x2e>
 800dbc2:	e7d6      	b.n	800db72 <__swbuf_r+0x2a>

0800dbc4 <__swsetup_r>:
 800dbc4:	b538      	push	{r3, r4, r5, lr}
 800dbc6:	4b29      	ldr	r3, [pc, #164]	@ (800dc6c <__swsetup_r+0xa8>)
 800dbc8:	4605      	mov	r5, r0
 800dbca:	6818      	ldr	r0, [r3, #0]
 800dbcc:	460c      	mov	r4, r1
 800dbce:	b118      	cbz	r0, 800dbd8 <__swsetup_r+0x14>
 800dbd0:	6a03      	ldr	r3, [r0, #32]
 800dbd2:	b90b      	cbnz	r3, 800dbd8 <__swsetup_r+0x14>
 800dbd4:	f7fd ff88 	bl	800bae8 <__sinit>
 800dbd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbdc:	0719      	lsls	r1, r3, #28
 800dbde:	d422      	bmi.n	800dc26 <__swsetup_r+0x62>
 800dbe0:	06da      	lsls	r2, r3, #27
 800dbe2:	d407      	bmi.n	800dbf4 <__swsetup_r+0x30>
 800dbe4:	2209      	movs	r2, #9
 800dbe6:	602a      	str	r2, [r5, #0]
 800dbe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbec:	81a3      	strh	r3, [r4, #12]
 800dbee:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf2:	e033      	b.n	800dc5c <__swsetup_r+0x98>
 800dbf4:	0758      	lsls	r0, r3, #29
 800dbf6:	d512      	bpl.n	800dc1e <__swsetup_r+0x5a>
 800dbf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dbfa:	b141      	cbz	r1, 800dc0e <__swsetup_r+0x4a>
 800dbfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc00:	4299      	cmp	r1, r3
 800dc02:	d002      	beq.n	800dc0a <__swsetup_r+0x46>
 800dc04:	4628      	mov	r0, r5
 800dc06:	f7fe feff 	bl	800ca08 <_free_r>
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc0e:	89a3      	ldrh	r3, [r4, #12]
 800dc10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc14:	81a3      	strh	r3, [r4, #12]
 800dc16:	2300      	movs	r3, #0
 800dc18:	6063      	str	r3, [r4, #4]
 800dc1a:	6923      	ldr	r3, [r4, #16]
 800dc1c:	6023      	str	r3, [r4, #0]
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	f043 0308 	orr.w	r3, r3, #8
 800dc24:	81a3      	strh	r3, [r4, #12]
 800dc26:	6923      	ldr	r3, [r4, #16]
 800dc28:	b94b      	cbnz	r3, 800dc3e <__swsetup_r+0x7a>
 800dc2a:	89a3      	ldrh	r3, [r4, #12]
 800dc2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc34:	d003      	beq.n	800dc3e <__swsetup_r+0x7a>
 800dc36:	4621      	mov	r1, r4
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f000 f883 	bl	800dd44 <__smakebuf_r>
 800dc3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc42:	f013 0201 	ands.w	r2, r3, #1
 800dc46:	d00a      	beq.n	800dc5e <__swsetup_r+0x9a>
 800dc48:	2200      	movs	r2, #0
 800dc4a:	60a2      	str	r2, [r4, #8]
 800dc4c:	6962      	ldr	r2, [r4, #20]
 800dc4e:	4252      	negs	r2, r2
 800dc50:	61a2      	str	r2, [r4, #24]
 800dc52:	6922      	ldr	r2, [r4, #16]
 800dc54:	b942      	cbnz	r2, 800dc68 <__swsetup_r+0xa4>
 800dc56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc5a:	d1c5      	bne.n	800dbe8 <__swsetup_r+0x24>
 800dc5c:	bd38      	pop	{r3, r4, r5, pc}
 800dc5e:	0799      	lsls	r1, r3, #30
 800dc60:	bf58      	it	pl
 800dc62:	6962      	ldrpl	r2, [r4, #20]
 800dc64:	60a2      	str	r2, [r4, #8]
 800dc66:	e7f4      	b.n	800dc52 <__swsetup_r+0x8e>
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e7f7      	b.n	800dc5c <__swsetup_r+0x98>
 800dc6c:	20000108 	.word	0x20000108

0800dc70 <_raise_r>:
 800dc70:	291f      	cmp	r1, #31
 800dc72:	b538      	push	{r3, r4, r5, lr}
 800dc74:	4605      	mov	r5, r0
 800dc76:	460c      	mov	r4, r1
 800dc78:	d904      	bls.n	800dc84 <_raise_r+0x14>
 800dc7a:	2316      	movs	r3, #22
 800dc7c:	6003      	str	r3, [r0, #0]
 800dc7e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc82:	bd38      	pop	{r3, r4, r5, pc}
 800dc84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dc86:	b112      	cbz	r2, 800dc8e <_raise_r+0x1e>
 800dc88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc8c:	b94b      	cbnz	r3, 800dca2 <_raise_r+0x32>
 800dc8e:	4628      	mov	r0, r5
 800dc90:	f000 f830 	bl	800dcf4 <_getpid_r>
 800dc94:	4622      	mov	r2, r4
 800dc96:	4601      	mov	r1, r0
 800dc98:	4628      	mov	r0, r5
 800dc9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc9e:	f000 b817 	b.w	800dcd0 <_kill_r>
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d00a      	beq.n	800dcbc <_raise_r+0x4c>
 800dca6:	1c59      	adds	r1, r3, #1
 800dca8:	d103      	bne.n	800dcb2 <_raise_r+0x42>
 800dcaa:	2316      	movs	r3, #22
 800dcac:	6003      	str	r3, [r0, #0]
 800dcae:	2001      	movs	r0, #1
 800dcb0:	e7e7      	b.n	800dc82 <_raise_r+0x12>
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dcb8:	4620      	mov	r0, r4
 800dcba:	4798      	blx	r3
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	e7e0      	b.n	800dc82 <_raise_r+0x12>

0800dcc0 <raise>:
 800dcc0:	4b02      	ldr	r3, [pc, #8]	@ (800dccc <raise+0xc>)
 800dcc2:	4601      	mov	r1, r0
 800dcc4:	6818      	ldr	r0, [r3, #0]
 800dcc6:	f7ff bfd3 	b.w	800dc70 <_raise_r>
 800dcca:	bf00      	nop
 800dccc:	20000108 	.word	0x20000108

0800dcd0 <_kill_r>:
 800dcd0:	b538      	push	{r3, r4, r5, lr}
 800dcd2:	4d07      	ldr	r5, [pc, #28]	@ (800dcf0 <_kill_r+0x20>)
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	4604      	mov	r4, r0
 800dcd8:	4608      	mov	r0, r1
 800dcda:	4611      	mov	r1, r2
 800dcdc:	602b      	str	r3, [r5, #0]
 800dcde:	f7f4 f82d 	bl	8001d3c <_kill>
 800dce2:	1c43      	adds	r3, r0, #1
 800dce4:	d102      	bne.n	800dcec <_kill_r+0x1c>
 800dce6:	682b      	ldr	r3, [r5, #0]
 800dce8:	b103      	cbz	r3, 800dcec <_kill_r+0x1c>
 800dcea:	6023      	str	r3, [r4, #0]
 800dcec:	bd38      	pop	{r3, r4, r5, pc}
 800dcee:	bf00      	nop
 800dcf0:	20001aa0 	.word	0x20001aa0

0800dcf4 <_getpid_r>:
 800dcf4:	f7f4 b81a 	b.w	8001d2c <_getpid>

0800dcf8 <__swhatbuf_r>:
 800dcf8:	b570      	push	{r4, r5, r6, lr}
 800dcfa:	460c      	mov	r4, r1
 800dcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd00:	2900      	cmp	r1, #0
 800dd02:	b096      	sub	sp, #88	@ 0x58
 800dd04:	4615      	mov	r5, r2
 800dd06:	461e      	mov	r6, r3
 800dd08:	da0d      	bge.n	800dd26 <__swhatbuf_r+0x2e>
 800dd0a:	89a3      	ldrh	r3, [r4, #12]
 800dd0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd10:	f04f 0100 	mov.w	r1, #0
 800dd14:	bf14      	ite	ne
 800dd16:	2340      	movne	r3, #64	@ 0x40
 800dd18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	6031      	str	r1, [r6, #0]
 800dd20:	602b      	str	r3, [r5, #0]
 800dd22:	b016      	add	sp, #88	@ 0x58
 800dd24:	bd70      	pop	{r4, r5, r6, pc}
 800dd26:	466a      	mov	r2, sp
 800dd28:	f000 f848 	bl	800ddbc <_fstat_r>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	dbec      	blt.n	800dd0a <__swhatbuf_r+0x12>
 800dd30:	9901      	ldr	r1, [sp, #4]
 800dd32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd3a:	4259      	negs	r1, r3
 800dd3c:	4159      	adcs	r1, r3
 800dd3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd42:	e7eb      	b.n	800dd1c <__swhatbuf_r+0x24>

0800dd44 <__smakebuf_r>:
 800dd44:	898b      	ldrh	r3, [r1, #12]
 800dd46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd48:	079d      	lsls	r5, r3, #30
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	460c      	mov	r4, r1
 800dd4e:	d507      	bpl.n	800dd60 <__smakebuf_r+0x1c>
 800dd50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd54:	6023      	str	r3, [r4, #0]
 800dd56:	6123      	str	r3, [r4, #16]
 800dd58:	2301      	movs	r3, #1
 800dd5a:	6163      	str	r3, [r4, #20]
 800dd5c:	b003      	add	sp, #12
 800dd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd60:	ab01      	add	r3, sp, #4
 800dd62:	466a      	mov	r2, sp
 800dd64:	f7ff ffc8 	bl	800dcf8 <__swhatbuf_r>
 800dd68:	9f00      	ldr	r7, [sp, #0]
 800dd6a:	4605      	mov	r5, r0
 800dd6c:	4639      	mov	r1, r7
 800dd6e:	4630      	mov	r0, r6
 800dd70:	f7fe febe 	bl	800caf0 <_malloc_r>
 800dd74:	b948      	cbnz	r0, 800dd8a <__smakebuf_r+0x46>
 800dd76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd7a:	059a      	lsls	r2, r3, #22
 800dd7c:	d4ee      	bmi.n	800dd5c <__smakebuf_r+0x18>
 800dd7e:	f023 0303 	bic.w	r3, r3, #3
 800dd82:	f043 0302 	orr.w	r3, r3, #2
 800dd86:	81a3      	strh	r3, [r4, #12]
 800dd88:	e7e2      	b.n	800dd50 <__smakebuf_r+0xc>
 800dd8a:	89a3      	ldrh	r3, [r4, #12]
 800dd8c:	6020      	str	r0, [r4, #0]
 800dd8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd92:	81a3      	strh	r3, [r4, #12]
 800dd94:	9b01      	ldr	r3, [sp, #4]
 800dd96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dd9a:	b15b      	cbz	r3, 800ddb4 <__smakebuf_r+0x70>
 800dd9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dda0:	4630      	mov	r0, r6
 800dda2:	f000 f81d 	bl	800dde0 <_isatty_r>
 800dda6:	b128      	cbz	r0, 800ddb4 <__smakebuf_r+0x70>
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	f023 0303 	bic.w	r3, r3, #3
 800ddae:	f043 0301 	orr.w	r3, r3, #1
 800ddb2:	81a3      	strh	r3, [r4, #12]
 800ddb4:	89a3      	ldrh	r3, [r4, #12]
 800ddb6:	431d      	orrs	r5, r3
 800ddb8:	81a5      	strh	r5, [r4, #12]
 800ddba:	e7cf      	b.n	800dd5c <__smakebuf_r+0x18>

0800ddbc <_fstat_r>:
 800ddbc:	b538      	push	{r3, r4, r5, lr}
 800ddbe:	4d07      	ldr	r5, [pc, #28]	@ (800dddc <_fstat_r+0x20>)
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	4608      	mov	r0, r1
 800ddc6:	4611      	mov	r1, r2
 800ddc8:	602b      	str	r3, [r5, #0]
 800ddca:	f7f4 f817 	bl	8001dfc <_fstat>
 800ddce:	1c43      	adds	r3, r0, #1
 800ddd0:	d102      	bne.n	800ddd8 <_fstat_r+0x1c>
 800ddd2:	682b      	ldr	r3, [r5, #0]
 800ddd4:	b103      	cbz	r3, 800ddd8 <_fstat_r+0x1c>
 800ddd6:	6023      	str	r3, [r4, #0]
 800ddd8:	bd38      	pop	{r3, r4, r5, pc}
 800ddda:	bf00      	nop
 800dddc:	20001aa0 	.word	0x20001aa0

0800dde0 <_isatty_r>:
 800dde0:	b538      	push	{r3, r4, r5, lr}
 800dde2:	4d06      	ldr	r5, [pc, #24]	@ (800ddfc <_isatty_r+0x1c>)
 800dde4:	2300      	movs	r3, #0
 800dde6:	4604      	mov	r4, r0
 800dde8:	4608      	mov	r0, r1
 800ddea:	602b      	str	r3, [r5, #0]
 800ddec:	f7f4 f816 	bl	8001e1c <_isatty>
 800ddf0:	1c43      	adds	r3, r0, #1
 800ddf2:	d102      	bne.n	800ddfa <_isatty_r+0x1a>
 800ddf4:	682b      	ldr	r3, [r5, #0]
 800ddf6:	b103      	cbz	r3, 800ddfa <_isatty_r+0x1a>
 800ddf8:	6023      	str	r3, [r4, #0]
 800ddfa:	bd38      	pop	{r3, r4, r5, pc}
 800ddfc:	20001aa0 	.word	0x20001aa0

0800de00 <_init>:
 800de00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de02:	bf00      	nop
 800de04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de06:	bc08      	pop	{r3}
 800de08:	469e      	mov	lr, r3
 800de0a:	4770      	bx	lr

0800de0c <_fini>:
 800de0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de0e:	bf00      	nop
 800de10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de12:	bc08      	pop	{r3}
 800de14:	469e      	mov	lr, r3
 800de16:	4770      	bx	lr
